{"version":3,"file":"pillarbox-core.es.min.js","sources":["../src/components/player.js","../src/pillarbox.js"],"sourcesContent":["import videojs from 'video.js';\n\n/**\n * @ignore\n * @type {typeof import('video.js/dist/types/player').default}\n */\nconst vjsPlayer = videojs.getComponent('player');\n\n/**\n * This class extends {@link VideoJsPlayer}.\n *\n * @class Player\n */\nclass Player extends vjsPlayer {\n\n  /**\n   * A getter/setter for the media's audio track.\n   * Activates the audio track according to the language and kind properties.\n   * Falls back on the first audio track found if the kind property is not satisfied.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/kind\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/language\n   *\n   * @param {TrackSelector} [trackSelector]\n   *\n   * @example\n   * // Get the current audio track\n   * player.audioTrack();\n   *\n   * @example\n   * // Activate an audio track based on language and kind properties\n   * player.audioTrack({language:'en', kind:'description'});\n   *\n   * @example\n   * // Activate first audio track found corresponding to language\n   * player.audioTrack({language:'fr'});\n   *\n   * @return {AudioTrack|undefined}\n   */\n  audioTrack(trackSelector) {\n    const audioTracks = Array.from(this.player().audioTracks());\n\n    if (!trackSelector) {\n      return audioTracks.find((audioTrack) => audioTrack.enabled);\n    }\n\n    const { kind, language } = trackSelector;\n    const audioTrack =\n      audioTracks.find(\n        (audioTrack) =>\n          audioTrack.language === language && audioTrack.kind === kind\n      ) || audioTracks.find((audioTrack) => audioTrack.language === language);\n\n    if (audioTrack) {\n      audioTrack.enabled = true;\n    }\n\n    return audioTrack;\n  }\n\n  /**\n   * A getter/setter for the media's text track.\n   * Activates the text track according to the language and kind properties.\n   * Falls back on the first text track found if the kind property is not satisfied.\n   * Disables all subtitle tracks that are `showing` if the `trackSelector` is truthy but does not satisfy any condition.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/kind\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/textTrack/language\n   *\n   * @param {TrackSelector} [trackSelector]\n   *\n   * @example\n   * // Get the current text track\n   * player.textTrack();\n   *\n   * @example\n   * // Disable all text tracks has a side effect\n   * player.textTrack('off');\n   * player.textTrack({});\n   *\n   * @example\n   * // Activate an text track based on language and kind properties\n   * player.textTrack({language:'en', kind:'captions'});\n   *\n   * @example\n   * // Activate first text track found corresponding to language\n   * player.textTrack({language:'fr'});\n   *\n   * @return {VideojsTextTrack|undefined}\n   */\n  textTrack(trackSelector) {\n    const textTracks = Array.from(this.player().textTracks()).filter(\n      (textTrack) => !['chapters', 'metadata'].includes(textTrack.kind)\n    );\n\n    if (!trackSelector) {\n      return textTracks.find((textTrack) => textTrack.mode === 'showing');\n    }\n\n    textTracks.forEach((textTrack) => (textTrack.mode = 'disabled'));\n\n    const { kind, language } = trackSelector;\n    const textTrack =\n      textTracks.find((textTrack) => {\n        if (textTrack.language === language && textTrack.kind === kind) {\n          textTrack.mode = 'showing';\n        }\n\n        return textTrack.mode === 'showing';\n      }) ||\n      textTracks.find((textTrack) => {\n        if (textTrack.language === language) {\n          textTrack.mode = 'showing';\n        }\n\n        return textTrack.mode === 'showing';\n      });\n\n    return textTrack;\n  }\n}\n\n/**\n * @type {Player}\n */\n// Overrides the default video.js player component\nexport default videojs.registerComponent('player', Player);\n","import { version } from '../package.json';\nimport videojs from 'video.js';\nimport 'videojs-contrib-eme';\nimport './components/player.js';\n\n/**\n * Pillarbox is an alias for the video.js namespace with additional options.\n *\n * @namespace\n * @see https://docs.videojs.com/module-videojs-videojs\n * @type {videojs}\n */\nconst pillarbox = videojs;\n\npillarbox.VERSION = {\n  pillarbox: version,\n  videojs: videojs.VERSION,\n  [videojs.VhsSourceHandler.name]: videojs.VhsSourceHandler.VERSION,\n  eme: videojs.getPlugin('eme').VERSION,\n};\n\n/**\n * Enable smooth seeking for Pillarbox.\n *\n * @see [Video.js enableSmoothSeeking Option]{@link https://videojs.com/guides/options/#enablesmoothseeking}\n * @type {boolean}\n * @default true\n */\npillarbox.options.enableSmoothSeeking = true;\n/**\n * Configuration options for HTML5 settings in Pillarbox.\n *\n * @see [VHS useForcedSubtitles Option]{@link https://github.com/videojs/http-streaming/blob/main/README.md#useforcedsubtitles}\n * @type {Object}\n * @property {Object} vhs - Configuration for the Video.js HTTP Streaming.\n * @property {boolean} useForcedSubtitles - Enables the player to display forced subtitles by default.\n * Forced subtitles are pieces of information intended for display when no other text representation\n * is selected. They are used to clarify dialogue, provide alternate languages, display texted graphics,\n * or present location/person IDs that are not otherwise covered in the dubbed/localized audio.\n */\npillarbox.options.html5 = {\n  vhs: { useForcedSubtitles: true }\n};\n/**\n * Configuration for the live tracker.\n *\n * @see [Video.js liveTracker Option]{@link https://videojs.com/guides/options/#livetrackertrackingthreshold}\n * @type {Object}\n * @property {number} trackingThreshold - A threshold that controls when the liveui should be shown.\n * @property {number} liveTolerance - An option that controls how far from the seekable end should be considered live playback.\n */\npillarbox.options.liveTracker = {\n  trackingThreshold: 120,\n  liveTolerance: 15,\n};\n/**\n * Allows the player to use the live ui that includes:\n *\n * - A progress bar for seeking within the live window\n * - A button that can be clicked to seek to the live edge with a circle indicating if you are at the live edge or not.\n *\n * @see [Video.js liveui Option]{@link https://videojs.com/guides/options/#liveui}\n * @type {boolean}\n */\npillarbox.options.liveui = true;\n/**\n * Indicates that the video is to be played \"inline\", that is within the element's playback area.\n *\n * @see [Video element playsinline attribute]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#playsinline}\n * @type {boolean}\n */\npillarbox.options.playsinline = true;\n/**\n * Configuration for plugins.\n *\n * @see [Video.js Plugins Option]{@link https://videojs.com/guides/options/#plugins}\n * @type {Object}\n * @property {boolean} eme - Enable the EME (Encrypted Media Extensions) plugin.\n */\npillarbox.options.plugins = { eme: true };\n/**\n * Enable responsive mode, this will cause the player to customize itself based on responsive breakpoints.\n *\n * @see [Video.js Responsive Option]{@link https://videojs.com/guides/options/#responsive}\n * @type {boolean}\n */\npillarbox.options.responsive = true;\n/**\n * A placeholder for accessing trackers directly from the player.\n *\n * @type {Object}\n */\npillarbox.options.trackers = {};\n\nexport default pillarbox;\n"],"names":["vjsPlayer","videojs","getComponent","registerComponent","audioTrack","trackSelector","audioTracks","Array","from","this","player","find","enabled","kind","language","textTrack","textTracks","filter","includes","mode","forEach","pillarbox","VERSION","VhsSourceHandler","name","eme","getPlugin","options","enableSmoothSeeking","html5","vhs","useForcedSubtitles","liveTracker","trackingThreshold","liveTolerance","liveui","playsinline","plugins","responsive","trackers"],"mappings":"oDAMA,MAAMA,EAAYC,EAAQC,aAAa,UAwHxBD,EAAQE,kBAAkB,SAjHzC,cAAqBH,EA0BnB,UAAAI,CAAWC,GACT,MAAMC,EAAcC,MAAMC,KAAKC,KAAKC,SAASJ,eAE7C,IAAKD,EACH,OAAOC,EAAYK,MAAMP,GAAeA,EAAWQ,UAGrD,MAAMC,KAAEA,EAAIC,SAAEA,GAAaT,EACrBD,EACJE,EAAYK,MACTP,GACCA,EAAWU,WAAaA,GAAYV,EAAWS,OAASA,KACvDP,EAAYK,MAAMP,GAAeA,EAAWU,WAAaA,IAMhE,OAJIV,IACFA,EAAWQ,SAAU,GAGhBR,CACR,CAgCD,SAAAW,CAAUV,GACR,MAAMW,EAAaT,MAAMC,KAAKC,KAAKC,SAASM,cAAcC,QACvDF,IAAe,CAAC,WAAY,YAAYG,SAASH,EAAUF,QAG9D,IAAKR,EACH,OAAOW,EAAWL,MAAMI,GAAiC,YAAnBA,EAAUI,OAGlDH,EAAWI,SAASL,GAAeA,EAAUI,KAAO,aAEpD,MAAMN,KAAEA,EAAIC,SAAEA,GAAaT,EAiB3B,OAfEW,EAAWL,MAAMI,IACXA,EAAUD,WAAaA,GAAYC,EAAUF,OAASA,IACxDE,EAAUI,KAAO,WAGO,YAAnBJ,EAAUI,SAEnBH,EAAWL,MAAMI,IACXA,EAAUD,WAAaA,IACzBC,EAAUI,KAAO,WAGO,YAAnBJ,EAAUI,OAItB,IC3GE,MAACE,EAAYpB,EAElBoB,EAAUC,QAAU,CAClBD,kBACApB,QAASA,EAAQqB,QACjB,CAACrB,EAAQsB,iBAAiBC,MAAOvB,EAAQsB,iBAAiBD,QAC1DG,IAAKxB,EAAQyB,UAAU,OAAOJ,SAUhCD,EAAUM,QAAQC,qBAAsB,EAYxCP,EAAUM,QAAQE,MAAQ,CACxBC,IAAK,CAAEC,oBAAoB,IAU7BV,EAAUM,QAAQK,YAAc,CAC9BC,kBAAmB,IACnBC,cAAe,IAWjBb,EAAUM,QAAQQ,QAAS,EAO3Bd,EAAUM,QAAQS,aAAc,EAQhCf,EAAUM,QAAQU,QAAU,CAAEZ,KAAK,GAOnCJ,EAAUM,QAAQW,YAAa,EAM/BjB,EAAUM,QAAQY,SAAW,CAAE"}