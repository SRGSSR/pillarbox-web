let e,t,i,r,s,n;var a,o,l,u,h,d,c,p,m,f,g,y,_,b,v,T,S="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function E(e,t,i,r){Object.defineProperty(e,t,{get:i,set:r,enumerable:!0,configurable:!0})}function w(e){return e&&e.__esModule?e.default:e}var k={},C={},x=S.parcelRequire9bb7;null==x&&((x=function(e){if(e in k)return k[e].exports;if(e in C){var t=C[e];delete C[e];var i={id:e,exports:{}};return k[e]=i,t.call(i.exports,i,i.exports),i.exports}var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}).register=function(e,t){C[e]=t},S.parcelRequire9bb7=x),x.register("jZhQX",function(e,t){// Source: http://jsfiddle.net/vWx8V/
// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes
/**
 * Conenience method returns corresponding value for given keyName or keyCode.
 *
 * @param {Mixed} keyCode {Number} or keyName {String}
 * @return {Mixed}
 * @api public
 */function i(e){// Keyboard Events
if(e&&"object"==typeof e){var t=e.which||e.keyCode||e.charCode;t&&(e=t)}// Numbers
if("number"==typeof e)return a[e];// Everything else (cast to string)
var i=String(e),n=r[i.toLowerCase()];if(n)return n;// check aliases
var n=s[i.toLowerCase()];return n||(1===i.length?i.charCodeAt(0):void 0)}/**
 * Compares a keyboard event with a given keyCode or keyName.
 *
 * @param {Event} event Keyboard event that should be tested
 * @param {Mixed} keyCode {Number} or keyName {String}
 * @return {Boolean}
 * @api public
 */i.isEventKey=function(e,t){if(e&&"object"==typeof e){var i=e.which||e.keyCode||e.charCode;if(null==i)return!1;if("string"==typeof t){// check codes
var n=r[t.toLowerCase()];if(n)return n===i;// check aliases
var n=s[t.toLowerCase()];if(n)return n===i}else if("number"==typeof t)return t===i;return!1}};/**
 * Get by name
 *
 *   exports.code['enter'] // => 13
 */var r=(t=e.exports=i).code=t.codes={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,"pause/break":19,"caps lock":20,esc:27,space:32,"page up":33,"page down":34,end:35,home:36,left:37,up:38,right:39,down:40,insert:45,delete:46,command:91,"left command":91,"right command":93,"numpad *":106,"numpad +":107,"numpad -":109,"numpad .":110,"numpad /":111,"num lock":144,"scroll lock":145,"my computer":182,"my calculator":183,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},s=t.aliases={windows:91,"⇧":16,"⌥":18,"⌃":17,"⌘":91,ctl:17,control:17,option:18,pause:19,break:19,caps:20,return:13,escape:27,spc:32,spacebar:32,pgup:33,pgdn:34,ins:45,del:46,cmd:91};/*!
 * Programatically add the following
 */// lower case chars
for(n=97;n<123;n++)r[String.fromCharCode(n)]=n-32;// numbers
for(var n=48;n<58;n++)r[n-48]=n;// function keys
for(n=1;n<13;n++)r["f"+n]=n+111;// numpad keys
for(n=0;n<10;n++)r["numpad "+n]=n+96;/**
 * Get by code
 *
 *   exports.name[13] // => 'Enter'
 */var a=t.names=t.title={}// title for backward compat
;// Create reverse mapping
for(n in r)a[r[n]]=n;// Add aliases
for(var o in s)r[o]=s[o]}),x.register("1WntU",function(e,t){var i=x("eDick");e.exports=function(e,t){return void 0===t&&(t=!1),function(r,s,n){// if the XHR failed, return that error
if(r){e(r);return}// if the HTTP status code is 4xx or 5xx, the request also failed
if(s.statusCode>=400&&s.statusCode<=599){var a=n;if(t){if(i.TextDecoder){var o,l=(void 0===(o=s.headers&&s.headers["content-type"])&&(o=""),o.toLowerCase().split(";").reduce(function(e,t){var i=t.split("="),r=i[0],s=i[1];return"charset"===r.trim()?s.trim():e},"utf-8"));try{a=new TextDecoder(l).decode(n)}catch(e){}}else a=String.fromCharCode.apply(null,new Uint8Array(n))}e({cause:a});return}// otherwise, request succeeded
e(null,n)}}}),x.register("eDick",function(e,t){var i;i="undefined"!=typeof window?window:void 0!==S?S:"undefined"!=typeof self?self:{},e.exports=i}),x.register("65ElS",function(e,t){/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *//* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- *//* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */var i=x("7pNCM"),r=Object.create||function(){function e(){}return function(t){if(1!=arguments.length)throw Error("Object.create shim only accepts one parameter.");return e.prototype=t,new e}}();// Creates a new ParserError object from an errorData object. The errorData
// object should have default code and message properties. The default message
// property can be overriden by passing in a message parameter.
// See ParsingError.Errors below for acceptable errors.
function s(e,t){this.name="ParsingError",this.code=e.code,this.message=t||e.message}// Try to parse input as a time stamp.
function n(e){function t(e,t,i,r){return(0|e)*3600+(0|t)*60+(0|i)+(0|r)/1e3}var i=e.match(/^(\d+):(\d{1,2})(:\d{1,2})?\.(\d{3})/);return i?i[3]?t(i[1],i[2],i[3].replace(":",""),i[4]):i[1]>59?t(i[1],i[2],0,i[4]):t(0,i[1],i[2],i[4]):null}// A settings object holds key/value pairs and will ignore anything but the first
// assignment to a specific key.
function a(){this.values=r(null)}// Helper function to parse input into groups separated by 'groupDelim', and
// interprete each group as a key/value pair separated by 'keyValueDelim'.
function o(e,t,i,r){var s=r?e.split(r):[e];for(var n in s)if("string"==typeof s[n]){var a=s[n].split(i);2===a.length&&t(a[0].trim(),a[1].trim())}}s.prototype=r(Error.prototype),s.prototype.constructor=s,// ParsingError metadata for acceptable ParsingErrors.
s.Errors={BadSignature:{code:0,message:"Malformed WebVTT signature."},BadTimeStamp:{code:1,message:"Malformed time stamp."}},a.prototype={// Only accept the first assignment to any key.
set:function(e,t){this.get(e)||""===t||(this.values[e]=t)},// Return the value for a key, or a default value.
// If 'defaultKey' is passed then 'dflt' is assumed to be an object with
// a number of possible default values as properties where 'defaultKey' is
// the key of the property that will be chosen; otherwise it's assumed to be
// a single value.
get:function(e,t,i){return i?this.has(e)?this.values[e]:t[i]:this.has(e)?this.values[e]:t},// Check whether we have a value for a key.
has:function(e){return e in this.values},// Accept a setting if its one of the given alternatives.
alt:function(e,t,i){for(var r=0;r<i.length;++r)if(t===i[r]){this.set(e,t);break}},// Accept a setting if its a valid (signed) integer.
integer:function(e,t){/^-?\d+$/.test(t)&&this.set(e,parseInt(t,10))},// Accept a setting if its a valid percentage.
percent:function(e,t){return!!(t.match(/^([\d]{1,3})(\.[\d]*)?%$/)&&(t=parseFloat(t))>=0&&t<=100)&&(this.set(e,t),!0)}};// When evaluating this file as part of a Webpack bundle for server
// side rendering, `document` is an empty object.
var l=i.createElement&&i.createElement("textarea"),u={c:"span",i:"i",b:"b",u:"u",ruby:"ruby",rt:"rt",v:"span",lang:"span"},h={white:"rgba(255,255,255,1)",lime:"rgba(0,255,0,1)",cyan:"rgba(0,255,255,1)",red:"rgba(255,0,0,1)",yellow:"rgba(255,255,0,1)",magenta:"rgba(255,0,255,1)",blue:"rgba(0,0,255,1)",black:"rgba(0,0,0,1)"},d={v:"title",lang:"lang"},c={rt:"ruby"};// Parse content into a document fragment.
function p(e,t){for(var i,r=e.document.createElement("div"),s=r,a=[];null!==(i=function(){// Check for end-of-string.
if(!t)return null;var e,i=t.match(/^([^<]*)(<[^>]*>?)?/);// If there is some text before the next tag, return it, otherwise return
// the tag.
return e=i[1]?i[1]:i[2],t=t.substr(e.length),e}());){if("<"===i[0]){if("/"===i[1]){// If the closing tag matches, move back up to the parent node.
a.length&&a[a.length-1]===i.substr(2).replace(">","")&&(a.pop(),s=s.parentNode);continue}var o,p,m,f,g=n(i.substr(1,i.length-2));if(g){// Timestamps are lead nodes as well.
f=e.document.createProcessingInstruction("timestamp",g),s.appendChild(f);continue}var y=i.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);// If we can't parse the tag, skip to the next tag.
if(!y||!// Try to construct an element, and ignore the tag if we couldn't.
(f=// Create an element for this tag.
function(t,i){var r=u[t];if(!r)return null;var s=e.document.createElement(r),n=d[t];return n&&i&&(s[n]=i.trim()),s}(y[1],y[3]))||(p=s,c[(m=f).localName]&&c[m.localName]!==p.localName))continue;// Set the class list (as a list of classes, separated by space).
if(y[2]){var _=y[2].split(".");_.forEach(function(e){var t=/^bg_/.test(e),i=t?e.slice(3):e;if(h.hasOwnProperty(i)){var r=t?"background-color":"color",s=h[i];f.style[r]=s}}),f.className=_.join(" ")}// Append the node to the current node, and enter the scope of the new
// node.
a.push(y[1]),s.appendChild(f),s=f;continue}// Text nodes are leaf nodes.
s.appendChild(e.document.createTextNode((o=i,l.innerHTML=o,o=l.textContent,l.textContent="",o)))}return r}// This is a list of all the Unicode characters that have a strong
// right-to-left category. What this means is that these characters are
// written right-to-left for sure. It was generated by pulling all the strong
// right-to-left characters out of the Unicode data table. That table can
// found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
var m=[[1470,1470],[1472,1472],[1475,1475],[1478,1478],[1488,1514],[1520,1524],[1544,1544],[1547,1547],[1549,1549],[1563,1563],[1566,1610],[1645,1647],[1649,1749],[1765,1766],[1774,1775],[1786,1805],[1807,1808],[1810,1839],[1869,1957],[1969,1969],[1984,2026],[2036,2037],[2042,2042],[2048,2069],[2074,2074],[2084,2084],[2088,2088],[2096,2110],[2112,2136],[2142,2142],[2208,2208],[2210,2220],[8207,8207],[64285,64285],[64287,64296],[64298,64310],[64312,64316],[64318,64318],[64320,64321],[64323,64324],[64326,64449],[64467,64829],[64848,64911],[64914,64967],[65008,65020],[65136,65140],[65142,65276],[67584,67589],[67592,67592],[67594,67637],[67639,67640],[67644,67644],[67647,67669],[67671,67679],[67840,67867],[67872,67897],[67903,67903],[67968,68023],[68030,68031],[68096,68096],[68112,68115],[68117,68119],[68121,68147],[68160,68167],[68176,68184],[68192,68223],[68352,68405],[68416,68437],[68440,68466],[68472,68479],[68608,68680],[126464,126467],[126469,126495],[126497,126498],[126500,126500],[126503,126503],[126505,126514],[126516,126519],[126521,126521],[126523,126523],[126530,126530],[126535,126535],[126537,126537],[126539,126539],[126541,126543],[126545,126546],[126548,126548],[126551,126551],[126553,126553],[126555,126555],[126557,126557],[126559,126559],[126561,126562],[126564,126564],[126567,126570],[126572,126578],[126580,126583],[126585,126588],[126590,126590],[126592,126601],[126603,126619],[126625,126627],[126629,126633],[126635,126651],[1114109,1114109]];function f(){}// Constructs the computed display state of the cue (a div). Places the div
// into the overlay which should be a block level element (usually a div).
function g(e,t,i){f.call(this),this.cue=t,// Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
// have inline positioning and will function as the cue background box.
this.cueDiv=p(e,t.text);var r={color:"rgba(255, 255, 255, 1)",backgroundColor:"rgba(0, 0, 0, 0.8)",position:"relative",left:0,right:0,top:0,bottom:0,display:"inline",writingMode:""===t.vertical?"horizontal-tb":"lr"===t.vertical?"vertical-lr":"vertical-rl",unicodeBidi:"plaintext"};this.applyStyles(r,this.cueDiv),// Create an absolutely positioned div that will be used to position the cue
// div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
// mirrors of them except middle instead of center on Safari.
this.div=e.document.createElement("div"),r={direction:function(e){var t=[],i="";if(!e||!e.childNodes)return"ltr";function r(e,t){for(var i=t.childNodes.length-1;i>=0;i--)e.push(t.childNodes[i])}for(r(t,e);i=function e(t){if(!t||!t.length)return null;var i=t.pop(),s=i.textContent||i.innerText;if(s){// TODO: This should match all unicode type B characters (paragraph
// separator characters). See issue #115.
var n=s.match(/^.*(\n|\r)/);return n?(t.length=0,n[0]):s}return"ruby"===i.tagName?e(t):i.childNodes?(r(t,i),e(t)):void 0}(t);)for(var s=0;s<i.length;s++)if(function(e){for(var t=0;t<m.length;t++){var i=m[t];if(e>=i[0]&&e<=i[1])return!0}return!1}(i.charCodeAt(s)))return"rtl";return"ltr"}(this.cueDiv),writingMode:""===t.vertical?"horizontal-tb":"lr"===t.vertical?"vertical-lr":"vertical-rl",unicodeBidi:"plaintext",textAlign:"middle"===t.align?"center":t.align,font:i.font,whiteSpace:"pre-line",position:"absolute"},this.applyStyles(r),this.div.appendChild(this.cueDiv);// Calculate the distance from the reference edge of the viewport to the text
// position of the cue box. The reference edge will be resolved later when
// the box orientation styles are applied.
var s=0;switch(t.positionAlign){case"start":case"line-left":s=t.position;break;case"center":s=t.position-t.size/2;break;case"end":case"line-right":s=t.position-t.size}""===t.vertical?this.applyStyles({left:this.formatStyle(s,"%"),width:this.formatStyle(t.size,"%")}):this.applyStyles({top:this.formatStyle(s,"%"),height:this.formatStyle(t.size,"%")}),this.move=function(e){this.applyStyles({top:this.formatStyle(e.top,"px"),bottom:this.formatStyle(e.bottom,"px"),left:this.formatStyle(e.left,"px"),right:this.formatStyle(e.right,"px"),height:this.formatStyle(e.height,"px"),width:this.formatStyle(e.width,"px")})}}// Represents the co-ordinates of an Element in a way that we can easily
// compute things with such as if it overlaps or intersects with another Element.
// Can initialize it with either a StyleBox or another BoxPosition.
function y(e){// Either a BoxPosition was passed in and we need to copy it, or a StyleBox
// was passed in and we need to copy the results of 'getBoundingClientRect'
// as the object returned is readonly. All co-ordinate values are in reference
// to the viewport origin (top left).
var t,i,r,s;if(e.div){i=e.div.offsetHeight,r=e.div.offsetWidth,s=e.div.offsetTop;var n=(n=e.div.childNodes)&&(n=n[0])&&n.getClientRects&&n.getClientRects();e=e.div.getBoundingClientRect(),// In certain cases the outter div will be slightly larger then the sum of
// the inner div's lines. This could be due to bold text, etc, on some platforms.
// In this case we should get the average line height and use that. This will
// result in the desired behaviour.
t=n?Math.max(n[0]&&n[0].height||0,e.height/n.length):0}this.left=e.left,this.right=e.right,this.top=e.top||s,this.height=e.height||i,this.bottom=e.bottom||s+(e.height||i),this.width=e.width||r,this.lineHeight=void 0!==t?t:e.lineHeight}function _(){// Nothing
}// Apply styles to a div. If there is no div passed then it defaults to the
// div on 'this'.
f.prototype.applyStyles=function(e,t){for(var i in t=t||this.div,e)e.hasOwnProperty(i)&&(t.style[i]=e[i])},f.prototype.formatStyle=function(e,t){return 0===e?0:e+t},g.prototype=r(f.prototype),g.prototype.constructor=g,// Move the box along a particular axis. Optionally pass in an amount to move
// the box. If no amount is passed then the default is the line height of the
// box.
y.prototype.move=function(e,t){switch(t=void 0!==t?t:this.lineHeight,e){case"+x":this.left+=t,this.right+=t;break;case"-x":this.left-=t,this.right-=t;break;case"+y":this.top+=t,this.bottom+=t;break;case"-y":this.top-=t,this.bottom-=t}},// Check if this box overlaps another box, b2.
y.prototype.overlaps=function(e){return this.left<e.right&&this.right>e.left&&this.top<e.bottom&&this.bottom>e.top},// Check if this box overlaps any other boxes in boxes.
y.prototype.overlapsAny=function(e){for(var t=0;t<e.length;t++)if(this.overlaps(e[t]))return!0;return!1},// Check if this box is within another box.
y.prototype.within=function(e){return this.top>=e.top&&this.bottom<=e.bottom&&this.left>=e.left&&this.right<=e.right},// Check if this box is entirely within the container or it is overlapping
// on the edge opposite of the axis direction passed. For example, if "+x" is
// passed and the box is overlapping on the left edge of the container, then
// return true.
y.prototype.overlapsOppositeAxis=function(e,t){switch(t){case"+x":return this.left<e.left;case"-x":return this.right>e.right;case"+y":return this.top<e.top;case"-y":return this.bottom>e.bottom}},// Find the percentage of the area that this box is overlapping with another
// box.
y.prototype.intersectPercentage=function(e){return Math.max(0,Math.min(this.right,e.right)-Math.max(this.left,e.left))*Math.max(0,Math.min(this.bottom,e.bottom)-Math.max(this.top,e.top))/(this.height*this.width)},// Convert the positions from this box to CSS compatible positions using
// the reference container's positions. This has to be done because this
// box's positions are in reference to the viewport origin, whereas, CSS
// values are in referecne to their respective edges.
y.prototype.toCSSCompatValues=function(e){return{top:this.top-e.top,bottom:e.bottom-this.bottom,left:this.left-e.left,right:e.right-this.right,height:this.height,width:this.width}},// Get an object that represents the box's position without anything extra.
// Can pass a StyleBox, HTMLElement, or another BoxPositon.
y.getSimpleBoxPosition=function(e){var t=e.div?e.div.offsetHeight:e.tagName?e.offsetHeight:0,i=e.div?e.div.offsetWidth:e.tagName?e.offsetWidth:0,r=e.div?e.div.offsetTop:e.tagName?e.offsetTop:0;return{left:(e=e.div?e.div.getBoundingClientRect():e.tagName?e.getBoundingClientRect():e).left,right:e.right,top:e.top||r,height:e.height||t,bottom:e.bottom||r+(e.height||t),width:e.width||i}},// Helper to allow strings to be decoded instead of the default binary utf8 data.
_.StringDecoder=function(){return{decode:function(e){if(!e)return"";if("string"!=typeof e)throw Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(e))}}},_.convertCueToDOMTree=function(e,t){return e&&t?p(e,t):null},// Runs the processing model over the cues and regions passed to it.
// @param overlay A block level element (usually a div) that the computed cues
//                and regions will be placed into.
_.processCues=function(e,t,i){if(!e||!t||!i)return null;// Remove all previous children.
for(;i.firstChild;)i.removeChild(i.firstChild);var r=e.document.createElement("div");// We don't need to recompute the cues' display states. Just reuse them.
if(r.style.position="absolute",r.style.left="0",r.style.right="0",r.style.top="0",r.style.bottom="0",r.style.margin="1.5%",i.appendChild(r),!// Determine if we need to compute the display states of the cues. This could
// be the case if a cue's state has been changed since the last computation or
// if it has not been computed yet.
function(e){for(var t=0;t<e.length;t++)if(e[t].hasBeenReset||!e[t].displayState)return!0;return!1}(t)){for(var s=0;s<t.length;s++)r.appendChild(t[s].displayState);return}var n=[],a=y.getSimpleBoxPosition(r),o={font:Math.round(5*a.height)/100+"px sans-serif"};!function(){for(var i,s,l=0;l<t.length;l++)s=t[l],// Compute the intial position and styles of the cue div.
i=new g(e,s,o),r.appendChild(i.div),// Move the cue div to it's correct line position.
// Move a StyleBox to its specified, or next best, position. The containerBox
// is the box that contains the StyleBox, such as a div. boxPositions are
// a list of other boxes that the styleBox can't overlap with.
function(e,t,i,r){var s=new y(t),n=t.cue,a=function(e){if("number"==typeof e.line&&(e.snapToLines||e.line>=0&&e.line<=100))return e.line;if(!e.track||!e.track.textTrackList||!e.track.textTrackList.mediaElement)return -1;for(var t=e.track,i=t.textTrackList,r=0,s=0;s<i.length&&i[s]!==t;s++)"showing"===i[s].mode&&r++;return -1*++r}(n),o=[];// If we have a line number to align the cue to.
if(n.snapToLines){switch(n.vertical){case"":o=["+y","-y"],l="height";break;case"rl":o=["+x","-x"],l="width";break;case"lr":o=["-x","+x"],l="width"}var l,u=s.lineHeight,h=u*Math.round(a),d=i[l]+u,c=o[0];Math.abs(h)>d&&(h=(h<0?-1:1)*(Math.ceil(d/u)*u)),a<0&&(h+=""===n.vertical?i.height:i.width,o=o.reverse()),// Move the box to the specified position. This may not be its best
// position.
s.move(c,h)}else{// If we have a percentage line value for the cue.
var p=s.lineHeight/i.height*100;switch(n.lineAlign){case"center":a-=p/2;break;case"end":a-=p}// Apply initial line position to the cue box.
switch(n.vertical){case"":t.applyStyles({top:t.formatStyle(a,"%")});break;case"rl":t.applyStyles({left:t.formatStyle(a,"%")});break;case"lr":t.applyStyles({right:t.formatStyle(a,"%")})}o=["+y","-x","+x","-y"],// Get the box position again after we've applied the specified positioning
// to it.
s=new y(t)}var m=// Find the best position for a cue box, b, on the video. The axis parameter
// is a list of axis, the order of which, it will move the box along. For example:
// Passing ["+x", "-x"] will move the box first along the x axis in the positive
// direction. If it doesn't find a good position for it there it will then move
// it along the x axis in the negative direction.
function(e,t){for(var s,n=new y(e),a=1,o=0;o<t.length;o++){for(;e.overlapsOppositeAxis(i,t[o])||e.within(i)&&e.overlapsAny(r);)e.move(t[o]);// We found a spot where we aren't overlapping anything. This is our
// best position.
if(e.within(i))return e;var l=e.intersectPercentage(i);a>l&&(s=new y(e),a=l),// Reset the box position to the specified position.
e=new y(n)}return s||n}(s,o);t.move(m.toCSSCompatValues(i))}(0,i,a,n),// Remember the computed div so that we don't have to recompute it later
// if we don't have too.
s.displayState=i.div,n.push(y.getSimpleBoxPosition(i))}()},_.Parser=function(e,t,i){i||(i=t,t={}),t||(t={}),this.window=e,this.vttjs=t,this.state="INITIAL",this.buffer="",this.decoder=i||new TextDecoder("utf8"),this.regionList=[]},_.Parser.prototype={// If the error is a ParsingError then report it to the consumer if
// possible. If it's not a ParsingError then throw it like normal.
reportOrThrowError:function(e){if(e instanceof s)this.onparsingerror&&this.onparsingerror(e);else throw e},parse:function(e){var t=this;function i(){for(var e=t.buffer,i=0;i<e.length&&"\r"!==e[i]&&"\n"!==e[i];)++i;var r=e.substr(0,i);return"\r"===e[i]&&++i,"\n"===e[i]&&++i,t.buffer=e.substr(i),r}e&&(t.buffer+=t.decoder.decode(e,{stream:!0}));// 5.1 WebVTT file parsing.
try{if("INITIAL"===t.state){// We can't start parsing until we have the first line.
if(!/\r\n|\n/.test(t.buffer))return this;var r,l,u=(l=i()).match(/^WEBVTT([ \t].*)?$/);if(!u||!u[0])throw new s(s.Errors.BadSignature);t.state="HEADER"}for(var h=!1;// We can't parse a line until we have the full line.
t.buffer&&/\r\n|\n/.test(t.buffer);)switch(h?h=!1:l=i(),t.state){case"HEADER":// 13-18 - Allow a header (metadata) under the WEBVTT line.
/:/.test(l)?(r=l).match(/X-TIMESTAMP-MAP/)?o(r,function(e,i){if("X-TIMESTAMP-MAP"===e){var r;r=new a,o(i,function(e,t){switch(e){case"MPEGT":r.integer(e+"S",t);break;case"LOCA":r.set(e+"L",n(t))}},/[^\d]:/,/,/),t.ontimestampmap&&t.ontimestampmap({MPEGTS:r.get("MPEGTS"),LOCAL:r.get("LOCAL")})}},/=/):o(r,function(e,i){"Region"===e&&// 3.3 WebVTT region metadata header syntax
// 3.4 WebVTT region and WebVTT region settings syntax
function(e){var i=new a;// Create the region, using default values for any values that were not
// specified.
if(o(e,function(e,t){switch(e){case"id":i.set(e,t);break;case"width":i.percent(e,t);break;case"lines":i.integer(e,t);break;case"regionanchor":case"viewportanchor":var r=t.split(",");if(2!==r.length)break;// We have to make sure both x and y parse, so use a temporary
// settings object here.
var s=new a;if(s.percent("x",r[0]),s.percent("y",r[1]),!s.has("x")||!s.has("y"))break;i.set(e+"X",s.get("x")),i.set(e+"Y",s.get("y"));break;case"scroll":i.alt(e,t,["up"])}},/=/,/\s/),i.has("id")){var r=new(t.vttjs.VTTRegion||t.window.VTTRegion);r.width=i.get("width",100),r.lines=i.get("lines",3),r.regionAnchorX=i.get("regionanchorX",0),r.regionAnchorY=i.get("regionanchorY",100),r.viewportAnchorX=i.get("viewportanchorX",0),r.viewportAnchorY=i.get("viewportanchorY",100),r.scroll=i.get("scroll",""),// Register the region.
t.onregion&&t.onregion(r),// Remember the VTTRegion for later in case we parse any VTTCues that
// reference it.
t.regionList.push({id:i.get("id"),region:r})}}(i)},/:/):l||(t.state="ID");continue;case"NOTE":// Ignore NOTE blocks.
l||(t.state="ID");continue;case"ID":// Check for the start of NOTE blocks.
if(/^NOTE($|[ \t])/.test(l)){t.state="NOTE";break}// 19-29 - Allow any number of line terminators, then initialize new cue values.
if(!l)continue;t.cue=new(t.vttjs.VTTCue||t.window.VTTCue)(0,0,"");// Safari still uses the old middle value and won't accept center
try{t.cue.align="center"}catch(e){t.cue.align="middle"}// 30-39 - Check if self line contains an optional identifier or timing data.
if(t.state="CUE",-1===l.indexOf("-->")){t.cue.id=l;continue}// Process line as start of a cue.
/*falls through*/case"CUE":// 40 - Collect cue timings and settings.
try{!function(e,t,i){// Remember the original input if we need to throw an error.
var r=e;// 4.1 WebVTT timestamp
function l(){var t=n(e);if(null===t)throw new s(s.Errors.BadTimeStamp,"Malformed timestamp: "+r);return(// Remove time stamp from input.
e=e.replace(/^[^\sa-zA-Z-]+/,""),t)}function u(){e=e.replace(/^\s+/,"")}if(// 4.1 WebVTT cue timings.
u(),t.startTime=l(),u(),"-->"!==e.substr(0,3))throw new s(s.Errors.BadTimeStamp,"Malformed time stamp (time stamps must be separated by '-->'): "+r);e=e.substr(3),u(),t.endTime=l(),// 4.1 WebVTT cue settings list.
u(),// 4.4.2 WebVTT cue settings
function(e,t){var r=new a;o(e,function(e,t){switch(e){case"region":// Find the last region we parsed with the same region id.
for(var s=i.length-1;s>=0;s--)if(i[s].id===t){r.set(e,i[s].region);break}break;case"vertical":r.alt(e,t,["rl","lr"]);break;case"line":var n=t.split(","),a=n[0];r.integer(e,a),r.percent(e,a)&&r.set("snapToLines",!1),r.alt(e,a,["auto"]),2===n.length&&r.alt("lineAlign",n[1],["start","center","end"]);break;case"position":n=t.split(","),r.percent(e,n[0]),2===n.length&&r.alt("positionAlign",n[1],["start","center","end"]);break;case"size":r.percent(e,t);break;case"align":r.alt(e,t,["start","center","end","left","right"])}},/:/,/\s/),// Apply default values for any missing fields.
t.region=r.get("region",null),t.vertical=r.get("vertical","");try{t.line=r.get("line","auto")}catch(e){}t.lineAlign=r.get("lineAlign","start"),t.snapToLines=r.get("snapToLines",!0),t.size=r.get("size",100);// Safari still uses the old middle value and won't accept center
try{t.align=r.get("align","center")}catch(e){t.align=r.get("align","middle")}try{t.position=r.get("position","auto")}catch(e){t.position=r.get("position",{start:0,left:0,center:50,middle:50,end:100,right:100},t.align)}t.positionAlign=r.get("positionAlign",{start:"start",left:"start",center:"center",middle:"center",end:"end",right:"end"},t.align)}(e,t)}(l,t.cue,t.regionList)}catch(e){t.reportOrThrowError(e),// In case of an error ignore rest of the cue.
t.cue=null,t.state="BADCUE";continue}t.state="CUETEXT";continue;case"CUETEXT":var d=-1!==l.indexOf("-->");// 34 - If we have an empty line then report the cue.
// 35 - If we have the special substring '-->' then report the cue,
// but do not collect the line as we need to process the current
// one as a new cue.
if(!l||d&&(h=!0)){// We are done parsing self cue.
t.oncue&&t.oncue(t.cue),t.cue=null,t.state="ID";continue}t.cue.text&&(t.cue.text+="\n"),t.cue.text+=l.replace(/\u2028/g,"\n").replace(/u2029/g,"\n");continue;case"BADCUE":// 54-62 - Collect and discard the remaining cue.
l||(t.state="ID");continue}}catch(e){t.reportOrThrowError(e),"CUETEXT"===t.state&&t.cue&&t.oncue&&t.oncue(t.cue),t.cue=null,// Enter BADWEBVTT state if header was not parsed correctly otherwise
// another exception occurred so enter BADCUE state.
t.state="INITIAL"===t.state?"BADWEBVTT":"BADCUE"}return this},flush:function(){try{// If we've flushed, parsed, and we're still on the INITIAL state then
// that means we don't have enough of the stream to parse the first
// line.
if(// Finish decoding the stream.
this.buffer+=this.decoder.decode(),(this.cue||"HEADER"===this.state)&&(this.buffer+="\n\n",this.parse()),"INITIAL"===this.state)throw new s(s.Errors.BadSignature)}catch(e){this.reportOrThrowError(e)}return this.onflush&&this.onflush(),this}},e.exports=_}),x.register("7pNCM",function(e,t){var i,r=void 0!==S?S:"undefined"!=typeof window?window:{},s=x("kjyEk");"undefined"!=typeof document?i=document:(i=r["__GLOBAL_DOCUMENT_CACHE@4"])||(i=r["__GLOBAL_DOCUMENT_CACHE@4"]=s),e.exports=i}),x.register("kjyEk",function(e,t){}),x.register("aWh86",function(e,t){var i={"":1,lr:1,rl:1},r={start:1,center:1,end:1,left:1,right:1,auto:1,"line-left":1,"line-right":1};function s(e){return"string"==typeof e&&!!r[e.toLowerCase()]&&e.toLowerCase()}function n(e,t,r){/**
   * Shim implementation specific properties. These properties are not in
   * the spec.
   */// Lets us know when the VTTCue's data has changed in such a way that we need
// to recompute its display state. This lets us compute its display state
// lazily.
this.hasBeenReset=!1;/**
   * VTTCue and TextTrackCue properties
   * http://dev.w3.org/html5/webvtt/#vttcue-interface
   */var n="",a=!1,o=e,l=t,u=r,h=null,d="",c=!0,p="auto",m="start",f="auto",g="auto",y=100,_="center";Object.defineProperties(this,{id:{enumerable:!0,get:function(){return n},set:function(e){n=""+e}},pauseOnExit:{enumerable:!0,get:function(){return a},set:function(e){a=!!e}},startTime:{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e)throw TypeError("Start time must be set to a number.");o=e,this.hasBeenReset=!0}},endTime:{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e)throw TypeError("End time must be set to a number.");l=e,this.hasBeenReset=!0}},text:{enumerable:!0,get:function(){return u},set:function(e){u=""+e,this.hasBeenReset=!0}},region:{enumerable:!0,get:function(){return h},set:function(e){h=e,this.hasBeenReset=!0}},vertical:{enumerable:!0,get:function(){return d},set:function(e){var t="string"==typeof e&&!!i[e.toLowerCase()]&&e.toLowerCase();// Have to check for false because the setting an be an empty string.
if(!1===t)throw SyntaxError("Vertical: an invalid or illegal direction string was specified.");d=t,this.hasBeenReset=!0}},snapToLines:{enumerable:!0,get:function(){return c},set:function(e){c=!!e,this.hasBeenReset=!0}},line:{enumerable:!0,get:function(){return p},set:function(e){if("number"!=typeof e&&"auto"!==e)throw SyntaxError("Line: an invalid number or illegal string was specified.");p=e,this.hasBeenReset=!0}},lineAlign:{enumerable:!0,get:function(){return m},set:function(e){var t=s(e);t?(m=t,this.hasBeenReset=!0):console.warn("lineAlign: an invalid or illegal string was specified.")}},position:{enumerable:!0,get:function(){return f},set:function(e){if(e<0||e>100)throw Error("Position must be between 0 and 100.");f=e,this.hasBeenReset=!0}},positionAlign:{enumerable:!0,get:function(){return g},set:function(e){var t=s(e);t?(g=t,this.hasBeenReset=!0):console.warn("positionAlign: an invalid or illegal string was specified.")}},size:{enumerable:!0,get:function(){return y},set:function(e){if(e<0||e>100)throw Error("Size must be between 0 and 100.");y=e,this.hasBeenReset=!0}},align:{enumerable:!0,get:function(){return _},set:function(e){var t=s(e);if(!t)throw SyntaxError("align: an invalid or illegal alignment string was specified.");_=t,this.hasBeenReset=!0}}}),/**
   * Other <track> spec defined properties
   */// http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
this.displayState=void 0}/**
 * VTTCue methods
 */n.prototype.getCueAsHTML=function(){// Assume WebVTT.convertCueToDOMTree is on the global.
return WebVTT.convertCueToDOMTree(window,this.text)},e.exports=n}),x.register("f8lRN",function(e,t){/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var i={"":!0,up:!0};function r(e){return"number"==typeof e&&e>=0&&e<=100}e.exports=// VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
function(){var e=100,t=3,s=0,n=100,a=0,o=100,l="";Object.defineProperties(this,{width:{enumerable:!0,get:function(){return e},set:function(t){if(!r(t))throw Error("Width must be between 0 and 100.");e=t}},lines:{enumerable:!0,get:function(){return t},set:function(e){if("number"!=typeof e)throw TypeError("Lines must be set to a number.");t=e}},regionAnchorY:{enumerable:!0,get:function(){return n},set:function(e){if(!r(e))throw Error("RegionAnchorX must be between 0 and 100.");n=e}},regionAnchorX:{enumerable:!0,get:function(){return s},set:function(e){if(!r(e))throw Error("RegionAnchorY must be between 0 and 100.");s=e}},viewportAnchorY:{enumerable:!0,get:function(){return o},set:function(e){if(!r(e))throw Error("ViewportAnchorY must be between 0 and 100.");o=e}},viewportAnchorX:{enumerable:!0,get:function(){return a},set:function(e){if(!r(e))throw Error("ViewportAnchorX must be between 0 and 100.");a=e}},scroll:{enumerable:!0,get:function(){return l},set:function(e){var t="string"==typeof e&&!!i[e.toLowerCase()]&&e.toLowerCase();// Have to check for false as an empty string is a legal value.
!1===t?console.warn("Scroll: an invalid or illegal string was specified."):l=t}}})}}),x.register("c1Wy2",function(e,t){E(e.exports,"DOMParser",()=>i,e=>i=e);var i,r=x("hkG9E"),s=x("2YubT"),n=x("2NAtx"),a=x("1fO4L"),o=s.DOMImplementation,l=r.NAMESPACE,u=a.ParseError,h=a.XMLReader;/**
 * Normalizes line ending according to https://www.w3.org/TR/xml11/#sec-line-ends:
 *
 * > XML parsed entities are often stored in computer files which,
 * > for editing convenience, are organized into lines.
 * > These lines are typically separated by some combination
 * > of the characters CARRIAGE RETURN (#xD) and LINE FEED (#xA).
 * >
 * > To simplify the tasks of applications, the XML processor must behave
 * > as if it normalized all line breaks in external parsed entities (including the document entity)
 * > on input, before parsing, by translating all of the following to a single #xA character:
 * >
 * > 1. the two-character sequence #xD #xA
 * > 2. the two-character sequence #xD #x85
 * > 3. the single character #x85
 * > 4. the single character #x2028
 * > 5. any #xD character that is not immediately followed by #xA or #x85.
 *
 * @param {string} input
 * @returns {string}
 */function d(e){return e.replace(/\r[\n\u0085]/g,"\n").replace(/[\r\u0085\u2028]/g,"\n")}/**
 * @typedef Locator
 * @property {number} [columnNumber]
 * @property {number} [lineNumber]
 *//**
 * @typedef DOMParserOptions
 * @property {DOMHandler} [domBuilder]
 * @property {Function} [errorHandler]
 * @property {(string) => string} [normalizeLineEndings] used to replace line endings before parsing
 * 						defaults to `normalizeLineEndings`
 * @property {Locator} [locator]
 * @property {Record<string, string>} [xmlns]
 *
 * @see normalizeLineEndings
 *//**
 * The DOMParser interface provides the ability to parse XML or HTML source code
 * from a string into a DOM `Document`.
 *
 * _xmldom is different from the spec in that it allows an `options` parameter,
 * to override the default behavior._
 *
 * @param {DOMParserOptions} [options]
 * @constructor
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser
 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-parsing-and-serialization
 */function c(e){this.options=e||{locator:{}}}//console.log('#\n\n\n\n\n\n\n####')
/**
 * +ContentHandler+ErrorHandler
 * +LexicalHandler+EntityResolver2
 * -DeclHandler-DTDHandler
 *
 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
 */function p(){this.cdata=!1}function m(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}function f(e){if(e)return"\n@"+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function g(e,t,i){return"string"==typeof e?e.substr(t,i):e.length>=t+i||t?new java.lang.String(e,t,i)+"":e}/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */function y(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}//appendChild and setAttributeNS are preformance key
c.prototype.parseFromString=function(e,t){var i=this.options,r=new h,s=i.domBuilder||new p,a=i.errorHandler,o=i.locator,u=i.xmlns||{},c=/\/x?html?$/.test(t),m=c?n.HTML_ENTITIES:n.XML_ENTITIES;o&&s.setDocumentLocator(o),r.errorHandler=function(e,t,i){if(!e){if(t instanceof p)return t;e=t}var r={},s=e instanceof Function;function n(t){var n=e[t];!n&&s&&(n=2==e.length?function(i){e(t,i)}:e),r[t]=n&&function(e){n("[xmldom "+t+"]	"+e+f(i))}||function(){}}return i=i||{},n("warning"),n("error"),n("fatalError"),r}(a,s,o),r.domBuilder=i.domBuilder||s,c&&(u[""]=l.HTML),u.xml=u.xml||l.XML;var g=i.normalizeLineEndings||d;return e&&"string"==typeof e?r.parse(g(e),u,m):r.errorHandler.error("invalid doc source"),s.doc},/**
 * @see org.xml.sax.ContentHandler#startDocument
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
 */p.prototype={startDocument:function(){this.doc=new o().createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,i,r){var s=this.doc,n=s.createElementNS(e,i||t),a=r.length;y(this,n),this.currentElement=n,this.locator&&m(this.locator,n);for(var o=0;o<a;o++){var e=r.getURI(o),l=r.getValue(o),i=r.getQName(o),u=s.createAttributeNS(e,i);this.locator&&m(r.getLocator(o),u),u.value=u.nodeValue=l,n.setAttributeNode(u)}},endElement:function(e,t,i){var r=this.currentElement;r.tagName,this.currentElement=r.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var i=this.doc.createProcessingInstruction(e,t);this.locator&&m(this.locator,i),y(this,i)},ignorableWhitespace:function(e,t,i){},characters:function(e,t,i){//console.log(chars)
if(e=g.apply(this,arguments)){if(this.cdata)var r=this.doc.createCDATASection(e);else var r=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(r):/^\s*$/.test(e)&&this.doc.appendChild(r),this.locator&&m(this.locator,r)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},//LexicalHandler
comment:function(e,t,i){e=g.apply(this,arguments);var r=this.doc.createComment(e);this.locator&&m(this.locator,r),y(this,r)},startCDATA:function(){//used in characters() methods
this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,i){var r=this.doc.implementation;if(r&&r.createDocumentType){var s=r.createDocumentType(e,t,i);this.locator&&m(this.locator,s),y(this,s),this.doc.doctype=s}},/**
	 * @see org.xml.sax.ErrorHandler
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
	 */warning:function(e){console.warn("[xmldom warning]	"+e,f(this.locator))},error:function(e){console.error("[xmldom error]	"+e,f(this.locator))},fatalError:function(e){throw new u(e,this.locator)}},/*
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
 * used method of org.xml.sax.ext.LexicalHandler:
 *  #comment(chars, start, length)
 *  #startCDATA()
 *  #endCDATA()
 *  #startDTD(name, publicId, systemId)
 *
 *
 * IGNORED method of org.xml.sax.ext.LexicalHandler:
 *  #endDTD()
 *  #startEntity(name)
 *  #endEntity(name)
 *
 *
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
 * IGNORED method of org.xml.sax.ext.DeclHandler
 * 	#attributeDecl(eName, aName, type, mode, value)
 *  #elementDecl(name, model)
 *  #externalEntityDecl(name, publicId, systemId)
 *  #internalEntityDecl(name, value)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
 * IGNORED method of org.xml.sax.EntityResolver2
 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
 *  #resolveEntity(publicId, systemId)
 *  #getExternalSubset(name, baseURI)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
 * IGNORED method of org.xml.sax.DTDHandler
 *  #notationDecl(name, publicId, systemId) {};
 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
 */"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(e){p.prototype[e]=function(){return null}}),i=c}),x.register("hkG9E",function(e,t){/**
 * "Shallow freezes" an object to render it immutable.
 * Uses `Object.freeze` if available,
 * otherwise the immutability is only in the type.
 *
 * Is used to create "enum like" objects.
 *
 * @template T
 * @param {T} object the object to freeze
 * @param {Pick<ObjectConstructor, 'freeze'> = Object} oc `Object` by default,
 * 				allows to inject custom object constructor for tests
 * @returns {Readonly<T>}
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
 */function i(e,t){return void 0===t&&(t=Object),t&&"function"==typeof t.freeze?t.freeze(e):e}E(e.exports,"find",()=>r,e=>r=e),E(e.exports,"freeze",()=>s,e=>s=e),E(e.exports,"NAMESPACE",()=>n,e=>n=e);/**
 * All mime types that are allowed as input to `DOMParser.parseFromString`
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString#Argument02 MDN
 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#domparsersupportedtype WHATWG HTML Spec
 * @see DOMParser.prototype.parseFromString
 */var r,s,n,a=i({/**
	 * `text/html`, the only mime type that triggers treating an XML document as HTML.
	 *
	 * @see DOMParser.SupportedType.isHTML
	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring WHATWG HTML Spec
	 */HTML:"text/html",/**
	 * Helper method to check a mime type if it indicates an HTML document
	 *
	 * @param {string} [value]
	 * @returns {boolean}
	 *
	 * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/HTML Wikipedia
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
	 * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring 	 */isHTML:function(e){return e===a.HTML},/**
	 * `application/xml`, the standard mime type for XML documents.
	 *
	 * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType registration
	 * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303
	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
	 */XML_APPLICATION:"application/xml",/**
	 * `text/html`, an alias for `application/xml`.
	 *
	 * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303
	 * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration
	 * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
	 */XML_TEXT:"text/xml",/**
	 * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,
	 * but is parsed as an XML document.
	 *
	 * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType registration
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec
	 * @see https://en.wikipedia.org/wiki/XHTML Wikipedia
	 */XML_XHTML_APPLICATION:"application/xhtml+xml",/**
	 * `image/svg+xml`,
	 *
	 * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration
	 * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1
	 * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia
	 */XML_SVG_IMAGE:"image/svg+xml"}),o=i({/**
	 * The XHTML namespace.
	 *
	 * @see http://www.w3.org/1999/xhtml
	 */HTML:"http://www.w3.org/1999/xhtml",/**
	 * Checks if `uri` equals `NAMESPACE.HTML`.
	 *
	 * @param {string} [uri]
	 *
	 * @see NAMESPACE.HTML
	 */isHTML:function(e){return e===o.HTML},/**
	 * The SVG namespace.
	 *
	 * @see http://www.w3.org/2000/svg
	 */SVG:"http://www.w3.org/2000/svg",/**
	 * The `xml:` namespace.
	 *
	 * @see http://www.w3.org/XML/1998/namespace
	 */XML:"http://www.w3.org/XML/1998/namespace",/**
	 * The `xmlns:` namespace
	 *
	 * @see https://www.w3.org/2000/xmlns/
	 */XMLNS:"http://www.w3.org/2000/xmlns/"});r=/**
 * Ponyfill for `Array.prototype.find` which is only available in ES6 runtimes.
 *
 * Works with anything that has a `length` property and index access properties, including NodeList.
 *
 * @template {unknown} T
 * @param {Array<T> | ({length:number, [number]: T})} list
 * @param {function (item: T, index: number, list:Array<T> | ({length:number, [number]: T})):boolean} predicate
 * @param {Partial<Pick<ArrayConstructor['prototype'], 'find'>>?} ac `Array.prototype` by default,
 * 				allows injecting a custom implementation in tests
 * @returns {T | undefined}
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
 * @see https://tc39.es/ecma262/multipage/indexed-collections.html#sec-array.prototype.find
 */function(e,t,i){if(void 0===i&&(i=Array.prototype),e&&"function"==typeof i.find)return i.find.call(e,t);for(var r=0;r<e.length;r++)if(Object.prototype.hasOwnProperty.call(e,r)){var s=e[r];if(t.call(void 0,s,r,e))return s}},s=i,n=o}),x.register("2YubT",function(e,t){E(e.exports,"DOMImplementation",()=>i,e=>i=e),E(e.exports,"XMLSerializer",()=>r,e=>r=e);var i,r,s=x("hkG9E"),n=s.find,a=s.NAMESPACE;/**
 * A prerequisite for `[].filter`, to drop elements that are empty
 * @param {string} input
 * @returns {boolean}
 */function o(e){return""!==e}/**
 * Adds element as a key to current if it is not already present.
 *
 * @param {Record<string, boolean | undefined>} current
 * @param {string} element
 * @returns {Record<string, boolean | undefined>}
 */function l(e,t){return e.hasOwnProperty(t)||(e[t]=!0),e}/**
 * @see https://infra.spec.whatwg.org/#ordered-set
 * @param {string} input
 * @returns {string[]}
 */function u(e){return e?Object.keys((e?e.split(/[\t\n\f\r ]+/).filter(o):[]).reduce(l,{})):[]}function h(e,t){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])}/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */function d(e,t){var i=e.prototype;if(!(i instanceof t)){function r(){}r.prototype=t.prototype,h(i,r=new r),e.prototype=i=r}i.constructor!=e&&("function"!=typeof e&&console.error("unknown Class:"+e),i.constructor=e)}// Node Types
var c={},p=c.ELEMENT_NODE=1,m=c.ATTRIBUTE_NODE=2,f=c.TEXT_NODE=3,g=c.CDATA_SECTION_NODE=4,y=c.ENTITY_REFERENCE_NODE=5,_=c.ENTITY_NODE=6,b=c.PROCESSING_INSTRUCTION_NODE=7,v=c.COMMENT_NODE=8,T=c.DOCUMENT_NODE=9,S=c.DOCUMENT_TYPE_NODE=10,w=c.DOCUMENT_FRAGMENT_NODE=11,k=c.NOTATION_NODE=12,C={},D={};C.INDEX_SIZE_ERR=(D[1]="Index size error",1),C.DOMSTRING_SIZE_ERR=(D[2]="DOMString size error",2);var I=C.HIERARCHY_REQUEST_ERR=(D[3]="Hierarchy request error",3);C.WRONG_DOCUMENT_ERR=(D[4]="Wrong document",4),C.INVALID_CHARACTER_ERR=(D[5]="Invalid character",5),C.NO_DATA_ALLOWED_ERR=(D[6]="No data allowed",6),C.NO_MODIFICATION_ALLOWED_ERR=(D[7]="No modification allowed",7);var A=C.NOT_FOUND_ERR=(D[8]="Not found",8);C.NOT_SUPPORTED_ERR=(D[9]="Not supported",9);var L=C.INUSE_ATTRIBUTE_ERR=(D[10]="Attribute in use",10);/**
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 */function P(e,t){if(t instanceof Error)var i=t;else i=this,Error.call(this,D[e]),this.message=D[e],Error.captureStackTrace&&Error.captureStackTrace(this,P);return i.code=e,t&&(this.message=this.message+": "+t),i}/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */function O(){}function R(e,t){this._node=e,this._refresh=t,N(this)}function N(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!==t){var i=e._refresh(e._node);if(e_(e,"length",i.length),!e.$$length||i.length<e.$$length)for(var r=i.length;(r in e);r++)Object.prototype.hasOwnProperty.call(e,r)&&delete e[r];h(i,e),e._inc=t}}/**
 * Objects implementing the NamedNodeMap interface are used
 * to represent collections of nodes that can be accessed by name.
 * Note that NamedNodeMap does not inherit from NodeList;
 * NamedNodeMaps are not maintained in any particular order.
 * Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index,
 * but this is simply to allow convenient enumeration of the contents of a NamedNodeMap,
 * and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities
 */function M(){}function U(e,t){for(var i=e.length;i--;)if(e[i]===t)return i}function B(e,t,i,r){if(r?t[U(t,r)]=i:t[t.length++]=i,e){i.ownerElement=e;var s=e.ownerDocument;s&&(r&&z(s,e,r),s&&s._inc++,i.namespaceURI===a.XMLNS&&(e._nsMap[i.prefix?i.localName:""]=i.value))}}function F(e,t,i){//console.log('remove attr:'+attr)
var r=U(t,i);if(r>=0){for(var s=t.length-1;r<s;)t[r]=t[++r];if(t.length=s,e){var n=e.ownerDocument;n&&(z(n,e,i),i.ownerElement=null)}}else throw new P(A,Error(e.tagName+"@"+i))}/**
 * The DOMImplementation interface represents an object providing methods
 * which are not dependent on any particular document.
 * Such an object is returned by the `Document.implementation` property.
 *
 * __The individual methods describe the differences compared to the specs.__
 *
 * @constructor
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation MDN
 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490 DOM Level 1 Core (Initial)
 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-102161490 DOM Level 2 Core
 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-102161490 DOM Level 3 Core
 * @see https://dom.spec.whatwg.org/#domimplementation DOM Living Standard
 */function j(){}/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */function q(){}function $(e){return"<"==e&&"&lt;"||">"==e&&"&gt;"||"&"==e&&"&amp;"||'"'==e&&"&quot;"||"&#"+e.charCodeAt()+";"}/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */function H(e,t){if(t(e))return!0;if(e=e.firstChild)do if(H(e,t))return!0;while(e=e.nextSibling)}function V(){this.ownerDocument=this}function z(e,t,i,r){e&&e._inc++,i.namespaceURI===a.XMLNS&&delete t._nsMap[i.prefix?i.localName:""]}/**
 * Updates `el.childNodes`, updating the indexed items and it's `length`.
 * Passing `newChild` means it will be appended.
 * Otherwise it's assumed that an item has been removed,
 * and `el.firstNode` and it's `.nextSibling` are used
 * to walk the current list of child nodes.
 *
 * @param {Document} doc
 * @param {Node} el
 * @param {Node} [newChild]
 * @private
 */function W(e,t,i){if(e&&e._inc){e._inc++;//update childNodes
var r=t.childNodes;if(i)r[r.length++]=i;else{for(var s=t.firstChild,n=0;s;)r[n++]=s,s=s.nextSibling;r.length=n,delete r[r.length]}}}/**
 * Removes the connections between `parentNode` and `child`
 * and any existing `child.previousSibling` or `child.nextSibling`.
 *
 * @see https://github.com/xmldom/xmldom/issues/135
 * @see https://github.com/xmldom/xmldom/issues/145
 *
 * @param {Node} parentNode
 * @param {Node} child
 * @returns {Node} the child that was removed.
 * @private
 */function G(e,t){var i=t.previousSibling,r=t.nextSibling;return i?i.nextSibling=r:e.firstChild=r,r?r.previousSibling=i:e.lastChild=i,t.parentNode=null,t.previousSibling=null,t.nextSibling=null,W(e.ownerDocument,e),t}/**
 * Returns true if `node` is a DOCTYPE node
 * @param {Node} node
 * @returns {boolean}
 */function X(e){return e&&e.nodeType===q.DOCUMENT_TYPE_NODE}/**
 * Returns true if the node is an element
 * @param {Node} node
 * @returns {boolean}
 */function K(e){return e&&e.nodeType===q.ELEMENT_NODE}/**
 * Returns true if `node` is a text node
 * @param {Node} node
 * @returns {boolean}
 */function Y(e){return e&&e.nodeType===q.TEXT_NODE}/**
 * Check if en element node can be inserted before `child`, or at the end if child is falsy,
 * according to the presence and position of a doctype node on the same level.
 *
 * @param {Document} doc The document node
 * @param {Node} child the node that would become the nextSibling if the element would be inserted
 * @returns {boolean} `true` if an element can be inserted before child
 * @private
 * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */function Q(e,t){var i=e.childNodes||[];if(n(i,K)||X(t))return!1;var r=n(i,X);return!(t&&r&&i.indexOf(r)>i.indexOf(t))}/**
 * Check if en element node can be inserted before `child`, or at the end if child is falsy,
 * according to the presence and position of a doctype node on the same level.
 *
 * @param {Node} doc The document node
 * @param {Node} child the node that would become the nextSibling if the element would be inserted
 * @returns {boolean} `true` if an element can be inserted before child
 * @private
 * https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */function J(e,t){var i=e.childNodes||[];if(n(i,function(e){return K(e)&&e!==t}))return!1;var r=n(i,X);return!(t&&r&&i.indexOf(r)>i.indexOf(t))}/**
 * @private
 * Step 6 of the checks before inserting and before replacing a child are different.
 *
 * @param {Document} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node | undefined} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */function Z(e,t,i){var r=e.childNodes||[],s=t.childNodes||[];// DocumentFragment
if(t.nodeType===q.DOCUMENT_FRAGMENT_NODE){var a=s.filter(K);// If `node` has more than one element child or has a Text node child.
if(a.length>1||n(s,Y))throw new P(I,"More than one element or text in fragment");// Otherwise, if `node` has one element child and either `parent` has an element child that is not `child` or a doctype is following `child`.
if(1===a.length&&!J(e,i))throw new P(I,"Element in fragment can not be inserted before doctype")}// Element
if(K(t)&&!J(e,i))throw new P(I,"Only one element can be added and only after doctype");// DocumentType
if(X(t)){// `parent` has a doctype child that is not `child`,
if(n(r,function(e){return X(e)&&e!==i}))throw new P(I,"Only one doctype is allowed");var o=n(r,K);// or an element is preceding `child`.
if(i&&r.indexOf(o)<r.indexOf(i))throw new P(I,"Doctype can only be inserted before an element")}}/**
 * @private
 * @param {Node} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node=} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 */function ee(e,t,i,r){// To ensure pre-insertion validity of a node into a parent before a child, run these steps:
/**
 * @private
 * Steps 1-5 of the checks before inserting and before replacing a child are the same.
 *
 * @param {Node} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node=} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */(function(e,t,i){// 1. If `parent` is not a Document, DocumentFragment, or Element node, then throw a "HierarchyRequestError" DOMException.
if(!(e&&(e.nodeType===q.DOCUMENT_NODE||e.nodeType===q.DOCUMENT_FRAGMENT_NODE||e.nodeType===q.ELEMENT_NODE)))throw new P(I,"Unexpected parent node type "+e.nodeType);// 2. If `node` is a host-including inclusive ancestor of `parent`, then throw a "HierarchyRequestError" DOMException.
// not implemented!
// 3. If `child` is non-null and its parent is not `parent`, then throw a "NotFoundError" DOMException.
if(i&&i.parentNode!==e)throw new P(A,"child not in parent");if(!(t&&(K(t)||Y(t)||X(t)||t.nodeType===q.DOCUMENT_FRAGMENT_NODE||t.nodeType===q.COMMENT_NODE||t.nodeType===q.PROCESSING_INSTRUCTION_NODE))||// 5. If either `node` is a Text node and `parent` is a document,
// the sax parser currently adds top level text nodes, this will be fixed in 0.9.0
// || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)
// or `node` is a doctype and `parent` is not a document, then throw a "HierarchyRequestError" DOMException.
X(t)&&e.nodeType!==q.DOCUMENT_NODE)throw new P(I,"Unexpected node type "+t.nodeType+" for parent node type "+e.nodeType)})(e,t,i),e.nodeType===q.DOCUMENT_NODE&&(r||/**
 * @private
 * Step 6 of the checks before inserting and before replacing a child are different.
 *
 * @param {Document} parent the parent node to insert `node` into
 * @param {Node} node the node to insert
 * @param {Node | undefined} child the node that should become the `nextSibling` of `node`
 * @returns {Node}
 * @throws DOMException for several node combinations that would create a DOM that is not well-formed.
 * @throws DOMException if `child` is provided but is not a child of `parent`.
 * @see https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity
 * @see https://dom.spec.whatwg.org/#concept-node-replace
 */function(e,t,i){var r=e.childNodes||[],s=t.childNodes||[];// DocumentFragment
if(t.nodeType===q.DOCUMENT_FRAGMENT_NODE){var a=s.filter(K);// If node has more than one element child or has a Text node child.
if(a.length>1||n(s,Y))throw new P(I,"More than one element or text in fragment");// Otherwise, if `node` has one element child and either `parent` has an element child,
// `child` is a doctype, or `child` is non-null and a doctype is following `child`.
if(1===a.length&&!Q(e,i))throw new P(I,"Element in fragment can not be inserted before doctype")}// Element
if(K(t)&&!Q(e,i))throw new P(I,"Only one element can be added and only after doctype");// DocumentType
if(X(t)){// `parent` has a doctype child,
if(n(r,X))throw new P(I,"Only one doctype is allowed");var o=n(r,K);// `child` is non-null and an element is preceding `child`,
if(i&&r.indexOf(o)<r.indexOf(i))throw new P(I,"Doctype can only be inserted before an element");// or `child` is null and `parent` has an element child.
if(!i&&o)throw new P(I,"Doctype can not be appended since element is present")}})(e,t,i);var s=t.parentNode;if(s&&s.removeChild(t),t.nodeType===w){var a=t.firstChild;if(null==a)return t;var o=t.lastChild}else a=o=t;var l=i?i.previousSibling:e.lastChild;a.previousSibling=l,o.nextSibling=i,l?l.nextSibling=a:e.firstChild=a,null==i?e.lastChild=o:i.previousSibling=o;do a.parentNode=e;while(a!==o&&(a=a.nextSibling))return W(e.ownerDocument||e,e),t.nodeType==w&&(t.firstChild=t.lastChild=null),t}function et(){this._nsMap={}}function ei(){}function er(){}function es(){}function en(){}function ea(){}function eo(){}function el(){}function eu(){}function eh(){}function ed(){}function ec(){}function ep(){}function em(e,t){var i=[],r=9==this.nodeType&&this.documentElement||this,s=r.prefix,n=r.namespaceURI;if(n&&null==s){//console.log(prefix)
var s=r.lookupPrefix(n);if(null==s)var a=[{namespace:n,prefix:null}]}//console.log('###',this.nodeType,uri,prefix,buf.join(''))
return ey(this,i,e,t,a),i.join("")}function ef(e,t,i){var r=e.prefix||"",s=e.namespaceURI;// According to [Namespaces in XML 1.0](https://www.w3.org/TR/REC-xml-names/#ns-using) ,
// and more specifically https://www.w3.org/TR/REC-xml-names/#nsc-NoPrefixUndecl :
// > In a namespace declaration for a prefix [...], the attribute value MUST NOT be empty.
// in a similar manner [Namespaces in XML 1.1](https://www.w3.org/TR/xml-names11/#ns-using)
// and more specifically https://www.w3.org/TR/xml-names11/#nsc-NSDeclared :
// > [...] Furthermore, the attribute value [...] must not be an empty string.
// so serializing empty namespace value like xmlns:ds="" would produce an invalid XML document.
if(!s||"xml"===r&&s===a.XML||s===a.XMLNS)return!1;for(var n=i.length;n--;){var o=i[n];// get namespace prefix
if(o.prefix===r)return o.namespace!==s}return!0}/**
 * Well-formed constraint: No < in Attribute Values
 * > The replacement text of any entity referred to directly or indirectly
 * > in an attribute value must not contain a <.
 * @see https://www.w3.org/TR/xml11/#CleanAttrVals
 * @see https://www.w3.org/TR/xml11/#NT-AttValue
 *
 * Literal whitespace other than space that appear in attribute values
 * are serialized as their entity references, so they will be preserved.
 * (In contrast to whitespace literals in the input which are normalized to spaces)
 * @see https://www.w3.org/TR/xml11/#AVNormalize
 * @see https://w3c.github.io/DOM-Parsing/#serializing-an-element-s-attributes
 */function eg(e,t,i){e.push(" ",t,'="',i.replace(/[<>&"\t\n\r]/g,$),'"')}function ey(e,t,i,r,s){if(s||(s=[]),r){if(!(e=r(e)))return;if("string"==typeof e){t.push(e);return}//buf.sort.apply(attrs, attributeSorter);
}switch(e.nodeType){case p:var n,o=e.attributes,l=o.length,u=e.firstChild,h=e.tagName;i=a.isHTML(e.namespaceURI)||i;var d=h;if(!i&&!e.prefix&&e.namespaceURI){// lookup current default ns from `xmlns` attribute
for(var c=0;c<o.length;c++)if("xmlns"===o.item(c).name){n=o.item(c).value;break}if(!n)for(var _=s.length-1;_>=0;_--){var E=s[_];if(""===E.prefix&&E.namespace===e.namespaceURI){n=E.namespace;break}}if(n!==e.namespaceURI)for(var _=s.length-1;_>=0;_--){var E=s[_];if(E.namespace===e.namespaceURI){E.prefix&&(d=E.prefix+":"+h);break}}}t.push("<",d);for(var k=0;k<l;k++){// add namespaces for attributes
var C=o.item(k);"xmlns"==C.prefix?s.push({prefix:C.localName,namespace:C.value}):"xmlns"==C.nodeName&&s.push({prefix:"",namespace:C.value})}for(var k=0;k<l;k++){var C=o.item(k);if(ef(C,i,s)){var x=C.prefix||"",D=C.namespaceURI;eg(t,x?"xmlns:"+x:"xmlns",D),s.push({prefix:x,namespace:D})}ey(C,t,i,r,s)}// add namespace for current node
if(h===d&&ef(e,i,s)){var x=e.prefix||"",D=e.namespaceURI;eg(t,x?"xmlns:"+x:"xmlns",D),s.push({prefix:x,namespace:D})}if(u||i&&!/^(?:meta|link|img|br|hr|input)$/i.test(h)){//if is cdata child node
if(t.push(">"),i&&/^script$/i.test(h))for(;u;)u.data?t.push(u.data):ey(u,t,i,r,s.slice()),u=u.nextSibling;else for(;u;)ey(u,t,i,r,s.slice()),u=u.nextSibling;t.push("</",d,">")}else t.push("/>");// remove added visible namespaces
//visibleNamespaces.length = startVisibleNamespaces;
return;case T:case w:for(var u=e.firstChild;u;)ey(u,t,i,r,s.slice()),u=u.nextSibling;return;case m:return eg(t,e.name,e.value);case f:/**
		 * The ampersand character (&) and the left angle bracket (<) must not appear in their literal form,
		 * except when used as markup delimiters, or within a comment, a processing instruction, or a CDATA section.
		 * If they are needed elsewhere, they must be escaped using either numeric character references or the strings
		 * `&amp;` and `&lt;` respectively.
		 * The right angle bracket (>) may be represented using the string " &gt; ", and must, for compatibility,
		 * be escaped using either `&gt;` or a character reference when it appears in the string `]]>` in content,
		 * when that string is not marking the end of a CDATA section.
		 *
		 * In the content of elements, character data is any string of characters
		 * which does not contain the start-delimiter of any markup
		 * and does not include the CDATA-section-close delimiter, `]]>`.
		 *
		 * @see https://www.w3.org/TR/xml/#NT-CharData
		 * @see https://w3c.github.io/DOM-Parsing/#xml-serializing-a-text-node
		 */return t.push(e.data.replace(/[<&>]/g,$));case g:return t.push("<![CDATA[",e.data,"]]>");case v:return t.push("<!--",e.data,"-->");case S:var I=e.publicId,A=e.systemId;if(t.push("<!DOCTYPE ",e.name),I)t.push(" PUBLIC ",I),A&&"."!=A&&t.push(" ",A),t.push(">");else if(A&&"."!=A)t.push(" SYSTEM ",A,">");else{var L=e.internalSubset;L&&t.push(" [",L,"]"),t.push(">")}return;case b:return t.push("<?",e.target," ",e.data,"?>");case y:return t.push("&",e.nodeName,";");//case ENTITY_NODE:
//case NOTATION_NODE:
default:t.push("??",e.nodeName)}}function e_(e,t,i){e[t]=i}C.INVALID_STATE_ERR=(D[11]="Invalid state",11),C.SYNTAX_ERR=(D[12]="Syntax error",12),C.INVALID_MODIFICATION_ERR=(D[13]="Invalid modification",13),C.NAMESPACE_ERR=(D[14]="Invalid namespace",14),C.INVALID_ACCESS_ERR=(D[15]="Invalid access",15),P.prototype=Error.prototype,h(C,P),O.prototype={/**
	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
	 * @standard level1
	 */length:0,/**
	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
	 * @standard level1
	 * @param index  unsigned long
	 *   Index into the collection.
	 * @return Node
	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index.
	 */item:function(e){return e>=0&&e<this.length?this[e]:null},toString:function(e,t){for(var i=[],r=0;r<this.length;r++)ey(this[r],i,e,t);return i.join("")},/**
	 * @private
	 * @param {function (Node):boolean} predicate
	 * @returns {Node[]}
	 */filter:function(e){return Array.prototype.filter.call(this,e)},/**
	 * @private
	 * @param {Node} item
	 * @returns {number}
	 */indexOf:function(e){return Array.prototype.indexOf.call(this,e)}},R.prototype.item=function(e){return N(this),this[e]||null},d(R,O),M.prototype={length:0,item:O.prototype.item,getNamedItem:function(e){for(//		if(key.indexOf(':')>0 || key == 'xmlns'){
//			return null;
//		}
//console.log()
var t=this.length;t--;){var i=this[t];//console.log(attr.nodeName,key)
if(i.nodeName==e)return i}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new P(L);var i=this.getNamedItem(e.nodeName);return B(this._ownerElement,this,e,i),i},/* returns Node */setNamedItemNS:function(e){var t,i=e.ownerElement;if(i&&i!=this._ownerElement)throw new P(L);return t=this.getNamedItemNS(e.namespaceURI,e.localName),B(this._ownerElement,this,e,t),t},/* returns Node */removeNamedItem:function(e){var t=this.getNamedItem(e);return F(this._ownerElement,this,t),t},//for level2
removeNamedItemNS:function(e,t){var i=this.getNamedItemNS(e,t);return F(this._ownerElement,this,i),i},getNamedItemNS:function(e,t){for(var i=this.length;i--;){var r=this[i];if(r.localName==t&&r.namespaceURI==e)return r}return null}},j.prototype={/**
	 * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given feature is supported.
	 * The different implementations fairly diverged in what kind of features were reported.
	 * The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use.
	 *
	 * @deprecated It is deprecated and modern browsers return true in all cases.
	 *
	 * @param {string} feature
	 * @param {string} [version]
	 * @returns {boolean} always true
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN
	 * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard
	 */hasFeature:function(e,t){return!0},/**
	 * Creates an XML Document object of the specified type with its document element.
	 *
	 * __It behaves slightly different from the description in the living standard__:
	 * - There is no interface/class `XMLDocument`, it returns a `Document` instance.
	 * - `contentType`, `encoding`, `mode`, `origin`, `url` fields are currently not declared.
	 * - this implementation is not validating names or qualified names
	 *   (when parsing XML strings, the SAX parser takes care of that)
	 *
	 * @param {string|null} namespaceURI
	 * @param {string} qualifiedName
	 * @param {DocumentType=null} doctype
	 * @returns {Document}
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN
	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM Level 2 Core (initial)
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument  DOM Level 2 Core
	 *
	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
	 */createDocument:function(e,t,i){var r=new V;if(r.implementation=this,r.childNodes=new O,r.doctype=i||null,i&&r.appendChild(i),t){var s=r.createElementNS(e,t);r.appendChild(s)}return r},/**
	 * Returns a doctype, with the given `qualifiedName`, `publicId`, and `systemId`.
	 *
	 * __This behavior is slightly different from the in the specs__:
	 * - this implementation is not validating names or qualified names
	 *   (when parsing XML strings, the SAX parser takes care of that)
	 *
	 * @param {string} qualifiedName
	 * @param {string} [publicId]
	 * @param {string} [systemId]
	 * @returns {DocumentType} which can either be used with `DOMImplementation.createDocument` upon document creation
	 * 				  or can be put into the document via methods like `Node.insertBefore()` or `Node.replaceChild()`
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType MDN
	 * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM Level 2 Core
	 * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living Standard
	 *
	 * @see https://dom.spec.whatwg.org/#validate-and-extract DOM: Validate and extract
	 * @see https://www.w3.org/TR/xml/#NT-NameStartChar XML Spec: Names
	 * @see https://www.w3.org/TR/xml-names/#ns-qualnames XML Namespaces: Qualified names
	 */createDocumentType:function(e,t,i){var r=new eo;return r.name=e,r.nodeName=e,r.publicId=t||"",r.systemId=i||"",r}},q.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,// Modified in DOM Level 2:
insertBefore:function(e,t){return ee(this,e,t)},replaceChild:function(e,t){ee(this,e,t,Z),t&&this.removeChild(t)},removeChild:function(e){return G(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(e){return(//
//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,
//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};
function e(t,i,r){var s=new i.constructor;for(var n in i)if(Object.prototype.hasOwnProperty.call(i,n)){var a=i[n];"object"!=typeof a&&a!=s[n]&&(s[n]=a)}switch(i.childNodes&&(s.childNodes=new O),s.ownerDocument=t,s.nodeType){case p:var o=i.attributes,l=s.attributes=new M,u=o.length;l._ownerElement=s;for(var h=0;h<u;h++)s.setAttributeNode(e(t,o.item(h),!0));break;case m:r=!0}if(r)for(var d=i.firstChild;d;)s.appendChild(e(t,d,r)),d=d.nextSibling;return s}(this.ownerDocument||this,this,e))},// Modified in DOM Level 2:
normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==f&&e.nodeType==f?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},// Introduced in DOM Level 2:
isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},// Introduced in DOM Level 2:
hasAttributes:function(){return this.attributes.length>0},/**
	 * Look up the prefix associated to the given namespace URI, starting from this node.
	 * **The default namespace declarations are ignored by this method.**
	 * See Namespace Prefix Lookup for details on the algorithm used by this method.
	 *
	 * _Note: The implementation seems to be incomplete when compared to the algorithm described in the specs._
	 *
	 * @param {string | null} namespaceURI
	 * @returns {string | null}
	 * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix
	 * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo
	 * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
	 * @see https://github.com/xmldom/xmldom/issues/322
	 */lookupPrefix:function(e){for(var t=this;t;){var i=t._nsMap;//console.dir(map)
if(i){for(var r in i)if(Object.prototype.hasOwnProperty.call(i,r)&&i[r]===e)return r}t=t.nodeType==m?t.ownerDocument:t.parentNode}return null},// Introduced in DOM Level 3:
lookupNamespaceURI:function(e){for(var t=this;t;){var i=t._nsMap;//console.dir(map)
if(i&&Object.prototype.hasOwnProperty.call(i,e))return i[e];t=t.nodeType==m?t.ownerDocument:t.parentNode}return null},// Introduced in DOM Level 3:
isDefaultNamespace:function(e){return null==this.lookupPrefix(e)}},h(c,q),h(c,q.prototype),V.prototype={//implementation : null,
nodeName:"#document",nodeType:T,/**
	 * The DocumentType node of the document.
	 *
	 * @readonly
	 * @type DocumentType
	 */doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==w){for(var i=e.firstChild;i;){var r=i.nextSibling;this.insertBefore(i,t),i=r}return e}return ee(this,e,t),e.ownerDocument=this,null===this.documentElement&&e.nodeType===p&&(this.documentElement=e),e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),G(this,e)},replaceChild:function(e,t){//raises
ee(this,e,t,Z),e.ownerDocument=this,t&&this.removeChild(t),K(e)&&(this.documentElement=e)},// Introduced in DOM Level 2:
importNode:function(e,t){return function e(t,i,r){var s;switch(i.nodeType){case p:(s=i.cloneNode(!1)).ownerDocument=t;//var attrs = node2.attributes;
//var len = attrs.length;
//for(var i=0;i<len;i++){
//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
//}
case w:break;case m:r=!0}if(s||(s=i.cloneNode(!1)),s.ownerDocument=t,s.parentNode=null,r)for(var n=i.firstChild;n;)s.appendChild(e(t,n,r)),n=n.nextSibling;return s}(this,e,t)},// Introduced in DOM Level 2:
getElementById:function(e){var t=null;return H(this.documentElement,function(i){if(i.nodeType==p&&i.getAttribute("id")==e)return t=i,!0}),t},/**
	 * The `getElementsByClassName` method of `Document` interface returns an array-like object
	 * of all child elements which have **all** of the given class name(s).
	 *
	 * Returns an empty list if `classeNames` is an empty string or only contains HTML white space characters.
	 *
	 *
	 * Warning: This is a live LiveNodeList.
	 * Changes in the DOM will reflect in the array as the changes occur.
	 * If an element selected by this array no longer qualifies for the selector,
	 * it will automatically be removed. Be aware of this for iteration purposes.
	 *
	 * @param {string} classNames is a string representing the class name(s) to match; multiple class names are separated by (ASCII-)whitespace
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
	 * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname
	 */getElementsByClassName:function(e){var t=u(e);return new R(this,function(i){var r=[];return t.length>0&&H(i.documentElement,function(s){if(s!==i&&s.nodeType===p){var n=s.getAttribute("class");// can be null if the attribute does not exist
if(n){// before splitting and iterating just compare them for the most common case
var a=e===n;if(!a){var o=u(n);a=t.every(function(e){return o&&-1!==o.indexOf(e)})}a&&r.push(s)}}}),r})},//document factory method:
createElement:function(e){var t=new et;return t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.localName=e,t.childNodes=new O,(t.attributes=new M)._ownerElement=t,t},createDocumentFragment:function(){var e=new ed;return e.ownerDocument=this,e.childNodes=new O,e},createTextNode:function(e){var t=new es;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new en;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new ea;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var i=new ec;return i.ownerDocument=this,i.tagName=i.nodeName=i.target=e,i.nodeValue=i.data=t,i},createAttribute:function(e){var t=new ei;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new eh;return t.ownerDocument=this,t.nodeName=e,t},// Introduced in DOM Level 2:
createElementNS:function(e,t){var i=new et,r=t.split(":"),s=i.attributes=new M;return i.childNodes=new O,i.ownerDocument=this,i.nodeName=t,i.tagName=t,i.namespaceURI=e,2==r.length?(i.prefix=r[0],i.localName=r[1]):i.localName=t,s._ownerElement=i,i},// Introduced in DOM Level 2:
createAttributeNS:function(e,t){var i=new ei,r=t.split(":");return i.ownerDocument=this,i.nodeName=t,i.name=t,i.namespaceURI=e,i.specified=!0,2==r.length?(i.prefix=r[0],i.localName=r[1]):i.localName=t,i}},d(V,q),et.prototype={nodeType:p,hasAttribute:function(e){return null!=this.getAttributeNode(e)},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var i=this.ownerDocument.createAttribute(e);i.value=i.nodeValue=""+t,this.setAttributeNode(i)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},//four real opeartion method
appendChild:function(e){return e.nodeType===w?this.insertBefore(e,null):(e.parentNode&&e.parentNode.removeChild(e),e.parentNode=this,e.previousSibling=this.lastChild,e.nextSibling=null,e.previousSibling?e.previousSibling.nextSibling=e:this.firstChild=e,this.lastChild=e,W(this.ownerDocument,this,e),e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){//console.log(this == oldAttr.ownerElement)
return this.attributes.removeNamedItem(e.nodeName)},//get real attribute name,and remove it by removeAttributeNode
removeAttributeNS:function(e,t){var i=this.getAttributeNodeNS(e,t);i&&this.removeAttributeNode(i)},hasAttributeNS:function(e,t){return null!=this.getAttributeNodeNS(e,t)},getAttributeNS:function(e,t){var i=this.getAttributeNodeNS(e,t);return i&&i.value||""},setAttributeNS:function(e,t,i){var r=this.ownerDocument.createAttributeNS(e,t);r.value=r.nodeValue=""+i,this.setAttributeNode(r)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new R(this,function(t){var i=[];return H(t,function(r){r!==t&&r.nodeType==p&&("*"===e||r.tagName==e)&&i.push(r)}),i})},getElementsByTagNameNS:function(e,t){return new R(this,function(i){var r=[];return H(i,function(s){s!==i&&s.nodeType===p&&("*"===e||s.namespaceURI===e)&&("*"===t||s.localName==t)&&r.push(s)}),r})}},V.prototype.getElementsByTagName=et.prototype.getElementsByTagName,V.prototype.getElementsByTagNameNS=et.prototype.getElementsByTagNameNS,d(et,q),ei.prototype.nodeType=m,d(ei,q),er.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw Error(D[I])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,i){i=this.data.substring(0,e)+i+this.data.substring(e+t),this.nodeValue=this.data=i,this.length=i.length}},d(er,q),es.prototype={nodeName:"#text",nodeType:f,splitText:function(e){var t=this.data,i=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var r=this.ownerDocument.createTextNode(i);return this.parentNode&&this.parentNode.insertBefore(r,this.nextSibling),r}},d(es,er),en.prototype={nodeName:"#comment",nodeType:v},d(en,er),ea.prototype={nodeName:"#cdata-section",nodeType:g},d(ea,er),eo.prototype.nodeType=S,d(eo,q),el.prototype.nodeType=k,d(el,q),eu.prototype.nodeType=_,d(eu,q),eh.prototype.nodeType=y,d(eh,q),ed.prototype.nodeName="#document-fragment",ed.prototype.nodeType=w,d(ed,q),ec.prototype.nodeType=b,d(ec,q),ep.prototype.serializeToString=function(e,t,i){return em.call(e,t,i)},q.prototype.toString=em;//do dynamic
try{Object.defineProperty&&(Object.defineProperty(R.prototype,"length",{get:function(){return N(this),this.$$length}}),Object.defineProperty(q.prototype,"textContent",{get:function(){return function e(t){switch(t.nodeType){case p:case w:var i=[];for(t=t.firstChild;t;)7!==t.nodeType&&8!==t.nodeType&&i.push(e(t)),t=t.nextSibling;return i.join("");default:return t.nodeValue}}(this)},set:function(e){switch(this.nodeType){case p:case w:for(;this.firstChild;)this.removeChild(this.firstChild);(e||String(e))&&this.appendChild(this.ownerDocument.createTextNode(e));break;default:this.data=e,this.value=e,this.nodeValue=e}}}),e_=function(e,t,i){//console.log(value)
e["$$"+t]=i})}catch(e){}i=j,r=ep}),x.register("2NAtx",function(e,t){E(e.exports,"XML_ENTITIES",()=>i,e=>i=e),E(e.exports,"HTML_ENTITIES",()=>r,e=>r=e);var i,r,s=x("hkG9E").freeze;i=s({amp:"&",apos:"'",gt:">",lt:"<",quot:'"'}),r=s({Aacute:"\xc1",aacute:"\xe1",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"\xc2",acirc:"\xe2",acute:"\xb4",Acy:"А",acy:"а",AElig:"\xc6",aelig:"\xe6",af:"⁡",Afr:"\uD835\uDD04",afr:"\uD835\uDD1E",Agrave:"\xc0",agrave:"\xe0",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",AMP:"&",amp:"&",And:"⩓",and:"∧",andand:"⩕",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsd:"∡",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"\xc5",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"\uD835\uDD38",aopf:"\uD835\uDD52",ap:"≈",apacir:"⩯",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"\xc5",aring:"\xe5",Ascr:"\uD835\uDC9C",ascr:"\uD835\uDCB6",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"\xc3",atilde:"\xe3",Auml:"\xc4",auml:"\xe4",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",Barwed:"⌆",barwed:"⌅",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",Because:"∵",because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"\uD835\uDD05",bfr:"\uD835\uDD1F",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"\uD835\uDD39",bopf:"\uD835\uDD53",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxDL:"╗",boxDl:"╖",boxdL:"╕",boxdl:"┐",boxDR:"╔",boxDr:"╓",boxdR:"╒",boxdr:"┌",boxH:"═",boxh:"─",boxHD:"╦",boxHd:"╤",boxhD:"╥",boxhd:"┬",boxHU:"╩",boxHu:"╧",boxhU:"╨",boxhu:"┴",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxUL:"╝",boxUl:"╜",boxuL:"╛",boxul:"┘",boxUR:"╚",boxUr:"╙",boxuR:"╘",boxur:"└",boxV:"║",boxv:"│",boxVH:"╬",boxVh:"╫",boxvH:"╪",boxvh:"┼",boxVL:"╣",boxVl:"╢",boxvL:"╡",boxvl:"┤",boxVR:"╠",boxVr:"╟",boxvR:"╞",boxvr:"├",bprime:"‵",Breve:"˘",breve:"˘",brvbar:"\xa6",Bscr:"ℬ",bscr:"\uD835\uDCB7",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsol:"\\",bsolb:"⧅",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",Cap:"⋒",cap:"∩",capand:"⩄",capbrcup:"⩉",capcap:"⩋",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"\xc7",ccedil:"\xe7",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"\xb8",Cedilla:"\xb8",cemptyv:"⦲",cent:"\xa2",CenterDot:"\xb7",centerdot:"\xb7",Cfr:"ℭ",cfr:"\uD835\uDD20",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",cir:"○",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"\xae",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",Colon:"∷",colon:":",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",Conint:"∯",conint:"∮",ContourIntegral:"∮",Copf:"ℂ",copf:"\uD835\uDD54",coprod:"∐",Coproduct:"∐",COPY:"\xa9",copy:"\xa9",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",Cross:"⨯",cross:"✗",Cscr:"\uD835\uDC9E",cscr:"\uD835\uDCB8",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",Cup:"⋓",cup:"∪",cupbrcap:"⩈",CupCap:"≍",cupcap:"⩆",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"\xa4",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",Dagger:"‡",dagger:"†",daleth:"ℸ",Darr:"↡",dArr:"⇓",darr:"↓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",DD:"ⅅ",dd:"ⅆ",ddagger:"‡",ddarr:"⇊",DDotrahd:"⤑",ddotseq:"⩷",deg:"\xb0",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"\uD835\uDD07",dfr:"\uD835\uDD21",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"\xb4",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",Diamond:"⋄",diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"\xa8",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"\xf7",divide:"\xf7",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"\uD835\uDD3B",dopf:"\uD835\uDD55",Dot:"\xa8",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"\xa8",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrow:"↓",Downarrow:"⇓",downarrow:"↓",DownArrowBar:"⤓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVector:"↽",DownLeftVectorBar:"⥖",DownRightTeeVector:"⥟",DownRightVector:"⇁",DownRightVectorBar:"⥗",DownTee:"⊤",DownTeeArrow:"↧",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"\uD835\uDC9F",dscr:"\uD835\uDCB9",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"\xc9",eacute:"\xe9",easter:"⩮",Ecaron:"Ě",ecaron:"ě",ecir:"≖",Ecirc:"\xca",ecirc:"\xea",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",eDot:"≑",edot:"ė",ee:"ⅇ",efDot:"≒",Efr:"\uD835\uDD08",efr:"\uD835\uDD22",eg:"⪚",Egrave:"\xc8",egrave:"\xe8",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp:" ",emsp13:" ",emsp14:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"\uD835\uDD3C",eopf:"\uD835\uDD56",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",Escr:"ℰ",escr:"ℯ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"\xd0",eth:"\xf0",Euml:"\xcb",euml:"\xeb",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",ExponentialE:"ⅇ",exponentiale:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"\uD835\uDD09",ffr:"\uD835\uDD23",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"\uD835\uDD3D",fopf:"\uD835\uDD57",ForAll:"∀",forall:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"\xbd",frac13:"⅓",frac14:"\xbc",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"\xbe",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",Fscr:"ℱ",fscr:"\uD835\uDCBB",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",gE:"≧",ge:"≥",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",ges:"⩾",gescc:"⪩",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"\uD835\uDD0A",gfr:"\uD835\uDD24",Gg:"⋙",gg:"≫",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gl:"≷",gla:"⪥",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gnE:"≩",gne:"⪈",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"\uD835\uDD3E",gopf:"\uD835\uDD58",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"\uD835\uDCA2",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",Gt:"≫",GT:">",gt:">",gtcc:"⪧",gtcir:"⩺",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"\xbd",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",hArr:"⇔",harr:"↔",harrcir:"⥈",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",Hfr:"ℌ",hfr:"\uD835\uDD25",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",Hopf:"ℍ",hopf:"\uD835\uDD59",horbar:"―",HorizontalLine:"─",Hscr:"ℋ",hscr:"\uD835\uDCBD",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"\xcd",iacute:"\xed",ic:"⁣",Icirc:"\xce",icirc:"\xee",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"\xa1",iff:"⇔",Ifr:"ℑ",ifr:"\uD835\uDD26",Igrave:"\xcc",igrave:"\xec",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Im:"ℑ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",imof:"⊷",imped:"Ƶ",Implies:"⇒",in:"∈",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",Int:"∬",int:"∫",intcal:"⊺",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"\uD835\uDD40",iopf:"\uD835\uDD5A",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"\xbf",Iscr:"ℐ",iscr:"\uD835\uDCBE",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"\xcf",iuml:"\xef",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"\uD835\uDD0D",jfr:"\uD835\uDD27",jmath:"ȷ",Jopf:"\uD835\uDD41",jopf:"\uD835\uDD5B",Jscr:"\uD835\uDCA5",jscr:"\uD835\uDCBF",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"\uD835\uDD0E",kfr:"\uD835\uDD28",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"\uD835\uDD42",kopf:"\uD835\uDD5C",Kscr:"\uD835\uDCA6",kscr:"\uD835\uDCC0",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",Lang:"⟪",lang:"⟨",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"\xab",Larr:"↞",lArr:"⇐",larr:"←",larrb:"⇤",larrbfs:"⤟",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",lat:"⪫",lAtail:"⤛",latail:"⤙",late:"⪭",lates:"⪭︀",lBarr:"⤎",lbarr:"⤌",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",lE:"≦",le:"≤",LeftAngleBracket:"⟨",LeftArrow:"←",Leftarrow:"⇐",leftarrow:"←",LeftArrowBar:"⇤",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVector:"⇃",LeftDownVectorBar:"⥙",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrow:"↔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTee:"⊣",LeftTeeArrow:"↤",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangle:"⊲",LeftTriangleBar:"⧏",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVector:"↿",LeftUpVectorBar:"⥘",LeftVector:"↼",LeftVectorBar:"⥒",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",les:"⩽",lescc:"⪨",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"\uD835\uDD0F",lfr:"\uD835\uDD29",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",Ll:"⋘",ll:"≪",llarr:"⇇",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoust:"⎰",lmoustache:"⎰",lnap:"⪉",lnapprox:"⪉",lnE:"≨",lne:"⪇",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftarrow:"⟵",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longleftrightarrow:"⟷",longmapsto:"⟼",LongRightArrow:"⟶",Longrightarrow:"⟹",longrightarrow:"⟶",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"\uD835\uDD43",lopf:"\uD835\uDD5D",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",Lscr:"ℒ",lscr:"\uD835\uDCC1",Lsh:"↰",lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",Lt:"≪",LT:"<",lt:"<",ltcc:"⪦",ltcir:"⩹",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"\xaf",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"\uD835\uDD10",mfr:"\uD835\uDD2A",mho:"℧",micro:"\xb5",mid:"∣",midast:"*",midcir:"⫰",middot:"\xb7",minus:"−",minusb:"⊟",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"\uD835\uDD44",mopf:"\uD835\uDD5E",mp:"∓",Mscr:"ℳ",mscr:"\uD835\uDCC2",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natur:"♮",natural:"♮",naturals:"ℕ",nbsp:"\xa0",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",ne:"≠",nearhk:"⤤",neArr:"⇗",nearr:"↗",nearrow:"↗",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"\uD835\uDD11",nfr:"\uD835\uDD2B",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nhArr:"⇎",nharr:"↮",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlArr:"⇍",nlarr:"↚",nldr:"‥",nlE:"≦̸",nle:"≰",nLeftarrow:"⇍",nleftarrow:"↚",nLeftrightarrow:"⇎",nleftrightarrow:"↮",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:"\xa0",Nopf:"ℕ",nopf:"\uD835\uDD5F",Not:"⫬",not:"\xac",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangle:"⋪",NotLeftTriangleBar:"⧏̸",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangle:"⋫",NotRightTriangleBar:"⧐̸",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",npar:"∦",nparallel:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",npre:"⪯̸",nprec:"⊀",npreceq:"⪯̸",nrArr:"⇏",nrarr:"↛",nrarrc:"⤳̸",nrarrw:"↝̸",nRightarrow:"⇏",nrightarrow:"↛",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"\uD835\uDCA9",nscr:"\uD835\uDCC3",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"\xd1",ntilde:"\xf1",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nVDash:"⊯",nVdash:"⊮",nvDash:"⊭",nvdash:"⊬",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwArr:"⇖",nwarr:"↖",nwarrow:"↖",nwnear:"⤧",Oacute:"\xd3",oacute:"\xf3",oast:"⊛",ocir:"⊚",Ocirc:"\xd4",ocirc:"\xf4",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"\uD835\uDD12",ofr:"\uD835\uDD2C",ogon:"˛",Ograve:"\xd2",ograve:"\xf2",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"\uD835\uDD46",oopf:"\uD835\uDD60",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",Or:"⩔",or:"∨",orarr:"↻",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"\xaa",ordm:"\xba",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"\uD835\uDCAA",oscr:"ℴ",Oslash:"\xd8",oslash:"\xf8",osol:"⊘",Otilde:"\xd5",otilde:"\xf5",Otimes:"⨷",otimes:"⊗",otimesas:"⨶",Ouml:"\xd6",ouml:"\xf6",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",par:"∥",para:"\xb6",parallel:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"\uD835\uDD13",pfr:"\uD835\uDD2D",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plus:"+",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"\xb1",plusmn:"\xb1",plussim:"⨦",plustwo:"⨧",pm:"\xb1",Poincareplane:"ℌ",pointint:"⨕",Popf:"ℙ",popf:"\uD835\uDD61",pound:"\xa3",Pr:"⪻",pr:"≺",prap:"⪷",prcue:"≼",prE:"⪳",pre:"⪯",prec:"≺",precapprox:"⪷",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",precsim:"≾",Prime:"″",prime:"′",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportion:"∷",Proportional:"∝",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"\uD835\uDCAB",pscr:"\uD835\uDCC5",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"\uD835\uDD14",qfr:"\uD835\uDD2E",qint:"⨌",Qopf:"ℚ",qopf:"\uD835\uDD62",qprime:"⁗",Qscr:"\uD835\uDCAC",qscr:"\uD835\uDCC6",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",QUOT:'"',quot:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",Rang:"⟫",rang:"⟩",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"\xbb",Rarr:"↠",rArr:"⇒",rarr:"→",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",rAtail:"⤜",ratail:"⤚",ratio:"∶",rationals:"ℚ",RBarr:"⤐",rBarr:"⤏",rbarr:"⤍",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",Re:"ℜ",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",rect:"▭",REG:"\xae",reg:"\xae",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",Rfr:"ℜ",rfr:"\uD835\uDD2F",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrow:"→",Rightarrow:"⇒",rightarrow:"→",RightArrowBar:"⇥",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVector:"⇂",RightDownVectorBar:"⥕",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTee:"⊢",RightTeeArrow:"↦",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangle:"⊳",RightTriangleBar:"⧐",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVector:"↾",RightUpVectorBar:"⥔",RightVector:"⇀",RightVectorBar:"⥓",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoust:"⎱",rmoustache:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",Ropf:"ℝ",ropf:"\uD835\uDD63",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",Rscr:"ℛ",rscr:"\uD835\uDCC7",Rsh:"↱",rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",Sc:"⪼",sc:"≻",scap:"⪸",Scaron:"Š",scaron:"š",sccue:"≽",scE:"⪴",sce:"⪰",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdot:"⋅",sdotb:"⊡",sdote:"⩦",searhk:"⤥",seArr:"⇘",searr:"↘",searrow:"↘",sect:"\xa7",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"\uD835\uDD16",sfr:"\uD835\uDD30",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"\xad",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",sol:"/",solb:"⧄",solbar:"⌿",Sopf:"\uD835\uDD4A",sopf:"\uD835\uDD64",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",squ:"□",Square:"□",square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squf:"▪",srarr:"→",Sscr:"\uD835\uDCAE",sscr:"\uD835\uDCC8",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"\xaf",Sub:"⋐",sub:"⊂",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",Subset:"⋐",subset:"⊂",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succ:"≻",succapprox:"⪸",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",Sum:"∑",sum:"∑",sung:"♪",Sup:"⋑",sup:"⊃",sup1:"\xb9",sup2:"\xb2",sup3:"\xb3",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",Supset:"⋑",supset:"⊃",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swArr:"⇙",swarr:"↙",swarrow:"↙",swnwar:"⤪",szlig:"\xdf",Tab:"	",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"\uD835\uDD17",tfr:"\uD835\uDD31",there4:"∴",Therefore:"∴",therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",thinsp:" ",ThinSpace:" ",thkap:"≈",thksim:"∼",THORN:"\xde",thorn:"\xfe",Tilde:"∼",tilde:"˜",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",times:"\xd7",timesb:"⊠",timesbar:"⨱",timesd:"⨰",tint:"∭",toea:"⤨",top:"⊤",topbot:"⌶",topcir:"⫱",Topf:"\uD835\uDD4B",topf:"\uD835\uDD65",topfork:"⫚",tosa:"⤩",tprime:"‴",TRADE:"™",trade:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"\uD835\uDCAF",tscr:"\uD835\uDCC9",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"\xda",uacute:"\xfa",Uarr:"↟",uArr:"⇑",uarr:"↑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"\xdb",ucirc:"\xfb",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"\uD835\uDD18",ufr:"\uD835\uDD32",Ugrave:"\xd9",ugrave:"\xf9",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"\xa8",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"\uD835\uDD4C",uopf:"\uD835\uDD66",UpArrow:"↑",Uparrow:"⇑",uparrow:"↑",UpArrowBar:"⤒",UpArrowDownArrow:"⇅",UpDownArrow:"↕",Updownarrow:"⇕",updownarrow:"↕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",Upsi:"ϒ",upsi:"υ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTee:"⊥",UpTeeArrow:"↥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"\uD835\uDCB0",uscr:"\uD835\uDCCA",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"\xdc",uuml:"\xfc",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",vArr:"⇕",varr:"↕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",Vbar:"⫫",vBar:"⫨",vBarv:"⫩",Vcy:"В",vcy:"в",VDash:"⊫",Vdash:"⊩",vDash:"⊨",vdash:"⊢",Vdashl:"⫦",Vee:"⋁",vee:"∨",veebar:"⊻",veeeq:"≚",vellip:"⋮",Verbar:"‖",verbar:"|",Vert:"‖",vert:"|",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"\uD835\uDD19",vfr:"\uD835\uDD33",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"\uD835\uDD4D",vopf:"\uD835\uDD67",vprop:"∝",vrtri:"⊳",Vscr:"\uD835\uDCB1",vscr:"\uD835\uDCCB",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",Wedge:"⋀",wedge:"∧",wedgeq:"≙",weierp:"℘",Wfr:"\uD835\uDD1A",wfr:"\uD835\uDD34",Wopf:"\uD835\uDD4E",wopf:"\uD835\uDD68",wp:"℘",wr:"≀",wreath:"≀",Wscr:"\uD835\uDCB2",wscr:"\uD835\uDCCC",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"\uD835\uDD1B",xfr:"\uD835\uDD35",xhArr:"⟺",xharr:"⟷",Xi:"Ξ",xi:"ξ",xlArr:"⟸",xlarr:"⟵",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"\uD835\uDD4F",xopf:"\uD835\uDD69",xoplus:"⨁",xotime:"⨂",xrArr:"⟹",xrarr:"⟶",Xscr:"\uD835\uDCB3",xscr:"\uD835\uDCCD",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"\xdd",yacute:"\xfd",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"\xa5",Yfr:"\uD835\uDD1C",yfr:"\uD835\uDD36",YIcy:"Ї",yicy:"ї",Yopf:"\uD835\uDD50",yopf:"\uD835\uDD6A",Yscr:"\uD835\uDCB4",yscr:"\uD835\uDCCE",YUcy:"Ю",yucy:"ю",Yuml:"Ÿ",yuml:"\xff",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",Zfr:"ℨ",zfr:"\uD835\uDD37",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",Zopf:"ℤ",zopf:"\uD835\uDD6B",Zscr:"\uD835\uDCB5",zscr:"\uD835\uDCCF",zwj:"‍",zwnj:"‌"})}),x.register("1fO4L",function(e,t){E(e.exports,"XMLReader",()=>i,e=>i=e),E(e.exports,"ParseError",()=>r,e=>r=e);var i,r,s=x("hkG9E").NAMESPACE,n=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]///\u10000-\uEFFFF
,a=RegExp("[\\-\\.0-9"+n.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),o=RegExp("^"+n.source+a.source+"*(?::"+n.source+a.source+"*)?$");/**
 * Creates an error that will not be caught by XMLReader aka the SAX parser.
 *
 * @param {string} message
 * @param {any?} locator Optional, can provide details about the location in the source
 * @constructor
 */function l(e,t){this.message=e,this.locator=t,Error.captureStackTrace&&Error.captureStackTrace(this,l)}function u(){}function h(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}/**
 * @return true if has new namespace define
 */function d(e,t,i){for(var r=e.tagName,n=null,a=e.length;a--;){var o=e[a],l=o.qName,u=o.value,h=l.indexOf(":");if(h>0)var d=o.prefix=l.slice(0,h),p=l.slice(h+1),m="xmlns"===d&&p;else p=l,d=null,m="xmlns"===l&&"";//can not set prefix,because prefix !== ''
o.localName=p,!1!==m&&(null==n&&(n={},//console.log(currentNSMap,0)
c(i,i={})),i[m]=n[m]=u,o.uri=s.XMLNS,t.startPrefixMapping(m,u))}for(var a=e.length;a--;){var d=(o=e[a]).prefix;d&&("xml"===d&&(o.uri=s.XML),"xmlns"!==d&&(o.uri=i[d||""]))}var h=r.indexOf(":");h>0?(d=e.prefix=r.slice(0,h),p=e.localName=r.slice(h+1)):(d=null,p=e.localName=r);//no prefix element has default namespace
var f=e.uri=i[d||""];//endPrefixMapping and startPrefixMapping have not any help for dom builder
//localNSMap = null
if(t.startElement(f,p,r,e),!e.closed)//parseStack.push(el);
return e.currentNSMap=i,e.localNSMap=n,!0;if(t.endElement(f,p,r),n)for(d in n)Object.prototype.hasOwnProperty.call(n,d)&&t.endPrefixMapping(d)}function c(e,t){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])}function p(){this.attributeNames={}}l.prototype=Error(),l.prototype.name=l.name,u.prototype={parse:function(e,t,i){var r=this.domBuilder;r.startDocument(),c(t,t={}),function(e,t,i,r,n){function a(e){var t,r=e.slice(1,-1);return Object.hasOwnProperty.call(i,r)?i[r]:"#"===r.charAt(0)?// String.prototype.fromCharCode does not supports
// > 2 bytes unicode chars directly
(t=parseInt(r.substr(1).replace("x","0x")))>65535?String.fromCharCode(55296+((t-=65536)>>10),56320+(1023&t)):String.fromCharCode(t):(n.error("entity not found:"+e),e)}function o(t){if(t>b){var i=e.substring(b,t).replace(/&#?\w+;/g,a);g&&u(b),r.characters(i,0,t-b),b=t}}function u(t,i){for(;t>=m&&(i=f.exec(e));)m=(c=i.index)+i[0].length,g.lineNumber++;g.columnNumber=t-c+1}for(var c=0,m=0,f=/.*(?:\r\n?|\n)|.*$/g,g=r.locator,y=[{currentNSMap:t}],_={},b=0;;){try{var v=e.indexOf("<",b);if(v<0){if(!e.substr(b).match(/^\s*$/)){var T=r.doc,S=T.createTextNode(e.substr(b));T.appendChild(S),r.currentElement=S}return}switch(v>b&&o(v),e.charAt(v+1)){case"/":var E=e.indexOf(">",v+3),w=e.substring(v+2,E).replace(/[ \t\n\r]+$/g,""),k=y.pop();E<0?(w=e.substring(v+2).replace(/[\s<].*/,""),n.error("end tag name: "+w+" is not complete:"+k.tagName),E=v+1+w.length):w.match(/\s</)&&(w=w.replace(/[\s<].*/,""),n.error("end tag name: "+w+" maybe not complete"),E=v+1+w.length);var C=k.localNSMap,x=k.tagName==w;if(x||k.tagName&&k.tagName.toLowerCase()==w.toLowerCase()){if(r.endElement(k.uri,k.localName,w),C)for(var D in C)Object.prototype.hasOwnProperty.call(C,D)&&r.endPrefixMapping(D);x||n.fatalError("end tag name: "+w+" is not match the current start tagName:"+k.tagName)}else y.push(k);E++;break;// end elment
case"?":g&&u(v),E=function(e,t,i){var r=e.indexOf("?>",t);if(r){var s=e.substring(t,r).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);if(s)return s[0].length,i.processingInstruction(s[1],s[2]),r+2}return -1}(e,v,r);break;case"!":g&&u(v),E=function(e,t,i,r){if("-"===e.charAt(t+2)){if("-"===e.charAt(t+3)){var s=e.indexOf("-->",t+4);//append comment source.substring(4,end)//<!--
if(s>t)return i.comment(e,t+4,s-t-4),s+3;r.error("Unclosed comment")}}else{if("CDATA["==e.substr(t+3,6)){var s=e.indexOf("]]>",t+9);return i.startCDATA(),i.characters(e,t+9,s-t-9),i.endCDATA(),s+3}//<!DOCTYPE
//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)
var n=function(e,t){var i,r=[],s=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;for(s.lastIndex=t,s.exec(e);i=s.exec(e);)if(r.push(i),i[1])return r}(e,t),a=n.length;if(a>1&&/!doctype/i.test(n[0][0])){var o=n[1][0],l=!1,u=!1;a>3&&(/^public$/i.test(n[2][0])?(l=n[3][0],u=a>4&&n[4][0]):/^system$/i.test(n[2][0])&&(u=n[3][0]));var h=n[a-1];return i.startDTD(o,l,u),i.endDTD(),h.index+h[0].length}}return -1}(e,v,r,n);break;default:g&&u(v);var I=new p,A=y[y.length-1].currentNSMap,E=/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */function(e,t,i,r,n,a){/**
	 * @param {string} qname
	 * @param {string} value
	 * @param {number} startIndex
	 */function o(e,t,r){i.attributeNames.hasOwnProperty(e)&&a.fatalError("Attribute "+e+" redefined"),i.addValue(e,// since the xmldom sax parser does not "interpret" DTD the following is not implemented:
// - recursive replacement of (DTD) entity references
// - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA
t.replace(/[\t\n\r]/g," ").replace(/&#?\w+;/g,n),r)}for(var l,u,h=++t,d=0;;){var c=e.charAt(h);switch(c){case"=":if(1===d)l=e.slice(t,h),d=3;else if(2===d)d=3;else throw Error("attribute equal must after attrName");// No known test case
break;case"'":case'"':if(3===d||1===d//|| s == S_ATTR_SPACE
){if(1===d&&(a.warning('attribute value must after "="'),l=e.slice(t,h)),t=h+1,(h=e.indexOf(c,t))>0)o(l,u=e.slice(t,h),t-1),d=5;else throw Error("attribute value no end '"+c+"' match")}else if(4==d)o(l,u=e.slice(t,h),t),a.warning('attribute "'+l+'" missed start quot('+c+")!!"),t=h+1,d=5;else throw Error('attribute value must after "="');// No known test case
break;case"/":switch(d){case 0:i.setTagName(e.slice(t,h));case 5:case 6:case 7:d=7,i.closed=!0;case 4:case 1:break;case 2:i.closed=!0;break;//case S_EQ:
default:throw Error("attribute invalid close char('/')")// No known test case
}break;case"":return a.error("unexpected end of input"),0==d&&i.setTagName(e.slice(t,h)),h;case">":switch(d){case 0:i.setTagName(e.slice(t,h));case 5:case 6:case 7:break;//normal
case 4:case 1:"/"===(u=e.slice(t,h)).slice(-1)&&(i.closed=!0,u=u.slice(0,-1));case 2:2===d&&(u=l),4==d?(a.warning('attribute "'+u+'" missed quot(")!'),o(l,u,t)):(s.isHTML(r[""])&&u.match(/^(?:disabled|checked|selected)$/i)||a.warning('attribute "'+u+'" missed value!! "'+u+'" instead!!'),o(u,u,t));break;case 3:throw Error("attribute value missed!!")}//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))
return h;/*xml space '\x20' | #x9 | #xD | #xA; */case"\x80":c=" ";default:if(c<=" ")switch(d){case 0:i.setTagName(e.slice(t,h)),d=6;break;case 1:l=e.slice(t,h),d=2;break;case 4:var u=e.slice(t,h);a.warning('attribute "'+u+'" missed quot(")!!'),o(l,u,t);case 5:d=6}else //S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE
switch(d){//case S_TAG:void();break;
//case S_ATTR:void();break;
//case S_ATTR_NOQUOT_VALUE:void();break;
case 2:i.tagName,s.isHTML(r[""])&&l.match(/^(?:disabled|checked|selected)$/i)||a.warning('attribute "'+l+'" missed value!! "'+l+'" instead2!!'),o(l,l,t),t=h,d=1;break;case 5:a.warning('attribute space is required"'+l+'"!!');case 6:d=1,t=h;break;case 3:d=4,t=h;break;case 7:throw Error("elements closed character '/' and '>' must be connected to")}}//end outer switch
//console.log('p++',p)
h++}}(e,v,I,A,a,n),L=I.length;if(!I.closed&&function(e,t,i,r){//if(tagName in closeMap){
var s=r[i];return null==s&&(//console.log(tagName)
(s=e.lastIndexOf("</"+i+">"))<t&&(s=e.lastIndexOf("</"+i)),r[i]=s),s<t;//}
}(e,E,I.tagName,_)&&(I.closed=!0,i.nbsp||n.warning("unclosed xml attribute")),g&&L){//try{//attribute position fixed
for(var P=h(g,{}),O=0;O<L;O++){var R=I[O];u(R.offset),R.locator=h(g,{})}r.locator=P,d(I,r,A)&&y.push(I),r.locator=g}else d(I,r,A)&&y.push(I);s.isHTML(I.uri)&&!I.closed?E=function(e,t,i,r,s){if(/^(?:script|textarea)$/i.test(i)){var n=e.indexOf("</"+i+">",t),a=e.substring(t+1,n);if(/[&<]/.test(a))return/^script$/i.test(i)||(a=a.replace(/&#?\w+;/g,r)),//if(!/\]\]>/.test(text)){
//lexHandler.startCDATA();
s.characters(a,0,a.length),n}return t+1}(e,E,I.tagName,a,r):E++}}catch(e){if(e instanceof l)throw e;n.error("element parse error: "+e),E=-1}E>b?b=E:o(Math.max(v,b)+1)}}(e,t,i,r,this.errorHandler),r.endDocument()}},p.prototype={setTagName:function(e){if(!o.test(e))throw Error("invalid tagName:"+e);this.tagName=e},addValue:function(e,t,i){if(!o.test(e))throw Error("invalid attribute:"+e);this.attributeNames[e]=this.length,this[this.length++]={qName:e,value:t,offset:i}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}},i=u,r=l});var D={};D=JSON.parse('{"name":"@srgssr/pillarbox-web","description":"Pillarbox is the modern SRG SSR player","version":"0.6.9","main":"dist/pillarbox.js","targets":{"github-page":{"publicUrl":"./","source":["demo/index.html"],"isLibrary":false,"outputFormat":"esmodule"},"main":{"source":"src/pillarbox.js"}},"directories":{"doc":"docs"},"scripts":{"build":"parcel build --target main","eslint":"eslint --ext .js src","github:page":"parcel build --target github-page","outdated":"npm outdated","release:ci":"semantic-release","start":"parcel -p 6969 demo/*.html","stylelint":"stylelint **/*.scss --custom-syntax","stylelint:fix":"stylelint **/*.scss --fix","test":"jest --verbose","test:watch":"jest --watch --verbose"},"keywords":[],"author":"","license":"MIT","bugs":{"url":"https://github.com/SRGSSR/pillarbox-web/issues"},"repository":{"type":"git","url":"git+https://github.com/SRGSSR/pillarbox-web.git"},"publishConfig":{"registry":"https://npm.pkg.github.com/","access":"public"},"devDependencies":{"@babel/core":"^7.22.5","@babel/preset-env":"^7.22.5","@commitlint/cli":"^17.6.5","@commitlint/config-conventional":"^17.6.5","@parcel/transformer-sass":"^2.9.2","@semantic-release/changelog":"^6.0.3","@semantic-release/git":"^10.0.1","@semantic-release/github":"^9.0.3","@semantic-release/npm":"^10.0.4","@types/jest":"^29.5.3","babel-jest":"^29.5.0","buffer":"^6.0.3","eslint":"^8.43.0","eslint-plugin-jest":"^27.2.2","husky":"^8.0.3","jest":"^29.5.0","jest-environment-jsdom":"^29.6.1","parcel":"^2.9.2","semantic-release":"^21.0.5","stylelint":"^15.10.1","stylelint-config-rational-order":"^0.1.2","stylelint-order":"^6.0.3"},"dependencies":{"video.js":"^8.6.1","videojs-contrib-eme":"^3.11.1"}}');/**
 * @license
 * Video.js 8.6.1 <http://videojs.com/>
 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
 * Available under Apache License Version 2.0
 * <https://github.com/videojs/video.js/blob/main/LICENSE>
 *
 * Includes vtt.js <https://github.com/mozilla/vtt.js>
 * Available under Apache License Version 2.0
 * <https://github.com/mozilla/vtt.js/blob/main/LICENSE>
 */var I=x("eDick"),A=x("7pNCM"),L=x("jZhQX"),P={};P=function(e,t){var i,r=null;try{i=JSON.parse(e,t)}catch(e){r=e}return[r,i]};var O={},I=x("eDick"),R={};function N(){return(R=N=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r])}return e}).__esModule=!0,R.default=R,N.apply(this,arguments)}(R=N).__esModule=!0,R.default=R;var M={};M=function(e){if(!e)return!1;var t=U.call(e);return"[object Function]"===t||"function"==typeof e&&"[object RegExp]"!==t||"undefined"!=typeof window&&// IE8 and below
(e===window.setTimeout||e===window.alert||e===window.confirm||e===window.prompt)};var U=Object.prototype.toString;j.httpHandler=x("1WntU");/**
 * @license
 * slighly modified parse-headers 2.0.2 <https://github.com/kesla/parse-headers/>
 * Copyright (c) 2014 David Björklund
 * Available under the MIT license
 * <https://github.com/kesla/parse-headers/blob/master/LICENCE>
 */var B=function(e){var t={};return e&&e.trim().split("\n").forEach(function(e){var i=e.indexOf(":"),r=e.slice(0,i).trim().toLowerCase(),s=e.slice(i+1).trim();void 0===t[r]?t[r]=s:Array.isArray(t[r])?t[r].push(s):t[r]=[t[r],s]}),t};function F(e,t,i){var r=e;return M(t)?(i=t,"string"==typeof e&&(r={uri:e})):r=R({},t,{uri:e}),r.callback=i,r}function j(e,t,i){return q(t=F(e,t,i))}function q(e){if(void 0===e.callback)throw Error("callback argument missing");var t,i,r,s=!1,n=function(t,i,r){s||(s=!0,e.callback(t,i,r))};function a(e){return clearTimeout(r),e instanceof Error||(e=Error(""+(e||"Unknown XMLHttpRequest Error"))),e.statusCode=0,n(e,f)}// will load the data & process the response in a special response object
function o(){if(!i){clearTimeout(r);var t,s=f,a=null;return 0!==(t=e.useXDR&&void 0===l.status?200:1223===l.status?204:l.status)?(s={body:function(){// Chrome with requestType=blob throws errors arround when even testing access to responseText
var e=void 0;if(e=l.response?l.response:l.responseText||function(e){// xhr.responseXML will throw Exception "InvalidStateError" or "DOMException"
// See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.
try{if("document"===e.responseType)return e.responseXML;var t=e.responseXML&&"parsererror"===e.responseXML.documentElement.nodeName;if(""===e.responseType&&!t)return e.responseXML}catch(e){}return null}(l),m)try{e=JSON.parse(e)}catch(e){}return e}(),statusCode:t,method:h,headers:{},url:u,rawRequest:l},l.getAllResponseHeaders&&(s.headers=B(l.getAllResponseHeaders()))):a=Error("Internal XMLHttpRequest Error"),n(a,s,s.body)}}var l=e.xhr||null;l||(l=e.cors||e.useXDR?new j.XDomainRequest:new j.XMLHttpRequest);var u=l.url=e.uri||e.url,h=l.method=e.method||"GET",d=e.body||e.data,c=l.headers=e.headers||{},p=!!e.sync,m=!1,f={body:void 0,headers:{},statusCode:0,method:h,url:u,rawRequest:l};if("json"in e&&!1!==e.json&&(m=!0,c.accept||c.Accept||(c.Accept="application/json"),"GET"!==h&&"HEAD"!==h&&(c["content-type"]||c["Content-Type"]||(c["Content-Type"]="application/json"),d=JSON.stringify(!0===e.json?d:e.json))),l.onreadystatechange=function(){4===l.readyState&&setTimeout(o,0)},l.onload=o,l.onerror=a,l.onprogress=function(){},l.onabort=function(){i=!0},l.ontimeout=a,l.open(h,u,!p,e.username,e.password),p||(l.withCredentials=!!e.withCredentials),!p&&e.timeout>0&&(r=setTimeout(function(){if(!i){i=!0,l.abort("timeout");var e=Error("XMLHttpRequest timeout");e.code="ETIMEDOUT",a(e)}},e.timeout)),l.setRequestHeader)for(t in c)c.hasOwnProperty(t)&&l.setRequestHeader(t,c[t]);else if(e.headers&&!function(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}(e.headers))throw Error("Headers cannot be set on an XDomainRequest object");return"responseType"in e&&(l.responseType=e.responseType),"beforeSend"in e&&"function"==typeof e.beforeSend&&e.beforeSend(l),// Microsoft Edge browser sends "undefined" when send is called with undefined value.
// XMLHttpRequest spec says to pass null as body to indicate no body
// See https://github.com/naugtur/xhr/issues/100.
l.send(d||null),l}(O=j).default=j,j.XMLHttpRequest=I.XMLHttpRequest||function(){},j.XDomainRequest="withCredentials"in new j.XMLHttpRequest?j.XMLHttpRequest:I.XDomainRequest,function(e,t){for(var i=0;i<e.length;i++)t(e[i])}(["get","put","post","patch","head","delete"],function(e){j["delete"===e?"del":e]=function(t,i,r){return(i=F(t,i,r)).method=e.toUpperCase(),q(i)}});var $={},I=x("eDick"),H=$={WebVTT:x("65ElS"),VTTCue:x("aWh86"),VTTRegion:x("f8lRN")};I.vttjs=H,I.WebVTT=H.WebVTT;var V=H.VTTCue,z=H.VTTRegion,W=I.VTTCue,G=I.VTTRegion;H.shim=function(){I.VTTCue=V,I.VTTRegion=z},H.restore=function(){I.VTTCue=W,I.VTTRegion=G},I.VTTCue||H.shim();var X={};l=/^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/,u=/^(?=([^\/?#]*))\1([^]*)$/,h=/(?:\/|^)\.(?=\/)/g,d=/(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g,X=c={// If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
// E.g
// With opts.alwaysNormalize = false (default, spec compliant)
// http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
// With opts.alwaysNormalize = true (not spec compliant)
// http://a.com/b/cd + /e/f/../g => http://a.com/e/g
buildAbsoluteURL:function(e,t,i){if(i=i||{},// remove any remaining space and CRLF
e=e.trim(),!(t=t.trim())){// 2a) If the embedded URL is entirely empty, it inherits the
// entire base URL (i.e., is set equal to the base URL)
// and we are done.
if(!i.alwaysNormalize)return e;var r=c.parseURL(e);if(!r)throw Error("Error trying to parse base URL.");return r.path=c.normalizePath(r.path),c.buildURLFromParts(r)}var s=c.parseURL(t);if(!s)throw Error("Error trying to parse relative URL.");if(s.scheme)return(// 2b) If the embedded URL starts with a scheme name, it is
// interpreted as an absolute URL and we are done.
i.alwaysNormalize?(s.path=c.normalizePath(s.path),c.buildURLFromParts(s)):t);var n=c.parseURL(e);if(!n)throw Error("Error trying to parse base URL.");if(!n.netLoc&&n.path&&"/"!==n.path[0]){// If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
// This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
var a=u.exec(n.path);n.netLoc=a[1],n.path=a[2]}n.netLoc&&!n.path&&(n.path="/");var o={// 2c) Otherwise, the embedded URL inherits the scheme of
// the base URL.
scheme:n.scheme,netLoc:s.netLoc,path:null,params:s.params,query:s.query,fragment:s.fragment};if(!s.netLoc&&(// 3) If the embedded URL's <net_loc> is non-empty, we skip to
// Step 7.  Otherwise, the embedded URL inherits the <net_loc>
// (if any) of the base URL.
o.netLoc=n.netLoc,"/"!==s.path[0])){if(s.path){// 6) The last segment of the base URL's path (anything
// following the rightmost slash "/", or the entire path if no
// slash is present) is removed and the embedded URL's path is
// appended in its place.
var l=n.path,h=l.substring(0,l.lastIndexOf("/")+1)+s.path;o.path=c.normalizePath(h)}else // 5) If the embedded URL path is empty (and not preceded by a
// slash), then the embedded URL inherits the base URL path
o.path=n.path,s.params||(o.params=n.params,s.query||(o.query=n.query))}return null===o.path&&(o.path=i.alwaysNormalize?c.normalizePath(s.path):s.path),c.buildURLFromParts(o)},parseURL:function(e){var t=l.exec(e);return t?{scheme:t[1]||"",netLoc:t[2]||"",path:t[3]||"",params:t[4]||"",query:t[5]||"",fragment:t[6]||""}:null},normalizePath:function(e){// 6c) All occurrences of "<segment>/../", where <segment> is a
// complete path segment not equal to "..", are removed.
// Removal of these path segments is performed iteratively,
// removing the leftmost matching pattern on each iteration,
// until no matching pattern remains.
// 6d) If the path ends with "<segment>/..", where <segment> is a
// complete path segment not equal to "..", that
// "<segment>/.." is removed.
for(// The following operations are
// then applied, in order, to the new path:
// 6a) All occurrences of "./", where "." is a complete path
// segment, are removed.
// 6b) If the path ends with "." as a complete path segment,
// that "." is removed.
e=e.split("").reverse().join("").replace(h,"");e.length!==(e=e.replace(d,"")).length;);return e.split("").reverse().join("")},buildURLFromParts:function(e){return e.scheme+e.netLoc+e.path+e.params+e.query+e.fragment}};var I=x("eDick"),K="http://example.com",Y=/*#__PURE__*/function(){function e(){this.listeners={}}/**
   * Add a listener for a specified event type.
   *
   * @param {string} type the event name
   * @param {Function} listener the callback to be invoked when an event of
   * the specified type occurs
   */var t=e.prototype;return t.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)}/**
   * Remove a listener for a specified event type.
   *
   * @param {string} type the event name
   * @param {Function} listener  a function previously registered for this
   * type of event through `on`
   * @return {boolean} if we could turn it off or not
   */,t.off=function(e,t){if(!this.listeners[e])return!1;var i=this.listeners[e].indexOf(t);// TODO: which is better?
return(// In Video.js we slice listener functions
// on trigger so that it does not mess up the order
// while we loop through.
//
// Here we slice on off so that the loop in trigger
// can continue using it's old reference to loop without
// messing up the order.
this.listeners[e]=this.listeners[e].slice(0),this.listeners[e].splice(i,1),i>-1)}/**
   * Trigger an event of the specified type on this stream. Any additional
   * arguments to this function are passed as parameters to event listeners.
   *
   * @param {string} type the event name
   */,t.trigger=function(e){var t=this.listeners[e];if(t){// Slicing the arguments on every invocation of this method
// can add a significant amount of overhead. Avoid the
// intermediate object creation for the common case of a
// single callback argument
if(2==arguments.length)for(var i=t.length,r=0;r<i;++r)t[r].call(this,arguments[1]);else for(var s=Array.prototype.slice.call(arguments,1),n=t.length,a=0;a<n;++a)t[a].apply(this,s)}}/**
   * Destroys the stream and cleans up.
   */,t.dispose=function(){this.listeners={}}/**
   * Forwards all `data` events on this stream to the destination stream. The
   * destination stream should provide a method `push` to receive the data
   * events as they arrive.
   *
   * @param {Stream} destination the stream that will receive all `data` events
   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
   */,t.pipe=function(e){this.on("data",function(t){e.push(t)})},e}(),I=x("eDick");p=function(e){// go through the array every three bytes, we'll deal with trailing stuff later
for(var t,i=e.length,r=i%3// if we have 1 byte left, pad 2 bytes
,s=[],n=0,a=i-r;n<a;n+=16383// must be multiple of 3
)s.push(function(e,t,i){for(var r,s=[],n=t;n<i;n+=3)s.push(Q[(r=(e[n]<<16&16711680)+(e[n+1]<<8&65280)+(255&e[n+2]))>>18&63]+Q[r>>12&63]+Q[r>>6&63]+Q[63&r]);return s.join("")}(e,n,n+16383>a?a:n+16383));return 1===r?s.push(Q[(t=e[i-1])>>2]+Q[t<<4&63]+"=="):2===r&&s.push(Q[(t=(e[i-2]<<8)+e[i-1])>>10]+Q[t>>4&63]+Q[t<<2&63]+"="),s.join("")};for(var Q=[],J=[],Z="undefined"!=typeof Uint8Array?Uint8Array:Array,ee="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",et=0,ei=ee.length;et<ei;++et)Q[et]=ee[et],J[ee.charCodeAt(et)]=et;// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
J["-".charCodeAt(0)]=62,J["_".charCodeAt(0)]=63,m=function(e,t,i,r,s){var n,a,o=8*s-r-1,l=(1<<o)-1,u=l>>1,h=-7,d=i?s-1:0,c=i?-1:1,p=e[t+d];for(d+=c,n=p&(1<<-h)-1,p>>=-h,h+=o;h>0;n=256*n+e[t+d],d+=c,h-=8);for(a=n&(1<<-h)-1,n>>=-h,h+=r;h>0;a=256*a+e[t+d],d+=c,h-=8);if(0===n)n=1-u;else{if(n===l)return a?NaN:(p?-1:1)*(1/0);a+=Math.pow(2,r),n-=u}return(p?-1:1)*a*Math.pow(2,n-r)},f=function(e,t,i,r,s,n){var a,o,l,u=8*n-s-1,h=(1<<u)-1,d=h>>1,c=23===s?5960464477539062e-23:0,p=r?0:n-1,m=r?1:-1,f=t<0||0===t&&1/t<0?1:0;for(isNaN(t=Math.abs(t))||t===1/0?(o=isNaN(t)?1:0,a=h):(a=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-a))<1&&(a--,l*=2),a+d>=1?t+=c/l:t+=c*Math.pow(2,1-d),t*l>=2&&(a++,l/=2),a+d>=h?(o=0,a=h):a+d>=1?(o=(t*l-1)*Math.pow(2,s),a+=d):(o=t*Math.pow(2,d-1)*Math.pow(2,s),a=0));s>=8;e[i+p]=255&o,p+=m,o/=256,s-=8);for(a=a<<s|o,u+=s;u>0;e[i+p]=255&a,p+=m,a/=256,u-=8);e[i+p-m]|=128*f};const er="function"==typeof Symbol&&"function"// eslint-disable-line dot-notation
==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom")// eslint-disable-line dot-notation
:null;function es(e){if(e>2147483647)throw RangeError('The value "'+e+'" is invalid for option "size"');// Return an augmented `Uint8Array` instance
let t=new Uint8Array(e);return Object.setPrototypeOf(t,en.prototype),t}/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */function en(e,t,i){// Common case.
if("number"==typeof e){if("string"==typeof t)throw TypeError('The "string" argument must be of type string. Received type number');return el(e)}return ea(e,t,i)}function ea(e,t,i){if("string"==typeof e)return function(e,t){if(("string"!=typeof t||""===t)&&(t="utf8"),!en.isEncoding(t))throw TypeError("Unknown encoding: "+t);let i=0|ec(e,t),r=es(i),s=r.write(e,t);return s!==i&&// cause everything after the first invalid character to be ignored. (e.g.
// 'abxxcd' will be treated as 'ab')
(r=r.slice(0,s)),r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(eN(e,Uint8Array)){let t=new Uint8Array(e);return eh(t.buffer,t.byteOffset,t.byteLength)}return eu(e)}(e);if(null==e)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(eN(e,ArrayBuffer)||e&&eN(e.buffer,ArrayBuffer)||"undefined"!=typeof SharedArrayBuffer&&(eN(e,SharedArrayBuffer)||e&&eN(e.buffer,SharedArrayBuffer)))return eh(e,t,i);if("number"==typeof e)throw TypeError('The "value" argument must not be of type number. Received type number');let r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return en.from(r,t,i);let s=function(e){var t;if(en.isBuffer(e)){let t=0|ed(e.length),i=es(t);return 0===i.length||e.copy(i,0,0,t),i}return void 0!==e.length?"number"!=typeof e.length||(t=e.length)!=t// eslint-disable-line no-self-compare
?es(0):eu(e):"Buffer"===e.type&&Array.isArray(e.data)?eu(e.data):void 0}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return en.from(e[Symbol.toPrimitive]("string"),t,i);throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function eo(e){if("number"!=typeof e)throw TypeError('"size" argument must be of type number');if(e<0)throw RangeError('The value "'+e+'" is invalid for option "size"')}function el(e){return eo(e),es(e<0?0:0|ed(e))}function eu(e){let t=e.length<0?0:0|ed(e.length),i=es(t);for(let r=0;r<t;r+=1)i[r]=255&e[r];return i}function eh(e,t,i){let r;if(t<0||e.byteLength<t)throw RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(i||0))throw RangeError('"length" is outside of buffer bounds');return(// Return an augmented `Uint8Array` instance
Object.setPrototypeOf(r=void 0===t&&void 0===i?new Uint8Array(e):void 0===i?new Uint8Array(e,t):new Uint8Array(e,t,i),en.prototype),r)}function ed(e){// Note: cannot use `length < K_MAX_LENGTH` here because that fails when
// length is NaN (which is otherwise coerced to zero.)
if(e>=2147483647)throw RangeError("Attempt to allocate Buffer larger than maximum size: 0x7fffffff bytes");return 0|e}function ec(e,t){if(en.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||eN(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);let i=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===i)return 0;// Use a for loop to avoid recursion
let s=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return i;case"utf8":case"utf-8":return eP(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*i;case"hex":return i>>>1;case"base64":return eO(e).length;default:if(s)return r?-1:eP(e).length// assume utf8
;t=(""+t).toLowerCase(),s=!0}}function ep(e,t,i){let r=!1;// Return early if start > this.length. Done here to prevent potential uint32
// coercion fail below.
if((void 0===t||t<0)&&(t=0),t>this.length||((void 0===i||i>this.length)&&(i=this.length),i<=0||// Force coercion to uint32. This will also coerce falsey/NaN values to 0.
(i>>>=0)<=(t>>>=0)))return"";for(e||(e="utf8");;)switch(e){case"hex":return function(e,t,i){let r=e.length;(!t||t<0)&&(t=0),(!i||i<0||i>r)&&(i=r);let s="";for(let r=t;r<i;++r)s+=eM[e[r]];return s}(this,t,i);case"utf8":case"utf-8":return ey(this,t,i);case"ascii":return function(e,t,i){let r="";i=Math.min(e.length,i);for(let s=t;s<i;++s)r+=String.fromCharCode(127&e[s]);return r}(this,t,i);case"latin1":case"binary":return function(e,t,i){let r="";i=Math.min(e.length,i);for(let s=t;s<i;++s)r+=String.fromCharCode(e[s]);return r}(this,t,i);case"base64":var s,n;return s=t,n=i,0===s&&n===this.length?p(this):p(this.slice(s,n));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return function(e,t,i){let r=e.slice(t,i),s="";// If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
for(let e=0;e<r.length-1;e+=2)s+=String.fromCharCode(r[e]+256*r[e+1]);return s}(this,t,i);default:if(r)throw TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function em(e,t,i){let r=e[t];e[t]=e[i],e[i]=r}// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function ef(e,t,i,r,s){var n;// Empty buffer means no match
if(0===e.length)return -1;if("string"==typeof i?(r=i,i=0):i>2147483647?i=2147483647:i<-2147483648&&(i=-2147483648),(n=i=+i// Coerce to Number.
)!=n&&(i=s?0:e.length-1),i<0&&(i=e.length+i),i>=e.length){if(s)return -1;i=e.length-1}else if(i<0){if(!s)return -1;i=0}// Finally, search either indexOf (if dir is true) or lastIndexOf
if("string"==typeof t&&(t=en.from(t,r)),en.isBuffer(t))return(// Special case: looking for empty string/buffer always fails
0===t.length?-1:eg(e,t,i,r,s));if("number"==typeof t)return(t&=255// Search for a byte value [0-255]
,"function"==typeof Uint8Array.prototype.indexOf)?s?Uint8Array.prototype.indexOf.call(e,t,i):Uint8Array.prototype.lastIndexOf.call(e,t,i):eg(e,[t],i,r,s);throw TypeError("val must be string, number or Buffer")}function eg(e,t,i,r,s){let n,a=1,o=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return -1;a=2,o/=2,l/=2,i/=2}function u(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(s){let r=-1;for(n=i;n<o;n++)if(u(e,n)===u(t,-1===r?0:n-r)){if(-1===r&&(r=n),n-r+1===l)return r*a}else -1!==r&&(n-=n-r),r=-1}else for(i+l>o&&(i=o-l),n=i;n>=0;n--){let i=!0;for(let r=0;r<l;r++)if(u(e,n+r)!==u(t,r)){i=!1;break}if(i)return n}return -1}function ey(e,t,i){i=Math.min(e.length,i);let r=[],s=t;for(;s<i;){let t=e[s],n=null,a=t>239?4:t>223?3:t>191?2:1;if(s+a<=i){let i,r,o,l;switch(a){case 1:t<128&&(n=t);break;case 2:(192&(i=e[s+1]))==128&&(l=(31&t)<<6|63&i)>127&&(n=l);break;case 3:i=e[s+1],r=e[s+2],(192&i)==128&&(192&r)==128&&(l=(15&t)<<12|(63&i)<<6|63&r)>2047&&(l<55296||l>57343)&&(n=l);break;case 4:i=e[s+1],r=e[s+2],o=e[s+3],(192&i)==128&&(192&r)==128&&(192&o)==128&&(l=(15&t)<<18|(63&i)<<12|(63&r)<<6|63&o)>65535&&l<1114112&&(n=l)}}null===n?(// we did not generate a valid codePoint so insert a
// replacement char (U+FFFD) and advance only 1 byte
n=65533,a=1):n>65535&&(// encode to utf16 (surrogate pair dance)
n-=65536,r.push(n>>>10&1023|55296),n=56320|1023&n),r.push(n),s+=a}return function(e){let t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e)// avoid extra slice()
;// Decode in chunks to avoid "call stack size exceeded".
let i="",r=0;for(;r<t;)i+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return i}(r)}/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */function e_(e,t,i){if(e%1!=0||e<0)throw RangeError("offset is not uint");if(e+t>i)throw RangeError("Trying to access beyond buffer length")}function eb(e,t,i,r,s,n){if(!en.isBuffer(e))throw TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<n)throw RangeError('"value" argument is out of bounds');if(i+r>e.length)throw RangeError("Index out of range")}function ev(e,t,i,r,s){eD(t,r,s,e,i,7);let n=Number(t&BigInt(4294967295));e[i++]=n,n>>=8,e[i++]=n,n>>=8,e[i++]=n,n>>=8,e[i++]=n;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[i++]=a,a>>=8,e[i++]=a,a>>=8,e[i++]=a,a>>=8,e[i++]=a,i}function eT(e,t,i,r,s){eD(t,r,s,e,i,7);let n=Number(t&BigInt(4294967295));e[i+7]=n,n>>=8,e[i+6]=n,n>>=8,e[i+5]=n,n>>=8,e[i+4]=n;let a=Number(t>>BigInt(32)&BigInt(4294967295));return e[i+3]=a,a>>=8,e[i+2]=a,a>>=8,e[i+1]=a,a>>=8,e[i]=a,i+8}function eS(e,t,i,r,s,n){if(i+r>e.length||i<0)throw RangeError("Index out of range")}function eE(e,t,i,r,s){return t=+t,i>>>=0,s||eS(e,t,i,4,34028234663852886e22,-34028234663852886e22),f(e,t,i,r,23,4),i+4}function ew(e,t,i,r,s){return t=+t,i>>>=0,s||eS(e,t,i,8,17976931348623157e292,-17976931348623157e292),f(e,t,i,r,52,8),i+8}/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */en.TYPED_ARRAY_SUPPORT=function(){// Can typed array instances can be augmented?
try{let e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),en.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(en.prototype,"parent",{enumerable:!0,get:function(){if(en.isBuffer(this))return this.buffer}}),Object.defineProperty(en.prototype,"offset",{enumerable:!0,get:function(){if(en.isBuffer(this))return this.byteOffset}}),en.poolSize=8192// not used by this implementation
,/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/en.from=function(e,t,i){return ea(e,t,i)},// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(en.prototype,Uint8Array.prototype),Object.setPrototypeOf(en,Uint8Array),/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/en.alloc=function(e,t,i){return(eo(e),e<=0)?es(e):void 0!==t?"string"==typeof i?es(e).fill(t,i):es(e).fill(t):es(e)},/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */en.allocUnsafe=function(e){return el(e)},/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */en.allocUnsafeSlow=function(e){return el(e)},en.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==en.prototype// so Buffer.isBuffer(Buffer.prototype) will be false
},en.compare=function(e,t){if(eN(e,Uint8Array)&&(e=en.from(e,e.offset,e.byteLength)),eN(t,Uint8Array)&&(t=en.from(t,t.offset,t.byteLength)),!en.isBuffer(e)||!en.isBuffer(t))throw TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let i=e.length,r=t.length;for(let s=0,n=Math.min(i,r);s<n;++s)if(e[s]!==t[s]){i=e[s],r=t[s];break}return i<r?-1:r<i?1:0},en.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},en.concat=function(e,t){let i;if(!Array.isArray(e))throw TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return en.alloc(0);if(void 0===t)for(i=0,t=0;i<e.length;++i)t+=e[i].length;let r=en.allocUnsafe(t),s=0;for(i=0;i<e.length;++i){let t=e[i];if(eN(t,Uint8Array))s+t.length>r.length?(en.isBuffer(t)||(t=en.from(t)),t.copy(r,s)):Uint8Array.prototype.set.call(r,t,s);else if(en.isBuffer(t))t.copy(r,s);else throw TypeError('"list" argument must be an Array of Buffers');s+=t.length}return r},en.byteLength=ec,// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
en.prototype._isBuffer=!0,en.prototype.swap16=function(){let e=this.length;if(e%2!=0)throw RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)em(this,t,t+1);return this},en.prototype.swap32=function(){let e=this.length;if(e%4!=0)throw RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)em(this,t,t+3),em(this,t+1,t+2);return this},en.prototype.swap64=function(){let e=this.length;if(e%8!=0)throw RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)em(this,t,t+7),em(this,t+1,t+6),em(this,t+2,t+5),em(this,t+3,t+4);return this},en.prototype.toString=function(){let e=this.length;return 0===e?"":0==arguments.length?ey(this,0,e):ep.apply(this,arguments)},en.prototype.toLocaleString=en.prototype.toString,en.prototype.equals=function(e){if(!en.isBuffer(e))throw TypeError("Argument must be a Buffer");return this===e||0===en.compare(this,e)},en.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},er&&(en.prototype[er]=en.prototype.inspect),en.prototype.compare=function(e,t,i,r,s){if(eN(e,Uint8Array)&&(e=en.from(e,e.offset,e.byteLength)),!en.isBuffer(e))throw TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===i&&(i=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),t<0||i>e.length||r<0||s>this.length)throw RangeError("out of range index");if(r>=s&&t>=i)return 0;if(r>=s)return -1;if(t>=i)return 1;if(t>>>=0,i>>>=0,r>>>=0,s>>>=0,this===e)return 0;let n=s-r,a=i-t,o=Math.min(n,a),l=this.slice(r,s),u=e.slice(t,i);for(let e=0;e<o;++e)if(l[e]!==u[e]){n=l[e],a=u[e];break}return n<a?-1:a<n?1:0},en.prototype.includes=function(e,t,i){return -1!==this.indexOf(e,t,i)},en.prototype.indexOf=function(e,t,i){return ef(this,e,t,i,!0)},en.prototype.lastIndexOf=function(e,t,i){return ef(this,e,t,i,!1)},en.prototype.write=function(e,t,i,r){var s,n,a,o,l,u,h,d;// Buffer#write(string)
if(void 0===t)r="utf8",i=this.length,t=0;else if(void 0===i&&"string"==typeof t)r=t,i=this.length,t=0;else if(isFinite(t))t>>>=0,isFinite(i)?(i>>>=0,void 0===r&&(r="utf8")):(r=i,i=void 0);else throw Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");let c=this.length-t;if((void 0===i||i>c)&&(i=c),e.length>0&&(i<0||t<0)||t>this.length)throw RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let p=!1;for(;;)switch(r){case"hex":return function(e,t,i,r){let s;i=Number(i)||0;let n=e.length-i;r?(r=Number(r))>n&&(r=n):r=n;let a=t.length;for(r>a/2&&(r=a/2),s=0;s<r;++s){let r=parseInt(t.substr(2*s,2),16);if(r!=r)break;e[i+s]=r}return s}(this,e,t,i);case"utf8":case"utf-8":return s=t,n=i,eR(eP(e,this.length-s),this,s,n);case"ascii":case"latin1":case"binary":return a=t,o=i,eR(function(e){let t=[];for(let i=0;i<e.length;++i)t.push(255&e.charCodeAt(i));return t}(e),this,a,o);case"base64":// Warning: maxLength not taken into account in base64Write
return l=t,u=i,eR(eO(e),this,l,u);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return h=t,d=i,eR(function(e,t){let i,r;let s=[];for(let n=0;n<e.length&&!((t-=2)<0);++n)r=(i=e.charCodeAt(n))>>8,s.push(i%256),s.push(r);return s}(e,this.length-h),this,h,d);default:if(p)throw TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),p=!0}},en.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},en.prototype.slice=function(e,t){let i=this.length;e=~~e,t=void 0===t?i:~~t,e<0?(e+=i)<0&&(e=0):e>i&&(e=i),t<0?(t+=i)<0&&(t=0):t>i&&(t=i),t<e&&(t=e);let r=this.subarray(e,t);return(// Return an augmented `Uint8Array` instance
Object.setPrototypeOf(r,en.prototype),r)},en.prototype.readUintLE=en.prototype.readUIntLE=function(e,t,i){e>>>=0,t>>>=0,i||e_(e,t,this.length);let r=this[e],s=1,n=0;for(;++n<t&&(s*=256);)r+=this[e+n]*s;return r},en.prototype.readUintBE=en.prototype.readUIntBE=function(e,t,i){e>>>=0,t>>>=0,i||e_(e,t,this.length);let r=this[e+--t],s=1;for(;t>0&&(s*=256);)r+=this[e+--t]*s;return r},en.prototype.readUint8=en.prototype.readUInt8=function(e,t){return e>>>=0,t||e_(e,1,this.length),this[e]},en.prototype.readUint16LE=en.prototype.readUInt16LE=function(e,t){return e>>>=0,t||e_(e,2,this.length),this[e]|this[e+1]<<8},en.prototype.readUint16BE=en.prototype.readUInt16BE=function(e,t){return e>>>=0,t||e_(e,2,this.length),this[e]<<8|this[e+1]},en.prototype.readUint32LE=en.prototype.readUInt32LE=function(e,t){return e>>>=0,t||e_(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},en.prototype.readUint32BE=en.prototype.readUInt32BE=function(e,t){return e>>>=0,t||e_(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},en.prototype.readBigUInt64LE=eU(function(e){eI(e>>>=0,"offset");let t=this[e],i=this[e+7];(void 0===t||void 0===i)&&eA(e,this.length-8);let r=t+256*this[++e]+65536*this[++e]+16777216*this[++e],s=this[++e]+256*this[++e]+65536*this[++e]+16777216*i;return BigInt(r)+(BigInt(s)<<BigInt(32))}),en.prototype.readBigUInt64BE=eU(function(e){eI(e>>>=0,"offset");let t=this[e],i=this[e+7];(void 0===t||void 0===i)&&eA(e,this.length-8);let r=16777216*t+65536*this[++e]+256*this[++e]+this[++e],s=16777216*this[++e]+65536*this[++e]+256*this[++e]+i;return(BigInt(r)<<BigInt(32))+BigInt(s)}),en.prototype.readIntLE=function(e,t,i){e>>>=0,t>>>=0,i||e_(e,t,this.length);let r=this[e],s=1,n=0;for(;++n<t&&(s*=256);)r+=this[e+n]*s;return r>=(s*=128)&&(r-=Math.pow(2,8*t)),r},en.prototype.readIntBE=function(e,t,i){e>>>=0,t>>>=0,i||e_(e,t,this.length);let r=t,s=1,n=this[e+--r];for(;r>0&&(s*=256);)n+=this[e+--r]*s;return n>=(s*=128)&&(n-=Math.pow(2,8*t)),n},en.prototype.readInt8=function(e,t){return(e>>>=0,t||e_(e,1,this.length),128&this[e])?-((255-this[e]+1)*1):this[e]},en.prototype.readInt16LE=function(e,t){e>>>=0,t||e_(e,2,this.length);let i=this[e]|this[e+1]<<8;return 32768&i?4294901760|i:i},en.prototype.readInt16BE=function(e,t){e>>>=0,t||e_(e,2,this.length);let i=this[e+1]|this[e]<<8;return 32768&i?4294901760|i:i},en.prototype.readInt32LE=function(e,t){return e>>>=0,t||e_(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},en.prototype.readInt32BE=function(e,t){return e>>>=0,t||e_(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},en.prototype.readBigInt64LE=eU(function(e){eI(e>>>=0,"offset");let t=this[e],i=this[e+7];(void 0===t||void 0===i)&&eA(e,this.length-8);let r=this[e+4]+256*this[e+5]+65536*this[e+6]+(i<<24// Overflow
);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+16777216*this[++e])}),en.prototype.readBigInt64BE=eU(function(e){eI(e>>>=0,"offset");let t=this[e],i=this[e+7];(void 0===t||void 0===i)&&eA(e,this.length-8);let r=(t<<24)+// Overflow
65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(16777216*this[++e]+65536*this[++e]+256*this[++e]+i)}),en.prototype.readFloatLE=function(e,t){return e>>>=0,t||e_(e,4,this.length),m(this,e,!0,23,4)},en.prototype.readFloatBE=function(e,t){return e>>>=0,t||e_(e,4,this.length),m(this,e,!1,23,4)},en.prototype.readDoubleLE=function(e,t){return e>>>=0,t||e_(e,8,this.length),m(this,e,!0,52,8)},en.prototype.readDoubleBE=function(e,t){return e>>>=0,t||e_(e,8,this.length),m(this,e,!1,52,8)},en.prototype.writeUintLE=en.prototype.writeUIntLE=function(e,t,i,r){if(e=+e,t>>>=0,i>>>=0,!r){let r=Math.pow(2,8*i)-1;eb(this,e,t,i,r,0)}let s=1,n=0;for(this[t]=255&e;++n<i&&(s*=256);)this[t+n]=e/s&255;return t+i},en.prototype.writeUintBE=en.prototype.writeUIntBE=function(e,t,i,r){if(e=+e,t>>>=0,i>>>=0,!r){let r=Math.pow(2,8*i)-1;eb(this,e,t,i,r,0)}let s=i-1,n=1;for(this[t+s]=255&e;--s>=0&&(n*=256);)this[t+s]=e/n&255;return t+i},en.prototype.writeUint8=en.prototype.writeUInt8=function(e,t,i){return e=+e,t>>>=0,i||eb(this,e,t,1,255,0),this[t]=255&e,t+1},en.prototype.writeUint16LE=en.prototype.writeUInt16LE=function(e,t,i){return e=+e,t>>>=0,i||eb(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},en.prototype.writeUint16BE=en.prototype.writeUInt16BE=function(e,t,i){return e=+e,t>>>=0,i||eb(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},en.prototype.writeUint32LE=en.prototype.writeUInt32LE=function(e,t,i){return e=+e,t>>>=0,i||eb(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},en.prototype.writeUint32BE=en.prototype.writeUInt32BE=function(e,t,i){return e=+e,t>>>=0,i||eb(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},en.prototype.writeBigUInt64LE=eU(function(e,t=0){return ev(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),en.prototype.writeBigUInt64BE=eU(function(e,t=0){return eT(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),en.prototype.writeIntLE=function(e,t,i,r){if(e=+e,t>>>=0,!r){let r=Math.pow(2,8*i-1);eb(this,e,t,i,r-1,-r)}let s=0,n=1,a=0;for(this[t]=255&e;++s<i&&(n*=256);)e<0&&0===a&&0!==this[t+s-1]&&(a=1),this[t+s]=(e/n>>0)-a&255;return t+i},en.prototype.writeIntBE=function(e,t,i,r){if(e=+e,t>>>=0,!r){let r=Math.pow(2,8*i-1);eb(this,e,t,i,r-1,-r)}let s=i-1,n=1,a=0;for(this[t+s]=255&e;--s>=0&&(n*=256);)e<0&&0===a&&0!==this[t+s+1]&&(a=1),this[t+s]=(e/n>>0)-a&255;return t+i},en.prototype.writeInt8=function(e,t,i){return e=+e,t>>>=0,i||eb(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},en.prototype.writeInt16LE=function(e,t,i){return e=+e,t>>>=0,i||eb(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},en.prototype.writeInt16BE=function(e,t,i){return e=+e,t>>>=0,i||eb(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},en.prototype.writeInt32LE=function(e,t,i){return e=+e,t>>>=0,i||eb(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},en.prototype.writeInt32BE=function(e,t,i){return e=+e,t>>>=0,i||eb(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},en.prototype.writeBigInt64LE=eU(function(e,t=0){return ev(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),en.prototype.writeBigInt64BE=eU(function(e,t=0){return eT(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),en.prototype.writeFloatLE=function(e,t,i){return eE(this,e,t,!0,i)},en.prototype.writeFloatBE=function(e,t,i){return eE(this,e,t,!1,i)},en.prototype.writeDoubleLE=function(e,t,i){return ew(this,e,t,!0,i)},en.prototype.writeDoubleBE=function(e,t,i){return ew(this,e,t,!1,i)},// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
en.prototype.copy=function(e,t,i,r){if(!en.isBuffer(e))throw TypeError("argument should be a Buffer");// Copy 0 bytes; we're done
if(i||(i=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<i&&(r=i),r===i||0===e.length||0===this.length)return 0;// Fatal error conditions
if(t<0)throw RangeError("targetStart out of bounds");if(i<0||i>=this.length)throw RangeError("Index out of range");if(r<0)throw RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-i&&(r=e.length-t+i);let s=r-i;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,i,r):Uint8Array.prototype.set.call(e,this.subarray(i,r),t),s},// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
en.prototype.fill=function(e,t,i,r){let s;// Handle string cases:
if("string"==typeof e){if("string"==typeof t?(r=t,t=0,i=this.length):"string"==typeof i&&(r=i,i=this.length),void 0!==r&&"string"!=typeof r)throw TypeError("encoding must be a string");if("string"==typeof r&&!en.isEncoding(r))throw TypeError("Unknown encoding: "+r);if(1===e.length){let t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));// Invalid ranges are not set to a default, so can range check early.
if(t<0||this.length<t||this.length<i)throw RangeError("Out of range index");if(i<=t)return this;if(t>>>=0,i=void 0===i?this.length:i>>>0,e||(e=0),"number"==typeof e)for(s=t;s<i;++s)this[s]=e;else{let n=en.isBuffer(e)?e:en.from(e,r),a=n.length;if(0===a)throw TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<i-t;++s)this[s+t]=n[s%a]}return this};// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const ek={};function eC(e,t,i){ek[e]=class extends i{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),// Add the error code to the name to include it in the stack trace.
this.name=`${this.name} [${e}]`,// Access the stack to generate the error message including the error code
// from the name.
this.stack// eslint-disable-line no-unused-expressions
,// Reset the name to the actual name.
delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function ex(e){let t="",i=e.length,r="-"===e[0]?1:0;for(;i>=r+4;i-=3)t=`_${e.slice(i-3,i)}${t}`;return`${e.slice(0,i)}${t}`}function eD(e,t,i,r,s,n){if(e>i||e<t){let r;let s="bigint"==typeof t?"n":"";throw r=n>3?0===t||t===BigInt(0)?`>= 0${s} and < 2${s} ** ${(n+1)*8}${s}`:`>= -(2${s} ** ${(n+1)*8-1}${s}) and < 2 ** ${(n+1)*8-1}${s}`:`>= ${t}${s} and <= ${i}${s}`,new ek.ERR_OUT_OF_RANGE("value",r,e)}eI(s,"offset"),(void 0===r[s]||void 0===r[s+n])&&eA(s,r.length-(n+1))}function eI(e,t){if("number"!=typeof e)throw new ek.ERR_INVALID_ARG_TYPE(t,"number",e)}function eA(e,t,i){if(Math.floor(e)!==e)throw eI(e,i),new ek.ERR_OUT_OF_RANGE(i||"offset","an integer",e);if(t<0)throw new ek.ERR_BUFFER_OUT_OF_BOUNDS;throw new ek.ERR_OUT_OF_RANGE(i||"offset",`>= ${i?1:0} and <= ${t}`,e)}eC("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),eC("ERR_INVALID_ARG_TYPE",function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`},TypeError),eC("ERR_OUT_OF_RANGE",function(e,t,i){let r=`The value of "${e}" is out of range.`,s=i;return Number.isInteger(i)&&Math.abs(i)>4294967296?s=ex(String(i)):"bigint"==typeof i&&(s=String(i),(i>BigInt(2)**BigInt(32)||i<-(BigInt(2)**BigInt(32)))&&(s=ex(s)),s+="n"),r+=` It must be ${t}. Received ${s}`},RangeError);// HELPER FUNCTIONS
// ================
const eL=/[^+/0-9A-Za-z-_]/g;function eP(e,t){let i;t=t||1/0;let r=e.length,s=null,n=[];for(let a=0;a<r;++a){// is surrogate component
if((i=e.charCodeAt(a))>55295&&i<57344){// last char was a lead
if(!s){// no lead yet
if(i>56319||a+1===r){// unexpected trail
(t-=3)>-1&&n.push(239,191,189);continue}// valid lead
s=i;continue}// 2 leads in a row
if(i<56320){(t-=3)>-1&&n.push(239,191,189),s=i;continue}// valid surrogate pair
i=(s-55296<<10|i-56320)+65536}else s&&(t-=3)>-1&&n.push(239,191,189);// encode utf8
if(s=null,i<128){if((t-=1)<0)break;n.push(i)}else if(i<2048){if((t-=2)<0)break;n.push(i>>6|192,63&i|128)}else if(i<65536){if((t-=3)<0)break;n.push(i>>12|224,i>>6&63|128,63&i|128)}else if(i<1114112){if((t-=4)<0)break;n.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}else throw Error("Invalid code point")}return n}function eO(e){return function(e){var t,i,r=function(e){var t=e.length;if(t%4>0)throw Error("Invalid string. Length must be a multiple of 4");// Trim off extra bytes after placeholder bytes are found
// See: https://github.com/beatgammit/base64-js/issues/42
var i=e.indexOf("=");-1===i&&(i=t);var r=i===t?0:4-i%4;return[i,r]}(e),s=r[0],n=r[1],a=new Z((s+n)*3/4-n),o=0,l=n>0?s-4:s;for(i=0;i<l;i+=4)t=J[e.charCodeAt(i)]<<18|J[e.charCodeAt(i+1)]<<12|J[e.charCodeAt(i+2)]<<6|J[e.charCodeAt(i+3)],a[o++]=t>>16&255,a[o++]=t>>8&255,a[o++]=255&t;return 2===n&&(t=J[e.charCodeAt(i)]<<2|J[e.charCodeAt(i+1)]>>4,a[o++]=255&t),1===n&&(t=J[e.charCodeAt(i)]<<10|J[e.charCodeAt(i+1)]<<4|J[e.charCodeAt(i+2)]>>2,a[o++]=t>>8&255,a[o++]=255&t),a}(function(e){// Node converts strings with length < 2 to ''
if(// Node strips out invalid characters like \n and \t from the string, base64-js does not
(e=// Node takes equal signs as end of the Base64 encoding
(e=e.split("=")[0]).trim().replace(eL,"")).length<2)return"";// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
for(;e.length%4!=0;)e+="=";return e}(e))}function eR(e,t,i,r){let s;for(s=0;s<r&&!(s+i>=t.length)&&!(s>=e.length);++s)t[s+i]=e[s];return s}// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function eN(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const eM=function(){let e="0123456789abcdef",t=Array(256);for(let i=0;i<16;++i){let r=16*i;for(let s=0;s<16;++s)t[r+s]=e[i]+e[s]}return t}();// Return not function with Error if BigInt not supported
function eU(e){return"undefined"==typeof BigInt?eB:e}function eB(){throw Error("BigInt not supported")}/**
 * @file m3u8/line-stream.js
 *//**
 * A stream that buffers string input and generates a `data` event for each
 * line.
 *
 * @class LineStream
 * @extends Stream
 */class eF extends Y{constructor(){super(),this.buffer=""}/**
   * Add new data to be parsed.
   *
   * @param {string} data the text to process
   */push(e){let t;for(this.buffer+=e,t=this.buffer.indexOf("\n");t>-1;t=this.buffer.indexOf("\n"))this.trigger("data",this.buffer.substring(0,t)),this.buffer=this.buffer.substring(t+1)}}const ej=function(e){// optionally match and capture 0+ digits before `@`
// optionally match and capture 0+ digits after `@`
let t=/([0-9.]*)?@?([0-9.]*)?/.exec(e||""),i={};return t[1]&&(i.length=parseInt(t[1],10)),t[2]&&(i.offset=parseInt(t[2],10)),i},eq=function(e){let t;let i={};if(!e)return i;// split the string using attributes as the separator
let r=e.split(RegExp('(?:^|,)((?:[^=]*)=(?:"[^"]*"|[^,]*))')),s=r.length;for(;s--;)// filter out unmatched portions of the string
""!==r[s]&&(// split the key and value
(t=/([^=]*)=(.*)/.exec(r[s]).slice(1))[0]=t[0].replace(/^\s+|\s+$/g,""),t[1]=t[1].replace(/^\s+|\s+$/g,""),t[1]=t[1].replace(/^['"](.*)['"]$/g,"$1"),i[t[0]]=t[1]);return i};/**
 * A line-level M3U8 parser event stream. It expects to receive input one
 * line at a time and performs a context-free parse of its contents. A stream
 * interpretation of a manifest can be useful if the manifest is expected to
 * be too large to fit comfortably into memory or the entirety of the input
 * is not immediately available. Otherwise, it's probably much easier to work
 * with a regular `Parser` object.
 *
 * Produces `data` events with an object that captures the parser's
 * interpretation of the input. That object has a property `tag` that is one
 * of `uri`, `comment`, or `tag`. URIs only have a single additional
 * property, `line`, which captures the entirety of the input without
 * interpretation. Comments similarly have a single additional property
 * `text` which is the input without the leading `#`.
 *
 * Tags always have a property `tagType` which is the lower-cased version of
 * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,
 * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized
 * tags are given the tag type `unknown` and a single additional property
 * `data` with the remainder of the input.
 *
 * @class ParseStream
 * @extends Stream
 */class e$ extends Y{constructor(){super(),this.customParsers=[],this.tagMappers=[]}/**
   * Parses an additional line of input.
   *
   * @param {string} line a single line of an M3U8 file to parse
   */push(e){let t,i;if(0===(e=e.trim()).length)return;// URIs
if("#"!==e[0]){this.trigger("data",{type:"uri",uri:e});return}// map tags
let r=this.tagMappers.reduce((t,i)=>{let r=i(e);// skip if unchanged
return r===e?t:t.concat([r])},[e]);r.forEach(e=>{for(let t=0;t<this.customParsers.length;t++)if(this.customParsers[t].call(this,e))return;// Comments
if(0!==e.indexOf("#EXT")){this.trigger("data",{type:"comment",text:e.slice(1)});return}// strip off any carriage returns here so the regex matching
if(// doesn't have to account for them.
e=e.replace("\r",""),t=/^#EXTM3U/.exec(e)){this.trigger("data",{type:"tag",tagType:"m3u"});return}if(t=/^#EXTINF:([0-9\.]*)?,?(.*)?$/.exec(e)){i={type:"tag",tagType:"inf"},t[1]&&(i.duration=parseFloat(t[1])),t[2]&&(i.title=t[2]),this.trigger("data",i);return}if(t=/^#EXT-X-TARGETDURATION:([0-9.]*)?/.exec(e)){i={type:"tag",tagType:"targetduration"},t[1]&&(i.duration=parseInt(t[1],10)),this.trigger("data",i);return}if(t=/^#EXT-X-VERSION:([0-9.]*)?/.exec(e)){i={type:"tag",tagType:"version"},t[1]&&(i.version=parseInt(t[1],10)),this.trigger("data",i);return}if(t=/^#EXT-X-MEDIA-SEQUENCE:(\-?[0-9.]*)?/.exec(e)){i={type:"tag",tagType:"media-sequence"},t[1]&&(i.number=parseInt(t[1],10)),this.trigger("data",i);return}if(t=/^#EXT-X-DISCONTINUITY-SEQUENCE:(\-?[0-9.]*)?/.exec(e)){i={type:"tag",tagType:"discontinuity-sequence"},t[1]&&(i.number=parseInt(t[1],10)),this.trigger("data",i);return}if(t=/^#EXT-X-PLAYLIST-TYPE:(.*)?$/.exec(e)){i={type:"tag",tagType:"playlist-type"},t[1]&&(i.playlistType=t[1]),this.trigger("data",i);return}if(t=/^#EXT-X-BYTERANGE:(.*)?$/.exec(e)){i=/*@__PURE__*/w(R)(ej(t[1]),{type:"tag",tagType:"byterange"}),this.trigger("data",i);return}if(t=/^#EXT-X-ALLOW-CACHE:(YES|NO)?/.exec(e)){i={type:"tag",tagType:"allow-cache"},t[1]&&(i.allowed=!/NO/.test(t[1])),this.trigger("data",i);return}if(t=/^#EXT-X-MAP:(.*)$/.exec(e)){if(i={type:"tag",tagType:"map"},t[1]){let e=eq(t[1]);e.URI&&(i.uri=e.URI),e.BYTERANGE&&(i.byterange=ej(e.BYTERANGE))}this.trigger("data",i);return}if(t=/^#EXT-X-STREAM-INF:(.*)$/.exec(e)){if(i={type:"tag",tagType:"stream-inf"},t[1]){if(i.attributes=eq(t[1]),i.attributes.RESOLUTION){let e=i.attributes.RESOLUTION.split("x"),t={};e[0]&&(t.width=parseInt(e[0],10)),e[1]&&(t.height=parseInt(e[1],10)),i.attributes.RESOLUTION=t}i.attributes.BANDWIDTH&&(i.attributes.BANDWIDTH=parseInt(i.attributes.BANDWIDTH,10)),i.attributes["FRAME-RATE"]&&(i.attributes["FRAME-RATE"]=parseFloat(i.attributes["FRAME-RATE"])),i.attributes["PROGRAM-ID"]&&(i.attributes["PROGRAM-ID"]=parseInt(i.attributes["PROGRAM-ID"],10))}this.trigger("data",i);return}if(t=/^#EXT-X-MEDIA:(.*)$/.exec(e)){i={type:"tag",tagType:"media"},t[1]&&(i.attributes=eq(t[1])),this.trigger("data",i);return}if(t=/^#EXT-X-ENDLIST/.exec(e)){this.trigger("data",{type:"tag",tagType:"endlist"});return}if(t=/^#EXT-X-DISCONTINUITY/.exec(e)){this.trigger("data",{type:"tag",tagType:"discontinuity"});return}if(t=/^#EXT-X-PROGRAM-DATE-TIME:(.*)$/.exec(e)){i={type:"tag",tagType:"program-date-time"},t[1]&&(i.dateTimeString=t[1],i.dateTimeObject=new Date(t[1])),this.trigger("data",i);return}if(t=/^#EXT-X-KEY:(.*)$/.exec(e)){i={type:"tag",tagType:"key"},t[1]&&(i.attributes=eq(t[1]),i.attributes.IV&&("0x"===i.attributes.IV.substring(0,2).toLowerCase()&&(i.attributes.IV=i.attributes.IV.substring(2)),i.attributes.IV=i.attributes.IV.match(/.{8}/g),i.attributes.IV[0]=parseInt(i.attributes.IV[0],16),i.attributes.IV[1]=parseInt(i.attributes.IV[1],16),i.attributes.IV[2]=parseInt(i.attributes.IV[2],16),i.attributes.IV[3]=parseInt(i.attributes.IV[3],16),i.attributes.IV=new Uint32Array(i.attributes.IV))),this.trigger("data",i);return}if(t=/^#EXT-X-START:(.*)$/.exec(e)){i={type:"tag",tagType:"start"},t[1]&&(i.attributes=eq(t[1]),i.attributes["TIME-OFFSET"]=parseFloat(i.attributes["TIME-OFFSET"]),i.attributes.PRECISE=/YES/.test(i.attributes.PRECISE)),this.trigger("data",i);return}if(t=/^#EXT-X-CUE-OUT-CONT:(.*)?$/.exec(e)){i={type:"tag",tagType:"cue-out-cont"},t[1]?i.data=t[1]:i.data="",this.trigger("data",i);return}if(t=/^#EXT-X-CUE-OUT:(.*)?$/.exec(e)){i={type:"tag",tagType:"cue-out"},t[1]?i.data=t[1]:i.data="",this.trigger("data",i);return}if(t=/^#EXT-X-CUE-IN:(.*)?$/.exec(e)){i={type:"tag",tagType:"cue-in"},t[1]?i.data=t[1]:i.data="",this.trigger("data",i);return}if((t=/^#EXT-X-SKIP:(.*)$/.exec(e))&&t[1]){(i={type:"tag",tagType:"skip"}).attributes=eq(t[1]),i.attributes.hasOwnProperty("SKIPPED-SEGMENTS")&&(i.attributes["SKIPPED-SEGMENTS"]=parseInt(i.attributes["SKIPPED-SEGMENTS"],10)),i.attributes.hasOwnProperty("RECENTLY-REMOVED-DATERANGES")&&(i.attributes["RECENTLY-REMOVED-DATERANGES"]=i.attributes["RECENTLY-REMOVED-DATERANGES"].split("	")),this.trigger("data",i);return}if((t=/^#EXT-X-PART:(.*)$/.exec(e))&&t[1]){(i={type:"tag",tagType:"part"}).attributes=eq(t[1]),["DURATION"].forEach(function(e){i.attributes.hasOwnProperty(e)&&(i.attributes[e]=parseFloat(i.attributes[e]))}),["INDEPENDENT","GAP"].forEach(function(e){i.attributes.hasOwnProperty(e)&&(i.attributes[e]=/YES/.test(i.attributes[e]))}),i.attributes.hasOwnProperty("BYTERANGE")&&(i.attributes.byterange=ej(i.attributes.BYTERANGE)),this.trigger("data",i);return}if((t=/^#EXT-X-SERVER-CONTROL:(.*)$/.exec(e))&&t[1]){(i={type:"tag",tagType:"server-control"}).attributes=eq(t[1]),["CAN-SKIP-UNTIL","PART-HOLD-BACK","HOLD-BACK"].forEach(function(e){i.attributes.hasOwnProperty(e)&&(i.attributes[e]=parseFloat(i.attributes[e]))}),["CAN-SKIP-DATERANGES","CAN-BLOCK-RELOAD"].forEach(function(e){i.attributes.hasOwnProperty(e)&&(i.attributes[e]=/YES/.test(i.attributes[e]))}),this.trigger("data",i);return}if((t=/^#EXT-X-PART-INF:(.*)$/.exec(e))&&t[1]){(i={type:"tag",tagType:"part-inf"}).attributes=eq(t[1]),["PART-TARGET"].forEach(function(e){i.attributes.hasOwnProperty(e)&&(i.attributes[e]=parseFloat(i.attributes[e]))}),this.trigger("data",i);return}if((t=/^#EXT-X-PRELOAD-HINT:(.*)$/.exec(e))&&t[1]){(i={type:"tag",tagType:"preload-hint"}).attributes=eq(t[1]),["BYTERANGE-START","BYTERANGE-LENGTH"].forEach(function(e){if(i.attributes.hasOwnProperty(e)){i.attributes[e]=parseInt(i.attributes[e],10);let t="BYTERANGE-LENGTH"===e?"length":"offset";i.attributes.byterange=i.attributes.byterange||{},i.attributes.byterange[t]=i.attributes[e],delete i.attributes[e]}}),this.trigger("data",i);return}if((t=/^#EXT-X-RENDITION-REPORT:(.*)$/.exec(e))&&t[1]){(i={type:"tag",tagType:"rendition-report"}).attributes=eq(t[1]),["LAST-MSN","LAST-PART"].forEach(function(e){i.attributes.hasOwnProperty(e)&&(i.attributes[e]=parseInt(i.attributes[e],10))}),this.trigger("data",i);return}if((t=/^#EXT-X-DATERANGE:(.*)$/.exec(e))&&t[1]){(i={type:"tag",tagType:"daterange"}).attributes=eq(t[1]),["ID","CLASS"].forEach(function(e){i.attributes.hasOwnProperty(e)&&(i.attributes[e]=String(i.attributes[e]))}),["START-DATE","END-DATE"].forEach(function(e){i.attributes.hasOwnProperty(e)&&(i.attributes[e]=new Date(i.attributes[e]))}),["DURATION","PLANNED-DURATION"].forEach(function(e){i.attributes.hasOwnProperty(e)&&(i.attributes[e]=parseFloat(i.attributes[e]))}),["END-ON-NEXT"].forEach(function(e){i.attributes.hasOwnProperty(e)&&(i.attributes[e]=/YES/i.test(i.attributes[e]))}),["SCTE35-CMD"," SCTE35-OUT","SCTE35-IN"].forEach(function(e){i.attributes.hasOwnProperty(e)&&(i.attributes[e]=i.attributes[e].toString(16))});let e=/^X-([A-Z]+-)+[A-Z]+$/;for(let t in i.attributes){if(!e.test(t))continue;let r=/[0-9A-Fa-f]{6}/g.test(i.attributes[t]),s=/^\d+(\.\d+)?$/.test(i.attributes[t]);i.attributes[t]=r?i.attributes[t].toString(16):s?parseFloat(i.attributes[t]):String(i.attributes[t])}this.trigger("data",i);return}if(t=/^#EXT-X-INDEPENDENT-SEGMENTS/.exec(e)){this.trigger("data",{type:"tag",tagType:"independent-segments"});return}// unknown tag type
this.trigger("data",{type:"tag",data:e.slice(4)})})}/**
   * Add a parser for custom headers
   *
   * @param {Object}   options              a map of options for the added parser
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {string}   options.customType   the custom type to register to the output
   * @param {Function} [options.dataParser] function to parse the line into an object
   * @param {boolean}  [options.segment]    should tag data be attached to the segment object
   */addParser({expression:e,customType:t,dataParser:i,segment:r}){"function"!=typeof i&&(i=e=>e),this.customParsers.push(s=>{let n=e.exec(s);if(n)return this.trigger("data",{type:"custom",data:i(s),customType:t,segment:r}),!0})}/**
   * Add a custom header mapper
   *
   * @param {Object}   options
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {Function} options.map          function to translate tag into a different tag
   */addTagMapper({expression:e,map:t}){this.tagMappers.push(i=>e.test(i)?t(i):i)}}const eH=e=>e.toLowerCase().replace(/-(\w)/g,e=>e[1].toUpperCase()),eV=function(e){let t={};return Object.keys(e).forEach(function(i){t[eH(i)]=e[i]}),t},ez=function(e){let{serverControl:t,targetDuration:i,partTargetDuration:r}=e;if(!t)return;let s="#EXT-X-SERVER-CONTROL",n="holdBack",a="partHoldBack",o=i&&3*i,l=r&&2*r;i&&!t.hasOwnProperty(n)&&(t[n]=o,this.trigger("info",{message:`${s} defaulting HOLD-BACK to targetDuration * 3 (${o}).`})),o&&t[n]<o&&(this.trigger("warn",{message:`${s} clamping HOLD-BACK (${t[n]}) to targetDuration * 3 (${o})`}),t[n]=o),r&&!t.hasOwnProperty(a)&&(t[a]=3*r,this.trigger("info",{message:`${s} defaulting PART-HOLD-BACK to partTargetDuration * 3 (${t[a]}).`})),r&&t[a]<l&&(this.trigger("warn",{message:`${s} clamping PART-HOLD-BACK (${t[a]}) to partTargetDuration * 2 (${l}).`}),t[a]=l)};/**
 * A parser for M3U8 files. The current interpretation of the input is
 * exposed as a property `manifest` on parser objects. It's just two lines to
 * create and parse a manifest once you have the contents available as a string:
 *
 * ```js
 * var parser = new m3u8.Parser();
 * parser.push(xhr.responseText);
 * ```
 *
 * New input can later be applied to update the manifest object by calling
 * `push` again.
 *
 * The parser attempts to create a usable manifest object even if the
 * underlying input is somewhat nonsensical. It emits `info` and `warning`
 * events during the parse if it encounters input that seems invalid or
 * requires some property of the manifest object to be defaulted.
 *
 * @class Parser
 * @extends Stream
 */class eW extends Y{constructor(){let e,t;super(),this.lineStream=new eF,this.parseStream=new e$,this.lineStream.pipe(this.parseStream);/* eslint-disable consistent-this */let i=this,r=[],s={},n=!1,a=function(){},o={AUDIO:{},VIDEO:{},"CLOSED-CAPTIONS":{},SUBTITLES:{}},l=0;this.manifest={allowCache:!0,discontinuityStarts:[],segments:[]};// to provide the offset, in which case it defaults to the next byte after the
// previous segment
let u=0,h=0,d={};// keep track of the last seen part's byte range end.
this.on("end",()=>{// only add preloadSegment if we don't yet have a uri for it.
// and we actually have parts/preloadHints
!s.uri&&(s.parts||s.preloadHints)&&(!s.map&&e&&(s.map=e),!s.key&&t&&(s.key=t),s.timeline||"number"!=typeof l||(s.timeline=l),this.manifest.preloadSegment=s)}),this.parseStream.on("data",function(c){let p,m;({tag(){// switch based on the tag type
(({version(){c.version&&(this.manifest.version=c.version)},"allow-cache"(){this.manifest.allowCache=c.allowed,"allowed"in c||(this.trigger("info",{message:"defaulting allowCache to YES"}),this.manifest.allowCache=!0)},byterange(){let e={};"length"in c&&(s.byterange=e,e.length=c.length,"offset"in c||/*
                   * From the latest spec (as of this writing):
                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.2
                   *
                   * Same text since EXT-X-BYTERANGE's introduction in draft 7:
                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-07#section-3.3.1)
                   *
                   * "If o [offset] is not present, the sub-range begins at the next byte
                   * following the sub-range of the previous media segment."
                   */(c.offset=u)),"offset"in c&&(s.byterange=e,e.offset=c.offset),u=e.offset+e.length},endlist(){this.manifest.endList=!0},inf(){"mediaSequence"in this.manifest||(this.manifest.mediaSequence=0,this.trigger("info",{message:"defaulting media sequence to zero"})),"discontinuitySequence"in this.manifest||(this.manifest.discontinuitySequence=0,this.trigger("info",{message:"defaulting discontinuity sequence to zero"})),c.duration>0&&(s.duration=c.duration),0===c.duration&&(s.duration=.01,this.trigger("info",{message:"updating zero segment duration to a small value"})),this.manifest.segments=r},key(){if(!c.attributes){this.trigger("warn",{message:"ignoring key declaration without attribute list"});return}// clear the active encryption key
if("NONE"===c.attributes.METHOD){t=null;return}if(!c.attributes.URI){this.trigger("warn",{message:"ignoring key declaration without URI"});return}if("com.apple.streamingkeydelivery"===c.attributes.KEYFORMAT){this.manifest.contentProtection=this.manifest.contentProtection||{},this.manifest.contentProtection["com.apple.fps.1_0"]={attributes:c.attributes};return}if("com.microsoft.playready"===c.attributes.KEYFORMAT){this.manifest.contentProtection=this.manifest.contentProtection||{},this.manifest.contentProtection["com.microsoft.playready"]={uri:c.attributes.URI};return}// check if the content is encrypted for Widevine
// Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf
if("urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed"===c.attributes.KEYFORMAT){if(-1===["SAMPLE-AES","SAMPLE-AES-CTR","SAMPLE-AES-CENC"].indexOf(c.attributes.METHOD)){this.trigger("warn",{message:"invalid key method provided for Widevine"});return}if("SAMPLE-AES-CENC"===c.attributes.METHOD&&this.trigger("warn",{message:"SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead"}),"data:text/plain;base64,"!==c.attributes.URI.substring(0,23)){this.trigger("warn",{message:"invalid key URI provided for Widevine"});return}if(!(c.attributes.KEYID&&"0x"===c.attributes.KEYID.substring(0,2))){this.trigger("warn",{message:"invalid key ID provided for Widevine"});return}// if Widevine key attributes are valid, store them as `contentProtection`
// on the manifest to emulate Widevine tag structure in a DASH mpd
this.manifest.contentProtection=this.manifest.contentProtection||{},this.manifest.contentProtection["com.widevine.alpha"]={attributes:{schemeIdUri:c.attributes.KEYFORMAT,// remove '0x' from the key id string
keyId:c.attributes.KEYID.substring(2)},// decode the base64-encoded PSSH box
pssh:function(e){for(var t=/*@__PURE__*/w(I).atob?/*@__PURE__*/w(I).atob(e):en.from(e,"base64").toString("binary"),i=new Uint8Array(t.length),r=0;r<t.length;r++)i[r]=t.charCodeAt(r);return i}(c.attributes.URI.split(",")[1])};return}c.attributes.METHOD||this.trigger("warn",{message:"defaulting key method to AES-128"}),// setup an encryption key for upcoming segments
t={method:c.attributes.METHOD||"AES-128",uri:c.attributes.URI},void 0!==c.attributes.IV&&(t.iv=c.attributes.IV)},"media-sequence"(){if(!isFinite(c.number)){this.trigger("warn",{message:"ignoring invalid media sequence: "+c.number});return}this.manifest.mediaSequence=c.number},"discontinuity-sequence"(){if(!isFinite(c.number)){this.trigger("warn",{message:"ignoring invalid discontinuity sequence: "+c.number});return}this.manifest.discontinuitySequence=c.number,l=c.number},"playlist-type"(){if(!/VOD|EVENT/.test(c.playlistType)){this.trigger("warn",{message:"ignoring unknown playlist type: "+c.playlist});return}this.manifest.playlistType=c.playlistType},map(){e={},c.uri&&(e.uri=c.uri),c.byterange&&(e.byterange=c.byterange),t&&(e.key=t)},"stream-inf"(){if(this.manifest.playlists=r,this.manifest.mediaGroups=this.manifest.mediaGroups||o,!c.attributes){this.trigger("warn",{message:"ignoring empty stream-inf attributes"});return}s.attributes||(s.attributes={}),/*@__PURE__*/w(R)(s.attributes,c.attributes)},media(){if(this.manifest.mediaGroups=this.manifest.mediaGroups||o,!(c.attributes&&c.attributes.TYPE&&c.attributes["GROUP-ID"]&&c.attributes.NAME)){this.trigger("warn",{message:"ignoring incomplete or missing media group"});return}// find the media group, creating defaults as necessary
let e=this.manifest.mediaGroups[c.attributes.TYPE];e[c.attributes["GROUP-ID"]]=e[c.attributes["GROUP-ID"]]||{},p=e[c.attributes["GROUP-ID"]],(m={default:/yes/i.test(c.attributes.DEFAULT)}).default?m.autoselect=!0:m.autoselect=/yes/i.test(c.attributes.AUTOSELECT),c.attributes.LANGUAGE&&(m.language=c.attributes.LANGUAGE),c.attributes.URI&&(m.uri=c.attributes.URI),c.attributes["INSTREAM-ID"]&&(m.instreamId=c.attributes["INSTREAM-ID"]),c.attributes.CHARACTERISTICS&&(m.characteristics=c.attributes.CHARACTERISTICS),c.attributes.FORCED&&(m.forced=/yes/i.test(c.attributes.FORCED)),// insert the new rendition
p[c.attributes.NAME]=m},discontinuity(){l+=1,s.discontinuity=!0,this.manifest.discontinuityStarts.push(r.length)},"program-date-time"(){void 0===this.manifest.dateTimeString&&(// PROGRAM-DATE-TIME is a media-segment tag, but for backwards
// compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag
// to the manifest object
// TODO: Consider removing this in future major version
this.manifest.dateTimeString=c.dateTimeString,this.manifest.dateTimeObject=c.dateTimeObject),s.dateTimeString=c.dateTimeString,s.dateTimeObject=c.dateTimeObject},targetduration(){if(!isFinite(c.duration)||c.duration<0){this.trigger("warn",{message:"ignoring invalid target duration: "+c.duration});return}this.manifest.targetDuration=c.duration,ez.call(this,this.manifest)},start(){if(!c.attributes||isNaN(c.attributes["TIME-OFFSET"])){this.trigger("warn",{message:"ignoring start declaration without appropriate attribute list"});return}this.manifest.start={timeOffset:c.attributes["TIME-OFFSET"],precise:c.attributes.PRECISE}},"cue-out"(){s.cueOut=c.data},"cue-out-cont"(){s.cueOutCont=c.data},"cue-in"(){s.cueIn=c.data},skip(){this.manifest.skip=eV(c.attributes),this.warnOnMissingAttributes_("#EXT-X-SKIP",c.attributes,["SKIPPED-SEGMENTS"])},part(){n=!0;let e=this.manifest.segments.length,t=eV(c.attributes);s.parts=s.parts||[],s.parts.push(t),t.byterange&&(t.byterange.hasOwnProperty("offset")||(t.byterange.offset=h),h=t.byterange.offset+t.byterange.length);let i=s.parts.length-1;this.warnOnMissingAttributes_(`#EXT-X-PART #${i} for segment #${e}`,c.attributes,["URI","DURATION"]),this.manifest.renditionReports&&this.manifest.renditionReports.forEach((e,t)=>{e.hasOwnProperty("lastPart")||this.trigger("warn",{message:`#EXT-X-RENDITION-REPORT #${t} lacks required attribute(s): LAST-PART`})})},"server-control"(){let e=this.manifest.serverControl=eV(c.attributes);e.hasOwnProperty("canBlockReload")||(e.canBlockReload=!1,this.trigger("info",{message:"#EXT-X-SERVER-CONTROL defaulting CAN-BLOCK-RELOAD to false"})),ez.call(this,this.manifest),e.canSkipDateranges&&!e.hasOwnProperty("canSkipUntil")&&this.trigger("warn",{message:"#EXT-X-SERVER-CONTROL lacks required attribute CAN-SKIP-UNTIL which is required when CAN-SKIP-DATERANGES is set"})},"preload-hint"(){// parts are always specifed before a segment
let e=this.manifest.segments.length,t=eV(c.attributes),i=t.type&&"PART"===t.type;s.preloadHints=s.preloadHints||[],s.preloadHints.push(t),t.byterange&&!t.byterange.hasOwnProperty("offset")&&(// use last part byterange end or zero if not a part.
t.byterange.offset=i?h:0,i&&(h=t.byterange.offset+t.byterange.length));let r=s.preloadHints.length-1;if(this.warnOnMissingAttributes_(`#EXT-X-PRELOAD-HINT #${r} for segment #${e}`,c.attributes,["TYPE","URI"]),t.type)// search through all preload hints except for the current one for
// a duplicate type.
for(let i=0;i<s.preloadHints.length-1;i++){let n=s.preloadHints[i];n.type&&n.type===t.type&&this.trigger("warn",{message:`#EXT-X-PRELOAD-HINT #${r} for segment #${e} has the same TYPE ${t.type} as preload hint #${i}`})}},"rendition-report"(){let e=eV(c.attributes);this.manifest.renditionReports=this.manifest.renditionReports||[],this.manifest.renditionReports.push(e);let t=this.manifest.renditionReports.length-1,i=["LAST-MSN","URI"];n&&i.push("LAST-PART"),this.warnOnMissingAttributes_(`#EXT-X-RENDITION-REPORT #${t}`,c.attributes,i)},"part-inf"(){this.manifest.partInf=eV(c.attributes),this.warnOnMissingAttributes_("#EXT-X-PART-INF",c.attributes,["PART-TARGET"]),this.manifest.partInf.partTarget&&(this.manifest.partTargetDuration=this.manifest.partInf.partTarget),ez.call(this,this.manifest)},daterange(){this.manifest.daterange=this.manifest.daterange||[],this.manifest.daterange.push(eV(c.attributes));let e=this.manifest.daterange.length-1;this.warnOnMissingAttributes_(`#EXT-X-DATERANGE #${e}`,c.attributes,["ID","START-DATE"]);let t=this.manifest.daterange[e];t.endDate&&t.startDate&&new Date(t.endDate)<new Date(t.startDate)&&this.trigger("warn",{message:"EXT-X-DATERANGE END-DATE must be equal to or later than the value of the START-DATE"}),t.duration&&t.duration<0&&this.trigger("warn",{message:"EXT-X-DATERANGE DURATION must not be negative"}),t.plannedDuration&&t.plannedDuration<0&&this.trigger("warn",{message:"EXT-X-DATERANGE PLANNED-DURATION must not be negative"});let i=!!t.endOnNext;if(i&&!t.class&&this.trigger("warn",{message:"EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must have a CLASS attribute"}),i&&(t.duration||t.endDate)&&this.trigger("warn",{message:"EXT-X-DATERANGE with an END-ON-NEXT=YES attribute must not contain DURATION or END-DATE attributes"}),t.duration&&t.endDate){let i=t.startDate,r=i.setSeconds(i.getSeconds()+t.duration);this.manifest.daterange[e].endDate=new Date(r)}if(t&&!this.manifest.dateTimeString&&this.trigger("warn",{message:"A playlist with EXT-X-DATERANGE tag must contain atleast one EXT-X-PROGRAM-DATE-TIME tag"}),d[t.id]){for(let e in d[t.id])if(d[t.id][e]!==t[e]){this.trigger("warn",{message:"EXT-X-DATERANGE tags with the same ID in a playlist must have the same attributes and same attribute values"});break}}else d[t.id]=t},"independent-segments"(){this.manifest.independentSegments=!0}})[c.tagType]||a).call(i)},uri(){s.uri=c.uri,r.push(s),!this.manifest.targetDuration||"duration"in s||(this.trigger("warn",{message:"defaulting segment duration to the target duration"}),s.duration=this.manifest.targetDuration),t&&(s.key=t),s.timeline=l,e&&(s.map=e),// reset the last byterange end as it needs to be 0 between parts
h=0,s={}},comment(){},custom(){// if this is segment-level data attach the output to the segment
c.segment?(s.custom=s.custom||{},s.custom[c.customType]=c.data):(this.manifest.custom=this.manifest.custom||{},this.manifest.custom[c.customType]=c.data)}})[c.type].call(i)})}warnOnMissingAttributes_(e,t,i){let r=[];i.forEach(function(e){t.hasOwnProperty(e)||r.push(e)}),r.length&&this.trigger("warn",{message:`${e} lacks required attribute(s): ${r.join(", ")}`})}/**
   * Parse the input string and update the manifest object.
   *
   * @param {string} chunk a potentially incomplete portion of the manifest
   */push(e){this.lineStream.push(e)}/**
   * Flush any remaining input. This can be handy if the last line of an M3U8
   * manifest did not contain a trailing newline but the file has been
   * completely received.
   */end(){// flush any buffered input
this.lineStream.push("\n"),this.trigger("end")}/**
   * Add an additional parser for non-standard tags
   *
   * @param {Object}   options              a map of options for the added parser
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {string}   options.type         the type to register to the output
   * @param {Function} [options.dataParser] function to parse the line into an object
   * @param {boolean}  [options.segment]    should tag data be attached to the segment object
   */addParser(e){this.parseStream.addParser(e)}/**
   * Add a custom header mapper
   *
   * @param {Object}   options
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {Function} options.map          function to translate tag into a different tag
   */addTagMapper(e){this.parseStream.addTagMapper(e)}}var I=x("eDick"),eG={// to determine mime types
mp4:/^(av0?1|avc0?[1234]|vp0?9|flac|opus|mp3|mp4a|mp4v|stpp.ttml.im1t)/,webm:/^(vp0?[89]|av0?1|opus|vorbis)/,ogg:/^(vp0?[89]|theora|flac|opus|vorbis)/,// to determine if a codec is audio or video
video:/^(av0?1|avc0?[1234]|vp0?[89]|hvc1|hev1|theora|mp4v)/,audio:/^(mp4a|flac|vorbis|opus|ac-[34]|ec-3|alac|mp3|speex|aac)/,text:/^(stpp.ttml.im1t)/,// mux.js support regex
muxerVideo:/^(avc0?1)/,muxerAudio:/^(mp4a)/,// match nothing as muxer does not support text right now.
// there cannot never be a character before the start of a string
// so this matches nothing.
muxerText:/a^/},eX=["video","audio","text"],eK=["Video","Audio","Text"],eY=function(e){return e?e.replace(/avc1\.(\d+)\.(\d+)/i,function(e,t,i){return"avc1."+("00"+Number(t).toString(16)).slice(-2)+"00"+("00"+Number(i).toString(16)).slice(-2)}):e},eQ=function(e){void 0===e&&(e="");var t=e.split(","),i=[];return t.forEach(function(e){var t;e=e.trim(),eX.forEach(function(r){var s=eG[r].exec(e.toLowerCase());if(s&&!(s.length<=1)){t=r;// maintain codec case
var n=e.substring(0,s[1].length),a=e.replace(n,"");i.push({type:n,details:a,mediaType:r})}}),t||i.push({type:e,details:"",mediaType:"unknown"})}),i},eJ=function(e,t){if(!e.mediaGroups.AUDIO||!t)return null;var i=e.mediaGroups.AUDIO[t];if(!i)return null;for(var r in i){var s=i[r];if(s.default&&s.playlists)return eQ(s.playlists[0].attributes.CODECS)}return null},eZ=function(e){return void 0===e&&(e=""),eG.audio.test(e.trim().toLowerCase())},e0=function(e){if(e&&"string"==typeof e){var t,i=e.toLowerCase().split(",").map(function(e){return eY(e.trim())}),r="video";// default to video type
// audio
1===i.length&&eZ(i[0])?r="audio":1===i.length&&(void 0===(t=i[0])&&(t=""),eG.text.test(t.trim().toLowerCase()))&&(r="application");// default the container to mp4
var s="mp4";// every codec must be able to go into the container
return i.every(function(e){return eG.mp4.test(e)})?s="mp4":i.every(function(e){return eG.webm.test(e)})?s="webm":i.every(function(e){return eG.ogg.test(e)})&&(s="ogg"),r+"/"+s+';codecs="'+e+'"'}},e1=function(e){return void 0===e&&(e=""),/*@__PURE__*/w(I).MediaSource&&/*@__PURE__*/w(I).MediaSource.isTypeSupported&&/*@__PURE__*/w(I).MediaSource.isTypeSupported(e0(e))||!1},e2=function(e){return void 0===e&&(e=""),e.toLowerCase().split(",").every(function(e){e=e.trim();// any match is supported.
for(var t=0;t<eK.length;t++)if(eG["muxer"+eK[t]].test(e))return!0;return!1})},e4="mp4a.40.2",e8=/^(audio|video|application)\/(x-|vnd\.apple\.)?mpegurl/i,e5=/^application\/dash\+xml/i,e3=function(e){return e8.test(e)?"hls":e5.test(e)?"dash":"application/vnd.videojs.vhs+json"===e?"vhs-json":null},I=x("eDick"),e6=function(e){return"function"===ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer instanceof ArrayBuffer},e7=function(e){return e instanceof Uint8Array?e:(Array.isArray(e)||e6(e)||e instanceof ArrayBuffer||(e="number"!=typeof e||"number"==typeof e&&e!=e?0:[e]),new Uint8Array(e&&e.buffer||e,e&&e.byteOffset||0,e&&e.byteLength||0))},e9=/*@__PURE__*/w(I).BigInt||Number,te=[e9("0x1"),e9("0x100"),e9("0x10000"),e9("0x1000000"),e9("0x100000000"),e9("0x10000000000"),e9("0x1000000000000"),e9("0x100000000000000"),e9("0x10000000000000000")];a=new Uint16Array([65484]),255===(o=new Uint8Array(a.buffer,a.byteOffset,a.byteLength))[0]||o[0];var tt=function(e,t){var i=void 0===t?{}:t,r=i.signed,s=i.le,n=void 0!==s&&s;e=e7(e);var a=n?"reduce":"reduceRight",o=(e[a]?e[a]:Array.prototype[a]).call(e,function(t,i,r){var s=n?r:Math.abs(r+1-e.length);return t+e9(i)*te[s]},e9(0));if(void 0!==r&&r){var l=te[e.length]/e9(2)-e9(1);(o=e9(o))>l&&(o-=l,o-=l,o-=e9(2))}return Number(o)},ti=function(e,t){var i=(void 0===t?{}:t).le,r=void 0!==i&&i;("bigint"!=typeof e&&"number"!=typeof e||"number"==typeof e&&e!=e)&&(e=0);for(var s=Math.ceil((e=e9(e)).toString(2).length/8),n=new Uint8Array(new ArrayBuffer(s)),a=0;a<s;a++){var o=r?a:Math.abs(a+1-n.length);n[o]=Number(e/te[a]&e9(255)),e<0&&(n[o]=Math.abs(~n[o]),n[o]-=0===a?1:2)}return n},tr=function(e){if(!e)return"";// TODO: should toUint8 handle cases where we only have 8 bytes
// but report more since this is a Uint16+ Array?
e=Array.prototype.slice.call(e);var t=String.fromCharCode.apply(null,e7(e));try{return decodeURIComponent(escape(t))}catch(e){// or full non string data. Just return the potentially garbled string.
}return t},ts=function(e,t){if("string"!=typeof e&&e&&"function"==typeof e.toString&&(e=e.toString()),"string"!=typeof e)return new Uint8Array;t||(e=unescape(encodeURIComponent(e)));for(var i=new Uint8Array(e.length),r=0;r<e.length;r++)i[r]=e.charCodeAt(r);return i},tn=function(){for(var e=arguments.length,t=Array(e),i=0;i<e;i++)t[i]=arguments[i];if((t=t.filter(function(e){return e&&(e.byteLength||e.length)&&"string"!=typeof e})).length<=1)// for 1 length we return the first uint8
return e7(t[0]);var r=t.reduce(function(e,t,i){return e+(t.byteLength||t.length)},0),s=new Uint8Array(r),n=0;return t.forEach(function(e){e=e7(e),s.set(e,n),n+=e.byteLength}),s},ta=function(e,t,i){var r=void 0===i?{}:i,s=r.offset,n=void 0===s?0:s,a=r.mask,o=void 0===a?[]:a;e=e7(e);var l=(t=e7(t)).every?t.every:Array.prototype.every;return t.length&&e.length-n>=t.length&&// ie 11 doesn't support every on uin8
l.call(t,function(t,i){return t===(o[i]?o[i]&e[n+i]:e[n+i])})},I=x("eDick"),to="http://example.com",tl=function(e,t){// return early if we don't need to resolve
if(/^[a-z]+:/i.test(t))return t;/^data:/.test(e)&&(e=/*@__PURE__*/w(I).location&&/*@__PURE__*/w(I).location.href||"");// IE11 supports URL but not the URL constructor
// feature detect the behavior we want
var i="function"==typeof /*@__PURE__*/w(I).URL,r=/^\/\//.test(e),s=!/*@__PURE__*/w(I).location&&!/\/\//i.test(e);if(i?e=new/*@__PURE__*/(w(I)).URL(e,/*@__PURE__*/w(I).location||to):/\/\//i.test(e)||(e=/*@__PURE__*/w(X).buildAbsoluteURL(/*@__PURE__*/w(I).location&&/*@__PURE__*/w(I).location.href||"",e)),i){var n=new URL(t,e);// if we're a protocol-less url, remove the protocol
return(// and if we're location-less, remove the location
// otherwise, return the url unmodified
s?n.href.slice(to.length):r?n.href.slice(n.protocol.length):n.href)}return /*@__PURE__*/w(X).buildAbsoluteURL(e,t)},I=x("eDick"),tu=function(e,t,i){t.forEach(function(t){for(var r in e.mediaGroups[t])for(var s in e.mediaGroups[t][r])i(e.mediaGroups[t][r][s],t,r,s)})},I=x("eDick"),th=x("2YubT");th.DOMImplementation,th.XMLSerializer,g=x("c1Wy2").DOMParser;const td=e=>!!e&&"object"==typeof e,tc=(...e)=>e.reduce((e,t)=>("object"!=typeof t||Object.keys(t).forEach(i=>{Array.isArray(e[i])&&Array.isArray(t[i])?e[i]=e[i].concat(t[i]):td(e[i])&&td(t[i])?e[i]=tc(e[i],t[i]):e[i]=t[i]}),e),{}),tp=e=>Object.keys(e).map(t=>e[t]),tm=(e,t)=>{let i=[];for(let r=e;r<t;r++)i.push(r);return i},tf=e=>e.reduce((e,t)=>e.concat(t),[]),tg=e=>{if(!e.length)return[];let t=[];for(let i=0;i<e.length;i++)t.push(e[i]);return t},ty=(e,t)=>e.reduce((e,i,r)=>(i[t]&&e.push(r),e),[]),t_=(e,t)=>tp(e.reduce((e,i)=>(i.forEach(i=>{e[t(i)]=i}),e),{}));var tb={INVALID_NUMBER_OF_PERIOD:"INVALID_NUMBER_OF_PERIOD",DASH_EMPTY_MANIFEST:"DASH_EMPTY_MANIFEST",DASH_INVALID_XML:"DASH_INVALID_XML",NO_BASE_URL:"NO_BASE_URL",SEGMENT_TIME_UNSPECIFIED:"SEGMENT_TIME_UNSPECIFIED",UNSUPPORTED_UTC_TIMING_SCHEME:"UNSUPPORTED_UTC_TIMING_SCHEME"};/**
 * @typedef {Object} SingleUri
 * @property {string} uri - relative location of segment
 * @property {string} resolvedUri - resolved location of segment
 * @property {Object} byterange - Object containing information on how to make byte range
 *   requests following byte-range-spec per RFC2616.
 * @property {String} byterange.length - length of range request
 * @property {String} byterange.offset - byte offset of range request
 *
 * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1
 *//**
 * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object
 * that conforms to how m3u8-parser is structured
 *
 * @see https://github.com/videojs/m3u8-parser
 *
 * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes
 * @param {string} source - source url for segment
 * @param {string} range - optional range used for range calls,
 *   follows  RFC 2616, Clause 14.35.1
 * @return {SingleUri} full segment information transformed into a format similar
 *   to m3u8-parser
 */const tv=({baseUrl:e="",source:t="",range:i="",indexRange:r=""})=>{let s={uri:t,resolvedUri:tl(e||"",t)};if(i||r){let e;let t=(i||r).split("-"),n=/*@__PURE__*/w(I).BigInt?/*@__PURE__*/w(I).BigInt(t[0]):parseInt(t[0],10),a=/*@__PURE__*/w(I).BigInt?/*@__PURE__*/w(I).BigInt(t[1]):parseInt(t[1],10);// default to parsing this as a BigInt if possible
n<Number.MAX_SAFE_INTEGER&&"bigint"==typeof n&&(n=Number(n)),a<Number.MAX_SAFE_INTEGER&&"bigint"==typeof a&&(a=Number(a)),"bigint"==typeof(e="bigint"==typeof a||"bigint"==typeof n?/*@__PURE__*/w(I).BigInt(a)-/*@__PURE__*/w(I).BigInt(n)+/*@__PURE__*/w(I).BigInt(1):a-n+1)&&e<Number.MAX_SAFE_INTEGER&&(e=Number(e)),// byterange should be inclusive according to
// RFC 2616, Clause 14.35.1
s.byterange={length:e,offset:n}}return s},tT=e=>{// `endRange` is one less than `offset + length` because the HTTP range
// header uses inclusive ranges
let t;return t="bigint"==typeof e.offset||"bigint"==typeof e.length?/*@__PURE__*/w(I).BigInt(e.offset)+/*@__PURE__*/w(I).BigInt(e.length)-/*@__PURE__*/w(I).BigInt(1):e.offset+e.length-1,`${e.offset}-${t}`},tS=e=>(e&&"number"!=typeof e&&(e=parseInt(e,10)),isNaN(e))?null:e,tE={/**
   * Returns the entire range of available segments for a static MPD
   *
   * @param {Object} attributes
   *        Inheritied MPD attributes
   * @return {{ start: number, end: number }}
   *         The start and end numbers for available segments
   */static(e){let{duration:t,timescale:i=1,sourceDuration:r,periodDuration:s}=e,n=tS(e.endNumber),a=t/i;return"number"==typeof n?{start:0,end:n}:"number"==typeof s?{start:0,end:s/a}:{start:0,end:r/a}},/**
   * Returns the current live window range of available segments for a dynamic MPD
   *
   * @param {Object} attributes
   *        Inheritied MPD attributes
   * @return {{ start: number, end: number }}
   *         The start and end numbers for available segments
   */dynamic(e){let{NOW:t,clientOffset:i,availabilityStartTime:r,timescale:s=1,duration:n,periodStart:a=0,minimumUpdatePeriod:o=0,timeShiftBufferDepth:l=1/0}=e,u=tS(e.endNumber),h=(t+i)/1e3,d=r+a;return{start:Math.max(0,Math.floor((h-d-l)*s/n)),end:"number"==typeof u?u:Math.min(Math.ceil((h+o-d)*s/n),Math.floor((h-d)*s/n))}}},tw=e=>t=>{let{duration:i,timescale:r=1,periodStart:s,startNumber:n=1}=e;return{number:n+t,duration:i/r,timeline:s,time:t*i}},tk=e=>{let{type:t,duration:i,timescale:r=1,periodDuration:s,sourceDuration:n}=e,{start:a,end:o}=tE[t](e),l=tm(a,o).map(tw(e));if("static"===t){let e=l.length-1;// section is either a period or the full source
l[e].duration=("number"==typeof s?s:n)-i/r*e}return l},tC=e=>{let{baseUrl:t,initialization:i={},sourceDuration:r,indexRange:s="",periodStart:n,presentationTime:a,number:o=0,duration:l}=e;// base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)
if(!t)throw Error(tb.NO_BASE_URL);let u=tv({baseUrl:t,source:i.sourceURL,range:i.range}),h=tv({baseUrl:t,source:t,indexRange:s});// (since SegmentBase is only for one total segment)
if(h.map=u,l){let t=tk(e);t.length&&(h.duration=t[0].duration,h.timeline=t[0].timeline)}else r&&(h.duration=r,h.timeline=n);// If presentation time is provided, these segments are being generated by SIDX
return(// references, and should use the time provided. For the general case of SegmentBase,
// there should only be one segment in the period, so its presentation time is the same
// as its period start.
h.presentationTime=a||n,h.number=o,[h])},tx=(e,t,i)=>{let r;// Retain init segment information
let s=e.sidx.map?e.sidx.map:null,n=e.sidx.duration,a=e.timeline||0,o=e.sidx.byterange,l=o.offset+o.length,u=t.timescale,h=t.references.filter(e=>1!==e.referenceType),d=[],c=e.endList?"static":"dynamic",p=e.sidx.timeline,m=p,f=e.mediaSequence||0;// Retain source duration from initial main manifest parsing
r="bigint"==typeof t.firstOffset?/*@__PURE__*/w(I).BigInt(l)+t.firstOffset:l+t.firstOffset;for(let e=0;e<h.length;e++){let o;let l=t.references[e],h=l.referencedSize,g=l.subsegmentDuration;// size of the referenced (sub)segment
o="bigint"==typeof r?r+/*@__PURE__*/w(I).BigInt(h)-/*@__PURE__*/w(I).BigInt(1):r+h-1;let y=`${r}-${o}`,_={baseUrl:i,timescale:u,timeline:a,periodStart:p,presentationTime:m,number:f,duration:g,sourceDuration:n,indexRange:y,type:c},b=tC(_)[0];s&&(b.map=s),d.push(b),"bigint"==typeof r?r+=/*@__PURE__*/w(I).BigInt(h):r+=h,m+=g/u,f++}return e.segments=d,e},tD=["AUDIO","SUBTITLES"],tI=1/60,tA=e=>t_(e,({timeline:e})=>e).sort((e,t)=>e.timeline>t.timeline?1:-1),tL=(e,t)=>{for(let i=0;i<e.length;i++)if(e[i].attributes.NAME===t)return e[i];return null},tP=e=>{let t=[];return tu(e,tD,(e,i,r,s)=>{t=t.concat(e.playlists||[])}),t},tO=({playlist:e,mediaSequence:t})=>{e.mediaSequence=t,e.segments.forEach((t,i)=>{t.number=e.mediaSequence+i})},tR=({oldPlaylists:e,newPlaylists:t,timelineStarts:i})=>{t.forEach(t=>{t.discontinuitySequence=i.findIndex(function({timeline:e}){return e===t.timeline});// (see ISO_23009-1-2012 5.3.5.2).
//
// If the same Representation existed in a prior Period, it will retain the same NAME.
let r=tL(e,t.attributes.NAME);if(!r||t.sidx)// consequence.
return;// Since we don't yet support early available timelines, we don't need to support
// playlists with no segments.
let s=t.segments[0],n=r.segments.findIndex(function(e){return Math.abs(e.presentationTime-s.presentationTime)<tI});// In this case the media sequence should account for this update, and the new segments
// should be marked as discontinuous from the prior content, since the last prior
// timeline was removed.
if(-1===n){tO({playlist:t,mediaSequence:r.mediaSequence+r.segments.length}),t.segments[0].discontinuity=!0,t.discontinuityStarts.unshift(0),(!r.segments.length&&t.timeline>r.timeline||r.segments.length&&t.timeline>r.segments[r.segments.length-1].timeline)&&t.discontinuitySequence--;return}// If the first segment matched with a prior segment on a discontinuity (it's matching
// on the first segment of a period), then the discontinuitySequence shouldn't be the
// timeline's matching one, but instead should be the one prior, and the first segment
// of the new manifest should be marked with a discontinuity.
//
// The reason for this special case is that discontinuity sequence shows how many
// discontinuities have fallen off of the playlist, and discontinuities are marked on
// the first segment of a new "timeline." Because of this, while DASH will retain that
// Period while the "timeline" exists, HLS keeps track of it via the discontinuity
// sequence, and that first segment is an indicator, but can be removed before that
// timeline is gone.
let a=r.segments[n];a.discontinuity&&!s.discontinuity&&(s.discontinuity=!0,t.discontinuityStarts.unshift(0),t.discontinuitySequence--),tO({playlist:t,mediaSequence:r.segments[n].number})})},tN=({oldManifest:e,newManifest:t})=>{// Starting from v4.1.2 of the IOP, section 4.4.3.3 states:
//
// "MPD@availabilityStartTime and Period@start shall not be changed over MPD updates."
//
// This was added from https://github.com/Dash-Industry-Forum/DASH-IF-IOP/issues/160
//
// Because of this change, and the difficulty of supporting periods with changing start
// times, periods with changing start times are not supported. This makes the logic much
// simpler, since periods with the same start time can be considerred the same period
// across refreshes.
//
// To give an example as to the difficulty of handling periods where the start time may
// change, if a single period manifest is refreshed with another manifest with a single
// period, and both the start and end times are increased, then the only way to determine
// if it's a new period or an old one that has changed is to look through the segments of
// each playlist and determine the presentation time bounds to find a match. In addition,
// if the period start changed to exceed the old period end, then there would be no
// match, and it would not be possible to determine whether the refreshed period is a new
// one or the old one.
let i=e.playlists.concat(tP(e)),r=t.playlists.concat(tP(t));return(// there's a "memory leak" in that it will never stop growing, in reality, only a couple
// of properties are saved for each seen Period. Even long running live streams won't
// generate too many Periods, unless the stream is watched for decades. In the future,
// this can be optimized by mapping to discontinuity sequence numbers for each timeline,
// but it may not become an issue, and the additional info can be useful for debugging.
t.timelineStarts=tA([e.timelineStarts,t.timelineStarts]),tR({oldPlaylists:i,newPlaylists:r,timelineStarts:t.timelineStarts}),t)},tM=e=>e&&e.uri+"-"+tT(e.byterange),tU=e=>{// Break out playlists into groups based on their baseUrl
let t=e.reduce(function(e,t){return e[t.attributes.baseUrl]||(e[t.attributes.baseUrl]=[]),e[t.attributes.baseUrl].push(t),e},{}),i=[];return Object.values(t).forEach(e=>{let t=tp(e.reduce((e,t)=>{// assuming playlist IDs are the same across periods
// TODO: handle multiperiod where representation sets are not the same
// across periods
let i=t.attributes.id+(t.attributes.lang||"");return e[i]?(t.segments&&(t.segments[0]&&(t.segments[0].discontinuity=!0),e[i].segments.push(...t.segments)),t.attributes.contentProtection&&(e[i].attributes.contentProtection=t.attributes.contentProtection)):(// First Period
e[i]=t,e[i].attributes.timelineStarts=[]),e[i].attributes.timelineStarts.push({// Although they represent the same number, it's important to have both to make it
// compatible with HLS potentially having a similar attribute.
start:t.attributes.periodStart,timeline:t.attributes.periodStart}),e},{}));i=i.concat(t)}),i.map(e=>(e.discontinuityStarts=ty(e.segments||[],"discontinuity"),e))},tB=(e,t)=>{let i=tM(e.sidx),r=i&&t[i]&&t[i].sidx;return r&&tx(e,r,e.sidx.resolvedUri),e},tF=(e,t={})=>{if(!Object.keys(t).length)return e;for(let i in e)e[i]=tB(e[i],t);return e},tj=({attributes:e,segments:t,sidx:i,mediaSequence:r,discontinuitySequence:s,discontinuityStarts:n},a)=>{let o={attributes:{NAME:e.id,BANDWIDTH:e.bandwidth,CODECS:e.codecs,"PROGRAM-ID":1},uri:"",endList:"static"===e.type,timeline:e.periodStart,resolvedUri:e.baseUrl||"",targetDuration:e.duration,discontinuitySequence:s,discontinuityStarts:n,timelineStarts:e.timelineStarts,mediaSequence:r,segments:t};return e.contentProtection&&(o.contentProtection=e.contentProtection),e.serviceLocation&&(o.attributes.serviceLocation=e.serviceLocation),i&&(o.sidx=i),a&&(o.attributes.AUDIO="audio",o.attributes.SUBTITLES="subs"),o},tq=({attributes:e,segments:t,mediaSequence:i,discontinuityStarts:r,discontinuitySequence:s})=>{void 0===t&&(// vtt tracks may use single file in BaseURL
t=[{uri:e.baseUrl,timeline:e.periodStart,resolvedUri:e.baseUrl||"",duration:e.sourceDuration,number:0}],e.duration=e.sourceDuration);let n={NAME:e.id,BANDWIDTH:e.bandwidth,"PROGRAM-ID":1};e.codecs&&(n.CODECS=e.codecs);let a={attributes:n,uri:"",endList:"static"===e.type,timeline:e.periodStart,resolvedUri:e.baseUrl||"",targetDuration:e.duration,timelineStarts:e.timelineStarts,discontinuityStarts:r,discontinuitySequence:s,mediaSequence:i,segments:t};return e.serviceLocation&&(a.attributes.serviceLocation=e.serviceLocation),a},t$=(e,t={},i=!1)=>{let r;let s=e.reduce((e,s)=>{let n=s.attributes.role&&s.attributes.role.value||"",a=s.attributes.lang||"",o=s.attributes.label||"main";if(a&&!s.attributes.label){let e=n?` (${n})`:"";o=`${s.attributes.lang}${e}`}e[o]||(e[o]={language:a,autoselect:!0,default:"main"===n,playlists:[],uri:""});let l=tB(tj(s,i),t);return e[o].playlists.push(l),void 0===r&&"main"===n&&((r=s).default=!0),e},{});// if no playlists have role "main", mark the first as main
if(!r){let e=Object.keys(s)[0];s[e].default=!0}return s},tH=(e,t={})=>e.reduce((e,i)=>{let r=i.attributes.label||i.attributes.lang||"text";return e[r]||(e[r]={language:r,default:!1,autoselect:!1,playlists:[],uri:""}),e[r].playlists.push(tB(tq(i),t)),e},{}),tV=e=>e.reduce((e,t)=>(t&&t.forEach(t=>{let{channel:i,language:r}=t;e[r]={autoselect:!1,default:!1,instreamId:i,language:r},t.hasOwnProperty("aspectRatio")&&(e[r].aspectRatio=t.aspectRatio),t.hasOwnProperty("easyReader")&&(e[r].easyReader=t.easyReader),t.hasOwnProperty("3D")&&(e[r]["3D"]=t["3D"])}),e),{}),tz=({attributes:e,segments:t,sidx:i,discontinuityStarts:r})=>{let s={attributes:{NAME:e.id,AUDIO:"audio",SUBTITLES:"subs",RESOLUTION:{width:e.width,height:e.height},CODECS:e.codecs,BANDWIDTH:e.bandwidth,"PROGRAM-ID":1},uri:"",endList:"static"===e.type,timeline:e.periodStart,resolvedUri:e.baseUrl||"",targetDuration:e.duration,discontinuityStarts:r,timelineStarts:e.timelineStarts,segments:t};return e.frameRate&&(s.attributes["FRAME-RATE"]=e.frameRate),e.contentProtection&&(s.contentProtection=e.contentProtection),e.serviceLocation&&(s.attributes.serviceLocation=e.serviceLocation),i&&(s.sidx=i),s},tW=({attributes:e})=>"video/mp4"===e.mimeType||"video/webm"===e.mimeType||"video"===e.contentType,tG=({attributes:e})=>"audio/mp4"===e.mimeType||"audio/webm"===e.mimeType||"audio"===e.contentType,tX=({attributes:e})=>"text/vtt"===e.mimeType||"text"===e.contentType,tK=(e,t)=>{// increment all segments sequentially
e.forEach(e=>{e.mediaSequence=0,e.discontinuitySequence=t.findIndex(function({timeline:t}){return t===e.timeline}),e.segments&&e.segments.forEach((e,t)=>{e.number=t})})},tY=e=>e?Object.keys(e).reduce((t,i)=>{let r=e[i];return t.concat(r.playlists)},[]):[],tQ=({dashPlaylists:e,locations:t,contentSteering:i,sidxMapping:r={},previousManifest:s,eventStream:n})=>{if(!e.length)return{};// grab all main manifest attributes
let{sourceDuration:a,type:o,suggestedPresentationDelay:l,minimumUpdatePeriod:u}=e[0].attributes,h=tU(e.filter(tW)).map(tz),d=tU(e.filter(tG)),c=tU(e.filter(tX)),p=e.map(e=>e.attributes.captionServices).filter(Boolean),m={allowCache:!0,discontinuityStarts:[],segments:[],endList:!0,mediaGroups:{AUDIO:{},VIDEO:{},"CLOSED-CAPTIONS":{},SUBTITLES:{}},uri:"",duration:a,playlists:tF(h,r)};u>=0&&(m.minimumUpdatePeriod=1e3*u),t&&(m.locations=t),i&&(m.contentSteering=i),"dynamic"===o&&(m.suggestedPresentationDelay=l),n&&n.length>0&&(m.eventStream=n);let f=0===m.playlists.length,g=d.length?t$(d,r,f):null,y=c.length?tH(c,r):null,_=h.concat(tY(g),tY(y)),b=_.map(({timelineStarts:e})=>e);return(m.timelineStarts=tA(b),tK(_,m.timelineStarts),g&&(m.mediaGroups.AUDIO.audio=g),y&&(m.mediaGroups.SUBTITLES.subs=y),p.length&&(m.mediaGroups["CLOSED-CAPTIONS"].cc=tV(p)),s)?tN({oldManifest:s,newManifest:m}):m},tJ=(e,t,i)=>{let{NOW:r,clientOffset:s,availabilityStartTime:n,timescale:a=1,periodStart:o=0,minimumUpdatePeriod:l=0}=e;return Math.ceil((((r+s)/1e3+l-(n+o))*a-t)/i)},tZ=(e,t)=>{let{type:i,minimumUpdatePeriod:r=0,media:s="",sourceDuration:n,timescale:a=1,startNumber:o=1,periodStart:l}=e,u=[],h=-1;for(let d=0;d<t.length;d++){let c;let p=t[d],m=p.d,f=p.r||0,g=p.t||0;if(h<0&&(h=g),g&&g>h&&// TODO: How to handle this type of discontinuity
// timeline++ here would treat it like HLS discontuity and content would
// get appended without gap
// E.G.
//  <S t="0" d="1" />
//  <S d="1" />
//  <S d="1" />
//  <S t="5" d="1" />
// would have $Time$ values of [0, 1, 2, 5]
// should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)
// or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)
// does the value of sourceDuration consider this when calculating arbitrary
// negative @r repeat value?
// E.G. Same elements as above with this added at the end
//  <S d="1" r="-1" />
//  with a sourceDuration of 10
// Would the 2 gaps be included in the time duration calculations resulting in
// 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments
// with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?
(h=g),f<0){let o=d+1;c=o===t.length?"dynamic"===i&&r>0&&s.indexOf("$Number$")>0?tJ(e,h,m):(n*a-h)/m:(t[o].t-h)/m}else c=f+1;let y=o+u.length+c,_=o+u.length;for(;_<y;)u.push({number:_,duration:m/a,time:h,timeline:l}),h+=m,_++}return u},t0=/\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g,t1=e=>(t,i,r,s)=>{if("$$"===t)return"$";if(void 0===e[i])return t;let n=""+e[i];return"RepresentationID"===i?n:(s=r?parseInt(s,10):1,n.length>=s)?n:`${Array(s-n.length+1).join("0")}${n}`},t2=(e,t)=>e.replace(t0,t1(t)),t4=(e,t)=>e.duration||t?e.duration?tk(e):tZ(e,t):[{number:e.startNumber||1,duration:e.sourceDuration,time:0,timeline:e.periodStart}],t8=(e,t)=>{let i={RepresentationID:e.id,Bandwidth:e.bandwidth||0},{initialization:r={sourceURL:"",range:""}}=e,s=tv({baseUrl:e.baseUrl,source:t2(r.sourceURL,i),range:r.range}),n=t4(e,t);return n.map(t=>{i.Number=t.number,i.Time=t.time;let r=t2(e.media||"",i),n=e.timescale||1,a=e.presentationTimeOffset||0,o=e.periodStart+(t.time-a)/n,l={uri:r,timeline:t.timeline,duration:t.duration,resolvedUri:tl(e.baseUrl||"",r),map:s,number:t.number,presentationTime:o};// See DASH spec section 5.3.9.2.2
return l})},t5=(e,t)=>{let{baseUrl:i,initialization:r={}}=e,s=tv({baseUrl:i,source:r.sourceURL,range:r.range}),n=tv({baseUrl:i,source:t.media,range:t.mediaRange});return n.map=s,n},t3=(e,t)=>{let i;let{duration:r,segmentUrls:s=[],periodStart:n}=e;// Per spec (5.3.9.2.1) no way to determine segment duration OR
// if both SegmentTimeline and @duration are defined, it is outside of spec.
if(!r&&!t||r&&t)throw Error(tb.SEGMENT_TIME_UNSPECIFIED);let a=s.map(t=>t5(e,t));r&&(i=tk(e)),t&&(i=tZ(e,t));let o=i.map((t,i)=>{if(a[i]){let r=a[i],s=e.timescale||1,o=e.presentationTimeOffset||0;// See DASH spec section 5.3.9.2.2
return r.timeline=t.timeline,r.duration=t.duration,r.number=t.number,r.presentationTime=n+(t.time-o)/s,r}// Since we're mapping we should get rid of any blank segments (in case
// the given SegmentTimeline is handling for more elements than we have
// SegmentURLs for).
}).filter(e=>e);return o},t6=({attributes:e,segmentInfo:t})=>{let i,r;t.template?(r=t8,i=tc(e,t.template)):t.base?(r=tC,i=tc(e,t.base)):t.list&&(r=t3,i=tc(e,t.list));let s={attributes:e};if(!r)return s;let n=r(i,t.segmentTimeline);// The @duration attribute will be used to determin the playlist's targetDuration which
// must be in seconds. Since we've generated the segment list, we no longer need
// @duration to be in @timescale units, so we can convert it here.
if(i.duration){let{duration:e,timescale:t=1}=i;i.duration=e/t}else n.length?// as target duration
i.duration=n.reduce((e,t)=>Math.max(e,Math.ceil(t.duration)),0):i.duration=0;return s.attributes=i,s.segments=n,t.base&&i.indexRange&&(s.sidx=n[0],s.segments=[]),s},t7=e=>e.map(t6),t9=(e,t)=>tg(e.childNodes).filter(({tagName:e})=>e===t),ie=e=>e.textContent.trim(),it=e=>parseFloat(e.split("/").reduce((e,t)=>e/t)),ii=e=>{let t=/P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/.exec(e);if(!t)return 0;let[i,r,s,n,a,o]=t.slice(1);return 31536e3*parseFloat(i||0)+2592e3*parseFloat(r||0)+86400*parseFloat(s||0)+3600*parseFloat(n||0)+60*parseFloat(a||0)+parseFloat(o||0)},ir=e=>(/^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/.test(e)&&(e+="Z"),Date.parse(e)),is={/**
   * Specifies the duration of the entire Media Presentation. Format is a duration string
   * as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */mediaPresentationDuration:e=>ii(e),/**
   * Specifies the Segment availability start time for all Segments referred to in this
   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability
   * time. Format is a date string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The date as seconds from unix epoch
   */availabilityStartTime:e=>ir(e)/1e3,/**
   * Specifies the smallest period between potential changes to the MPD. Format is a
   * duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */minimumUpdatePeriod:e=>ii(e),/**
   * Specifies the suggested presentation delay. Format is a
   * duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */suggestedPresentationDelay:e=>ii(e),/**
   * specifices the type of mpd. Can be either "static" or "dynamic"
   *
   * @param {string} value
   *        value of attribute as a string
   *
   * @return {string}
   *         The type as a string
   */type:e=>e,/**
   * Specifies the duration of the smallest time shifting buffer for any Representation
   * in the MPD. Format is a duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */timeShiftBufferDepth:e=>ii(e),/**
   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.
   * Format is a duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */start:e=>ii(e),/**
   * Specifies the width of the visual presentation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed width
   */width:e=>parseInt(e,10),/**
   * Specifies the height of the visual presentation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed height
   */height:e=>parseInt(e,10),/**
   * Specifies the bitrate of the representation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed bandwidth
   */bandwidth:e=>parseInt(e,10),/**
   * Specifies the frame rate of the representation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed frame rate
   */frameRate:e=>it(e),/**
   * Specifies the number of the first Media Segment in this Representation in the Period
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed number
   */startNumber:e=>parseInt(e,10),/**
   * Specifies the timescale in units per seconds
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed timescale
   */timescale:e=>parseInt(e,10),/**
   * Specifies the presentationTimeOffset.
   *
   * @param {string} value
   *        value of the attribute as a string
   *
   * @return {number}
   *         The parsed presentationTimeOffset
   */presentationTimeOffset:e=>parseInt(e,10),/**
   * Specifies the constant approximate Segment duration
   * NOTE: The <Period> element also contains an @duration attribute. This duration
   *       specifies the duration of the Period. This attribute is currently not
   *       supported by the rest of the parser, however we still check for it to prevent
   *       errors.
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed duration
   */duration(e){let t=parseInt(e,10);return isNaN(t)?ii(e):t},/**
   * Specifies the Segment duration, in units of the value of the @timescale.
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed duration
   */d:e=>parseInt(e,10),/**
   * Specifies the MPD start time, in @timescale units, the first Segment in the series
   * starts relative to the beginning of the Period
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed time
   */t:e=>parseInt(e,10),/**
   * Specifies the repeat count of the number of following contiguous Segments with the
   * same duration expressed by the value of @d
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed number
   */r:e=>parseInt(e,10),/**
   * Specifies the presentationTime.
   *
   * @param {string} value
   *        value of the attribute as a string
   *
   * @return {number}
   *         The parsed presentationTime
   */presentationTime:e=>parseInt(e,10),/**
   * Default parser for all other attributes. Acts as a no-op and just returns the value
   * as a string
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {string}
   *         Unparsed value
   */DEFAULT:e=>e},ia=e=>e&&e.attributes?tg(e.attributes).reduce((e,t)=>{let i=is[t.name]||is.DEFAULT;return e[t.name]=i(t.value),e},{}):{},io={"urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b":"org.w3.clearkey","urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed":"com.widevine.alpha","urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95":"com.microsoft.playready","urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb":"com.adobe.primetime"},il=(e,t)=>t.length?tf(e.map(function(e){return t.map(function(t){let i=ie(t),r=tl(e.baseUrl,i),s=tc(ia(t),{baseUrl:r});return r!==i&&!s.serviceLocation&&e.serviceLocation&&(s.serviceLocation=e.serviceLocation),s})})):e,iu=e=>{let t=t9(e,"SegmentTemplate")[0],i=t9(e,"SegmentList")[0],r=i&&t9(i,"SegmentURL").map(e=>tc({tag:"SegmentURL"},ia(e))),s=t9(e,"SegmentBase")[0],n=i||t,a=n&&t9(n,"SegmentTimeline")[0],o=i||s||t,l=o&&t9(o,"Initialization")[0],u=t&&ia(t);u&&l?u.initialization=l&&ia(l):u&&u.initialization&&// later functions will rely on for the initialization segment.  This is only valid
// for <SegmentTemplate>
(u.initialization={sourceURL:u.initialization});let h={template:u,segmentTimeline:a&&t9(a,"S").map(e=>ia(e)),list:i&&tc(ia(i),{segmentUrls:r,initialization:ia(l)}),base:s&&tc(ia(s),{initialization:ia(l)})};return Object.keys(h).forEach(e=>{h[e]||delete h[e]}),h},ih=(e,t,i)=>r=>{let s=t9(r,"BaseURL"),n=il(t,s),a=tc(e,ia(r)),o=iu(r);return n.map(e=>({segmentInfo:tc(i,o),attributes:tc(a,e)}))},id=e=>e.reduce((e,t)=>{let i=ia(t);// Although it could be argued that according to the UUID RFC spec the UUID string (a-f chars) should be generated
    // as a lowercase string it also mentions it should be treated as case-insensitive on input. Since the key system
    // UUIDs in the keySystemsMap are hardcoded as lowercase in the codebase there isn't any reason not to do
    // .toLowerCase() on the input UUID string from the manifest (at least I could not think of one).
    i.schemeIdUri&&(i.schemeIdUri=i.schemeIdUri.toLowerCase());let r=io[i.schemeIdUri];if(r){e[r]={attributes:i};let s=t9(t,"cenc:pssh")[0];if(s){let t=ie(s);e[r].pssh=t&&function(e){for(var t=/*@__PURE__*/w(I).atob?/*@__PURE__*/w(I).atob(e):en.from(e,"base64").toString("binary"),i=new Uint8Array(t.length),r=0;r<t.length;r++)i[r]=t.charCodeAt(r);return i}(t)}}return e},{}),ic=e=>{// 608 captions
if("urn:scte:dash:cc:cea-608:2015"===e.schemeIdUri){let t="string"!=typeof e.value?[]:e.value.split(";");return t.map(e=>{let t,i;return i=e,/^CC\d=/.test(e)?[t,i]=e.split("="):/^CC\d$/.test(e)&&(t=e),{channel:t,language:i}})}if("urn:scte:dash:cc:cea-708:2015"===e.schemeIdUri){let t="string"!=typeof e.value?[]:e.value.split(";");return t.map(e=>{let t={// service or channel number 1-63
channel:void 0,// language is a 3ALPHA per ISO 639.2/B
// field is required
language:void 0,// BIT 1/0 or ?
// default value is 1, meaning 16:9 aspect ratio, 0 is 4:3, ? is unknown
aspectRatio:1,// BIT 1/0
// easy reader flag indicated the text is tailed to the needs of beginning readers
// default 0, or off
easyReader:0,// BIT 1/0
// If 3d metadata is present (CEA-708.1) then 1
// default 0
"3D":0};if(/=/.test(e)){let[i,r=""]=e.split("=");t.channel=i,t.language=e,r.split(",").forEach(e=>{let[i,r]=e.split(":");"lang"===i?t.language=r:"er"===i?t.easyReader=Number(r):"war"===i?t.aspectRatio=Number(r):"3D"===i&&(t["3D"]=Number(r))})}else t.language=e;return t.channel&&(t.channel="SERVICE"+t.channel),t})}},ip=e=>tf(t9(e.node,"EventStream").map(t=>{let i=ia(t),r=i.schemeIdUri;return t9(t,"Event").map(t=>{let s=ia(t),n=s.presentationTime||0,a=i.timescale||1,o=s.duration||0,l=n/a+e.attributes.start;return{schemeIdUri:r,value:i.value,id:s.id,start:l,end:l+o/a,messageData:ie(t)||s.messageData,contentEncoding:i.contentEncoding,presentationTimeOffset:i.presentationTimeOffset||0}})})),im=(e,t,i)=>r=>{let s=ia(r),n=il(t,t9(r,"BaseURL")),a=t9(r,"Role")[0],o={role:ia(a)},l=tc(e,s,o),u=t9(r,"Accessibility")[0],h=ic(ia(u));h&&(l=tc(l,{captionServices:h}));let d=t9(r,"Label")[0];if(d&&d.childNodes.length){let e=d.childNodes[0].nodeValue.trim();l=tc(l,{label:e})}let c=id(t9(r,"ContentProtection"));Object.keys(c).length&&(l=tc(l,{contentProtection:c}));let p=iu(r),m=t9(r,"Representation"),f=tc(i,p);return tf(m.map(ih(l,n,f)))},ig=(e,t)=>(i,r)=>{let s=il(t,t9(i.node,"BaseURL")),n=tc(e,{periodStart:i.attributes.start});"number"==typeof i.attributes.duration&&(n.periodDuration=i.attributes.duration);let a=t9(i.node,"AdaptationSet"),o=iu(i.node);return tf(a.map(im(n,s,o)))},iy=(e,t)=>{// Return a null value if there are no ContentSteering tags
if(e.length>1&&t({type:"warn",message:"The MPD manifest should contain no more than one ContentSteering tag"}),!e.length)return null;let i=tc({serverURL:ie(e[0])},ia(e[0]));// Converts `queryBeforeStart` to a boolean, as well as setting the default value
return(// to `false` if it doesn't exist
i.queryBeforeStart="true"===i.queryBeforeStart,i)},i_=({attributes:e,priorPeriodAttributes:t,mpdType:i})=>// Summary of period start time calculation from DASH spec section 5.3.2.1
    //
    // A period's start is the first period's start + time elapsed after playing all
    // prior periods to this one. Periods continue one after the other in time (without
    // gaps) until the end of the presentation.
    //
    // The value of Period@start should be:
    // 1. if Period@start is present: value of Period@start
    // 2. if previous period exists and it has @duration: previous Period@start +
    //    previous Period@duration
    // 3. if this is first period and MPD@type is 'static': 0
    // 4. in all other cases, consider the period an "early available period" (note: not
    //    currently supported)
    // (1)
    "number"==typeof e.start?e.start:t&&"number"==typeof t.start&&"number"==typeof t.duration?t.start+t.duration:t||"static"!==i?null:0,ib=(e,t={})=>{let{manifestUri:i="",NOW:r=Date.now(),clientOffset:s=0,eventHandler:// to be passed into the mpd parser as an option.
// In the future, we should enable stream parsing by using the Stream class from vhs-utils.
// This will support new features including a standardized event handler.
// See the m3u8 parser for examples of how stream parsing is currently used for HLS parsing.
// https://github.com/videojs/vhs-utils/blob/88d6e10c631e57a5af02c5a62bc7376cd456b4f5/src/stream.js#L9
n=function(){}}=t,a=t9(e,"Period");if(!a.length)throw Error(tb.INVALID_NUMBER_OF_PERIOD);let o=t9(e,"Location"),l=ia(e),u=il([{baseUrl:i}],t9(e,"BaseURL")),h=t9(e,"ContentSteering");l.type=l.type||"static",l.sourceDuration=l.mediaPresentationDuration||0,l.NOW=r,l.clientOffset=s,o.length&&(l.locations=o.map(ie));let d=[];// Since toAdaptationSets acts on individual periods right now, the simplest approach to
return(// adding properties that require looking at prior periods is to parse attributes and add
// missing ones before toAdaptationSets is called. If more such properties are added, it
// may be better to refactor toAdaptationSets.
a.forEach((e,t)=>{let i=ia(e),r=d[t-1];// Use the last modified prior period, as it may contain added information necessary
i.start=i_({attributes:i,priorPeriodAttributes:r?r.attributes:null,mpdType:l.type}),d.push({node:e,attributes:i})}),{locations:l.locations,contentSteeringInfo:iy(h,n),// TODO: There are occurences where this `representationInfo` array contains undesired
// duplicates. This generally occurs when there are multiple BaseURL nodes that are
// direct children of the MPD node. When we attempt to resolve URLs from a combination of the
// parent BaseURL and a child BaseURL, and the value does not resolve,
// we end up returning the child BaseURL multiple times.
// We need to determine a way to remove these duplicates in a safe way.
// See: https://github.com/videojs/mpd-parser/pull/17#discussion_r162750527
representationInfo:tf(d.map(ig(l,u))),eventStream:tf(d.map(ip))})},iv=e=>{let t,i;if(""===e)throw Error(tb.DASH_EMPTY_MANIFEST);let r=new g;try{i=(t=r.parseFromString(e,"application/xml"))&&"MPD"===t.documentElement.tagName?t.documentElement:null}catch(e){}if(!i||i&&i.getElementsByTagName("parsererror").length>0)throw Error(tb.DASH_INVALID_XML);return i},iT=e=>{let t=t9(e,"UTCTiming")[0];if(!t)return null;let i=ia(t);switch(i.schemeIdUri){case"urn:mpeg:dash:utc:http-head:2014":case"urn:mpeg:dash:utc:http-head:2012":i.method="HEAD";break;case"urn:mpeg:dash:utc:http-xsdate:2014":case"urn:mpeg:dash:utc:http-iso:2014":case"urn:mpeg:dash:utc:http-xsdate:2012":case"urn:mpeg:dash:utc:http-iso:2012":i.method="GET";break;case"urn:mpeg:dash:utc:direct:2014":case"urn:mpeg:dash:utc:direct:2012":i.method="DIRECT",i.value=Date.parse(i.value);break;default:throw Error(tb.UNSUPPORTED_UTC_TIMING_SCHEME)}return i},iS=(e,t={})=>{let i=ib(iv(e),t),r=t7(i.representationInfo);return tQ({dashPlaylists:r,locations:i.locations,contentSteering:i.contentSteeringInfo,sidxMapping:t.sidxMapping,previousManifest:t.previousManifest,eventStream:i.eventStream})},iE=e=>iT(iv(e));var iw={},ik=function(e){var t,i=new DataView(e.buffer,e.byteOffset,e.byteLength);return i.getBigUint64?(t=i.getBigUint64(0))<Number.MAX_SAFE_INTEGER?Number(t):t:4294967296*i.getUint32(0)+i.getUint32(4)};iw=function(e){var t=new DataView(e.buffer,e.byteOffset,e.byteLength),i={version:e[0],flags:new Uint8Array(e.subarray(1,4)),references:[],referenceId:t.getUint32(4),timescale:t.getUint32(8)},r=12;0===i.version?(i.earliestPresentationTime=t.getUint32(r),i.firstOffset=t.getUint32(r+4),r+=8):(// read 64 bits
i.earliestPresentationTime=ik(e.subarray(r)),i.firstOffset=ik(e.subarray(r+8)),r+=16),r+=2;var s=t.getUint16(r);for(r+=2;s>0;r+=12,s--)i.references.push({referenceType:(128&e[r])>>>7,referencedSize:2147483647&t.getUint32(r),subsegmentDuration:t.getUint32(r+4),startsWithSap:!!(128&e[r+8]),sapType:(112&e[r+8])>>>4,sapDeltaTime:268435455&t.getUint32(r+8)});return i};var iC=e7([73,68,51]),ix=function(e,t){void 0===t&&(t=0);var i=(e=e7(e))[t+5],r=e[t+6]<<21|e[t+7]<<14|e[t+8]<<7|e[t+9];return(16&i)>>4?r+20:r+10},iD=function e(t,i){return(void 0===i&&(i=0),(t=e7(t)).length-i<10||!ta(t,iC,{offset:i}))?i:(i+=ix(t,i),e(t,i))};new Uint8Array([79,112,117,115,72,101,97,100]);var iI=function(e){return"string"==typeof e?ts(e):e},iA=function(e){e=e7(e);for(var t=[],i=0;e.length>i;){var r=e[i],s=0,n=0,a=e[++n];for(n++;128&a;)s=(127&a)<<7,a=e[n],n++;s+=127&a;for(var o=0;o<y.length;o++){var l=y[o],u=l.id,h=l.parser;if(r===u){t.push(h(e.subarray(n,n+s)));break}}i+=s+n}return t};y=[{id:3,parser:function(e){var t={tag:3,id:e[0]<<8|e[1],flags:e[2],size:3,dependsOnEsId:0,ocrEsId:0,descriptors:[],url:""};// depends on es id
if(128&t.flags&&(t.dependsOnEsId=e[t.size]<<8|e[t.size+1],t.size+=2),64&t.flags){var i=e[t.size];t.url=tr(e.subarray(t.size+1,t.size+1+i)),t.size+=i}// ocr es id
return 32&t.flags&&(t.ocrEsId=e[t.size]<<8|e[t.size+1],t.size+=2),t.descriptors=iA(e.subarray(t.size))||[],t}},{id:4,parser:function(e){return{tag:4,oti:e[0],streamType:e[1],bufferSize:e[2]<<16|e[3]<<8|e[4],maxBitrate:e[5]<<24|e[6]<<16|e[7]<<8|e[8],avgBitrate:e[9]<<24|e[10]<<16|e[11]<<8|e[12],descriptors:iA(e.subarray(13))}}},{id:5,parser:function(e){// DecoderSpecificInfo
return{tag:5,bytes:e}}},{id:6,parser:function(e){// SLConfigDescriptor
return{tag:6,bytes:e}}}];var iL=function e(t,i,r){void 0===r&&(r=!1),i=Array.isArray(s=i)?s.map(function(e){return iI(e)}):[iI(s)],t=e7(t);var s,n=[];if(!i.length)return n;for(var a=0;a<t.length;){var o=(t[a]<<24|t[a+1]<<16|t[a+2]<<8|t[a+3])>>>0,l=t.subarray(a+4,a+8);if(0===o)break;var u=a+o;if(u>t.length){// this box is bigger than the number of bytes we have
// and complete is set, we cannot find any more boxes.
if(r)break;u=t.length}var h=t.subarray(a+8,u);ta(l,i[0])&&(1===i.length?// looking for
n.push(h):n.push.apply(n,e(h,i.slice(1),r))),a=u}// we've finished searching all of bytes
return n},iP={EBML:e7([26,69,223,163]),DocType:e7([66,130]),Segment:e7([24,83,128,103]),SegmentInfo:e7([21,73,169,102]),Tracks:e7([22,84,174,107]),Track:e7([174]),TrackNumber:e7([215]),DefaultDuration:e7([35,227,131]),TrackEntry:e7([174]),TrackType:e7([131]),FlagDefault:e7([136]),CodecID:e7([134]),CodecPrivate:e7([99,162]),VideoTrack:e7([224]),AudioTrack:e7([225]),// Not used yet, but will be used for live webm/mkv
// see https://www.matroska.org/technical/basics.html#block-structure
// see https://www.matroska.org/technical/basics.html#simpleblock-structure
Cluster:e7([31,67,182,117]),Timestamp:e7([231]),TimestampScale:e7([42,215,177]),BlockGroup:e7([160]),BlockDuration:e7([155]),Block:e7([161]),SimpleBlock:e7([163])},iO=[128,64,32,16,8,4,2,1],iR=function(e){for(var t=1,i=0;i<iO.length&&!(e&iO[i]);i++)t++;return t},iN=function(e,t,i,r){void 0===i&&(i=!0),void 0===r&&(r=!1);var s=iR(e[t]),n=e.subarray(t,t+s);return i&&(n=Array.prototype.slice.call(e,t,t+s),n[0]^=iO[s-1]),{length:s,value:tt(n,{signed:r}),bytes:n}},iM=function e(t){return"string"==typeof t?t.match(/.{1,2}/g).map(function(t){return e(t)}):"number"==typeof t?ti(t):t},iU=function e(t,i,r){if(r>=i.length)return i.length;var s=iN(i,r,!1);if(ta(t.bytes,s.bytes))return r;var n=iN(i,r+s.length);return e(t,i,r+n.length+n.value+s.length)},iB=function e(t,i){i=Array.isArray(r=i)?r.map(function(e){return iM(e)}):[iM(r)],t=e7(t);var r,s=[];if(!i.length)return s;for(var n=0;n<t.length;){var a=iN(t,n,!1),o=iN(t,n+a.length),l=n+a.length+o.length;127===o.value&&(o.value=iU(a,t,l),o.value!==t.length&&(o.value-=l));var u=l+o.value>t.length?t.length:l+o.value,h=t.subarray(l,u);ta(i[0],a.bytes)&&(1===i.length?// looking for
s.push(h):// of this one
s=s.concat(e(h,i.slice(1)))),n+=a.length+o.length+h.length}return s},iF=e7([0,0,0,1]),ij=e7([0,0,1]),iq=e7([0,0,3]),i$=function(e){for(var t=[],i=1;i<e.length-2;)ta(e.subarray(i,i+3),iq)&&(t.push(i+2),i++),i++;// If no Emulation Prevention Bytes were found just return the original
// array
if(0===t.length)return e;// Create a new array to hold the NAL unit data
var r=e.length-t.length,s=new Uint8Array(r),n=0;for(i=0;i<r;n++,i++)n===t[0]&&(// Skip this byte
n++,t.shift()),s[i]=e[n];return s},iH=function(e,t,i,r){void 0===r&&(r=1/0),e=e7(e),i=[].concat(i);// we reach the end of bytes
// we reach the maximum number of nals they want to seach
// NOTE: that we disregard nalLimit when we have found the start
// of the nal we want so that we can find the end of the nal we want.
for(var s,n=0,a=0;n<e.length&&(a<r||s);){var o=void 0;// we are unsynced,
// find the next nal unit
if(ta(e.subarray(n),iF)?o=4:ta(e.subarray(n),ij)&&(o=3),!o){n++;continue}if(a++,s)return i$(e.subarray(s,n));var l=void 0;"h264"===t?l=31&e[n+o]:"h265"===t&&(l=e[n+o]>>1&63),-1!==i.indexOf(l)&&(s=n+o),// nal header is 1 length for h264, and 2 for h265
n+=o+("h264"===t?1:2)}return e.subarray(0,0)},iV={// "webm" string literal in hex
webm:e7([119,101,98,109]),// "matroska" string literal in hex
matroska:e7([109,97,116,114,111,115,107,97]),// "fLaC" string literal in hex
flac:e7([102,76,97,67]),// "OggS" string literal in hex
ogg:e7([79,103,103,83]),// ac-3 sync byte, also works for ec-3 as that is simply a codec
// of ac-3
ac3:e7([11,119]),// "RIFF" string literal in hex used for wav and avi
riff:e7([82,73,70,70]),// "AVI" string literal in hex
avi:e7([65,86,73]),// "WAVE" string literal in hex
wav:e7([87,65,86,69]),// "ftyp3g" string literal in hex
"3gp":e7([102,116,121,112,51,103]),// "ftyp" string literal in hex
mp4:e7([102,116,121,112]),// "styp" string literal in hex
fmp4:e7([115,116,121,112]),// "ftypqt" string literal in hex
mov:e7([102,116,121,112,113,116]),// moov string literal in hex
moov:e7([109,111,111,118]),// moof string literal in hex
moof:e7([109,111,111,102])},iz={aac:function(e){var t=iD(e);return ta(e,[255,16],{offset:t,mask:[255,22]})},mp3:function(e){var t=iD(e);return ta(e,[255,2],{offset:t,mask:[255,6]})},webm:function(e){return ta(iB(e,[iP.EBML,iP.DocType])[0],iV.webm)},mkv:function(e){return ta(iB(e,[iP.EBML,iP.DocType])[0],iV.matroska)},mp4:function(e){return(// if this file is another base media file format, it is not mp4
!(iz["3gp"](e)||iz.mov(e))&&(!!(ta(e,iV.mp4,{offset:4})||ta(e,iV.fmp4,{offset:4})||ta(e,iV.moof,{offset:4})||ta(e,iV.moov,{offset:4}))||void 0))},mov:function(e){return ta(e,iV.mov,{offset:4})},"3gp":function(e){return ta(e,iV["3gp"],{offset:4})},ac3:function(e){var t=iD(e);return ta(e,iV.ac3,{offset:t})},ts:function(e){if(e.length<189&&e.length>=1)return 71===e[0];for(var t=0;t+188<e.length&&t<188;){if(71===e[t]&&71===e[t+188])return!0;t+=1}return!1},flac:function(e){var t=iD(e);return ta(e,iV.flac,{offset:t})},ogg:function(e){return ta(e,iV.ogg)},avi:function(e){return ta(e,iV.riff)&&ta(e,iV.avi,{offset:8})},wav:function(e){return ta(e,iV.riff)&&ta(e,iV.wav,{offset:8})},h264:function(e){// find seq_parameter_set_rbsp
return iH(e,"h264",7,3).length},h265:function(e){// find video_parameter_set_rbsp or seq_parameter_set_rbsp
return iH(e,"h265",[32,33],3).length}},iW=Object.keys(iz)// remove ts, h264, h265
.filter(function(e){return"ts"!==e&&"h264"!==e&&"h265"!==e})// add it back to the bottom
.concat(["ts","h264","h265"]);iW.forEach(function(e){var t=iz[e];iz[e]=function(e){return t(e7(e))}});var iG=function(e){e=e7(e);for(var t=0;t<iW.length;t++){var i=iW[t];if(iz[i](e))return i}return""},iX={};// fmp4 is not a container
iX={ONE_SECOND_IN_TS:9e4,secondsToVideoTs:_=function(e){return 9e4*e},secondsToAudioTs:b=function(e,t){return e*t},videoTsToSeconds:v=function(e){return e/9e4},audioTsToSeconds:T=function(e,t){return e/t},audioTsToVideoTs:function(e,t){return _(T(e,t))},videoTsToAudioTs:function(e,t){return b(v(e),t)},metadataTsToSeconds:function(e,t,i){return v(i?e:e-t)}};var iK="8.6.1";/**
 * An Object that contains lifecycle hooks as keys which point to an array
 * of functions that are run when a lifecycle is triggered
 *
 * @private
 */const iY={},iQ=function(e,t){return iY[e]=iY[e]||[],t&&(iY[e]=iY[e].concat(t)),iY[e]},iJ=function(e,t){let i=iQ(e).indexOf(t);return!(i<=-1)&&(iY[e]=iY[e].slice(),iY[e].splice(i,1),!0)},iZ={prefixed:!0},i0=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror","fullscreen"],// WebKit
["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror","-webkit-full-screen"]],i1=i0[0];// determine the supported set of functions
for(let t=0;t<i0.length;t++)if(i0[t][1]in /*@__PURE__*/w(A)){e=i0[t];break}// map the browser API names to the spec API names
if(e){for(let t=0;t<e.length;t++)iZ[i1[t]]=e[t];iZ.prefixed=e[0]!==i1[0]}/**
 * @file create-logger.js
 * @module create-logger
 */// This is the private tracking variable for the logging history.
let i2=[];/**
 * Log messages to the console and history based on the type of message
 *
 * @private
 * @param  {string} name
 *         The name of the console method to use.
 *
 * @param  {Object} log
 *         The arguments to be passed to the matching console method.
 *
 * @param {string} [styles]
 *        styles for name
 */const i4=(e,t,i)=>(r,s,n)=>{let a=t.levels[s],o=RegExp(`^(${a})$`),l=e;// Add a clone of the args at this point to history.
    if("log"!==r&&n.unshift(r.toUpperCase()+":"),i&&(l=`%c${e}`,n.unshift(i)),// Add console prefix after adding to history.
    n.unshift(l+":"),i2){i2.push([].concat(n));// only store 1000 history entries
    let e=i2.length-1e3;i2.splice(0,e>0?e:0)}// If there's no console then don't try to output messages, but they will
    // still be stored in history.
    if(!/*@__PURE__*/w(I).console)return;// Was setting these once outside of this function, but containing them
    // in the function makes it easier to test cases where console doesn't exist
    // when the module is executed.
    let u=/*@__PURE__*/w(I).console[r];u||"debug"!==r||// should default to the closest comparable log.
    (u=/*@__PURE__*/w(I).console.info||/*@__PURE__*/w(I).console.log),u&&a&&o.test(r)&&u[Array.isArray(n)?"apply":"call"](/*@__PURE__*/w(I).console,n)},i8=function e(t,i=":",r=""){// This is the private tracking variable for logging level.
let s,n="info",a=function(...e){s("log",n,e)};return(// This is the logByType helper that the logging methods below use
s=i4(t,a,r),/**
   * Create a new subLogger which chains the old name to the new name.
   *
   * For example, doing `videojs.log.createLogger('player')` and then using that logger will log the following:
   * ```js
   *  mylogger('foo');
   *  // > VIDEOJS: player: foo
   * ```
   *
   * @param {string} subName
   *        The name to add call the new logger
   * @param {string} [subDelimiter]
   *        Optional delimiter
   * @param {string} [subStyles]
   *        Optional styles
   * @return {Object}
   */a.createLogger=(s,n,a)=>{let o=void 0!==n?n:i,l=void 0!==a?a:r,u=`${t} ${o} ${s}`;return e(u,o,l)},/**
   * Create a new logger.
   *
   * @param {string} newName
   *        The name for the new logger
   * @param {string} [newDelimiter]
   *        Optional delimiter
   * @param {string} [newStyles]
   *        Optional styles
   * @return {Object}
   */a.createNewLogger=(t,i,r)=>e(t,i,r),/**
   * Enumeration of available logging levels, where the keys are the level names
   * and the values are `|`-separated strings containing logging methods allowed
   * in that logging level. These strings are used to create a regular expression
   * matching the function name being called.
   *
   * Levels provided by Video.js are:
   *
   * - `off`: Matches no calls. Any value that can be cast to `false` will have
   *   this effect. The most restrictive.
   * - `all`: Matches only Video.js-provided functions (`debug`, `log`,
   *   `log.warn`, and `log.error`).
   * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.
   * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.
   * - `warn`: Matches `log.warn` and `log.error` calls.
   * - `error`: Matches only `log.error` calls.
   *
   * @type {Object}
   */a.levels={all:"debug|log|warn|error",off:"",debug:"debug|log|warn|error",info:"log|warn|error",warn:"warn|error",error:"error",DEFAULT:n},/**
   * Get or set the current logging level.
   *
   * If a string matching a key from {@link module:log.levels} is provided, acts
   * as a setter.
   *
   * @param  {'all'|'debug'|'info'|'warn'|'error'|'off'} [lvl]
   *         Pass a valid level to set a new logging level.
   *
   * @return {string}
   *         The current logging level.
   */a.level=e=>{if("string"==typeof e){if(!a.levels.hasOwnProperty(e))throw Error(`"${e}" in not a valid log level`);n=e}return n},/**
   * Returns an array containing everything that has been logged to the history.
   *
   * This array is a shallow clone of the internal history record. However, its
   * contents are _not_ cloned; so, mutating objects inside this array will
   * mutate them in history.
   *
   * @return {Array}
   */a.history=()=>i2?[].concat(i2):[],/**
   * Allows you to filter the history by the given logger name
   *
   * @param {string} fname
   *        The name to filter by
   *
   * @return {Array}
   *         The filtered list to return
   */a.history.filter=e=>(i2||[]).filter(t=>RegExp(`.*${e}.*`).test(t[0])),/**
   * Clears the internal history tracking, but does not prevent further history
   * tracking.
   */a.history.clear=()=>{i2&&(i2.length=0)},/**
   * Disable history tracking if it is currently enabled.
   */a.history.disable=()=>{null!==i2&&(i2.length=0,i2=null)},/**
   * Enable history tracking if it is currently disabled.
   */a.history.enable=()=>{null===i2&&(i2=[])},/**
   * Logs error messages. Similar to `console.error`.
   *
   * @param {...*} args
   *        One or more messages or objects that should be logged as an error
   */a.error=(...e)=>s("error",n,e),/**
   * Logs warning messages. Similar to `console.warn`.
   *
   * @param {...*} args
   *        One or more messages or objects that should be logged as a warning.
   */a.warn=(...e)=>s("warn",n,e),/**
   * Logs debug messages. Similar to `console.debug`, but may also act as a comparable
   * log if `console.debug` is not available
   *
   * @param {...*} args
   *        One or more messages or objects that should be logged as debug.
   */a.debug=(...e)=>s("debug",n,e),a)}("VIDEOJS"),i5=i8.createLogger,i3=Object.prototype.toString,i6=function(e){return re(e)?Object.keys(e):[]};/**
 * Array-like iteration for objects.
 *
 * @param {Object} object
 *        The object to iterate over
 *
 * @param {obj:EachCallback} fn
 *        The callback function which is called for each key in the object.
 */function i7(e,t){i6(e).forEach(i=>t(e[i],i))}/**
 * Array-like reduce for objects.
 *
 * @param {Object} object
 *        The Object that you want to reduce.
 *
 * @param {Function} fn
 *         A callback function which is called for each key in the object. It
 *         receives the accumulated value and the per-iteration value and key
 *         as arguments.
 *
 * @param {*} [initial = 0]
 *        Starting value
 *
 * @return {*}
 *         The final accumulated value.
 */function i9(e,t,i=0){return i6(e).reduce((i,r)=>t(i,e[r],r),i)}/**
 * Returns whether a value is an object of any kind - including DOM nodes,
 * arrays, regular expressions, etc. Not functions, though.
 *
 * This avoids the gotcha where using `typeof` on a `null` value
 * results in `'object'`.
 *
 * @param  {Object} value
 * @return {boolean}
 */function re(e){return!!e&&"object"==typeof e}/**
 * Returns whether an object appears to be a "plain" object - that is, a
 * direct instance of `Object`.
 *
 * @param  {Object} value
 * @return {boolean}
 */function rt(e){return re(e)&&"[object Object]"===i3.call(e)&&e.constructor===Object}/**
 * Merge two objects recursively.
 *
 * Performs a deep merge like
 * {@link https://lodash.com/docs/4.17.10#merge|lodash.merge}, but only merges
 * plain objects (not arrays, elements, or anything else).
 *
 * Non-plain object values will be copied directly from the right-most
 * argument.
 *
 * @param   {Object[]} sources
 *          One or more objects to merge into a new object.
 *
 * @return {Object}
 *          A new object that is the merged result of all sources.
 */function ri(...e){let t={};return e.forEach(e=>{e&&i7(e,(e,i)=>{if(!rt(e)){t[i]=e;return}rt(t[i])||(t[i]={}),t[i]=ri(t[i],e)})}),t}/**
 * Returns an array of values for a given object
 *
 * @param  {Object} source - target object
 * @return {Array<unknown>} - object values
 */function rr(e={}){let t=[];for(let i in e)if(e.hasOwnProperty(i)){let r=e[i];t.push(r)}return t}/**
 * Object.defineProperty but "lazy", which means that the value is only set after
 * it is retrieved the first time, rather than being set right away.
 *
 * @param {Object} obj the object to set the property on
 * @param {string} key the key for the property to set
 * @param {Function} getValue the function used to get the value when it is needed.
 * @param {boolean} setter whether a setter should be allowed or not
 */function rs(e,t,i,r=!0){let s=i=>Object.defineProperty(e,t,{value:i,enumerable:!0,writable:!0}),n={configurable:!0,enumerable:!0,get(){let e=i();return s(e),e}};return r&&(n.set=s),Object.defineProperty(e,t,n)}var rn=/*#__PURE__*/Object.freeze({__proto__:null,each:i7,reduce:i9,isObject:re,isPlain:rt,merge:ri,values:rr,defineLazyProperty:rs});/**
 * @file browser.js
 * @module browser
 *//**
 * Whether or not this device is an iPod.
 *
 * @static
 * @type {Boolean}
 */let ra=!1,ro=null,rl=!1,ru=!1,rh=!1,rd=!1,rc=!1,rp=null,rm=null,rf=null,rg=!1,ry=!1,r_=!1,rb=!1;/**
 * Whether or not this device is touch-enabled.
 *
 * @static
 * @const
 * @type {Boolean}
 */const rv=!!(rC()&&("ontouchstart"in /*@__PURE__*/w(I)||/*@__PURE__*/w(I).navigator.maxTouchPoints||/*@__PURE__*/w(I).DocumentTouch&&/*@__PURE__*/w(I).document instanceof /*@__PURE__*/w(I).DocumentTouch)),rT=/*@__PURE__*/w(I).navigator&&/*@__PURE__*/w(I).navigator.userAgentData;// If the browser is not Chromium, either userAgentData is not present which could be an old Chromium browser,
//  or it's a browser that has added userAgentData since that we don't have tests for yet. In either case,
// the checks need to be made agiainst the regular userAgent string.
if(rT&&(// If userAgentData is present, use it instead of userAgent to avoid warnings
// Currently only implemented on Chromium
// userAgentData does not expose Android version, so ANDROID_VERSION remains `null`
rl="Android"===rT.platform,rh=!!rT.brands.find(e=>"Microsoft Edge"===e.brand),rd=!!rT.brands.find(e=>"Chromium"===e.brand),rc=!rh&&rd,rp=rm=(rT.brands.find(e=>"Chromium"===e.brand)||{}).version||null,ry="Windows"===rT.platform),!rd){let e=/*@__PURE__*/w(I).navigator&&/*@__PURE__*/w(I).navigator.userAgent||"";ra=/iPod/i.test(e),ro=function(){let t=e.match(/OS (\d+)_/i);return t&&t[1]?t[1]:null}(),rl=/Android/i.test(e),t=function(){// This matches Android Major.Minor.Patch versions
// ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
let t=e.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);if(!t)return null;let i=t[1]&&parseFloat(t[1]),r=t[2]&&parseFloat(t[2]);return i&&r?parseFloat(t[1]+"."+t[2]):i||null}(),ru=/Firefox/i.test(e),rh=/Edg/i.test(e),rd=/Chrome/i.test(e)||/CriOS/i.test(e),rc=!rh&&rd,rp=rm=function(){let t=e.match(/(Chrome|CriOS)\/(\d+)/);return t&&t[2]?parseFloat(t[2]):null}(),rf=function(){let t=/MSIE\s(\d+)\.\d/.exec(e),i=t&&parseFloat(t[1]);return!i&&/Trident\/7.0/i.test(e)&&/rv:11.0/.test(e)&&(i=11),i}(),rg=/Safari/i.test(e)&&!rc&&!rl&&!rh,ry=/Windows/i.test(e),r_=/iPad/i.test(e)||rg&&rv&&!/iPhone/i.test(e),rb=/iPhone/i.test(e)&&!r_}/**
 * Whether or not this is an iOS device.
 *
 * @static
 * @const
 * @type {Boolean}
 */const rS=rb||r_||ra,rE=(rg||rS)&&!rc;var rw=/*#__PURE__*/Object.freeze({__proto__:null,get IS_IPOD(){return ra},get IOS_VERSION(){return ro},get IS_ANDROID(){return rl},get ANDROID_VERSION(){return t},get IS_FIREFOX(){return ru},get IS_EDGE(){return rh},get IS_CHROMIUM(){return rd},get IS_CHROME(){return rc},get CHROMIUM_VERSION(){return rp},get CHROME_VERSION(){return rm},get IE_VERSION(){return rf},get IS_SAFARI(){return rg},get IS_WINDOWS(){return ry},get IS_IPAD(){return r_},get IS_IPHONE(){return rb},TOUCH_ENABLED:rv,IS_IOS:rS,IS_ANY_SAFARI:rE});/**
 * @file dom.js
 * @module dom
 *//**
 * Detect if a value is a string with any non-whitespace characters.
 *
 * @private
 * @param  {string} str
 *         The string to check
 *
 * @return {boolean}
 *         Will be `true` if the string is non-blank, `false` otherwise.
 *
 */function rk(e){// we use str.trim as it will trim any whitespace characters
// from the front or back of non-whitespace characters. aka
// Any string that contains non-whitespace characters will
// still contain them after `trim` but whitespace only strings
// will have a length of 0, failing this check.
return"string"==typeof e&&!!e.trim()}/**
 * Whether the current DOM interface appears to be real (i.e. not simulated).
 *
 * @return {boolean}
 *         Will be `true` if the DOM appears to be real, `false` otherwise.
 */function rC(){// Both document and window will never be undefined thanks to `global`.
return /*@__PURE__*/w(A)===/*@__PURE__*/w(I).document}/**
 * Determines, via duck typing, whether or not a value is a DOM element.
 *
 * @param  {*} value
 *         The value to check.
 *
 * @return {boolean}
 *         Will be `true` if the value is a DOM element, `false` otherwise.
 */function rx(e){return re(e)&&1===e.nodeType}/**
 * Determines if the current DOM is embedded in an iframe.
 *
 * @return {boolean}
 *         Will be `true` if the DOM is embedded in an iframe, `false`
 *         otherwise.
 */function rD(){// We need a try/catch here because Safari will throw errors when attempting
// to get either `parent` or `self`
try{return /*@__PURE__*/w(I).parent!==/*@__PURE__*/w(I).self}catch(e){return!0}}/**
 * Creates functions to query the DOM using a given method.
 *
 * @private
 * @param   {string} method
 *          The method to create the query with.
 *
 * @return  {Function}
 *          The query method
 */function rI(e){return function(t,i){if(!rk(t))return /*@__PURE__*/w(A)[e](null);rk(i)&&(i=/*@__PURE__*/w(A).querySelector(i));let r=rx(i)?i:/*@__PURE__*/w(A);return r[e]&&r[e](t)}}/**
 * Creates an element and applies properties, attributes, and inserts content.
 *
 * @param  {string} [tagName='div']
 *         Name of tag to be created.
 *
 * @param  {Object} [properties={}]
 *         Element properties to be applied.
 *
 * @param  {Object} [attributes={}]
 *         Element attributes to be applied.
 *
 * @param {ContentDescriptor} [content]
 *        A content descriptor object.
 *
 * @return {Element}
 *         The element that was created.
 */function rA(e="div",t={},i={},r){let s=/*@__PURE__*/w(A).createElement(e);return Object.getOwnPropertyNames(t).forEach(function(e){let i=t[e];// Handle textContent since it's not supported everywhere and we have a
// method for it.
"textContent"===e?rL(s,i):(s[e]!==i||"tabIndex"===e)&&(s[e]=i)}),Object.getOwnPropertyNames(i).forEach(function(e){s.setAttribute(e,i[e])}),r&&rY(s,r),s}/**
 * Injects text into an element, replacing any existing contents entirely.
 *
 * @param  {HTMLElement} el
 *         The element to add text content into
 *
 * @param  {string} text
 *         The text content to add.
 *
 * @return {Element}
 *         The element with added text content.
 */function rL(e,t){return void 0===e.textContent?e.innerText=t:e.textContent=t,e}/**
 * Insert an element as the first child node of another
 *
 * @param {Element} child
 *        Element to insert
 *
 * @param {Element} parent
 *        Element to insert child into
 */function rP(e,t){t.firstChild?t.insertBefore(e,t.firstChild):t.appendChild(e)}/**
 * Check if an element has a class name.
 *
 * @param  {Element} element
 *         Element to check
 *
 * @param  {string} classToCheck
 *         Class name to check for
 *
 * @return {boolean}
 *         Will be `true` if the element has a class, `false` otherwise.
 *
 * @throws {Error}
 *         Throws an error if `classToCheck` has white space.
 */function rO(e,t){return!/**
 * Throws an error if the passed string has whitespace. This is used by
 * class methods to be relatively consistent with the classList API.
 *
 * @private
 * @param  {string} str
 *         The string to check for whitespace.
 *
 * @throws {Error}
 *         Throws an error if there is whitespace in the string.
 */function(e){// str.indexOf instead of regex because str.indexOf is faster performance wise.
if(e.indexOf(" ")>=0)throw Error("class has illegal whitespace characters")}(t),e.classList.contains(t)}/**
 * Add a class name to an element.
 *
 * @param  {Element} element
 *         Element to add class name to.
 *
 * @param  {...string} classesToAdd
 *         One or more class name to add.
 *
 * @return {Element}
 *         The DOM element with the added class name.
 */function rR(e,...t){return e.classList.add(...t.reduce((e,t)=>e.concat(t.split(/\s+/)),[])),e}/**
 * Remove a class name from an element.
 *
 * @param  {Element} element
 *         Element to remove a class name from.
 *
 * @param  {...string} classesToRemove
 *         One or more class name to remove.
 *
 * @return {Element}
 *         The DOM element with class name removed.
 */function rN(e,...t){return(// Protect in case the player gets disposed
e?(e.classList.remove(...t.reduce((e,t)=>e.concat(t.split(/\s+/)),[])),e):(i8.warn("removeClass was called with an element that doesn't exist"),null))}/**
 * The callback definition for toggleClass.
 *
 * @callback module:dom~PredicateCallback
 * @param    {Element} element
 *           The DOM element of the Component.
 *
 * @param    {string} classToToggle
 *           The `className` that wants to be toggled
 *
 * @return   {boolean|undefined}
 *           If `true` is returned, the `classToToggle` will be added to the
 *           `element`. If `false`, the `classToToggle` will be removed from
 *           the `element`. If `undefined`, the callback will be ignored.
 *//**
 * Adds or removes a class name to/from an element depending on an optional
 * condition or the presence/absence of the class name.
 *
 * @param  {Element} element
 *         The element to toggle a class name on.
 *
 * @param  {string} classToToggle
 *         The class that should be toggled.
 *
 * @param  {boolean|module:dom~PredicateCallback} [predicate]
 *         See the return value for {@link module:dom~PredicateCallback}
 *
 * @return {Element}
 *         The element with a class that has been toggled.
 */function rM(e,t,i){return"function"==typeof i&&(i=i(e,t)),"boolean"!=typeof i&&(i=void 0),t.split(/\s+/).forEach(t=>e.classList.toggle(t,i)),e}/**
 * Apply attributes to an HTML element.
 *
 * @param {Element} el
 *        Element to add attributes to.
 *
 * @param {Object} [attributes]
 *        Attributes to be applied.
 */function rU(e,t){Object.getOwnPropertyNames(t).forEach(function(i){let r=t[i];null==r||!1===r?e.removeAttribute(i):e.setAttribute(i,!0===r?"":r)})}/**
 * Get an element's attribute values, as defined on the HTML tag.
 *
 * Attributes are not the same as properties. They're defined on the tag
 * or with setAttribute.
 *
 * @param  {Element} tag
 *         Element from which to get tag attributes.
 *
 * @return {Object}
 *         All attributes of the element. Boolean attributes will be `true` or
 *         `false`, others will be strings.
 */function rB(e){let t={},i=["autoplay","controls","playsinline","loop","muted","default","defaultMuted"];if(e&&e.attributes&&e.attributes.length>0){let r=e.attributes;for(let e=r.length-1;e>=0;e--){let s=r[e].name,n=r[e].value;i.includes(s)&&// string ('') which would equal false if we just check for a false value.
// we also don't want support bad code like autoplay='false'
(n=null!==n),t[s]=n}}return t}/**
 * Get the value of an element's attribute.
 *
 * @param {Element} el
 *        A DOM element.
 *
 * @param {string} attribute
 *        Attribute to get the value of.
 *
 * @return {string}
 *         The value of the attribute.
 */function rF(e,t){return e.getAttribute(t)}/**
 * Set the value of an element's attribute.
 *
 * @param {Element} el
 *        A DOM element.
 *
 * @param {string} attribute
 *        Attribute to set.
 *
 * @param {string} value
 *        Value to set the attribute to.
 */function rj(e,t,i){e.setAttribute(t,i)}/**
 * Remove an element's attribute.
 *
 * @param {Element} el
 *        A DOM element.
 *
 * @param {string} attribute
 *        Attribute to remove.
 */function rq(e,t){e.removeAttribute(t)}/**
 * Attempt to block the ability to select text.
 */function r$(){/*@__PURE__*/w(A).body.focus(),/*@__PURE__*/w(A).onselectstart=function(){return!1}}/**
 * Turn off text selection blocking.
 */function rH(){/*@__PURE__*/w(A).onselectstart=function(){return!0}}/**
 * Identical to the native `getBoundingClientRect` function, but ensures that
 * the method is supported at all (it is in all browsers we claim to support)
 * and that the element is in the DOM before continuing.
 *
 * This wrapper function also shims properties which are not provided by some
 * older browsers (namely, IE8).
 *
 * Additionally, some browsers do not support adding properties to a
 * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard
 * properties (except `x` and `y` which are not widely supported). This helps
 * avoid implementations where keys are non-enumerable.
 *
 * @param  {Element} el
 *         Element whose `ClientRect` we want to calculate.
 *
 * @return {Object|undefined}
 *         Always returns a plain object - or `undefined` if it cannot.
 */function rV(e){if(e&&e.getBoundingClientRect&&e.parentNode){let t=e.getBoundingClientRect(),i={};return["bottom","height","left","right","top","width"].forEach(e=>{void 0!==t[e]&&(i[e]=t[e])}),i.height||(i.height=parseFloat(r1(e,"height"))),i.width||(i.width=parseFloat(r1(e,"width"))),i}}/**
 * Represents the position of a DOM element on the page.
 *
 * @typedef  {Object} module:dom~Position
 *
 * @property {number} left
 *           Pixels to the left.
 *
 * @property {number} top
 *           Pixels from the top.
 *//**
 * Get the position of an element in the DOM.
 *
 * Uses `getBoundingClientRect` technique from John Resig.
 *
 * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
 *
 * @param  {Element} el
 *         Element from which to get offset.
 *
 * @return {module:dom~Position}
 *         The position of the element that was passed in.
 */function rz(e){if(!e||e&&!e.offsetParent)return{left:0,top:0,width:0,height:0};let t=e.offsetWidth,i=e.offsetHeight,r=0,s=0;for(;e.offsetParent&&e!==/*@__PURE__*/w(A)[iZ.fullscreenElement];)r+=e.offsetLeft,s+=e.offsetTop,e=e.offsetParent;return{left:r,top:s,width:t,height:i}}/**
 * Represents x and y coordinates for a DOM element or mouse pointer.
 *
 * @typedef  {Object} module:dom~Coordinates
 *
 * @property {number} x
 *           x coordinate in pixels
 *
 * @property {number} y
 *           y coordinate in pixels
 *//**
 * Get the pointer position within an element.
 *
 * The base on the coordinates are the bottom left of the element.
 *
 * @param  {Element} el
 *         Element on which to get the pointer position on.
 *
 * @param  {Event} event
 *         Event object.
 *
 * @return {module:dom~Coordinates}
 *         A coordinates object corresponding to the mouse position.
 *
 */function rW(e,t){let i={x:0,y:0};if(rS){let t=e;for(;t&&"html"!==t.nodeName.toLowerCase();){let e=r1(t,"transform");if(/^matrix/.test(e)){let t=e.slice(7,-1).split(/,\s/).map(Number);i.x+=t[4],i.y+=t[5]}else if(/^matrix3d/.test(e)){let t=e.slice(9,-1).split(/,\s/).map(Number);i.x+=t[12],i.y+=t[13]}t=t.parentNode}}let r={},s=rz(t.target),n=rz(e),a=n.width,o=n.height,l=t.offsetY-(n.top-s.top),u=t.offsetX-(n.left-s.left);return t.changedTouches&&(u=t.changedTouches[0].pageX-n.left,l=t.changedTouches[0].pageY+n.top,rS&&(u-=i.x,l-=i.y)),r.y=1-Math.max(0,Math.min(1,l/o)),r.x=Math.max(0,Math.min(1,u/a)),r}/**
 * Determines, via duck typing, whether or not a value is a text node.
 *
 * @param  {*} value
 *         Check if this value is a text node.
 *
 * @return {boolean}
 *         Will be `true` if the value is a text node, `false` otherwise.
 */function rG(e){return re(e)&&3===e.nodeType}/**
 * Empties the contents of an element.
 *
 * @param  {Element} el
 *         The element to empty children from
 *
 * @return {Element}
 *         The element with no children
 */function rX(e){for(;e.firstChild;)e.removeChild(e.firstChild);return e}/**
 * This is a mixed value that describes content to be injected into the DOM
 * via some method. It can be of the following types:
 *
 * Type       | Description
 * -----------|-------------
 * `string`   | The value will be normalized into a text node.
 * `Element`  | The value will be accepted as-is.
 * `Text`     | A TextNode. The value will be accepted as-is.
 * `Array`    | A one-dimensional array of strings, elements, text nodes, or functions. These functions should return a string, element, or text node (any other return value, like an array, will be ignored).
 * `Function` | A function, which is expected to return a string, element, text node, or array - any of the other possible values described above. This means that a content descriptor could be a function that returns an array of functions, but those second-level functions must return strings, elements, or text nodes.
 *
 * @typedef {string|Element|Text|Array|Function} ContentDescriptor
 *//**
 * Normalizes content for eventual insertion into the DOM.
 *
 * This allows a wide range of content definition methods, but helps protect
 * from falling into the trap of simply writing to `innerHTML`, which could
 * be an XSS concern.
 *
 * The content for an element can be passed in multiple types and
 * combinations, whose behavior is as follows:
 *
 * @param {ContentDescriptor} content
 *        A content descriptor value.
 *
 * @return {Array}
 *         All of the content that was passed in, normalized to an array of
 *         elements or text nodes.
 */function rK(e){// Next up, normalize to an array, so one or many items can be normalized,
// filtered, and returned.
return"function"==typeof e&&(e=e()),(Array.isArray(e)?e:[e]).map(e=>("function"==typeof e&&(e=e()),rx(e)||rG(e))?e:"string"==typeof e&&/\S/.test(e)?/*@__PURE__*/w(A).createTextNode(e):void 0).filter(e=>e)}/**
 * Normalizes and appends content to an element.
 *
 * @param  {Element} el
 *         Element to append normalized content to.
 *
 * @param {ContentDescriptor} content
 *        A content descriptor value.
 *
 * @return {Element}
 *         The element with appended normalized content.
 */function rY(e,t){return rK(t).forEach(t=>e.appendChild(t)),e}/**
 * Normalizes and inserts content into an element; this is identical to
 * `appendContent()`, except it empties the element first.
 *
 * @param {Element} el
 *        Element to insert normalized content into.
 *
 * @param {ContentDescriptor} content
 *        A content descriptor value.
 *
 * @return {Element}
 *         The element with inserted normalized content.
 */function rQ(e,t){return rY(rX(e),t)}/**
 * Check if an event was a single left click.
 *
 * @param  {MouseEvent} event
 *         Event object.
 *
 * @return {boolean}
 *         Will be `true` if a single left click, `false` otherwise.
 */function rJ(e){return(// Note: if you create something draggable, be sure to
// call it on both `mousedown` and `mousemove` event,
// otherwise `mousedown` should be enough for a button
void 0===e.button&&void 0===e.buttons||0===e.button&&void 0===e.buttons||"mouseup"===e.type&&0===e.button&&0===e.buttons||0===e.button&&1===e.buttons)}/**
 * Finds a single DOM element matching `selector` within the optional
 * `context` of another DOM element (defaulting to `document`).
 *
 * @param  {string} selector
 *         A valid CSS selector, which will be passed to `querySelector`.
 *
 * @param  {Element|String} [context=document]
 *         A DOM element within which to query. Can also be a selector
 *         string in which case the first matching element will be used
 *         as context. If missing (or no element matches selector), falls
 *         back to `document`.
 *
 * @return {Element|null}
 *         The element that was found or null.
 */const rZ=rI("querySelector"),r0=rI("querySelectorAll");/**
 * A safe getComputedStyle.
 *
 * This is needed because in Firefox, if the player is loaded in an iframe with
 * `display:none`, then `getComputedStyle` returns `null`, so, we do a
 * null-check to make sure that the player doesn't break in these cases.
 *
 * @param    {Element} el
 *           The element you want the computed style of
 *
 * @param    {string} prop
 *           The property name you want
 *
 * @see      https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 */function r1(e,t){if(!e||!t)return"";if("function"==typeof /*@__PURE__*/w(I).getComputedStyle){let i;try{i=/*@__PURE__*/w(I).getComputedStyle(e)}catch(e){return""}return i?i.getPropertyValue(t)||i[t]:""}return""}/**
 * Copy document style sheets to another window.
 *
 * @param    {Window} win
 *           The window element you want to copy the document style sheets to.
 *
 */function r2(e){[.../*@__PURE__*/w(A).styleSheets].forEach(t=>{try{let i=[...t.cssRules].map(e=>e.cssText).join(""),r=/*@__PURE__*/w(A).createElement("style");r.textContent=i,e.document.head.appendChild(r)}catch(r){let i=/*@__PURE__*/w(A).createElement("link");i.rel="stylesheet",i.type=t.type,// For older Safari this has to be the string; on other browsers setting the MediaList works
i.media=t.media.mediaText,i.href=t.href,e.document.head.appendChild(i)}})}var r4=/*#__PURE__*/Object.freeze({__proto__:null,isReal:rC,isEl:rx,isInFrame:rD,createEl:rA,textContent:rL,prependTo:rP,hasClass:rO,addClass:rR,removeClass:rN,toggleClass:rM,setAttributes:rU,getAttributes:rB,getAttribute:rF,setAttribute:rj,removeAttribute:rq,blockTextSelection:r$,unblockTextSelection:rH,getBoundingClientRect:rV,findPosition:rz,getPointerPosition:rW,isTextNode:rG,emptyEl:rX,normalizeContent:rK,appendContent:rY,insertContent:rQ,isSingleLeftClick:rJ,$:rZ,$$:r0,computedStyle:r1,copyStyleSheetsToWindow:r2});/**
 * @file setup.js - Functions for setting up a player without
 * user interaction based on the data-setup `attribute` of the video tag.
 *
 * @module setup
 */let r8=!1;/**
 * Set up any tags that have a data-setup `attribute` when the player is started.
 */const r5=function(){if(!1===i.options.autoSetup)return;let e=Array.prototype.slice.call(/*@__PURE__*/w(A).getElementsByTagName("video")),t=Array.prototype.slice.call(/*@__PURE__*/w(A).getElementsByTagName("audio")),r=Array.prototype.slice.call(/*@__PURE__*/w(A).getElementsByTagName("video-js")),s=e.concat(t,r);// Check if any media elements exist
if(s&&s.length>0)for(let e=0,t=s.length;e<t;e++){let t=s[e];// Check if element exists, has getAttribute func.
if(t&&t.getAttribute){if(void 0===t.player){let e=t.getAttribute("data-setup");// Check if data-setup attr exists.
// We only auto-setup if they've added the data-setup attr.
null!==e&&i(t)}}else{r3(1);break}}else r8||r3(1)};/**
 * Wait until the page is loaded before running autoSetup. This will be called in
 * autoSetup if `hasLoaded` returns false.
 *
 * @param {number} wait
 *        How long to wait in ms
 *
 * @param {module:videojs} [vjs]
 *        The videojs library function
 */function r3(e,t){// Protect against breakage in non-browser environments
rC()&&(t&&(i=t),/*@__PURE__*/w(I).setTimeout(r5,e))}/**
 * Used to set the internal tracking of window loaded state to true.
 *
 * @private
 */function r6(){r8=!0,/*@__PURE__*/w(I).removeEventListener("load",r6)}rC()&&("complete"===/*@__PURE__*/w(A).readyState?r6():/*@__PURE__*/w(I).addEventListener("load",r6));/**
 * @file stylesheet.js
 * @module stylesheet
 *//**
 * Create a DOM style element given a className for it.
 *
 * @param {string} className
 *        The className to add to the created style element.
 *
 * @return {Element}
 *         The element that was created.
 */const r7=function(e){let t=/*@__PURE__*/w(A).createElement("style");return t.className=e,t},r9=function(e,t){e.styleSheet?e.styleSheet.cssText=t:e.textContent=t};/**
 * @file dom-data.js
 * @module dom-data
 *//**
 * Element Data Store.
 *
 * Allows for binding data to an element without putting it directly on the
 * element. Ex. Event listeners are stored here.
 * (also from jsninja.com, slightly modified and updated for closure compiler)
 *
 * @type {Object}
 * @private
 */var se=new WeakMap;/**
 * Unique ID for an element or function
 *
 * @type {Number}
 */let st=3;/**
 * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
 * robust as jquery's, so there's probably some differences.
 *
 * @file events.js
 * @module events
 *//**
 * Clean up the listener cache and dispatchers
 *
 * @param {Element|Object} elem
 *        Element to clean up
 *
 * @param {string} type
 *        Type of event to clean up
 */function si(e,t){if(!se.has(e))return;let i=se.get(e);0===i.handlers[t].length&&(delete i.handlers[t],e.removeEventListener?e.removeEventListener(t,i.dispatcher,!1):e.detachEvent&&e.detachEvent("on"+t,i.dispatcher)),Object.getOwnPropertyNames(i.handlers).length<=0&&(delete i.handlers,delete i.dispatcher,delete i.disabled),0===Object.getOwnPropertyNames(i).length&&se.delete(e)}/**
 * Loops through an array of event types and calls the requested method for each type.
 *
 * @param {Function} fn
 *        The event method we want to use.
 *
 * @param {Element|Object} elem
 *        Element or object to bind listeners to
 *
 * @param {string[]} types
 *        Type of event to bind to.
 *
 * @param {Function} callback
 *        Event listener.
 */function sr(e,t,i,r){i.forEach(function(i){// Call the event method for each one of the types
e(t,i,r)})}/**
 * Fix a native event to have standard property values
 *
 * @param {Object} event
 *        Event object to fix.
 *
 * @return {Object}
 *         Fixed event object.
 */function ss(e){if(e.fixed_)return e;function t(){return!0}function i(){return!1}// Test if fixing up is needed
// Used to check if !event.stopPropagation instead of isPropagationStopped
// But native events return true for stopPropagation, but don't have
// other expected methods like isPropagationStopped. Seems to be a problem
// with the Javascript Ninja code. So we're just overriding all events now.
if(!e||!e.isPropagationStopped||!e.isImmediatePropagationStopped){let r=e||/*@__PURE__*/w(I).event;// Clone the old object so that we can modify the values event = {};
// IE8 Doesn't like when you mess with native event properties
// Firefox returns false for event.hasOwnProperty('type') and other props
//  which makes copying more difficult.
// TODO: Probably best to create a whitelist of event props
for(let t in e={},r)// Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
// Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
// and webkitMovementX/Y
// Lighthouse complains if Event.path is copied
"layerX"===t||"layerY"===t||"keyLocation"===t||"webkitMovementX"===t||"webkitMovementY"===t||"path"===t||"returnValue"===t&&r.preventDefault||(e[t]=r[t]);// Handle mouse position
if(e.target||(e.target=e.srcElement||/*@__PURE__*/w(A)),e.relatedTarget||(e.relatedTarget=e.fromElement===e.target?e.toElement:e.fromElement),// Stop the default browser action
e.preventDefault=function(){r.preventDefault&&r.preventDefault(),e.returnValue=!1,r.returnValue=!1,e.defaultPrevented=!0},e.defaultPrevented=!1,// Stop the event from bubbling
e.stopPropagation=function(){r.stopPropagation&&r.stopPropagation(),e.cancelBubble=!0,r.cancelBubble=!0,e.isPropagationStopped=t},e.isPropagationStopped=i,// Stop the event from bubbling and executing other handlers
e.stopImmediatePropagation=function(){r.stopImmediatePropagation&&r.stopImmediatePropagation(),e.isImmediatePropagationStopped=t,e.stopPropagation()},e.isImmediatePropagationStopped=i,null!==e.clientX&&void 0!==e.clientX){let t=/*@__PURE__*/w(A).documentElement,i=/*@__PURE__*/w(A).body;e.pageX=e.clientX+(t&&t.scrollLeft||i&&i.scrollLeft||0)-(t&&t.clientLeft||i&&i.clientLeft||0),e.pageY=e.clientY+(t&&t.scrollTop||i&&i.scrollTop||0)-(t&&t.clientTop||i&&i.clientTop||0)}// Handle key presses
e.which=e.charCode||e.keyCode,null!==e.button&&void 0!==e.button&&// and... yikes.
/* eslint-disable */(e.button=1&e.button?0:4&e.button?1:2&e.button?2:0)}// Returns fixed-up instance
return e.fixed_=!0,e}const sn=function(){if("boolean"!=typeof r){r=!1;try{let e=Object.defineProperty({},"passive",{get(){r=!0}});/*@__PURE__*/w(I).addEventListener("test",null,e),/*@__PURE__*/w(I).removeEventListener("test",null,e)}catch(e){// disregard
}}return r},sa=["touchstart","touchmove"];/**
 * Add an event listener to element
 * It stores the handler function in a separate cache object
 * and adds a generic handler to the element's event,
 * along with a unique id (guid) to the element.
 *
 * @param {Element|Object} elem
 *        Element or object to bind listeners to
 *
 * @param {string|string[]} type
 *        Type of event to bind to.
 *
 * @param {Function} fn
 *        Event listener.
 */function so(e,t,i){if(Array.isArray(t))return sr(so,e,t,i);se.has(e)||se.set(e,{});let r=se.get(e);if(r.handlers||(r.handlers={}),r.handlers[t]||(r.handlers[t]=[]),i.guid||(i.guid=st++),r.handlers[t].push(i),r.dispatcher||(r.disabled=!1,r.dispatcher=function(t,i){if(r.disabled)return;t=ss(t);let s=r.handlers[t.type];if(s){// Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
let r=s.slice(0);for(let s=0,n=r.length;s<n&&!t.isImmediatePropagationStopped();s++)try{r[s].call(e,t,i)}catch(e){i8.error(e)}}}),1===r.handlers[t].length){if(e.addEventListener){let i=!1;sn()&&sa.indexOf(t)>-1&&(i={passive:!0}),e.addEventListener(t,r.dispatcher,i)}else e.attachEvent&&e.attachEvent("on"+t,r.dispatcher)}}/**
 * Removes event listeners from an element
 *
 * @param {Element|Object} elem
 *        Object to remove listeners from.
 *
 * @param {string|string[]} [type]
 *        Type of listener to remove. Don't include to remove all events from element.
 *
 * @param {Function} [fn]
 *        Specific listener to remove. Don't include to remove listeners for an event
 *        type.
 */function sl(e,t,i){// Don't want to add a cache object through getElData if not needed
if(!se.has(e))return;let r=se.get(e);// If no events exist, nothing to unbind
if(!r.handlers)return;if(Array.isArray(t))return sr(sl,e,t,i);// Utility function
let s=function(e,t){r.handlers[t]=[],si(e,t)};// Are we removing all bound events?
if(void 0===t){for(let t in r.handlers)Object.prototype.hasOwnProperty.call(r.handlers||{},t)&&s(e,t);return}let n=r.handlers[t];// If no handlers exist, nothing to unbind
if(n){// If no listener was provided, remove all listeners for type
if(!i){s(e,t);return}// We're only removing a single handler
if(i.guid)for(let e=0;e<n.length;e++)n[e].guid===i.guid&&n.splice(e--,1);si(e,t)}}/**
 * Trigger an event for an element
 *
 * @param {Element|Object} elem
 *        Element to trigger an event on
 *
 * @param {EventTarget~Event|string} event
 *        A string (the type) or an event object with a type attribute
 *
 * @param {Object} [hash]
 *        data hash to pass along with the event
 *
 * @return {boolean|undefined}
 *         Returns the opposite of `defaultPrevented` if default was
 *         prevented. Otherwise, returns `undefined`
 */function su(e,t,i){// Fetches element data and a reference to the parent (for bubbling).
// Don't want to add a data object to cache for every parent,
// so checking hasElData first.
let r=se.has(e)?se.get(e):{},s=e.parentNode||e.ownerDocument;// Unless explicitly stopped or the event does not bubble (e.g. media events)
// recursively calls this function to bubble the event up the DOM.
if("string"==typeof t?t={type:t,target:e}:t.target||(t.target=e),// Normalizes the event properties.
t=ss(t),r.dispatcher&&r.dispatcher.call(e,t,i),s&&!t.isPropagationStopped()&&!0===t.bubbles)su.call(null,s,t,i);else if(!s&&!t.defaultPrevented&&t.target&&t.target[t.type]){se.has(t.target)||se.set(t.target,{});let e=se.get(t.target);// Checks if the target has a default action for this event.
t.target[t.type]&&(// Temporarily disables event dispatching on the target as we have already executed the handler.
e.disabled=!0,"function"==typeof t.target[t.type]&&t.target[t.type](),// Re-enables event dispatching.
e.disabled=!1)}// Inform the triggerer if the default was prevented by returning false
return!t.defaultPrevented}/**
 * Trigger a listener only once for an event.
 *
 * @param {Element|Object} elem
 *        Element or object to bind to.
 *
 * @param {string|string[]} type
 *        Name/type of event
 *
 * @param {Event~EventListener} fn
 *        Event listener function
 */function sh(e,t,i){if(Array.isArray(t))return sr(sh,e,t,i);let r=function(){sl(e,t,r),i.apply(this,arguments)};// copy the guid to the new function so it can removed using the original function's ID
r.guid=i.guid=i.guid||st++,so(e,t,r)}/**
 * Trigger a listener only once and then turn if off for all
 * configured events
 *
 * @param {Element|Object} elem
 *        Element or object to bind to.
 *
 * @param {string|string[]} type
 *        Name/type of event
 *
 * @param {Event~EventListener} fn
 *        Event listener function
 */function sd(e,t,i){let r=function(){sl(e,t,r),i.apply(this,arguments)};// copy the guid to the new function so it can removed using the original function's ID
r.guid=i.guid=i.guid||st++,// multiple ons, but one off for everything
so(e,t,r)}var sc=/*#__PURE__*/Object.freeze({__proto__:null,fixEvent:ss,on:so,off:sl,trigger:su,one:sh,any:sd});/**
 * A private, internal-only function for changing the context of a function.
 *
 * It also stores a unique id on the function so it can be easily removed from
 * events.
 *
 * @private
 * @function
 * @param    {*} context
 *           The object to bind as scope.
 *
 * @param    {Function} fn
 *           The function to be bound to a scope.
 *
 * @param    {number} [uid]
 *           An optional unique ID for the function to be set
 *
 * @return   {Function}
 *           The new function that will be bound into the context given
 */const sp=function(e,t,i){t.guid||(t.guid=st++);// Create the new function that changes the context
let r=t.bind(e);return(// Allow for the ability to individualize this function
// Needed in the case where multiple objects might share the same prototype
// IF both items add an event listener with the same function, then you try to remove just one
// it will remove both because they both have the same guid.
// when using this, you need to use the bind method when you remove the listener as well.
// currently used in text tracks
r.guid=i?i+"_"+t.guid:t.guid,r)},sm=function(e,t){let i=/*@__PURE__*/w(I).performance.now();return function(...r){let s=/*@__PURE__*/w(I).performance.now();s-i>=t&&(e(...r),i=s)}},sf=function(e,t,i,r=/*@__PURE__*/w(I)){let s;/* eslint-disable consistent-this */let n=function(){let n=this,a=arguments,o=function(){s=null,o=null,i||e.apply(n,a)};!s&&i&&e.apply(n,a),r.clearTimeout(s),s=r.setTimeout(o,t)};return(/* eslint-enable consistent-this */n.cancel=()=>{r.clearTimeout(s),s=null},n)};var sg=/*#__PURE__*/Object.freeze({__proto__:null,UPDATE_REFRESH_INTERVAL:30,bind_:sp,throttle:sm,debounce:sf});/**
 * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It
 * adds shorthand functions that wrap around lengthy functions. For example:
 * the `on` function is a wrapper around `addEventListener`.
 *
 * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}
 * @class EventTarget
 */class sy{/**
   * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
   * function that will get called when an event with a certain name gets triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to call with `EventTarget`s
   */on(e,t){// Remove the addEventListener alias before calling Events.on
// so we don't get into an infinite type loop
let i=this.addEventListener;this.addEventListener=()=>{},so(this,e,t),this.addEventListener=i}/**
   * Removes an `event listener` for a specific event from an instance of `EventTarget`.
   * This makes it so that the `event listener` will no longer get called when the
   * named event happens.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to remove.
   */off(e,t){sl(this,e,t)}/**
   * This function will add an `event listener` that gets triggered only once. After the
   * first trigger it will get removed. This is like adding an `event listener`
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */one(e,t){// Remove the addEventListener aliasing Events.on
// so we don't get into an infinite type loop
let i=this.addEventListener;this.addEventListener=()=>{},sh(this,e,t),this.addEventListener=i}/**
   * This function will add an `event listener` that gets triggered only once and is
   * removed from all events. This is like adding an array of `event listener`s
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the
   * first time it is triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */any(e,t){// Remove the addEventListener aliasing Events.on
// so we don't get into an infinite type loop
let i=this.addEventListener;this.addEventListener=()=>{},sd(this,e,t),this.addEventListener=i}/**
   * This function causes an event to happen. This will then cause any `event listeners`
   * that are waiting for that event, to get called. If there are no `event listeners`
   * for an event then nothing will happen.
   *
   * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
   * Trigger will also call the `on` + `uppercaseEventName` function.
   *
   * Example:
   * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
   * `onClick` if it exists.
   *
   * @param {string|EventTarget~Event|Object} event
   *        The name of the event, an `Event`, or an object with a key of type set to
   *        an event name.
   */trigger(e){let t=e.type||e;"string"==typeof e&&(e={type:t}),e=ss(e),this.allowedEvents_[t]&&this["on"+t]&&this["on"+t](e),su(this,e)}queueTrigger(e){s||(s=new Map);let t=e.type||e,i=s.get(this);i||(i=new Map,s.set(this,i));let r=i.get(t);i.delete(t),/*@__PURE__*/w(I).clearTimeout(r);let n=/*@__PURE__*/w(I).setTimeout(()=>{i.delete(t),0===i.size&&(i=null,s.delete(this)),this.trigger(e)},0);i.set(t,n)}}/**
 * A Custom DOM event.
 *
 * @typedef {CustomEvent} Event
 * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
 *//**
 * All event listeners should follow the following format.
 *
 * @callback EventListener
 * @this {EventTarget}
 *
 * @param {Event} event
 *        the event that triggered this function
 *
 * @param {Object} [hash]
 *        hash of data sent during the event
 *//**
 * An object containing event names as keys and booleans as values.
 *
 * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
 *         will have extra functionality. See that function for more information.
 *
 * @property EventTarget.prototype.allowedEvents_
 * @protected
 */sy.prototype.allowedEvents_={},/**
 * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#on}
 */sy.prototype.addEventListener=sy.prototype.on,/**
 * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#off}
 */sy.prototype.removeEventListener=sy.prototype.off,/**
 * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#trigger}
 */sy.prototype.dispatchEvent=sy.prototype.trigger;/**
 * @file mixins/evented.js
 * @module evented
 */const s_=e=>"function"==typeof e.name?e.name():"string"==typeof e.name?e.name:e.name_?e.name_:e.constructor&&e.constructor.name?e.constructor.name:typeof e,sb=e=>e instanceof sy||!!e.eventBusEl_&&["on","one","off","trigger"].every(t=>"function"==typeof e[t]),sv=(e,t)=>{sb(e)?t():(e.eventedCallbacks||(e.eventedCallbacks=[]),e.eventedCallbacks.push(t))},sT=e=>// whitespace character.
    "string"==typeof e&&/\S/.test(e)||Array.isArray(e)&&!!e.length,sS=(e,t,i)=>{if(!e||!e.nodeName&&!sb(e))throw Error(`Invalid target for ${s_(t)}#${i}; must be a DOM node or evented object.`)},sE=(e,t,i)=>{if(!sT(e))throw Error(`Invalid event type for ${s_(t)}#${i}; must be a non-empty string or array.`)},sw=(e,t,i)=>{if("function"!=typeof e)throw Error(`Invalid listener for ${s_(t)}#${i}; must be a function.`)},sk=(e,t,i)=>{let r,s,n;// If the number of arguments is less than 3, the target is always the
// evented object itself.
let a=t.length<3||t[0]===e||t[0]===e.eventBusEl_;return a?(r=e.eventBusEl_,t.length>=3&&t.shift(),[s,n]=t):[r,s,n]=t,sS(r,e,i),sE(s,e,i),sw(n,e,i),{isTargetingSelf:a,target:r,type:s,listener:n=sp(e,n)}},sC=(e,t,i,r)=>{sS(e,e,t),e.nodeName?sc[t](e,i,r):e[t](i,r)},sx={/**
   * Add a listener to an event (or events) on this object or another evented
   * object.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */on(...e){let{isTargetingSelf:t,target:i,type:r,listener:s}=sk(this,e,"on");// If this object is listening to another evented object.
if(sC(i,"on",r,s),!t){// If this object is disposed, remove the listener.
let e=()=>this.off(i,r,s);// Use the same function ID as the listener so we can remove it later it
// using the ID of the original listener.
e.guid=s.guid;// Add a listener to the target's dispose event as well. This ensures
// that if the target is disposed BEFORE this object, we remove the
// removal listener that was just added. Otherwise, we create a memory leak.
let t=()=>this.off("dispose",e);// Use the same function ID as the listener so we can remove it later
// it using the ID of the original listener.
t.guid=s.guid,sC(this,"on","dispose",e),sC(i,"on","dispose",t)}},/**
   * Add a listener to an event (or events) on this object or another evented
   * object. The listener will be called once per event and then removed.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */one(...e){let{isTargetingSelf:t,target:i,type:r,listener:s}=sk(this,e,"one");// Targeting this evented object.
if(t)sC(i,"one",r,s);else{// TODO: This wrapper is incorrect! It should only
//       remove the wrapper for the event type that called it.
//       Instead all listeners are removed on the first trigger!
//       see https://github.com/videojs/video.js/issues/5962
let e=(...t)=>{this.off(i,r,e),s.apply(null,t)};// Use the same function ID as the listener so we can remove it later
// it using the ID of the original listener.
e.guid=s.guid,sC(i,"one",r,e)}},/**
   * Add a listener to an event (or events) on this object or another evented
   * object. The listener will only be called once for the first event that is triggered
   * then removed.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */any(...e){let{isTargetingSelf:t,target:i,type:r,listener:s}=sk(this,e,"any");// Targeting this evented object.
if(t)sC(i,"any",r,s);else{let e=(...t)=>{this.off(i,r,e),s.apply(null,t)};// Use the same function ID as the listener so we can remove it later
// it using the ID of the original listener.
e.guid=s.guid,sC(i,"any",r,e)}},/**
   * Removes listener(s) from event(s) on an evented object.
   *
   * @param  {string|Array|Element|Object} [targetOrType]
   *         If this is a string or array, it represents the event type(s).
   *
   *         Another evented object can be passed here instead, in which case
   *         ALL 3 arguments are _required_.
   *
   * @param  {string|Array|Function} [typeOrListener]
   *         If the first argument was a string or array, this may be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function; otherwise, _all_ listeners bound to the
   *         event type(s) will be removed.
   */off(e,t,i){// Targeting this evented object.
!e||sT(e)?sl(this.eventBusEl_,e,t):(// Fail fast and in a meaningful way!
sS(e,this,"off"),sE(t,this,"off"),sw(i,this,"off"),// Ensure there's at least a guid, even if the function hasn't been used
i=sp(this,i),// Remove the dispose listener on this evented object, which was given
// the same guid as the event listener in on().
this.off("dispose",i),e.nodeName?(sl(e,t,i),sl(e,"dispose",i)):sb(e)&&(e.off(t,i),e.off("dispose",i)))},/**
   * Fire an event on this evented object, causing its listeners to be called.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash]
   *          An additional object to pass along to listeners.
   *
   * @return {boolean}
   *          Whether or not the default behavior was prevented.
   */trigger(e,t){sS(this.eventBusEl_,this,"trigger");let i=e&&"string"!=typeof e?e.type:e;if(!sT(i))throw Error(`Invalid event type for ${s_(this)}#trigger; must be a non-empty string or object with a type key that has a non-empty value.`);return su(this.eventBusEl_,e,t)}};/**
 * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.
 *
 * @param  {Object} target
 *         The object to which to add event methods.
 *
 * @param  {Object} [options={}]
 *         Options for customizing the mixin behavior.
 *
 * @param  {string} [options.eventBusKey]
 *         By default, adds a `eventBusEl_` DOM element to the target object,
 *         which is used as an event bus. If the target object already has a
 *         DOM element that should be used, pass its key here.
 *
 * @return {Object}
 *         The target object.
 */function sD(e,t={}){let{eventBusKey:i}=t;// Set or create the eventBusEl_.
if(i){if(!e[i].nodeName)throw Error(`The eventBusKey "${i}" does not refer to an element.`);e.eventBusEl_=e[i]}else e.eventBusEl_=rA("span",{className:"vjs-event-bus"});return Object.assign(e,sx),e.eventedCallbacks&&e.eventedCallbacks.forEach(e=>{e()}),// When any evented object is disposed, it removes all its listeners.
e.on("dispose",()=>{e.off(),[e,e.el_,e.eventBusEl_].forEach(function(e){e&&se.has(e)&&se.delete(e)}),/*@__PURE__*/w(I).setTimeout(()=>{e.eventBusEl_=null},0)}),e}/**
 * @file mixins/stateful.js
 * @module stateful
 *//**
 * Contains methods that provide statefulness to an object which is passed
 * to {@link module:stateful}.
 *
 * @mixin StatefulMixin
 */const sI={/**
   * A hash containing arbitrary keys and values representing the state of
   * the object.
   *
   * @type {Object}
   */state:{},/**
   * Set the state of an object by mutating its
   * {@link module:stateful~StatefulMixin.state|state} object in place.
   *
   * @fires   module:stateful~StatefulMixin#statechanged
   * @param   {Object|Function} stateUpdates
   *          A new set of properties to shallow-merge into the plugin state.
   *          Can be a plain object or a function returning a plain object.
   *
   * @return {Object|undefined}
   *          An object containing changes that occurred. If no changes
   *          occurred, returns `undefined`.
   */setState(e){let t;return"function"==typeof e&&(e=e()),i7(e,(e,i)=>{this.state[i]!==e&&((t=t||{})[i]={from:this.state[i],to:e}),this.state[i]=e}),t&&sb(this)&&/**
       * An event triggered on an object that is both
       * {@link module:stateful|stateful} and {@link module:evented|evented}
       * indicating that its state has changed.
       *
       * @event    module:stateful~StatefulMixin#statechanged
       * @type     {Object}
       * @property {Object} changes
       *           A hash containing the properties that were changed and
       *           the values they were changed `from` and `to`.
       */this.trigger({changes:t,type:"statechanged"}),t}};/**
 * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target
 * object.
 *
 * If the target object is {@link module:evented|evented} and has a
 * `handleStateChanged` method, that method will be automatically bound to the
 * `statechanged` event on itself.
 *
 * @param   {Object} target
 *          The object to be made stateful.
 *
 * @param   {Object} [defaultState]
 *          A default set of properties to populate the newly-stateful object's
 *          `state` property.
 *
 * @return {Object}
 *          Returns the `target`.
 */function sA(e,t){return Object.assign(e,sI),// This happens after the mixing-in because we need to replace the `state`
// added in that step.
e.state=Object.assign({},e.state,t),"function"==typeof e.handleStateChanged&&sb(e)&&e.on("statechanged",e.handleStateChanged),e}/**
 * @file str.js
 * @module to-lower-case
 *//**
 * Lowercase the first letter of a string.
 *
 * @param {string} string
 *        String to be lowercased
 *
 * @return {string}
 *         The string with a lowercased first letter
 */const sL=function(e){return"string"!=typeof e?e:e.replace(/./,e=>e.toLowerCase())},sP=function(e){return"string"!=typeof e?e:e.replace(/./,e=>e.toUpperCase())},sO=function(e,t){return sP(e)===sP(t)};var sR=/*#__PURE__*/Object.freeze({__proto__:null,toLowerCase:sL,toTitleCase:sP,titleCaseEquals:sO});/**
 * Player Component - Base class for all UI objects
 *
 * @file component.js
 *//**
 * Base class for all UI Components.
 * Components are UI objects which represent both a javascript object and an element
 * in the DOM. They can be children of other components, and can have
 * children themselves.
 *
 * Components can also use methods from {@link EventTarget}
 */class sN{/**
   * A callback that is called when a component is ready. Does not have any
   * parameters and any callback value will be ignored.
   *
   * @callback ReadyCallback
   * @this Component
   *//**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of component options.
   *
   * @param {Object[]} [options.children]
   *        An array of children objects to initialize this component with. Children objects have
   *        a name property that will be used if more than one component of the same type needs to be
   *        added.
   *
   * @param  {string} [options.className]
   *         A class or space separated list of classes to add the component
   *
   * @param {ReadyCallback} [ready]
   *        Function that gets called when the `Component` is ready.
   */constructor(e,t,i){// If there was no ID from the options, generate one
if(!e&&this.play?this.player_=e=this:this.player_=e,this.isDisposed_=!1,// Hold the reference to the parent component via `addChild` method
this.parentComponent_=null,// Make a copy of prototype.options_ to protect against overriding defaults
this.options_=ri({},this.options_),// Updated options with supplied options
t=this.options_=ri(this.options_,t),// Get ID from options or options element if one is supplied
this.id_=t.id||t.el&&t.el.id,!this.id_){// Don't require the player ID function in the case of mock players
let t=e&&e.id&&e.id()||"no_player";this.id_=`${t}_component_${st++}`}this.name_=t.name||null,t.el?this.el_=t.el:!1!==t.createEl&&(this.el_=this.createEl()),t.className&&this.el_&&t.className.split(" ").forEach(e=>this.addClass(e)),// Remove the placeholder event methods. If the component is evented, the
// real methods are added next
["on","off","one","any","trigger"].forEach(e=>{this[e]=void 0}),!1!==t.evented&&(// Make this an evented object and use `el_`, if available, as its event bus
sD(this,{eventBusKey:this.el_?"el_":null}),this.handleLanguagechange=this.handleLanguagechange.bind(this),this.on(this.player_,"languagechange",this.handleLanguagechange)),sA(this,this.constructor.defaultState),this.children_=[],this.childIndex_={},this.childNameIndex_={},this.setTimeoutIds_=new Set,this.setIntervalIds_=new Set,this.rafIds_=new Set,this.namedRafs_=new Map,this.clearingTimersOnDispose_=!1,!1!==t.initChildren&&this.initChildren(),// Don't want to trigger ready here or it will go before init is actually
// finished for all children that run this constructor
this.ready(i),!1!==t.reportTouchActivity&&this.enableTouchActivity()}// `on`, `off`, `one`, `any` and `trigger` are here so tsc includes them in definitions.
// They are replaced or removed in the constructor
/**
   * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
   * function that will get called when an event with a certain name gets triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to call with `EventTarget`s
   */on(e,t){}/**
   * Removes an `event listener` for a specific event from an instance of `EventTarget`.
   * This makes it so that the `event listener` will no longer get called when the
   * named event happens.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to remove.
   */off(e,t){}/**
   * This function will add an `event listener` that gets triggered only once. After the
   * first trigger it will get removed. This is like adding an `event listener`
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */one(e,t){}/**
   * This function will add an `event listener` that gets triggered only once and is
   * removed from all events. This is like adding an array of `event listener`s
   * with {@link EventTarget#on} that calls {@link EventTarget#off} on all events the
   * first time it is triggered.
   *
   * @param {string|string[]} type
   *        An event name or an array of event names.
   *
   * @param {Function} fn
   *        The function to be called once for each event name.
   */any(e,t){}/**
   * This function causes an event to happen. This will then cause any `event listeners`
   * that are waiting for that event, to get called. If there are no `event listeners`
   * for an event then nothing will happen.
   *
   * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
   * Trigger will also call the `on` + `uppercaseEventName` function.
   *
   * Example:
   * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
   * `onClick` if it exists.
   *
   * @param {string|Event|Object} event
   *        The name of the event, an `Event`, or an object with a key of type set to
   *        an event name.
   *
   * @param {Object} [hash]
   *        Optionally extra argument to pass through to an event listener
   */trigger(e,t){}/**
   * Dispose of the `Component` and all child components.
   *
   * @fires Component#dispose
   *
   * @param {Object} options
   * @param {Element} options.originalEl element with which to replace player element
   */dispose(e={}){// Bail out if the component has already been disposed.
if(!this.isDisposed_){// Dispose all children.
if(this.readyQueue_&&(this.readyQueue_.length=0),/**
     * Triggered when a `Component` is disposed.
     *
     * @event Component#dispose
     * @type {Event}
     *
     * @property {boolean} [bubbles=false]
     *           set to false so that the dispose event does not
     *           bubble up
     */this.trigger({type:"dispose",bubbles:!1}),this.isDisposed_=!0,this.children_)for(let e=this.children_.length-1;e>=0;e--)this.children_[e].dispose&&this.children_[e].dispose();// Delete child references
this.children_=null,this.childIndex_=null,this.childNameIndex_=null,this.parentComponent_=null,this.el_&&(this.el_.parentNode&&(e.restoreEl?this.el_.parentNode.replaceChild(e.restoreEl,this.el_):this.el_.parentNode.removeChild(this.el_)),this.el_=null),// remove reference to the player after disposing of the element
this.player_=null}}/**
   * Determine whether or not this component has been disposed.
   *
   * @return {boolean}
   *         If the component has been disposed, will be `true`. Otherwise, `false`.
   */isDisposed(){return!!this.isDisposed_}/**
   * Return the {@link Player} that the `Component` has attached to.
   *
   * @return { import('./player').default }
   *         The player that this `Component` has attached to.
   */player(){return this.player_}/**
   * Deep merge of options objects with new options.
   * > Note: When both `obj` and `options` contain properties whose values are objects.
   *         The two properties get merged using {@link module:obj.merge}
   *
   * @param {Object} obj
   *        The object that contains new options.
   *
   * @return {Object}
   *         A new object of `this.options_` and `obj` merged together.
   */options(e){return e&&(this.options_=ri(this.options_,e)),this.options_}/**
   * Get the `Component`s DOM element
   *
   * @return {Element}
   *         The DOM element for this `Component`.
   */el(){return this.el_}/**
   * Create the `Component`s DOM element.
   *
   * @param {string} [tagName]
   *        Element's DOM node type. e.g. 'div'
   *
   * @param {Object} [properties]
   *        An object of properties that should be set.
   *
   * @param {Object} [attributes]
   *        An object of attributes that should be set.
   *
   * @return {Element}
   *         The element that gets created.
   */createEl(e,t,i){return rA(e,t,i)}/**
   * Localize a string given the string in english.
   *
   * If tokens are provided, it'll try and run a simple token replacement on the provided string.
   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.
   *
   * If a `defaultValue` is provided, it'll use that over `string`,
   * if a value isn't found in provided language files.
   * This is useful if you want to have a descriptive key for token replacement
   * but have a succinct localized string and not require `en.json` to be included.
   *
   * Currently, it is used for the progress bar timing.
   * ```js
   * {
   *   "progress bar timing: currentTime={1} duration={2}": "{1} of {2}"
   * }
   * ```
   * It is then used like so:
   * ```js
   * this.localize('progress bar timing: currentTime={1} duration{2}',
   *               [this.player_.currentTime(), this.player_.duration()],
   *               '{1} of {2}');
   * ```
   *
   * Which outputs something like: `01:23 of 24:56`.
   *
   *
   * @param {string} string
   *        The string to localize and the key to lookup in the language files.
   * @param {string[]} [tokens]
   *        If the current item has token replacements, provide the tokens here.
   * @param {string} [defaultValue]
   *        Defaults to `string`. Can be a default value to use for token replacement
   *        if the lookup key is needed to be separate.
   *
   * @return {string}
   *         The localized string or if no localization exists the english string.
   */localize(e,t,i=e){let r=this.player_.language&&this.player_.language(),s=this.player_.languages&&this.player_.languages(),n=s&&s[r],a=r&&r.split("-")[0],o=s&&s[a],l=i;return n&&n[e]?l=n[e]:o&&o[e]&&(l=o[e]),t&&(l=l.replace(/\{(\d+)\}/g,function(e,i){let r=t[i-1],s=r;return void 0===r&&(s=e),s})),l}/**
   * Handles language change for the player in components. Should be overridden by sub-components.
   *
   * @abstract
   */handleLanguagechange(){}/**
   * Return the `Component`s DOM element. This is where children get inserted.
   * This will usually be the the same as the element returned in {@link Component#el}.
   *
   * @return {Element}
   *         The content element for this `Component`.
   */contentEl(){return this.contentEl_||this.el_}/**
   * Get this `Component`s ID
   *
   * @return {string}
   *         The id of this `Component`
   */id(){return this.id_}/**
   * Get the `Component`s name. The name gets used to reference the `Component`
   * and is set during registration.
   *
   * @return {string}
   *         The name of this `Component`.
   */name(){return this.name_}/**
   * Get an array of all child components
   *
   * @return {Array}
   *         The children
   */children(){return this.children_}/**
   * Returns the child `Component` with the given `id`.
   *
   * @param {string} id
   *        The id of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The child `Component` with the given `id` or undefined.
   */getChildById(e){return this.childIndex_[e]}/**
   * Returns the child `Component` with the given `name`.
   *
   * @param {string} name
   *        The name of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The child `Component` with the given `name` or undefined.
   */getChild(e){if(e)return this.childNameIndex_[e]}/**
   * Returns the descendant `Component` following the givent
   * descendant `names`. For instance ['foo', 'bar', 'baz'] would
   * try to get 'foo' on the current component, 'bar' on the 'foo'
   * component and 'baz' on the 'bar' component and return undefined
   * if any of those don't exist.
   *
   * @param {...string[]|...string} names
   *        The name of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The descendant `Component` following the given descendant
   *         `names` or undefined.
   */getDescendant(...e){// flatten array argument into the main array
e=e.reduce((e,t)=>e.concat(t),[]);let t=this;for(let i=0;i<e.length;i++)if(!(t=t.getChild(e[i]))||!t.getChild)return;return t}/**
   * Adds an SVG icon element to another element or component.
   *
   * @param {string} iconName
   *        The name of icon. A list of all the icon names can be found at 'sandbox/svg-icons.html'
   *
   * @param {Element} [el=this.el()]
   *        Element to set the title on. Defaults to the current Component's element.
   *
   * @return {Element}
   *        The newly created icon element.
   */setIcon(e,t=this.el()){// TODO: In v9 of video.js, we will want to remove font icons entirely.
// This means this check, as well as the others throughout the code, and
// the unecessary CSS for font icons, will need to be removed.
// See https://github.com/videojs/video.js/pull/8260 as to which components
// need updating.
if(!this.player_.options_.experimentalSvgIcons)return;let i="http://www.w3.org/2000/svg",r=rA("span",{className:"vjs-icon-placeholder vjs-svg-icon"},{"aria-hidden":"true"}),s=/*@__PURE__*/w(A).createElementNS(i,"svg");s.setAttributeNS(null,"viewBox","0 0 512 512");let n=/*@__PURE__*/w(A).createElementNS(i,"use");return s.appendChild(n),n.setAttributeNS(null,"href",`#vjs-icon-${e}`),r.appendChild(s),this.iconIsSet_?t.replaceChild(r,t.querySelector(".vjs-icon-placeholder")):t.appendChild(r),this.iconIsSet_=!0,r}/**
   * Add a child `Component` inside the current `Component`.
   *
   * @param {string|Component} child
   *        The name or instance of a child to add.
   *
   * @param {Object} [options={}]
   *        The key/value store of options that will get passed to children of
   *        the child.
   *
   * @param {number} [index=this.children_.length]
   *        The index to attempt to add a child into.
   *
   *
   * @return {Component}
   *         The `Component` that gets added as a child. When using a string the
   *         `Component` will get created by this process.
   */addChild(e,t={},i=this.children_.length){let r,s;// If child is a string, create component with options
if("string"==typeof e){s=sP(e);let i=t.componentClass||s;// Set name through options
t.name=s;// Create a new object & element for this controls set
// If there's no .player_, this is a player
let n=sN.getComponent(i);if(!n)throw Error(`Component ${i} does not exist`);// data stored directly on the videojs object may be
// misidentified as a component to retain
// backwards-compatibility with 4.x. check to make sure the
// component class can be instantiated.
if("function"!=typeof n)return null;r=new n(this.player_||this,t);// child is a component instance
}else r=e;// Add the UI object's element to the container div (box)
// Having an element is not required
if(r.parentComponent_&&r.parentComponent_.removeChild(r),this.children_.splice(i,0,r),r.parentComponent_=this,"function"==typeof r.id&&(this.childIndex_[r.id()]=r),// If a name wasn't used to create the component, check if we can use the
// name function of the component
(s=s||r.name&&sP(r.name()))&&(this.childNameIndex_[s]=r,this.childNameIndex_[sL(s)]=r),"function"==typeof r.el&&r.el()){// If inserting before a component, insert before that component's element
let e=null;this.children_[i+1]&&(this.children_[i+1].el_?e=this.children_[i+1].el_:rx(this.children_[i+1])&&(e=this.children_[i+1])),this.contentEl().insertBefore(r.el(),e)}// Return so it can stored on parent object if desired.
return r}/**
   * Remove a child `Component` from this `Component`s list of children. Also removes
   * the child `Component`s element from this `Component`s element.
   *
   * @param {Component} component
   *        The child `Component` to remove.
   */removeChild(e){if("string"==typeof e&&(e=this.getChild(e)),!e||!this.children_)return;let t=!1;for(let i=this.children_.length-1;i>=0;i--)if(this.children_[i]===e){t=!0,this.children_.splice(i,1);break}if(!t)return;e.parentComponent_=null,this.childIndex_[e.id()]=null,this.childNameIndex_[sP(e.name())]=null,this.childNameIndex_[sL(e.name())]=null;let i=e.el();i&&i.parentNode===this.contentEl()&&this.contentEl().removeChild(e.el())}/**
   * Add and initialize default child `Component`s based upon options.
   */initChildren(){let e=this.options_.children;if(e){let t;// `this` is `parent`
let i=this.options_,r=sN.getComponent("Tech");(t=Array.isArray(e)?e:Object.keys(e))// give us extra children we do not want. So, we want to filter them out.
.concat(Object.keys(this.options_).filter(function(e){return!t.some(function(t){return"string"==typeof t?e===t:e===t.name})})).map(t=>{let i,r;return"string"==typeof t?r=e[i=t]||this.options_[i]||{}:(i=t.name,r=t),{name:i,opts:r}}).filter(e=>{// we have to make sure that child.name isn't in the techOrder since
// techs are registered as Components but can't aren't compatible
// See https://github.com/videojs/video.js/issues/2772
let t=sN.getComponent(e.opts.componentClass||sP(e.name));return t&&!r.isTech(t)}).forEach(e=>{let t=e.name,r=e.opts;// Allow for disabling default components
// e.g. options['children']['posterImage'] = false
if(void 0!==i[t]&&(r=i[t]),!1===r)return;!0===r&&(r={}),// We also want to pass the original player options
// to each component as well so they don't need to
// reach back into the player for options later.
r.playerOptions=this.options_.playerOptions;// Create and add the child component.
// Add a direct reference to the child by name on the parent instance.
// If two of the same component are used, different names should be supplied
// for each
let s=this.addChild(t,r);s&&(this[t]=s)})}}/**
   * Builds the default DOM class name. Should be overridden by sub-components.
   *
   * @return {string}
   *         The DOM class name for this object.
   *
   * @abstract
   */buildCSSClass(){// Child classes can include a function that does:
// return 'CLASS NAME' + this._super();
return""}/**
   * Bind a listener to the component's ready state.
   * Different from event listeners in that if the ready event has already happened
   * it will trigger the function immediately.
   *
   * @param {ReadyCallback} fn
   *        Function that gets called when the `Component` is ready.
   *
   * @return {Component}
   *         Returns itself; method can be chained.
   */ready(e,t=!1){if(e){if(!this.isReady_){this.readyQueue_=this.readyQueue_||[],this.readyQueue_.push(e);return}t?e.call(this):this.setTimeout(e,1)}}/**
   * Trigger all the ready listeners for this `Component`.
   *
   * @fires Component#ready
   */triggerReady(){this.isReady_=!0,// Ensure ready is triggered asynchronously
this.setTimeout(function(){let e=this.readyQueue_;// Reset Ready Queue
this.readyQueue_=[],e&&e.length>0&&e.forEach(function(e){e.call(this)},this),// Allow for using event listeners also
/**
       * Triggered when a `Component` is ready.
       *
       * @event Component#ready
       * @type {Event}
       */this.trigger("ready")},1)}/**
   * Find a single DOM element matching a `selector`. This can be within the `Component`s
   * `contentEl()` or another custom context.
   *
   * @param {string} selector
   *        A valid CSS selector, which will be passed to `querySelector`.
   *
   * @param {Element|string} [context=this.contentEl()]
   *        A DOM element within which to query. Can also be a selector string in
   *        which case the first matching element will get used as context. If
   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
   *        nothing it falls back to `document`.
   *
   * @return {Element|null}
   *         the dom element that was found, or null
   *
   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
   */$(e,t){return rZ(e,t||this.contentEl())}/**
   * Finds all DOM element matching a `selector`. This can be within the `Component`s
   * `contentEl()` or another custom context.
   *
   * @param {string} selector
   *        A valid CSS selector, which will be passed to `querySelectorAll`.
   *
   * @param {Element|string} [context=this.contentEl()]
   *        A DOM element within which to query. Can also be a selector string in
   *        which case the first matching element will get used as context. If
   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
   *        nothing it falls back to `document`.
   *
   * @return {NodeList}
   *         a list of dom elements that were found
   *
   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
   */$$(e,t){return r0(e,t||this.contentEl())}/**
   * Check if a component's element has a CSS class name.
   *
   * @param {string} classToCheck
   *        CSS class name to check.
   *
   * @return {boolean}
   *         - True if the `Component` has the class.
   *         - False if the `Component` does not have the class`
   */hasClass(e){return rO(this.el_,e)}/**
   * Add a CSS class name to the `Component`s element.
   *
   * @param {...string} classesToAdd
   *        One or more CSS class name to add.
   */addClass(...e){rR(this.el_,...e)}/**
   * Remove a CSS class name from the `Component`s element.
   *
   * @param {...string} classesToRemove
   *        One or more CSS class name to remove.
   */removeClass(...e){rN(this.el_,...e)}/**
   * Add or remove a CSS class name from the component's element.
   * - `classToToggle` gets added when {@link Component#hasClass} would return false.
   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
   *
   * @param  {string} classToToggle
   *         The class to add or remove based on (@link Component#hasClass}
   *
   * @param  {boolean|Dom~predicate} [predicate]
   *         An {@link Dom~predicate} function or a boolean
   */toggleClass(e,t){rM(this.el_,e,t)}/**
   * Show the `Component`s element if it is hidden by removing the
   * 'vjs-hidden' class name from it.
   */show(){this.removeClass("vjs-hidden")}/**
   * Hide the `Component`s element if it is currently showing by adding the
   * 'vjs-hidden` class name to it.
   */hide(){this.addClass("vjs-hidden")}/**
   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
   * class name to it. Used during fadeIn/fadeOut.
   *
   * @private
   */lockShowing(){this.addClass("vjs-lock-showing")}/**
   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
   * class name from it. Used during fadeIn/fadeOut.
   *
   * @private
   */unlockShowing(){this.removeClass("vjs-lock-showing")}/**
   * Get the value of an attribute on the `Component`s element.
   *
   * @param {string} attribute
   *        Name of the attribute to get the value from.
   *
   * @return {string|null}
   *         - The value of the attribute that was asked for.
   *         - Can be an empty string on some browsers if the attribute does not exist
   *           or has no value
   *         - Most browsers will return null if the attribute does not exist or has
   *           no value.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
   */getAttribute(e){return rF(this.el_,e)}/**
   * Set the value of an attribute on the `Component`'s element
   *
   * @param {string} attribute
   *        Name of the attribute to set.
   *
   * @param {string} value
   *        Value to set the attribute to.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
   */setAttribute(e,t){rj(this.el_,e,t)}/**
   * Remove an attribute from the `Component`s element.
   *
   * @param {string} attribute
   *        Name of the attribute to remove.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
   */removeAttribute(e){rq(this.el_,e)}/**
   * Get or set the width of the component based upon the CSS styles.
   * See {@link Component#dimension} for more detailed information.
   *
   * @param {number|string} [num]
   *        The width that you want to set postfixed with '%', 'px' or nothing.
   *
   * @param {boolean} [skipListeners]
   *        Skip the componentresize event trigger
   *
   * @return {number|undefined}
   *         The width when getting, zero if there is no width
   */width(e,t){return this.dimension("width",e,t)}/**
   * Get or set the height of the component based upon the CSS styles.
   * See {@link Component#dimension} for more detailed information.
   *
   * @param {number|string} [num]
   *        The height that you want to set postfixed with '%', 'px' or nothing.
   *
   * @param {boolean} [skipListeners]
   *        Skip the componentresize event trigger
   *
   * @return {number|undefined}
   *         The height when getting, zero if there is no height
   */height(e,t){return this.dimension("height",e,t)}/**
   * Set both the width and height of the `Component` element at the same time.
   *
   * @param  {number|string} width
   *         Width to set the `Component`s element to.
   *
   * @param  {number|string} height
   *         Height to set the `Component`s element to.
   */dimensions(e,t){// Skip componentresize listeners on width for optimization
this.width(e,!0),this.height(t)}/**
   * Get or set width or height of the `Component` element. This is the shared code
   * for the {@link Component#width} and {@link Component#height}.
   *
   * Things to know:
   * - If the width or height in an number this will return the number postfixed with 'px'.
   * - If the width/height is a percent this will return the percent postfixed with '%'
   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
   *   for more information
   * - If you want the computed style of the component, use {@link Component#currentWidth}
   *   and {@link {Component#currentHeight}
   *
   * @fires Component#componentresize
   *
   * @param {string} widthOrHeight
   8        'width' or 'height'
   *
   * @param  {number|string} [num]
   8         New dimension
   *
   * @param  {boolean} [skipListeners]
   *         Skip componentresize event trigger
   *
   * @return {number|undefined}
   *         The dimension when getting or 0 if unset
   */dimension(e,t,i){if(void 0!==t){(null===t||t!=t)&&(t=0),-1!==(""+t).indexOf("%")||-1!==(""+t).indexOf("px")?this.el_.style[e]=t:"auto"===t?this.el_.style[e]="":this.el_.style[e]=t+"px",i||/**
         * Triggered when a component is resized.
         *
         * @event Component#componentresize
         * @type {Event}
         */this.trigger("componentresize");return}// Not setting a value, so getting it
// Make sure element exists
if(!this.el_)return 0;// Get dimension value from style
let r=this.el_.style[e],s=r.indexOf("px");return -1!==s?parseInt(r.slice(0,s),10):parseInt(this.el_["offset"+sP(e)],10)}/**
   * Get the computed width or the height of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @param {string} widthOrHeight
   *        A string containing 'width' or 'height'. Whichever one you want to get.
   *
   * @return {number}
   *         The dimension that gets asked for or 0 if nothing was set
   *         for that dimension.
   */currentDimension(e){let t=0;if("width"!==e&&"height"!==e)throw Error("currentDimension only accepts width or height value");// if the computed value is still 0, it's possible that the browser is lying
// and we want to check the offset values.
// This code also runs wherever getComputedStyle doesn't exist.
if(0===// remove 'px' from variable and parse as integer
(t=parseFloat(t=r1(this.el_,e)))||isNaN(t)){let i=`offset${sP(e)}`;t=this.el_[i]}return t}/**
   * An object that contains width and height values of the `Component`s
   * computed style. Uses `window.getComputedStyle`.
   *
   * @typedef {Object} Component~DimensionObject
   *
   * @property {number} width
   *           The width of the `Component`s computed style.
   *
   * @property {number} height
   *           The height of the `Component`s computed style.
   *//**
   * Get an object that contains computed width and height values of the
   * component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {Component~DimensionObject}
   *         The computed dimensions of the component's element.
   */currentDimensions(){return{width:this.currentDimension("width"),height:this.currentDimension("height")}}/**
   * Get the computed width of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {number}
   *         The computed width of the component's element.
   */currentWidth(){return this.currentDimension("width")}/**
   * Get the computed height of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {number}
   *         The computed height of the component's element.
   */currentHeight(){return this.currentDimension("height")}/**
   * Set the focus to this component
   */focus(){this.el_.focus()}/**
   * Remove the focus from this component
   */blur(){this.el_.blur()}/**
   * When this Component receives a `keydown` event which it does not process,
   *  it passes the event to the Player for handling.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   */handleKeyDown(e){this.player_&&(/*@__PURE__*/w(L).isEventKey(e,"Tab")||e.stopPropagation(),this.player_.handleKeyDown(e))}/**
   * Many components used to have a `handleKeyPress` method, which was poorly
   * named because it listened to a `keydown` event. This method name now
   * delegates to `handleKeyDown`. This means anyone calling `handleKeyPress`
   * will not see their method calls stop working.
   *
   * @param {KeyboardEvent} event
   *        The event that caused this function to be called.
   */handleKeyPress(e){this.handleKeyDown(e)}/**
   * Emit a 'tap' events when touch event support gets detected. This gets used to
   * support toggling the controls through a tap on the video. They get enabled
   * because every sub-component would have extra overhead otherwise.
   *
   * @protected
   * @fires Component#tap
   * @listens Component#touchstart
   * @listens Component#touchmove
   * @listens Component#touchleave
   * @listens Component#touchcancel
   * @listens Component#touchend
    */emitTapEvents(){// Track the start time so we can determine how long the touch lasted
let e,t=0,i=null;this.on("touchstart",function(r){// If more than one finger, don't consider treating this as a click
1===r.touches.length&&(// Copy pageX/pageY from the object
i={pageX:r.touches[0].pageX,pageY:r.touches[0].pageY},// Record start time so we can detect a tap vs. "touch and hold"
t=/*@__PURE__*/w(I).performance.now(),// Reset couldBeTap tracking
e=!0)}),this.on("touchmove",function(t){// If more than one finger, don't consider treating this as a click
if(t.touches.length>1)e=!1;else if(i){// Some devices will throw touchmoves for all but the slightest of taps.
// So, if we moved only a small distance, this could still be a tap
let r=t.touches[0].pageX-i.pageX,s=t.touches[0].pageY-i.pageY;Math.sqrt(r*r+s*s)>10&&(e=!1)}});let r=function(){e=!1};// TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
this.on("touchleave",r),this.on("touchcancel",r),// When the touch ends, measure how long it took and trigger the appropriate
// event
this.on("touchend",function(r){// Proceed only if the touchmove/leave/cancel event didn't happen
if(i=null,!0===e){// Measure how long the touch lasted
let e=/*@__PURE__*/w(I).performance.now()-t;// Make sure the touch was less than the threshold to be considered a tap
e<200&&(// Don't let browser turn this into a click
r.preventDefault(),/**
           * Triggered when a `Component` is tapped.
           *
           * @event Component#tap
           * @type {MouseEvent}
           */this.trigger("tap"))}})}/**
   * This function reports user activity whenever touch events happen. This can get
   * turned off by any sub-components that wants touch events to act another way.
   *
   * Report user touch activity when touch events occur. User activity gets used to
   * determine when controls should show/hide. It is simple when it comes to mouse
   * events, because any mouse event should show the controls. So we capture mouse
   * events that bubble up to the player and report activity when that happens.
   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
   * controls. So touch events can't help us at the player level either.
   *
   * User activity gets checked asynchronously. So what could happen is a tap event
   * on the video turns the controls off. Then the `touchend` event bubbles up to
   * the player. Which, if it reported user activity, would turn the controls right
   * back on. We also don't want to completely block touch events from bubbling up.
   * Furthermore a `touchmove` event and anything other than a tap, should not turn
   * controls back on.
   *
   * @listens Component#touchstart
   * @listens Component#touchmove
   * @listens Component#touchend
   * @listens Component#touchcancel
   */enableTouchActivity(){let e;// Don't continue if the root player doesn't support reporting user activity
if(!this.player()||!this.player().reportUserActivity)return;// listener for reporting that the user is active
let t=sp(this.player(),this.player().reportUserActivity);this.on("touchstart",function(){t(),// For as long as the they are touching the device or have their mouse down,
// we consider them active even if they're not moving their finger or mouse.
// So we want to continue to update that they are active
this.clearInterval(e),// report at the same interval as activityCheck
e=this.setInterval(t,250)});let i=function(i){t(),// stop the interval that maintains activity if the touch is holding
this.clearInterval(e)};this.on("touchmove",t),this.on("touchend",i),this.on("touchcancel",i)}/**
   * A callback that has no parameters and is bound into `Component`s context.
   *
   * @callback Component~GenericCallback
   * @this Component
   *//**
   * Creates a function that runs after an `x` millisecond timeout. This function is a
   * wrapper around `window.setTimeout`. There are a few reasons to use this one
   * instead though:
   * 1. It gets cleared via  {@link Component#clearTimeout} when
   *    {@link Component#dispose} gets called.
   * 2. The function callback will gets turned into a {@link Component~GenericCallback}
   *
   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This
   *         will cause its dispose listener not to get cleaned up! Please use
   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.
   *
   * @param {Component~GenericCallback} fn
   *        The function that will be run after `timeout`.
   *
   * @param {number} timeout
   *        Timeout in milliseconds to delay before executing the specified function.
   *
   * @return {number}
   *         Returns a timeout ID that gets used to identify the timeout. It can also
   *         get used in {@link Component#clearTimeout} to clear the timeout that
   *         was set.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
   */setTimeout(e,t){// declare as variables so they are properly available in timeout function
// eslint-disable-next-line
var i;return e=sp(this,e),this.clearTimersOnDispose_(),i=/*@__PURE__*/w(I).setTimeout(()=>{this.setTimeoutIds_.has(i)&&this.setTimeoutIds_.delete(i),e()},t),this.setTimeoutIds_.add(i),i}/**
   * Clears a timeout that gets created via `window.setTimeout` or
   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
   * use this function instead of `window.clearTimout`. If you don't your dispose
   * listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} timeoutId
   *        The id of the timeout to clear. The return value of
   *        {@link Component#setTimeout} or `window.setTimeout`.
   *
   * @return {number}
   *         Returns the timeout id that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
   */clearTimeout(e){return this.setTimeoutIds_.has(e)&&(this.setTimeoutIds_.delete(e),/*@__PURE__*/w(I).clearTimeout(e)),e}/**
   * Creates a function that gets run every `x` milliseconds. This function is a wrapper
   * around `window.setInterval`. There are a few reasons to use this one instead though.
   * 1. It gets cleared via  {@link Component#clearInterval} when
   *    {@link Component#dispose} gets called.
   * 2. The function callback will be a {@link Component~GenericCallback}
   *
   * @param {Component~GenericCallback} fn
   *        The function to run every `x` seconds.
   *
   * @param {number} interval
   *        Execute the specified function every `x` milliseconds.
   *
   * @return {number}
   *         Returns an id that can be used to identify the interval. It can also be be used in
   *         {@link Component#clearInterval} to clear the interval.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
   */setInterval(e,t){e=sp(this,e),this.clearTimersOnDispose_();let i=/*@__PURE__*/w(I).setInterval(e,t);return this.setIntervalIds_.add(i),i}/**
   * Clears an interval that gets created via `window.setInterval` or
   * {@link Component#setInterval}. If you set an interval via {@link Component#setInterval}
   * use this function instead of `window.clearInterval`. If you don't your dispose
   * listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} intervalId
   *        The id of the interval to clear. The return value of
   *        {@link Component#setInterval} or `window.setInterval`.
   *
   * @return {number}
   *         Returns the interval id that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
   */clearInterval(e){return this.setIntervalIds_.has(e)&&(this.setIntervalIds_.delete(e),/*@__PURE__*/w(I).clearInterval(e)),e}/**
   * Queues up a callback to be passed to requestAnimationFrame (rAF), but
   * with a few extra bonuses:
   *
   * - Supports browsers that do not support rAF by falling back to
   *   {@link Component#setTimeout}.
   *
   * - The callback is turned into a {@link Component~GenericCallback} (i.e.
   *   bound to the component).
   *
   * - Automatic cancellation of the rAF callback is handled if the component
   *   is disposed before it is called.
   *
   * @param  {Component~GenericCallback} fn
   *         A function that will be bound to this component and executed just
   *         before the browser's next repaint.
   *
   * @return {number}
   *         Returns an rAF ID that gets used to identify the timeout. It can
   *         also be used in {@link Component#cancelAnimationFrame} to cancel
   *         the animation frame callback.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
   */requestAnimationFrame(e){var t;return this.clearTimersOnDispose_(),e=sp(this,e),t=/*@__PURE__*/w(I).requestAnimationFrame(()=>{this.rafIds_.has(t)&&this.rafIds_.delete(t),e()}),this.rafIds_.add(t),t}/**
   * Request an animation frame, but only one named animation
   * frame will be queued. Another will never be added until
   * the previous one finishes.
   *
   * @param {string} name
   *        The name to give this requestAnimationFrame
   *
   * @param  {Component~GenericCallback} fn
   *         A function that will be bound to this component and executed just
   *         before the browser's next repaint.
   */requestNamedAnimationFrame(e,t){if(this.namedRafs_.has(e))return;this.clearTimersOnDispose_(),t=sp(this,t);let i=this.requestAnimationFrame(()=>{t(),this.namedRafs_.has(e)&&this.namedRafs_.delete(e)});return this.namedRafs_.set(e,i),e}/**
   * Cancels a current named animation frame if it exists.
   *
   * @param {string} name
   *        The name of the requestAnimationFrame to cancel.
   */cancelNamedAnimationFrame(e){this.namedRafs_.has(e)&&(this.cancelAnimationFrame(this.namedRafs_.get(e)),this.namedRafs_.delete(e))}/**
   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}
   * (rAF).
   *
   * If you queue an rAF callback via {@link Component#requestAnimationFrame},
   * use this function instead of `window.cancelAnimationFrame`. If you don't,
   * your dispose listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} id
   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.
   *
   * @return {number}
   *         Returns the rAF ID that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}
   */cancelAnimationFrame(e){return this.rafIds_.has(e)&&(this.rafIds_.delete(e),/*@__PURE__*/w(I).cancelAnimationFrame(e)),e}/**
   * A function to setup `requestAnimationFrame`, `setTimeout`,
   * and `setInterval`, clearing on dispose.
   *
   * > Previously each timer added and removed dispose listeners on it's own.
   * For better performance it was decided to batch them all, and use `Set`s
   * to track outstanding timer ids.
   *
   * @private
   */clearTimersOnDispose_(){this.clearingTimersOnDispose_||(this.clearingTimersOnDispose_=!0,this.one("dispose",()=>{[["namedRafs_","cancelNamedAnimationFrame"],["rafIds_","cancelAnimationFrame"],["setTimeoutIds_","clearTimeout"],["setIntervalIds_","clearInterval"]].forEach(([e,t])=>{// for a `Set` key will actually be the value again
// so forEach((val, val) =>` but for maps we want to use
// the key.
this[e].forEach((e,i)=>this[t](i))}),this.clearingTimersOnDispose_=!1}))}/**
   * Register a `Component` with `videojs` given the name and the component.
   *
   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
   *         should be registered using {@link Tech.registerTech} or
   *         {@link videojs:videojs.registerTech}.
   *
   * > NOTE: This function can also be seen on videojs as
   *         {@link videojs:videojs.registerComponent}.
   *
   * @param {string} name
   *        The name of the `Component` to register.
   *
   * @param {Component} ComponentToRegister
   *        The `Component` class to register.
   *
   * @return {Component}
   *         The `Component` that was registered.
   */static registerComponent(e,t){if("string"!=typeof e||!e)throw Error(`Illegal component name, "${e}"; must be a non-empty string.`);let i=sN.getComponent("Tech"),r=i&&i.isTech(t),s=sN===t||sN.prototype.isPrototypeOf(t.prototype);if(r||!s)throw Error(`Illegal component, "${e}"; ${r?"techs must be registered using Tech.registerTech()":"must be a Component subclass"}.`);e=sP(e),sN.components_||(sN.components_={});let n=sN.getComponent("Player");if("Player"===e&&n&&n.players){let e=n.players,t=Object.keys(e);// If we have players that were disposed, then their name will still be
// in Players.players. So, we must loop through and verify that the value
// for each item is not null. This allows registration of the Player component
// after all players have been disposed or before any were created.
if(e&&t.length>0&&t.map(t=>e[t]).every(Boolean))throw Error("Can not register Player component after player has been created.")}return sN.components_[e]=t,sN.components_[sL(e)]=t,t}/**
   * Get a `Component` based on the name it was registered with.
   *
   * @param {string} name
   *        The Name of the component to get.
   *
   * @return {Component}
   *         The `Component` that got registered under the given name.
   */static getComponent(e){if(e&&sN.components_)return sN.components_[e]}}/**
 * Get the time for the specified index at the start or end
 * of a TimeRange object.
 *
 * @private
 * @param      {string} fnName
 *             The function name to use for logging
 *
 * @param      {string} valueIndex
 *             The property that should be used to get the time. should be
 *             'start' or 'end'
 *
 * @param      {Array} ranges
 *             An array of time ranges
 *
 * @param      {Array} [rangeIndex=0]
 *             The index to start the search at
 *
 * @return     {number}
 *             The time that offset at the specified index.
 *
 * @deprecated rangeIndex must be set to a value, in the future this will throw an error.
 * @throws     {Error} if rangeIndex is more than the length of ranges
 */function sM(e,t,i,r){return!/**
 * @file time.js
 * @module time
 *//**
 * Returns the time for the specified index at the start or end
 * of a TimeRange object.
 *
 * @typedef    {Function} TimeRangeIndex
 *
 * @param      {number} [index=0]
 *             The range number to return the time for.
 *
 * @return     {number}
 *             The time offset at the specified index.
 *
 * @deprecated The index argument must be provided.
 *             In the future, leaving it out will throw an error.
 *//**
 * An object that contains ranges of time, which mimics {@link TimeRanges}.
 *
 * @typedef  {Object} TimeRange
 *
 * @property {number} length
 *           The number of time ranges represented by this object.
 *
 * @property {module:time~TimeRangeIndex} start
 *           Returns the time offset at which a specified time range begins.
 *
 * @property {module:time~TimeRangeIndex} end
 *           Returns the time offset at which a specified time range ends.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
 *//**
 * Check if any of the time ranges are over the maximum index.
 *
 * @private
 * @param   {string} fnName
 *          The function name to use for logging
 *
 * @param   {number} index
 *          The index to check
 *
 * @param   {number} maxIndex
 *          The maximum possible index
 *
 * @throws  {Error} if the timeRanges provided are over the maxIndex
 */function(e,t,i){if("number"!=typeof t||t<0||t>i)throw Error(`Failed to execute '${e}' on 'TimeRanges': The index provided (${t}) is non-numeric or out of bounds (0-${i}).`)}(e,r,i.length-1),i[r][t]}/**
 * Create a time range object given ranges of time.
 *
 * @private
 * @param   {Array} [ranges]
 *          An array of time ranges.
 *
 * @return  {TimeRange}
 */function sU(e){let t;return t=void 0===e||0===e.length?{length:0,start(){throw Error("This TimeRanges object is empty")},end(){throw Error("This TimeRanges object is empty")}}:{length:e.length,start:sM.bind(null,"start",0,e),end:sM.bind(null,"end",1,e)},/*@__PURE__*/w(I).Symbol&&/*@__PURE__*/w(I).Symbol.iterator&&(t[/*@__PURE__*/w(I).Symbol.iterator]=()=>(e||[]).values()),t}/**
 * Create a `TimeRange` object which mimics an
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges|HTML5 TimeRanges instance}.
 *
 * @param {number|Array[]} start
 *        The start of a single range (a number) or an array of ranges (an
 *        array of arrays of two numbers each).
 *
 * @param {number} end
 *        The end of a single range. Cannot be used with the array form of
 *        the `start` argument.
 *
 * @return {TimeRange}
 */function sB(e,t){return Array.isArray(e)?sU(e):void 0===e||void 0===t?sU():sU([[e,t]])}sN.registerComponent("Component",sN);/**
 * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in
 * seconds) will force a number of leading zeros to cover the length of the
 * guide.
 *
 * @private
 * @param  {number} seconds
 *         Number of seconds to be turned into a string
 *
 * @param  {number} guide
 *         Number (in seconds) to model the string after
 *
 * @return {string}
 *         Time formatted as H:MM:SS or M:SS
 */const sF=function(e,t){let i=Math.floor((e=e<0?0:e)%60),r=Math.floor(e/60%60),s=Math.floor(e/3600);return(isNaN(e)||e===1/0)&&// will add the minimum number of fields specified by the guide
(s=r=i="-"),// If hours are showing, we may need to add a leading zero.
// Always show at least one digit of minutes.
r=((// Check if we need to show hours
(s=s>0||Math.floor(t/3600)>0?s+":":"")||Math.floor(t/60%60)>=10)&&r<10?"0"+r:r)+":",s+r+// Check if leading zero is need for seconds
(i=i<10?"0"+i:i)};// Internal pointer to the current implementation.
let sj=sF;/**
 * Replaces the default formatTime implementation with a custom implementation.
 *
 * @param {Function} customImplementation
 *        A function which will be used in place of the default formatTime
 *        implementation. Will receive the current time in seconds and the
 *        guide (in seconds) as arguments.
 */function sq(e){sj=e}/**
 * Resets formatTime to the default implementation.
 */function s$(){sj=sF}/**
 * Delegates to either the default time formatting function or a custom
 * function supplied via `setFormatTime`.
 *
 * Formats seconds as a time string (H:MM:SS or M:SS). Supplying a
 * guide (in seconds) will force a number of leading zeros to cover the
 * length of the guide.
 *
 * @example  formatTime(125, 600) === "02:05"
 * @param    {number} seconds
 *           Number of seconds to be turned into a string
 *
 * @param    {number} guide
 *           Number (in seconds) to model the string after
 *
 * @return   {string}
 *           Time formatted as H:MM:SS or M:SS
 */function sH(e,t=e){return sj(e,t)}var sV=/*#__PURE__*/Object.freeze({__proto__:null,createTimeRanges:sB,createTimeRange:sB,setFormatTime:sq,resetFormatTime:s$,formatTime:sH});/**
 * @file buffer.js
 * @module buffer
 *//**
 * Compute the percentage of the media that has been buffered.
 *
 * @param { import('./time').TimeRange } buffered
 *        The current `TimeRanges` object representing buffered time ranges
 *
 * @param {number} duration
 *        Total duration of the media
 *
 * @return {number}
 *         Percent buffered of the total duration in decimal form.
 */function sz(e,t){let i,r,s=0;if(!t)return 0;e&&e.length||(e=sB(0,0));for(let n=0;n<e.length;n++)i=e.start(n),(r=e.end(n))>t&&(r=t),s+=r-i;return s/t}/**
 * @file media-error.js
 *//**
 * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
 *
 * @param {number|string|Object|MediaError} value
 *        This can be of multiple types:
 *        - number: should be a standard error code
 *        - string: an error message (the code will be 0)
 *        - Object: arbitrary properties
 *        - `MediaError` (native): used to populate a video.js `MediaError` object
 *        - `MediaError` (video.js): will return itself if it's already a
 *          video.js `MediaError` object.
 *
 * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
 * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
 *
 * @class MediaError
 */function sW(e){// Allow redundant calls to this constructor to avoid having `instanceof`
// checks peppered around the code.
if(e instanceof sW)return e;"number"==typeof e?this.code=e:"string"==typeof e?this.message=e:re(e)&&("number"==typeof e.code&&(this.code=e.code),Object.assign(this,e)),this.message||(this.message=sW.defaultMessages[this.code]||"")}/**
 * The error code that refers two one of the defined `MediaError` types
 *
 * @type {Number}
 */sW.prototype.code=0,/**
 * An optional message that to show with the error. Message is not part of the HTML5
 * video spec but allows for more informative custom errors.
 *
 * @type {String}
 */sW.prototype.message="",/**
 * An optional status code that can be set by plugins to allow even more detail about
 * the error. For example a plugin might provide a specific HTTP status code and an
 * error message for that code. Then when the plugin gets that error this class will
 * know how to display an error message for it. This allows a custom message to show
 * up on the `Player` error overlay.
 *
 * @type {Array}
 */sW.prototype.status=null,/**
 * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
 * specification listed under {@link MediaError} for more information.
 *
 * @enum {array}
 * @readonly
 * @property {string} 0 - MEDIA_ERR_CUSTOM
 * @property {string} 1 - MEDIA_ERR_ABORTED
 * @property {string} 2 - MEDIA_ERR_NETWORK
 * @property {string} 3 - MEDIA_ERR_DECODE
 * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
 * @property {string} 5 - MEDIA_ERR_ENCRYPTED
 */sW.errorTypes=["MEDIA_ERR_CUSTOM","MEDIA_ERR_ABORTED","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","MEDIA_ERR_SRC_NOT_SUPPORTED","MEDIA_ERR_ENCRYPTED"],/**
 * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
 *
 * @type {Array}
 * @constant
 */sW.defaultMessages={1:"You aborted the media playback",2:"A network error caused the media download to fail part-way.",3:"The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",4:"The media could not be loaded, either because the server or network failed or because the format is not supported.",5:"The media is encrypted and we do not have the keys to decrypt it."};// Add types as properties on MediaError
// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
for(let e=0;e<sW.errorTypes.length;e++)sW[sW.errorTypes[e]]=e,// values should be accessible on both the class and instance
sW.prototype[sW.errorTypes[e]]=e;/**
 * Returns whether an object is `Promise`-like (i.e. has a `then` method).
 *
 * @param  {Object}  value
 *         An object that may or may not be `Promise`-like.
 *
 * @return {boolean}
 *         Whether or not the object is `Promise`-like.
 */function sG(e){return null!=e&&"function"==typeof e.then}/**
 * Silence a Promise-like object.
 *
 * This is useful for avoiding non-harmful, but potentially confusing "uncaught
 * play promise" rejection error messages.
 *
 * @param  {Object} value
 *         An object that may or may not be `Promise`-like.
 */function sX(e){sG(e)&&e.then(null,e=>{})}/**
 * @file text-track-list-converter.js Utilities for capturing text track state and
 * re-creating tracks based on a capture.
 *
 * @module text-track-list-converter
 *//**
 * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
 * represents the {@link TextTrack}'s state.
 *
 * @param {TextTrack} track
 *        The text track to query.
 *
 * @return {Object}
 *         A serializable javascript representation of the TextTrack.
 * @private
 */const sK=function(e){let t=["kind","label","language","id","inBandMetadataTrackDispatchType","mode","src"].reduce((t,i,r)=>(e[i]&&(t[i]=e[i]),t),{cues:e.cues&&Array.prototype.map.call(e.cues,function(e){return{startTime:e.startTime,endTime:e.endTime,text:e.text,id:e.id}})});return t};var sY={textTracksToJson:function(e){let t=e.$$("track"),i=Array.prototype.map.call(t,e=>e.track),r=Array.prototype.map.call(t,function(e){let t=sK(e.track);return e.src&&(t.src=e.src),t});return r.concat(Array.prototype.filter.call(e.textTracks(),function(e){return -1===i.indexOf(e)}).map(sK))},jsonToTextTracks:function(e,t){return e.forEach(function(e){let i=t.addRemoteTextTrack(e).track;!e.src&&e.cues&&e.cues.forEach(e=>i.addCue(e))}),t.textTracks()},trackToJson_:sK};/**
 * @file modal-dialog.js
 */const sQ="vjs-modal-dialog";/**
 * The `ModalDialog` displays over the video and its controls, which blocks
 * interaction with the player until it is closed.
 *
 * Modal dialogs include a "Close" button and will close when that button
 * is activated - or when ESC is pressed anywhere.
 *
 * @extends Component
 */class sJ extends sN{/**
   * Create an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param { import('./utils/dom').ContentDescriptor} [options.content=undefined]
   *        Provide customized content for this modal.
   *
   * @param {string} [options.description]
   *        A text description for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.fillAlways=false]
   *        Normally, modals are automatically filled only the first time
   *        they open. This tells the modal to refresh its content
   *        every time it opens.
   *
   * @param {string} [options.label]
   *        A text label for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.pauseOnOpen=true]
   *        If `true`, playback will will be paused if playing when
   *        the modal opens, and resumed when it closes.
   *
   * @param {boolean} [options.temporary=true]
   *        If `true`, the modal can only be opened once; it will be
   *        disposed as soon as it's closed.
   *
   * @param {boolean} [options.uncloseable=false]
   *        If `true`, the user will not be able to close the modal
   *        through the UI in the normal ways. Programmatic closing is
   *        still possible.
   */constructor(e,t){super(e,t),this.handleKeyDown_=e=>this.handleKeyDown(e),this.close_=e=>this.close(e),this.opened_=this.hasBeenOpened_=this.hasBeenFilled_=!1,this.closeable(!this.options_.uncloseable),this.content(this.options_.content),// Make sure the contentEl is defined AFTER any children are initialized
// because we only want the contents of the modal in the contentEl
// (not the UI elements like the close button).
this.contentEl_=rA("div",{className:`${sQ}-content`},{role:"document"}),this.descEl_=rA("p",{className:`${sQ}-description vjs-control-text`,id:this.el().getAttribute("aria-describedby")}),rL(this.descEl_,this.description()),this.el_.appendChild(this.descEl_),this.el_.appendChild(this.contentEl_)}/**
   * Create the `ModalDialog`'s DOM element
   *
   * @return {Element}
   *         The DOM element that gets created.
   */createEl(){return super.createEl("div",{className:this.buildCSSClass(),tabIndex:-1},{"aria-describedby":`${this.id()}_description`,"aria-hidden":"true","aria-label":this.label(),role:"dialog"})}dispose(){this.contentEl_=null,this.descEl_=null,this.previouslyActiveEl_=null,super.dispose()}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`${sQ} vjs-hidden ${super.buildCSSClass()}`}/**
   * Returns the label string for this modal. Primarily used for accessibility.
   *
   * @return {string}
   *         the localized or raw label of this modal.
   */label(){return this.localize(this.options_.label||"Modal Window")}/**
   * Returns the description string for this modal. Primarily used for
   * accessibility.
   *
   * @return {string}
   *         The localized or raw description of this modal.
   */description(){let e=this.options_.description||this.localize("This is a modal window.");return this.closeable()&&(e+=" "+this.localize("This modal can be closed by pressing the Escape key or activating the close button.")),e}/**
   * Opens the modal.
   *
   * @fires ModalDialog#beforemodalopen
   * @fires ModalDialog#modalopen
   */open(){if(!this.opened_){let e=this.player();/**
        * Fired just before a `ModalDialog` is opened.
        *
        * @event ModalDialog#beforemodalopen
        * @type {Event}
        */this.trigger("beforemodalopen"),this.opened_=!0,!this.options_.fillAlways&&(this.hasBeenOpened_||this.hasBeenFilled_)||this.fill(),// If the player was playing, pause it and take note of its previously
// playing state.
this.wasPlaying_=!e.paused(),this.options_.pauseOnOpen&&this.wasPlaying_&&e.pause(),this.on("keydown",this.handleKeyDown_),// Hide controls and note if they were enabled.
this.hadControls_=e.controls(),e.controls(!1),this.show(),this.conditionalFocus_(),this.el().setAttribute("aria-hidden","false"),/**
        * Fired just after a `ModalDialog` is opened.
        *
        * @event ModalDialog#modalopen
        * @type {Event}
        */this.trigger("modalopen"),this.hasBeenOpened_=!0}}/**
   * If the `ModalDialog` is currently open or closed.
   *
   * @param  {boolean} [value]
   *         If given, it will open (`true`) or close (`false`) the modal.
   *
   * @return {boolean}
   *         the current open state of the modaldialog
   */opened(e){return"boolean"==typeof e&&this[e?"open":"close"](),this.opened_}/**
   * Closes the modal, does nothing if the `ModalDialog` is
   * not open.
   *
   * @fires ModalDialog#beforemodalclose
   * @fires ModalDialog#modalclose
   */close(){if(!this.opened_)return;let e=this.player();/**
      * Fired just before a `ModalDialog` is closed.
      *
      * @event ModalDialog#beforemodalclose
      * @type {Event}
      */this.trigger("beforemodalclose"),this.opened_=!1,this.wasPlaying_&&this.options_.pauseOnOpen&&e.play(),this.off("keydown",this.handleKeyDown_),this.hadControls_&&e.controls(!0),this.hide(),this.el().setAttribute("aria-hidden","true"),/**
      * Fired just after a `ModalDialog` is closed.
      *
      * @event ModalDialog#modalclose
      * @type {Event}
      */this.trigger("modalclose"),this.conditionalBlur_(),this.options_.temporary&&this.dispose()}/**
   * Check to see if the `ModalDialog` is closeable via the UI.
   *
   * @param  {boolean} [value]
   *         If given as a boolean, it will set the `closeable` option.
   *
   * @return {boolean}
   *         Returns the final value of the closable option.
   */closeable(e){if("boolean"==typeof e){let t=this.closeable_=!!e,i=this.getChild("closeButton");// If this is being made closeable and has no close button, add one.
if(t&&!i){// The close button should be a child of the modal - not its
// content element, so temporarily change the content element.
let e=this.contentEl_;this.contentEl_=this.el_,i=this.addChild("closeButton",{controlText:"Close Modal Dialog"}),this.contentEl_=e,this.on(i,"close",this.close_)}// If this is being made uncloseable and has a close button, remove it.
!t&&i&&(this.off(i,"close",this.close_),this.removeChild(i),i.dispose())}return this.closeable_}/**
   * Fill the modal's content element with the modal's "content" option.
   * The content element will be emptied before this change takes place.
   */fill(){this.fillWith(this.content())}/**
   * Fill the modal's content element with arbitrary content.
   * The content element will be emptied before this change takes place.
   *
   * @fires ModalDialog#beforemodalfill
   * @fires ModalDialog#modalfill
   *
   * @param { import('./utils/dom').ContentDescriptor} [content]
   *        The same rules apply to this as apply to the `content` option.
   */fillWith(e){let t=this.contentEl(),i=t.parentNode,r=t.nextSibling;/**
      * Fired just before a `ModalDialog` is filled with content.
      *
      * @event ModalDialog#beforemodalfill
      * @type {Event}
      */this.trigger("beforemodalfill"),this.hasBeenFilled_=!0,// Detach the content element from the DOM before performing
// manipulation to avoid modifying the live DOM multiple times.
i.removeChild(t),this.empty(),rQ(t,e),/**
     * Fired just after a `ModalDialog` is filled with content.
     *
     * @event ModalDialog#modalfill
     * @type {Event}
     */this.trigger("modalfill"),r?i.insertBefore(t,r):i.appendChild(t);// make sure that the close button is last in the dialog DOM
let s=this.getChild("closeButton");s&&i.appendChild(s.el_)}/**
   * Empties the content element. This happens anytime the modal is filled.
   *
   * @fires ModalDialog#beforemodalempty
   * @fires ModalDialog#modalempty
   */empty(){/**
    * Fired just before a `ModalDialog` is emptied.
    *
    * @event ModalDialog#beforemodalempty
    * @type {Event}
    */this.trigger("beforemodalempty"),rX(this.contentEl()),/**
    * Fired just after a `ModalDialog` is emptied.
    *
    * @event ModalDialog#modalempty
    * @type {Event}
    */this.trigger("modalempty")}/**
   * Gets or sets the modal content, which gets normalized before being
   * rendered into the DOM.
   *
   * This does not update the DOM or fill the modal, but it is called during
   * that process.
   *
   * @param  { import('./utils/dom').ContentDescriptor} [value]
   *         If defined, sets the internal content value to be used on the
   *         next call(s) to `fill`. This value is normalized before being
   *         inserted. To "clear" the internal content value, pass `null`.
   *
   * @return { import('./utils/dom').ContentDescriptor}
   *         The current content of the modal dialog
   */content(e){return void 0!==e&&(this.content_=e),this.content_}/**
   * conditionally focus the modal dialog if focus was previously on the player.
   *
   * @private
   */conditionalFocus_(){let e=/*@__PURE__*/w(A).activeElement,t=this.player_.el_;this.previouslyActiveEl_=null,(t.contains(e)||t===e)&&(this.previouslyActiveEl_=e,this.focus())}/**
   * conditionally blur the element and refocus the last focused element
   *
   * @private
   */conditionalBlur_(){this.previouslyActiveEl_&&(this.previouslyActiveEl_.focus(),this.previouslyActiveEl_=null)}/**
   * Keydown handler. Attached when modal is focused.
   *
   * @listens keydown
   */handleKeyDown(e){let t;if(// Do not allow keydowns to reach out of the modal dialog.
e.stopPropagation(),/*@__PURE__*/w(L).isEventKey(e,"Escape")&&this.closeable()){e.preventDefault(),this.close();return}// exit early if it isn't a tab key
if(!/*@__PURE__*/w(L).isEventKey(e,"Tab"))return;let i=this.focusableEls_(),r=this.el_.querySelector(":focus");for(let e=0;e<i.length;e++)if(r===i[e]){t=e;break}/*@__PURE__*/w(A).activeElement===this.el_&&(t=0),e.shiftKey&&0===t?(i[i.length-1].focus(),e.preventDefault()):e.shiftKey||t!==i.length-1||(i[0].focus(),e.preventDefault())}/**
   * get all focusable elements
   *
   * @private
   */focusableEls_(){let e=this.el_.querySelectorAll("*");return Array.prototype.filter.call(e,e=>(e instanceof /*@__PURE__*/w(I).HTMLAnchorElement||e instanceof /*@__PURE__*/w(I).HTMLAreaElement)&&e.hasAttribute("href")||(e instanceof /*@__PURE__*/w(I).HTMLInputElement||e instanceof /*@__PURE__*/w(I).HTMLSelectElement||e instanceof /*@__PURE__*/w(I).HTMLTextAreaElement||e instanceof /*@__PURE__*/w(I).HTMLButtonElement)&&!e.hasAttribute("disabled")||e instanceof /*@__PURE__*/w(I).HTMLIFrameElement||e instanceof /*@__PURE__*/w(I).HTMLObjectElement||e instanceof /*@__PURE__*/w(I).HTMLEmbedElement||e.hasAttribute("tabindex")&&-1!==e.getAttribute("tabindex")||e.hasAttribute("contenteditable"))}}/**
 * Default options for `ModalDialog` default options.
 *
 * @type {Object}
 * @private
 */sJ.prototype.options_={pauseOnOpen:!0,temporary:!0},sN.registerComponent("ModalDialog",sJ);/**
 * @file track-list.js
 *//**
 * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
 * {@link VideoTrackList}
 *
 * @extends EventTarget
 */class sZ extends sy{/**
   * Create an instance of this class
   *
   * @param { import('./track').default[] } tracks
   *        A list of tracks to initialize the list with.
   *
   * @abstract
   */constructor(e=[]){super(),this.tracks_=[],/**
     * @memberof TrackList
     * @member {number} length
     *         The current number of `Track`s in the this Trackist.
     * @instance
     */Object.defineProperty(this,"length",{get(){return this.tracks_.length}});for(let t=0;t<e.length;t++)this.addTrack(e[t])}/**
   * Add a {@link Track} to the `TrackList`
   *
   * @param { import('./track').default } track
   *        The audio, video, or text track to add to the list.
   *
   * @fires TrackList#addtrack
   */addTrack(e){let t=this.tracks_.length;""+t in this||Object.defineProperty(this,t,{get(){return this.tracks_[t]}}),-1===this.tracks_.indexOf(e)&&(this.tracks_.push(e),/**
       * Triggered when a track is added to a track list.
       *
       * @event TrackList#addtrack
       * @type {Event}
       * @property {Track} track
       *           A reference to track that was added.
       */this.trigger({track:e,type:"addtrack",target:this})),/**
     * Triggered when a track label is changed.
     *
     * @event TrackList#addtrack
     * @type {Event}
     * @property {Track} track
     *           A reference to track that was added.
     */e.labelchange_=()=>{this.trigger({track:e,type:"labelchange",target:this})},sb(e)&&e.addEventListener("labelchange",e.labelchange_)}/**
   * Remove a {@link Track} from the `TrackList`
   *
   * @param { import('./track').default } rtrack
   *        The audio, video, or text track to remove from the list.
   *
   * @fires TrackList#removetrack
   */removeTrack(e){let t;for(let i=0,r=this.length;i<r;i++)if(this[i]===e){(t=this[i]).off&&t.off(),this.tracks_.splice(i,1);break}t&&/**
     * Triggered when a track is removed from track list.
     *
     * @event TrackList#removetrack
     * @type {Event}
     * @property {Track} track
     *           A reference to track that was removed.
     */this.trigger({track:t,type:"removetrack",target:this})}/**
   * Get a Track from the TrackList by a tracks id
   *
   * @param {string} id - the id of the track to get
   * @method getTrackById
   * @return { import('./track').default }
   * @private
   */getTrackById(e){let t=null;for(let i=0,r=this.length;i<r;i++){let r=this[i];if(r.id===e){t=r;break}}return t}}// emulate attribute EventHandler support to allow for feature detection
for(const e in /**
 * Triggered when a different track is selected/enabled.
 *
 * @event TrackList#change
 * @type {Event}
 *//**
 * Events that can be called with on + eventName. See {@link EventHandler}.
 *
 * @property {Object} TrackList#allowedEvents_
 * @protected
 */sZ.prototype.allowedEvents_={change:"change",addtrack:"addtrack",removetrack:"removetrack",labelchange:"labelchange"},sZ.prototype.allowedEvents_)sZ.prototype["on"+e]=null;/**
 * @file audio-track-list.js
 *//**
 * Anywhere we call this function we diverge from the spec
 * as we only support one enabled audiotrack at a time
 *
 * @param {AudioTrackList} list
 *        list to work on
 *
 * @param { import('./audio-track').default } track
 *        The track to skip
 *
 * @private
 */const s0=function(e,t){for(let i=0;i<e.length;i++)Object.keys(e[i]).length&&t.id!==e[i].id&&// another audio track is enabled, disable it
(e[i].enabled=!1)},s1=function(e,t){for(let i=0;i<e.length;i++)Object.keys(e[i]).length&&t.id!==e[i].id&&// another video track is enabled, disable it
(e[i].selected=!1)};/**
 * @file text-track-list.js
 *//**
 * The current list of {@link TextTrack} for a media file.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}
 * @extends TrackList
 */class s2 extends sZ{/**
   * Add a {@link TextTrack} to the `TextTrackList`
   *
   * @param { import('./text-track').default } track
   *        The text track to add to the list.
   *
   * @fires TrackList#addtrack
   */addTrack(e){super.addTrack(e),this.queueChange_||(this.queueChange_=()=>this.queueTrigger("change")),this.triggerSelectedlanguagechange||(this.triggerSelectedlanguagechange_=()=>this.trigger("selectedlanguagechange")),/**
     * @listens TextTrack#modechange
     * @fires TrackList#change
     */e.addEventListener("modechange",this.queueChange_),-1===["metadata","chapters"].indexOf(e.kind)&&e.addEventListener("modechange",this.triggerSelectedlanguagechange_)}removeTrack(e){super.removeTrack(e),e.removeEventListener&&(this.queueChange_&&e.removeEventListener("modechange",this.queueChange_),this.selectedlanguagechange_&&e.removeEventListener("modechange",this.triggerSelectedlanguagechange_))}}/**
 * @file text-track-cue-list.js
 *//**
 * @typedef {Object} TextTrackCueList~TextTrackCue
 *
 * @property {string} id
 *           The unique id for this text track cue
 *
 * @property {number} startTime
 *           The start time for this text track cue
 *
 * @property {number} endTime
 *           The end time for this text track cue
 *
 * @property {boolean} pauseOnExit
 *           Pause when the end time is reached if true.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}
 *//**
 * A List of TextTrackCues.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}
 */class s4{/**
   * Create an instance of this class..
   *
   * @param {Array} cues
   *        A list of cues to be initialized with
   */constructor(e){s4.prototype.setCues_.call(this,e),/**
     * @memberof TextTrackCueList
     * @member {number} length
     *         The current number of `TextTrackCue`s in the TextTrackCueList.
     * @instance
     */Object.defineProperty(this,"length",{get(){return this.length_}})}/**
   * A setter for cues in this list. Creates getters
   * an an index for the cues.
   *
   * @param {Array} cues
   *        An array of cues to set
   *
   * @private
   */setCues_(e){let t=this.length||0,i=0,r=e.length;this.cues_=e,this.length_=e.length;let s=function(e){""+e in this||Object.defineProperty(this,""+e,{get(){return this.cues_[e]}})};if(t<r)for(i=t;i<r;i++)s.call(this,i)}/**
   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
   *
   * @param {string} id
   *        The id of the cue that should be searched for.
   *
   * @return {TextTrackCueList~TextTrackCue|null}
   *         A single cue or null if none was found.
   */getCueById(e){let t=null;for(let i=0,r=this.length;i<r;i++){let r=this[i];if(r.id===e){t=r;break}}return t}}/**
 * @file track-kinds.js
 *//**
 * All possible `VideoTrackKind`s
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
 * @typedef VideoTrack~Kind
 * @enum
 */const s8={alternative:"alternative",captions:"captions",main:"main",sign:"sign",subtitles:"subtitles",commentary:"commentary"},s5={alternative:"alternative",descriptions:"descriptions",main:"main","main-desc":"main-desc",translation:"translation",commentary:"commentary"},s3={subtitles:"subtitles",captions:"captions",descriptions:"descriptions",chapters:"chapters",metadata:"metadata"},s6={disabled:"disabled",hidden:"hidden",showing:"showing"};/**
 * @file track.js
 *//**
 * A Track class that contains all of the common functionality for {@link AudioTrack},
 * {@link VideoTrack}, and {@link TextTrack}.
 *
 * > Note: This class should not be used directly
 *
 * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}
 * @extends EventTarget
 * @abstract
 */class s7 extends sy{/**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid kind for the track type you are creating.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @abstract
   */constructor(e={}){super();let t={id:e.id||"vjs_track_"+st++,kind:e.kind||"",language:e.language||""},i=e.label||"";/**
     * @memberof Track
     * @member {string} id
     *         The id of this track. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     *//**
     * @memberof Track
     * @member {string} kind
     *         The kind of track that this is. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     *//**
     * @memberof Track
     * @member {string} language
     *         The two letter language code for this track. Cannot be changed after
     *         creation.
     * @instance
     *
     * @readonly
     */for(let e in t)Object.defineProperty(this,e,{get:()=>t[e],set(){}});/**
     * @memberof Track
     * @member {string} label
     *         The label of this track. Cannot be changed after creation.
     * @instance
     *
     * @fires Track#labelchange
     */Object.defineProperty(this,"label",{get:()=>i,set(e){e!==i&&(i=e,/**
           * An event that fires when label changes on this track.
           *
           * > Note: This is not part of the spec!
           *
           * @event Track#labelchange
           * @type {Event}
           */this.trigger("labelchange"))}})}}/**
 * @file url.js
 * @module url
 *//**
 * @typedef {Object} url:URLObject
 *
 * @property {string} protocol
 *           The protocol of the url that was parsed.
 *
 * @property {string} hostname
 *           The hostname of the url that was parsed.
 *
 * @property {string} port
 *           The port of the url that was parsed.
 *
 * @property {string} pathname
 *           The pathname of the url that was parsed.
 *
 * @property {string} search
 *           The search query of the url that was parsed.
 *
 * @property {string} hash
 *           The hash of the url that was parsed.
 *
 * @property {string} host
 *           The host of the url that was parsed.
 *//**
 * Resolve and parse the elements of a URL.
 *
 * @function
 * @param    {String} url
 *           The url to parse
 *
 * @return   {url:URLObject}
 *           An object of url details
 */const s9=function(e){// This entire method can be replace with URL once we are able to drop IE11
let t=["protocol","hostname","port","pathname","search","hash","host"],i=/*@__PURE__*/w(A).createElement("a");i.href=e;// Copy the specific URL properties to a new object
// This is also needed for IE because the anchor loses its
// properties when it's removed from the dom
let r={};for(let e=0;e<t.length;e++)r[t[e]]=i[t[e]];return"http:"===r.protocol&&(r.host=r.host.replace(/:80$/,"")),"https:"===r.protocol&&(r.host=r.host.replace(/:443$/,"")),r.protocol||(r.protocol=/*@__PURE__*/w(I).location.protocol),r.host||(r.host=/*@__PURE__*/w(I).location.host),r},ne=function(e){// Check if absolute URL
if(!e.match(/^https?:\/\//)){// Add the url to an anchor and let the browser parse it to convert to an absolute url
let t=/*@__PURE__*/w(A).createElement("a");t.href=e,e=t.href}return e},nt=function(e){if("string"==typeof e){let t=/^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/.exec(e);if(t)return t.pop().toLowerCase()}return""},ni=function(e,t=/*@__PURE__*/w(I).location){let i=s9(e),r=":"===i.protocol?t.protocol:i.protocol,s=r+i.host!==t.protocol+t.host;return s};var nr=/*#__PURE__*/Object.freeze({__proto__:null,parseUrl:s9,getAbsoluteURL:ne,getFileExtension:nt,isCrossOrigin:ni});/**
 * @file text-track.js
 *//**
 * Takes a webvtt file contents and parses it into cues
 *
 * @param {string} srcContent
 *        webVTT file contents
 *
 * @param {TextTrack} track
 *        TextTrack to add cues to. Cues come from the srcContent.
 *
 * @private
 */const ns=function(e,t){let i=new/*@__PURE__*/(w(I)).WebVTT.Parser(/*@__PURE__*/w(I),/*@__PURE__*/w(I).vttjs,/*@__PURE__*/w(I).WebVTT.StringDecoder()),r=[];i.oncue=function(e){t.addCue(e)},i.onparsingerror=function(e){r.push(e)},i.onflush=function(){t.trigger({type:"loadeddata",target:t})},i.parse(e),r.length>0&&(/*@__PURE__*/w(I).console&&/*@__PURE__*/w(I).console.groupCollapsed&&/*@__PURE__*/w(I).console.groupCollapsed(`Text Track parsing errors for ${t.src}`),r.forEach(e=>i8.error(e)),/*@__PURE__*/w(I).console&&/*@__PURE__*/w(I).console.groupEnd&&/*@__PURE__*/w(I).console.groupEnd()),i.flush()},nn=function(e,t){let i={uri:e},r=ni(e);r&&(i.cors=r);let s="use-credentials"===t.tech_.crossOrigin();s&&(i.withCredentials=s),/*@__PURE__*/w(O)(i,sp(this,function(e,i,r){if(e)return i8.error(e,i);t.loaded_=!0,"function"!=typeof /*@__PURE__*/w(I).WebVTT?t.tech_&&// as a let here
t.tech_.any(["vttjsloaded","vttjserror"],e=>{if("vttjserror"===e.type){i8.error(`vttjs failed to load, stopping trying to process ${t.src}`);return}return ns(r,t)}):ns(r,t)}))};/**
 * A representation of a single `TextTrack`.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}
 * @extends Track
 */class na extends s7{/**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param { import('../tech/tech').default } options.tech
   *        A reference to the tech that owns this TextTrack.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        version of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */constructor(e={}){if(!e.tech)throw Error("A tech was not provided.");let t=ri(e,{kind:s3[e.kind]||"subtitles",language:e.language||e.srclang||""}),i=s6[t.mode]||"disabled",r=t.default;("metadata"===t.kind||"chapters"===t.kind)&&(i="hidden"),super(t),this.tech_=t.tech,this.cues_=[],this.activeCues_=[],this.preload_=!1!==this.tech_.preloadTextTracks;let s=new s4(this.cues_),n=new s4(this.activeCues_),a=!1;this.timeupdateHandler=sp(this,function(e={}){if(!this.tech_.isDisposed()){if(!this.tech_.isReady_){"timeupdate"!==e.type&&(this.rvf_=this.tech_.requestVideoFrameCallback(this.timeupdateHandler));return}// Accessing this.activeCues for the side-effects of updating itself
// due to its nature as a getter function. Do not remove or cues will
// stop updating!
// Use the setter to prevent deletion from uglify (pure_getters rule)
this.activeCues=this.activeCues,a&&(this.trigger("cuechange"),a=!1),"timeupdate"!==e.type&&(this.rvf_=this.tech_.requestVideoFrameCallback(this.timeupdateHandler))}}),this.tech_.one("dispose",()=>{this.stopTracking()}),"disabled"!==i&&this.startTracking(),Object.defineProperties(this,{/**
       * @memberof TextTrack
       * @member {boolean} default
       *         If this track was set to be on or off by default. Cannot be changed after
       *         creation.
       * @instance
       *
       * @readonly
       */default:{get:()=>r,set(){}},/**
       * @memberof TextTrack
       * @member {string} mode
       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
       *         not be set if setting to an invalid mode.
       * @instance
       *
       * @fires TextTrack#modechange
       */mode:{get:()=>i,set(e){s6[e]&&i!==e&&(i=e,this.preload_||"disabled"===i||0!==this.cues.length||nn(this.src,this),this.stopTracking(),"disabled"!==i&&this.startTracking(),/**
           * An event that fires when mode changes on this track. This allows
           * the TextTrackList that holds this track to act accordingly.
           *
           * > Note: This is not part of the spec!
           *
           * @event TextTrack#modechange
           * @type {Event}
           */this.trigger("modechange"))}},/**
       * @memberof TextTrack
       * @member {TextTrackCueList} cues
       *         The text track cue list for this TextTrack.
       * @instance
       */cues:{get(){return this.loaded_?s:null},set(){}},/**
       * @memberof TextTrack
       * @member {TextTrackCueList} activeCues
       *         The list text track cues that are currently active for this TextTrack.
       * @instance
       */activeCues:{get(){if(!this.loaded_)return null;// nothing to do
if(0===this.cues.length)return n;let e=this.tech_.currentTime(),t=[];for(let i=0,r=this.cues.length;i<r;i++){let r=this.cues[i];r.startTime<=e&&r.endTime>=e&&t.push(r)}if(a=!1,t.length!==this.activeCues_.length)a=!0;else for(let e=0;e<t.length;e++)-1===this.activeCues_.indexOf(t[e])&&(a=!0);return this.activeCues_=t,n.setCues_(this.activeCues_),n},// /!\ Keep this setter empty (see the timeupdate handler above)
set(){}}}),t.src?(this.src=t.src,this.preload_||// Act like we're loaded for other purposes.
(this.loaded_=!0),(this.preload_||"subtitles"!==t.kind&&"captions"!==t.kind)&&nn(this.src,this)):this.loaded_=!0}startTracking(){// More precise cues based on requestVideoFrameCallback with a requestAnimationFram fallback
this.rvf_=this.tech_.requestVideoFrameCallback(this.timeupdateHandler),// Also listen to timeupdate in case rVFC/rAF stops (window in background, audio in video el)
this.tech_.on("timeupdate",this.timeupdateHandler)}stopTracking(){this.rvf_&&(this.tech_.cancelVideoFrameCallback(this.rvf_),this.rvf_=void 0),this.tech_.off("timeupdate",this.timeupdateHandler)}/**
   * Add a cue to the internal list of cues.
   *
   * @param {TextTrack~Cue} cue
   *        The cue to add to our internal list
   */addCue(e){let t=e;// Testing if the cue is a VTTCue in a way that survives minification
if(!("getCueAsHTML"in t)){for(let i in t=new/*@__PURE__*/(w(I)).vttjs.VTTCue(e.startTime,e.endTime,e.text),e)i in t||(t[i]=e[i]);// make sure that `id` is copied over
t.id=e.id,t.originalCue_=e}let i=this.tech_.textTracks();for(let e=0;e<i.length;e++)i[e]!==this&&i[e].removeCue(t);this.cues_.push(t),this.cues.setCues_(this.cues_)}/**
   * Remove a cue from our internal list
   *
   * @param {TextTrack~Cue} removeCue
   *        The cue to remove from our internal list
   */removeCue(e){let t=this.cues_.length;for(;t--;){let i=this.cues_[t];if(i===e||i.originalCue_&&i.originalCue_===e){this.cues_.splice(t,1),this.cues.setCues_(this.cues_);break}}}}/**
 * cuechange - One or more cues in the track have become active or stopped being active.
 * @protected
 */na.prototype.allowedEvents_={cuechange:"cuechange"};/**
 * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
 * only one `AudioTrack` in the list will be enabled at a time.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
 * @extends Track
 */class no extends s7{/**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {AudioTrack~Kind} [options.kind='']
   *        A valid audio track kind
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.enabled]
   *        If this track is the one that is currently playing. If this track is part of
   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
   */constructor(e={}){let t=ri(e,{kind:s5[e.kind]||""});super(t);let i=!1;/**
     * @memberof AudioTrack
     * @member {boolean} enabled
     *         If this `AudioTrack` is enabled or not. When setting this will
     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
     * @instance
     *
     * @fires VideoTrack#selectedchange
     */Object.defineProperty(this,"enabled",{get:()=>i,set(e){// an invalid or unchanged value
"boolean"==typeof e&&e!==i&&(i=e,/**
         * An event that fires when enabled changes on this track. This allows
         * the AudioTrackList that holds this track to act accordingly.
         *
         * > Note: This is not part of the spec! Native tracks will do
         *         this internally without an event.
         *
         * @event AudioTrack#enabledchange
         * @type {Event}
         */this.trigger("enabledchange"))}}),t.enabled&&(this.enabled=t.enabled),this.loaded_=!0}}/**
 * A representation of a single `VideoTrack`.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}
 * @extends Track
 */class nl extends s7{/**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid {@link VideoTrack~Kind}
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.selected]
   *        If this track is the one that is currently playing.
   */constructor(e={}){let t=ri(e,{kind:s8[e.kind]||""});super(t);let i=!1;/**
     * @memberof VideoTrack
     * @member {boolean} selected
     *         If this `VideoTrack` is selected or not. When setting this will
     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
     * @instance
     *
     * @fires VideoTrack#selectedchange
     */Object.defineProperty(this,"selected",{get:()=>i,set(e){// an invalid or unchanged value
"boolean"==typeof e&&e!==i&&(i=e,/**
         * An event that fires when selected changes on this track. This allows
         * the VideoTrackList that holds this track to act accordingly.
         *
         * > Note: This is not part of the spec! Native tracks will do
         *         this internally without an event.
         *
         * @event VideoTrack#selectedchange
         * @type {Event}
         */this.trigger("selectedchange"))}}),t.selected&&(this.selected=t.selected)}}/**
 * @file html-track-element.js
 *//**
 * A single track represented in the DOM.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}
 * @extends EventTarget
 */class nu extends sy{/**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param { import('../tech/tech').default } options.tech
   *        A reference to the tech that owns this HTMLTrackElement.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        version of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */constructor(e={}){let t;super();let i=new na(e);this.kind=i.kind,this.src=i.src,this.srclang=i.language,this.label=i.label,this.default=i.default,Object.defineProperties(this,{/**
       * @memberof HTMLTrackElement
       * @member {HTMLTrackElement~ReadyState} readyState
       *         The current ready state of the track element.
       * @instance
       */readyState:{get:()=>t},/**
       * @memberof HTMLTrackElement
       * @member {TextTrack} track
       *         The underlying TextTrack object.
       * @instance
       *
       */track:{get:()=>i}}),t=nu.NONE,/**
     * @listens TextTrack#loadeddata
     * @fires HTMLTrackElement#load
     */i.addEventListener("loadeddata",()=>{t=nu.LOADED,this.trigger({type:"load",target:this})})}}/**
 * @protected
 */nu.prototype.allowedEvents_={load:"load"},/**
 * The text track not loaded state.
 *
 * @type {number}
 * @static
 */nu.NONE=0,/**
 * The text track loading state.
 *
 * @type {number}
 * @static
 */nu.LOADING=1,/**
 * The text track loaded state.
 *
 * @type {number}
 * @static
 */nu.LOADED=2,/**
 * The text track failed to load state.
 *
 * @type {number}
 * @static
 */nu.ERROR=3;/*
 * This file contains all track properties that are used in
 * player.js, tech.js, html5.js and possibly other techs in the future.
 */const nh={audio:{ListClass:/**
 * The current list of {@link AudioTrack} for a media file.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}
 * @extends TrackList
 */class extends sZ{/**
   * Create an instance of this class.
   *
   * @param { import('./audio-track').default[] } [tracks=[]]
   *        A list of `AudioTrack` to instantiate the list with.
   */constructor(e=[]){// make sure only 1 track is enabled
// sorted from last index to first index
for(let t=e.length-1;t>=0;t--)if(e[t].enabled){s0(e,e[t]);break}super(e),this.changing_=!1}/**
   * Add an {@link AudioTrack} to the `AudioTrackList`.
   *
   * @param { import('./audio-track').default } track
   *        The AudioTrack to add to the list
   *
   * @fires TrackList#addtrack
   */addTrack(e){e.enabled&&s0(this,e),super.addTrack(e),e.addEventListener&&(e.enabledChange_=()=>{// when we are disabling other tracks (since we don't support
// more than one track at a time) we will set changing_
// to true so that we don't trigger additional change events
this.changing_||(this.changing_=!0,s0(this,e),this.changing_=!1,this.trigger("change"))},/**
     * @listens AudioTrack#enabledchange
     * @fires TrackList#change
     */e.addEventListener("enabledchange",e.enabledChange_))}removeTrack(e){super.removeTrack(e),e.removeEventListener&&e.enabledChange_&&(e.removeEventListener("enabledchange",e.enabledChange_),e.enabledChange_=null)}},TrackClass:no,capitalName:"Audio"},video:{ListClass:/**
 * The current list of {@link VideoTrack} for a video.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}
 * @extends TrackList
 */class extends sZ{/**
   * Create an instance of this class.
   *
   * @param {VideoTrack[]} [tracks=[]]
   *        A list of `VideoTrack` to instantiate the list with.
   */constructor(e=[]){// make sure only 1 track is enabled
// sorted from last index to first index
for(let t=e.length-1;t>=0;t--)if(e[t].selected){s1(e,e[t]);break}super(e),this.changing_=!1,/**
     * @member {number} VideoTrackList#selectedIndex
     *         The current index of the selected {@link VideoTrack`}.
     */Object.defineProperty(this,"selectedIndex",{get(){for(let e=0;e<this.length;e++)if(this[e].selected)return e;return -1},set(){}})}/**
   * Add a {@link VideoTrack} to the `VideoTrackList`.
   *
   * @param { import('./video-track').default } track
   *        The VideoTrack to add to the list
   *
   * @fires TrackList#addtrack
   */addTrack(e){e.selected&&s1(this,e),super.addTrack(e),e.addEventListener&&(e.selectedChange_=()=>{this.changing_||(this.changing_=!0,s1(this,e),this.changing_=!1,this.trigger("change"))},/**
     * @listens VideoTrack#selectedchange
     * @fires TrackList#change
     */e.addEventListener("selectedchange",e.selectedChange_))}removeTrack(e){super.removeTrack(e),e.removeEventListener&&e.selectedChange_&&(e.removeEventListener("selectedchange",e.selectedChange_),e.selectedChange_=null)}},TrackClass:nl,capitalName:"Video"},text:{ListClass:s2,TrackClass:na,capitalName:"Text"}};Object.keys(nh).forEach(function(e){nh[e].getterName=`${e}Tracks`,nh[e].privateName=`${e}Tracks_`});const nd={remoteText:{ListClass:s2,TrackClass:na,capitalName:"RemoteText",getterName:"remoteTextTracks",privateName:"remoteTextTracks_"},remoteTextEl:{ListClass:/**
 * @file html-track-element-list.js
 *//**
 * The current list of {@link HtmlTrackElement}s.
 */class{/**
   * Create an instance of this class.
   *
   * @param {HtmlTrackElement[]} [tracks=[]]
   *        A list of `HtmlTrackElement` to instantiate the list with.
   */constructor(e=[]){this.trackElements_=[],/**
     * @memberof HtmlTrackElementList
     * @member {number} length
     *         The current number of `Track`s in the this Trackist.
     * @instance
     */Object.defineProperty(this,"length",{get(){return this.trackElements_.length}});for(let t=0,i=e.length;t<i;t++)this.addTrackElement_(e[t])}/**
   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to add to the list.
   *
   * @private
   */addTrackElement_(e){let t=this.trackElements_.length;""+t in this||Object.defineProperty(this,t,{get(){return this.trackElements_[t]}}),-1===this.trackElements_.indexOf(e)&&this.trackElements_.push(e)}/**
   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
   * {@link TextTrack}.
   *
   * @param {TextTrack} track
   *        The track associated with a track element.
   *
   * @return {HtmlTrackElement|undefined}
   *         The track element that was found or undefined.
   *
   * @private
   */getTrackElementByTrack_(e){let t;for(let i=0,r=this.trackElements_.length;i<r;i++)if(e===this.trackElements_[i].track){t=this.trackElements_[i];break}return t}/**
   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to remove from the list.
   *
   * @private
   */removeTrackElement_(e){for(let t=0,i=this.trackElements_.length;t<i;t++)if(e===this.trackElements_[t]){this.trackElements_[t].track&&"function"==typeof this.trackElements_[t].track.off&&this.trackElements_[t].track.off(),"function"==typeof this.trackElements_[t].off&&this.trackElements_[t].off(),this.trackElements_.splice(t,1);break}}},TrackClass:nu,capitalName:"RemoteTextTrackEls",getterName:"remoteTextTrackEls",privateName:"remoteTextTrackEls_"}},nc=Object.assign({},nh,nd);nd.names=Object.keys(nd),nh.names=Object.keys(nh),nc.names=[].concat(nd.names).concat(nh.names);/**
 * This is the base class for media playback technology controllers, such as
 * {@link HTML5}
 *
 * @extends Component
 */class np extends sN{/**
  * Create an instance of this Tech.
  *
  * @param {Object} [options]
  *        The key/value store of player options.
  *
  * @param {Function} [ready]
  *        Callback function to call when the `HTML5` Tech is ready.
  */constructor(e={},t=function(){}){// we don't want the tech to report user activity automatically.
// This is done manually in addControlsListeners
e.reportTouchActivity=!1,super(null,e,t),this.onDurationChange_=e=>this.onDurationChange(e),this.trackProgress_=e=>this.trackProgress(e),this.trackCurrentTime_=e=>this.trackCurrentTime(e),this.stopTrackingCurrentTime_=e=>this.stopTrackingCurrentTime(e),this.disposeSourceHandler_=e=>this.disposeSourceHandler(e),this.queuedHanders_=new Set,// keep track of whether the current source has played at all to
// implement a very limited played()
this.hasStarted_=!1,this.on("playing",function(){this.hasStarted_=!0}),this.on("loadstart",function(){this.hasStarted_=!1}),nc.names.forEach(t=>{let i=nc[t];e&&e[i.getterName]&&(this[i.privateName]=e[i.getterName])}),this.featuresProgressEvents||this.manualProgressOn(),this.featuresTimeupdateEvents||this.manualTimeUpdatesOn(),["Text","Audio","Video"].forEach(t=>{!1===e[`native${t}Tracks`]&&(this[`featuresNative${t}Tracks`]=!1)}),!1===e.nativeCaptions||!1===e.nativeTextTracks?this.featuresNativeTextTracks=!1:(!0===e.nativeCaptions||!0===e.nativeTextTracks)&&(this.featuresNativeTextTracks=!0),this.featuresNativeTextTracks||this.emulateTextTracks(),this.preloadTextTracks=!1!==e.preloadTextTracks,this.autoRemoteTextTracks_=new nc.text.ListClass,this.initTrackListeners(),e.nativeControlsForTouch||this.emitTapEvents(),this.constructor&&(this.name_=this.constructor.name||"Unknown Tech")}/**
   * A special function to trigger source set in a way that will allow player
   * to re-trigger if the player or tech are not ready yet.
   *
   * @fires Tech#sourceset
   * @param {string} src The source string at the time of the source changing.
   */triggerSourceset(e){this.isReady_||// 1ms after ready so that player can watch for it.
this.one("ready",()=>this.setTimeout(()=>this.triggerSourceset(e),1)),/**
     * Fired when the source is set on the tech causing the media element
     * to reload.
     *
     * @see {@link Player#event:sourceset}
     * @event Tech#sourceset
     * @type {Event}
     */this.trigger({src:e,type:"sourceset"})}/* Fallbacks for unsupported event types
  ================================================================================ *//**
   * Polyfill the `progress` event for browsers that don't support it natively.
   *
   * @see {@link Tech#trackProgress}
   */manualProgressOn(){this.on("durationchange",this.onDurationChange_),this.manualProgress=!0,// Trigger progress watching when a source begins loading
this.one("ready",this.trackProgress_)}/**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   */manualProgressOff(){this.manualProgress=!1,this.stopTrackingProgress(),this.off("durationchange",this.onDurationChange_)}/**
   * This is used to trigger a `progress` event when the buffered percent changes. It
   * sets an interval function that will be called every 500 milliseconds to check if the
   * buffer end percent has changed.
   *
   * > This function is called by {@link Tech#manualProgressOn}
   *
   * @param {Event} event
   *        The `ready` event that caused this to run.
   *
   * @listens Tech#ready
   * @fires Tech#progress
   */trackProgress(e){this.stopTrackingProgress(),this.progressInterval=this.setInterval(sp(this,function(){// Don't trigger unless buffered amount is greater than last time
let e=this.bufferedPercent();this.bufferedPercent_!==e&&/**
         * See {@link Player#progress}
         *
         * @event Tech#progress
         * @type {Event}
         */this.trigger("progress"),this.bufferedPercent_=e,1===e&&this.stopTrackingProgress()}),500)}/**
   * Update our internal duration on a `durationchange` event by calling
   * {@link Tech#duration}.
   *
   * @param {Event} event
   *        The `durationchange` event that caused this to run.
   *
   * @listens Tech#durationchange
   */onDurationChange(e){this.duration_=this.duration()}/**
   * Get and create a `TimeRange` object for buffering.
   *
   * @return { import('../utils/time').TimeRange }
   *         The time range object that was created.
   */buffered(){return sB(0,0)}/**
   * Get the percentage of the current video that is currently buffered.
   *
   * @return {number}
   *         A number from 0 to 1 that represents the decimal percentage of the
   *         video that is buffered.
   *
   */bufferedPercent(){return sz(this.buffered(),this.duration_)}/**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   * Stop manually tracking progress events by clearing the interval that was set in
   * {@link Tech#trackProgress}.
   */stopTrackingProgress(){this.clearInterval(this.progressInterval)}/**
   * Polyfill the `timeupdate` event for browsers that don't support it.
   *
   * @see {@link Tech#trackCurrentTime}
   */manualTimeUpdatesOn(){this.manualTimeUpdates=!0,this.on("play",this.trackCurrentTime_),this.on("pause",this.stopTrackingCurrentTime_)}/**
   * Turn off the polyfill for `timeupdate` events that was created in
   * {@link Tech#manualTimeUpdatesOn}
   */manualTimeUpdatesOff(){this.manualTimeUpdates=!1,this.stopTrackingCurrentTime(),this.off("play",this.trackCurrentTime_),this.off("pause",this.stopTrackingCurrentTime_)}/**
   * Sets up an interval function to track current time and trigger `timeupdate` every
   * 250 milliseconds.
   *
   * @listens Tech#play
   * @triggers Tech#timeupdate
   */trackCurrentTime(){this.currentTimeInterval&&this.stopTrackingCurrentTime(),this.currentTimeInterval=this.setInterval(function(){/**
       * Triggered at an interval of 250ms to indicated that time is passing in the video.
       *
       * @event Tech#timeupdate
       * @type {Event}
       */this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0});// 42 = 24 fps // 250 is what Webkit uses // FF uses 15
},250)}/**
   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
   * `timeupdate` event is no longer triggered.
   *
   * @listens {Tech#pause}
   */stopTrackingCurrentTime(){this.clearInterval(this.currentTimeInterval),// #1002 - if the video ends right before the next timeupdate would happen,
// the progress bar won't make it all the way to the end
this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})}/**
   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
   *
   * @fires Component#dispose
   */dispose(){// clear out all tracks because we can't reuse them between techs
this.clearTracks(nh.names),this.manualProgress&&this.manualProgressOff(),this.manualTimeUpdates&&this.manualTimeUpdatesOff(),super.dispose()}/**
   * Clear out a single `TrackList` or an array of `TrackLists` given their names.
   *
   * > Note: Techs without source handlers should call this between sources for `video`
   *         & `audio` tracks. You don't want to use them between tracks!
   *
   * @param {string[]|string} types
   *        TrackList names to clear, valid names are `video`, `audio`, and
   *        `text`.
   */clearTracks(e){// clear out all tracks because we can't reuse them between techs
(e=[].concat(e)).forEach(e=>{let t=this[`${e}Tracks`]()||[],i=t.length;for(;i--;){let r=t[i];"text"===e&&this.removeRemoteTextTrack(r),t.removeTrack(r)}})}/**
   * Remove any TextTracks added via addRemoteTextTrack that are
   * flagged for automatic garbage collection
   */cleanupAutoTextTracks(){let e=this.autoRemoteTextTracks_||[],t=e.length;for(;t--;){let i=e[t];this.removeRemoteTextTrack(i)}}/**
   * Reset the tech, which will removes all sources and reset the internal readyState.
   *
   * @abstract
   */reset(){}/**
   * Get the value of `crossOrigin` from the tech.
   *
   * @abstract
   *
   * @see {Html5#crossOrigin}
   */crossOrigin(){}/**
   * Set the value of `crossOrigin` on the tech.
   *
   * @abstract
   *
   * @param {string} crossOrigin the crossOrigin value
   * @see {Html5#setCrossOrigin}
   */setCrossOrigin(){}/**
   * Get or set an error on the Tech.
   *
   * @param {MediaError} [err]
   *        Error to set on the Tech
   *
   * @return {MediaError|null}
   *         The current error object on the tech, or null if there isn't one.
   */error(e){return void 0!==e&&(this.error_=new sW(e),this.trigger("error")),this.error_}/**
   * Returns the `TimeRange`s that have been played through for the current source.
   *
   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
   *         It only checks whether the source has played at all or not.
   *
   * @return { import('../utils/time').TimeRange }
   *         - A single time range if this video has played
   *         - An empty set of ranges if not.
   */played(){return this.hasStarted_?sB(0,0):sB()}/**
   * Start playback
   *
   * @abstract
   *
   * @see {Html5#play}
   */play(){}/**
   * Set whether we are scrubbing or not
   *
   * @abstract
   * @param {boolean} _isScrubbing
   *                  - true for we are currently scrubbing
   *                  - false for we are no longer scrubbing
   *
   * @see {Html5#setScrubbing}
   */setScrubbing(e){}/**
   * Get whether we are scrubbing or not
   *
   * @abstract
   *
   * @see {Html5#scrubbing}
   */scrubbing(){}/**
   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
   * previously called.
   *
   * @param {number} _seconds
   *        Set the current time of the media to this.
   * @fires Tech#timeupdate
   */setCurrentTime(e){// improve the accuracy of manual timeupdates
this.manualTimeUpdates&&/**
       * A manual `timeupdate` event.
       *
       * @event Tech#timeupdate
       * @type {Event}
       */this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})}/**
   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and
   * {@link TextTrackList} events.
   *
   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
   *
   * @fires Tech#audiotrackchange
   * @fires Tech#videotrackchange
   * @fires Tech#texttrackchange
   */initTrackListeners(){/**
      * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
      *
      * @event Tech#audiotrackchange
      * @type {Event}
      *//**
      * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
      *
      * @event Tech#videotrackchange
      * @type {Event}
      *//**
      * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
      *
      * @event Tech#texttrackchange
      * @type {Event}
      */nh.names.forEach(e=>{let t=nh[e],i=()=>{this.trigger(`${e}trackchange`)},r=this[t.getterName]();r.addEventListener("removetrack",i),r.addEventListener("addtrack",i),this.on("dispose",()=>{r.removeEventListener("removetrack",i),r.removeEventListener("addtrack",i)})})}/**
   * Emulate TextTracks using vtt.js if necessary
   *
   * @fires Tech#vttjsloaded
   * @fires Tech#vttjserror
   */addWebVttScript_(){if(!/*@__PURE__*/w(I).WebVTT){// Initially, Tech.el_ is a child of a dummy-div wait until the Component system
// signals that the Tech is ready at which point Tech.el_ is part of the DOM
// before inserting the WebVTT script
if(/*@__PURE__*/w(A).body.contains(this.el())){// load via require if available and vtt.js script location was not passed in
// as an option. novtt builds will turn the above require call into an empty object
// which will cause this if check to always fail.
if(!this.options_["vtt.js"]&&rt(/*@__PURE__*/w($))&&Object.keys(/*@__PURE__*/w($)).length>0){this.trigger("vttjsloaded");return}// load vtt.js via the script location option or the cdn of no location was
// passed in
let e=/*@__PURE__*/w(A).createElement("script");e.src=this.options_["vtt.js"]||"https://vjs.zencdn.net/vttjs/0.14.1/vtt.min.js",e.onload=()=>{/**
         * Fired when vtt.js is loaded.
         *
         * @event Tech#vttjsloaded
         * @type {Event}
         */this.trigger("vttjsloaded")},e.onerror=()=>{/**
         * Fired when vtt.js was not loaded due to an error
         *
         * @event Tech#vttjsloaded
         * @type {Event}
         */this.trigger("vttjserror")},this.on("dispose",()=>{e.onload=null,e.onerror=null}),/*@__PURE__*/w(I).WebVTT=!0,this.el().parentNode.appendChild(e)}else this.ready(this.addWebVttScript_)}}/**
   * Emulate texttracks
   *
   */emulateTextTracks(){let e=this.textTracks(),t=this.remoteTextTracks(),i=t=>e.addTrack(t.track),r=t=>e.removeTrack(t.track);t.on("addtrack",i),t.on("removetrack",r),this.addWebVttScript_();let s=()=>this.trigger("texttrackchange"),n=()=>{s();for(let t=0;t<e.length;t++){let i=e[t];i.removeEventListener("cuechange",s),"showing"===i.mode&&i.addEventListener("cuechange",s)}};n(),e.addEventListener("change",n),e.addEventListener("addtrack",n),e.addEventListener("removetrack",n),this.on("dispose",function(){t.off("addtrack",i),t.off("removetrack",r),e.removeEventListener("change",n),e.removeEventListener("addtrack",n),e.removeEventListener("removetrack",n);for(let t=0;t<e.length;t++){let i=e[t];i.removeEventListener("cuechange",s)}})}/**
   * Create and returns a remote {@link TextTrack} object.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @return {TextTrack}
   *         The TextTrack that gets created.
   */addTextTrack(e,t,i){if(!e)throw Error("TextTrack kind is required but was not provided");return(/**
 * @file tech.js
 *//**
 * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string
 * that just contains the src url alone.
 * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`
   * `var SourceString = 'http://example.com/some-video.mp4';`
 *
 * @typedef {Object|string} SourceObject
 *
 * @property {string} src
 *           The url to the source
 *
 * @property {string} type
 *           The mime type of the source
 *//**
 * A function used by {@link Tech} to create a new {@link TextTrack}.
 *
 * @private
 *
 * @param {Tech} self
 *        An instance of the Tech class.
 *
 * @param {string} kind
 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
 *
 * @param {string} [label]
 *        Label to identify the text track
 *
 * @param {string} [language]
 *        Two letter language abbreviation
 *
 * @param {Object} [options={}]
 *        An object with additional text track options
 *
 * @return {TextTrack}
 *          The text track that was created.
 */function(e,t,i,r,s={}){let n=e.textTracks();s.kind=t,i&&(s.label=i),r&&(s.language=r),s.tech=e;let a=new nc.text.TrackClass(s);return n.addTrack(a),a}(this,e,t,i))}/**
   * Create an emulated TextTrack for use by addRemoteTextTrack
   *
   * This is intended to be overridden by classes that inherit from
   * Tech in order to create native or custom TextTracks.
   *
   * @param {Object} options
   *        The object should contain the options to initialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label].
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */createRemoteTextTrack(e){let t=ri(e,{tech:this});return new nd.remoteTextEl.TrackClass(t)}/**
   * Creates a remote text track object and returns an html track element.
   *
   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
   *
   * @param {Object} options
   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
   *
   * @param {boolean} [manualCleanup=false]
   *        - When false: the TextTrack will be automatically removed from the video
   *          element whenever the source changes
   *        - When True: The TextTrack will have to be cleaned up manually
   *
   * @return {HTMLTrackElement}
   *         An Html Track Element.
   *
   */addRemoteTextTrack(e={},t){let i=this.createRemoteTextTrack(e);return"boolean"!=typeof t&&(t=!1),// store HTMLTrackElement and TextTrack to remote list
this.remoteTextTrackEls().addTrackElement_(i),this.remoteTextTracks().addTrack(i.track),!1===t&&this.ready(()=>this.autoRemoteTextTracks_.addTrack(i.track)),i}/**
   * Remove a remote text track from the remote `TextTrackList`.
   *
   * @param {TextTrack} track
   *        `TextTrack` to remove from the `TextTrackList`
   */removeRemoteTextTrack(e){let t=this.remoteTextTrackEls().getTrackElementByTrack_(e);// remove HTMLTrackElement and TextTrack from remote list
this.remoteTextTrackEls().removeTrackElement_(t),this.remoteTextTracks().removeTrack(e),this.autoRemoteTextTracks_.removeTrack(e)}/**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   *
   * @abstract
   */getVideoPlaybackQuality(){return{}}/**
   * Attempt to create a floating video window always on top of other windows
   * so that users may continue consuming media while they interact with other
   * content sites, or applications on their device.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @return {Promise|undefined}
   *         A promise with a Picture-in-Picture window if the browser supports
   *         Promises (or one was passed in as an option). It returns undefined
   *         otherwise.
   *
   * @abstract
   */requestPictureInPicture(){return Promise.reject()}/**
   * A method to check for the value of the 'disablePictureInPicture' <video> property.
   * Defaults to true, as it should be considered disabled if the tech does not support pip
   *
   * @abstract
   */disablePictureInPicture(){return!0}/**
   * A method to set or unset the 'disablePictureInPicture' <video> property.
   *
   * @abstract
   */setDisablePictureInPicture(){}/**
   * A fallback implementation of requestVideoFrameCallback using requestAnimationFrame
   *
   * @param {function} cb
   * @return {number} request id
   */requestVideoFrameCallback(e){let t=st++;return!this.isReady_||this.paused()?(this.queuedHanders_.add(t),this.one("playing",()=>{this.queuedHanders_.has(t)&&(this.queuedHanders_.delete(t),e())})):this.requestNamedAnimationFrame(t,e),t}/**
   * A fallback implementation of cancelVideoFrameCallback
   *
   * @param {number} id id of callback to be cancelled
   */cancelVideoFrameCallback(e){this.queuedHanders_.has(e)?this.queuedHanders_.delete(e):this.cancelNamedAnimationFrame(e)}/**
   * A method to set a poster from a `Tech`.
   *
   * @abstract
   */setPoster(){}/**
   * A method to check for the presence of the 'playsinline' <video> attribute.
   *
   * @abstract
   */playsinline(){}/**
   * A method to set or unset the 'playsinline' <video> attribute.
   *
   * @abstract
   */setPlaysinline(){}/**
   * Attempt to force override of native audio tracks.
   *
   * @param {boolean} override - If set to true native audio will be overridden,
   * otherwise native audio will potentially be used.
   *
   * @abstract
   */overrideNativeAudioTracks(e){}/**
   * Attempt to force override of native video tracks.
   *
   * @param {boolean} override - If set to true native video will be overridden,
   * otherwise native video will potentially be used.
   *
   * @abstract
   */overrideNativeVideoTracks(e){}/**
   * Check if the tech can support the given mime-type.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param  {string} _type
   *         The mimetype to check for support
   *
   * @return {string}
   *         'probably', 'maybe', or empty string
   *
   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
   *
   * @abstract
   */canPlayType(e){return""}/**
   * Check if the type is supported by this tech.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param {string} _type
   *        The media type to check
   * @return {string} Returns the native video element's response
   */static canPlayType(e){return""}/**
   * Check if the tech can support the given source
   *
   * @param {Object} srcObj
   *        The source object
   * @param {Object} options
   *        The options passed to the tech
   * @return {string} 'probably', 'maybe', or '' (empty string)
   */static canPlaySource(e,t){return np.canPlayType(e.type)}/*
   * Return whether the argument is a Tech or not.
   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
   *
   * @param {Object} component
   *        The item to check
   *
   * @return {boolean}
   *         Whether it is a tech or not
   *         - True if it is a tech
   *         - False if it is not
   */static isTech(e){return e.prototype instanceof np||e instanceof np||e===np}/**
   * Registers a `Tech` into a shared list for videojs.
   *
   * @param {string} name
   *        Name of the `Tech` to register.
   *
   * @param {Object} tech
   *        The `Tech` class to register.
   */static registerTech(e,t){if(np.techs_||(np.techs_={}),!np.isTech(t))throw Error(`Tech ${e} must be a Tech`);if(!np.canPlayType)throw Error("Techs must have a static canPlayType method on them");if(!np.canPlaySource)throw Error("Techs must have a static canPlaySource method on them");return e=sP(e),np.techs_[e]=t,np.techs_[sL(e)]=t,"Tech"!==e&&np.defaultTechOrder_.push(e),t}/**
   * Get a `Tech` from the shared list by name.
   *
   * @param {string} name
   *        `camelCase` or `TitleCase` name of the Tech to get
   *
   * @return {Tech|undefined}
   *         The `Tech` or undefined if there was no tech with the name requested.
   */static getTech(e){if(e){if(np.techs_&&np.techs_[e])return np.techs_[e];if(e=sP(e),/*@__PURE__*/w(I)&&/*@__PURE__*/w(I).videojs&&/*@__PURE__*/w(I).videojs[e])return i8.warn(`The ${e} tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)`),/*@__PURE__*/w(I).videojs[e]}}}/**
 * Get the {@link VideoTrackList}
 *
 * @returns {VideoTrackList}
 * @method Tech.prototype.videoTracks
 *//**
 * Get the {@link AudioTrackList}
 *
 * @returns {AudioTrackList}
 * @method Tech.prototype.audioTracks
 *//**
 * Get the {@link TextTrackList}
 *
 * @returns {TextTrackList}
 * @method Tech.prototype.textTracks
 *//**
 * Get the remote element {@link TextTrackList}
 *
 * @returns {TextTrackList}
 * @method Tech.prototype.remoteTextTracks
 *//**
 * Get the remote element {@link HtmlTrackElementList}
 *
 * @returns {HtmlTrackElementList}
 * @method Tech.prototype.remoteTextTrackEls
 */nc.names.forEach(function(e){let t=nc[e];np.prototype[t.getterName]=function(){return this[t.privateName]=this[t.privateName]||new t.ListClass,this[t.privateName]}}),/**
 * List of associated text tracks
 *
 * @type {TextTrackList}
 * @private
 * @property Tech#textTracks_
 *//**
 * List of associated audio tracks.
 *
 * @type {AudioTrackList}
 * @private
 * @property Tech#audioTracks_
 *//**
 * List of associated video tracks.
 *
 * @type {VideoTrackList}
 * @private
 * @property Tech#videoTracks_
 *//**
 * Boolean indicating whether the `Tech` supports volume control.
 *
 * @type {boolean}
 * @default
 */np.prototype.featuresVolumeControl=!0,/**
 * Boolean indicating whether the `Tech` supports muting volume.
 *
 * @type {boolean}
 * @default
 */np.prototype.featuresMuteControl=!0,/**
 * Boolean indicating whether the `Tech` supports fullscreen resize control.
 * Resizing plugins using request fullscreen reloads the plugin
 *
 * @type {boolean}
 * @default
 */np.prototype.featuresFullscreenResize=!1,/**
 * Boolean indicating whether the `Tech` supports changing the speed at which the video
 * plays. Examples:
 *   - Set player to play 2x (twice) as fast
 *   - Set player to play 0.5x (half) as fast
 *
 * @type {boolean}
 * @default
 */np.prototype.featuresPlaybackRate=!1,/**
 * Boolean indicating whether the `Tech` supports the `progress` event.
 * This will be used to determine if {@link Tech#manualProgressOn} should be called.
 *
 * @type {boolean}
 * @default
 */np.prototype.featuresProgressEvents=!1,/**
 * Boolean indicating whether the `Tech` supports the `sourceset` event.
 *
 * A tech should set this to `true` and then use {@link Tech#triggerSourceset}
 * to trigger a {@link Tech#event:sourceset} at the earliest time after getting
 * a new source.
 *
 * @type {boolean}
 * @default
 */np.prototype.featuresSourceset=!1,/**
 * Boolean indicating whether the `Tech` supports the `timeupdate` event.
 * This will be used to determine if {@link Tech#manualTimeUpdates} should be called.
 *
 * @type {boolean}
 * @default
 */np.prototype.featuresTimeupdateEvents=!1,/**
 * Boolean indicating whether the `Tech` supports the native `TextTrack`s.
 * This will help us integrate with native `TextTrack`s if the browser supports them.
 *
 * @type {boolean}
 * @default
 */np.prototype.featuresNativeTextTracks=!1,/**
 * Boolean indicating whether the `Tech` supports `requestVideoFrameCallback`.
 *
 * @type {boolean}
 * @default
 */np.prototype.featuresVideoFrameCallback=!1,/**
 * A functional mixin for techs that want to use the Source Handler pattern.
 * Source handlers are scripts for handling specific formats.
 * The source handler pattern is used for adaptive formats (HLS, DASH) that
 * manually load video data and feed it into a Source Buffer (Media Source Extensions)
 * Example: `Tech.withSourceHandlers.call(MyTech);`
 *
 * @param {Tech} _Tech
 *        The tech to add source handler functions to.
 *
 * @mixes Tech~SourceHandlerAdditions
 */np.withSourceHandlers=function(e){/**
   * Register a source handler
   *
   * @param {Function} handler
   *        The source handler class
   *
   * @param {number} [index]
   *        Register it at the following index
   */e.registerSourceHandler=function(t,i){let r=e.sourceHandlers;r||(r=e.sourceHandlers=[]),void 0===i&&(i=r.length),r.splice(i,0,t)},/**
   * Check if the tech can support the given type. Also checks the
   * Techs sourceHandlers.
   *
   * @param {string} type
   *         The mimetype to check.
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */e.canPlayType=function(t){let i;let r=e.sourceHandlers||[];for(let e=0;e<r.length;e++)if(i=r[e].canPlayType(t))return i;return""},/**
   * Returns the first source handler that supports the source.
   *
   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
   *
   * @param {SourceObject} source
   *        The source object
   *
   * @param {Object} options
   *        The options passed to the tech
   *
   * @return {SourceHandler|null}
   *          The first source handler that supports the source or null if
   *          no SourceHandler supports the source
   */e.selectSourceHandler=function(t,i){let r=e.sourceHandlers||[];for(let e=0;e<r.length;e++)if(r[e].canHandleSource(t,i))return r[e];return null},/**
   * Check if the tech can support the given source.
   *
   * @param {SourceObject} srcObj
   *        The source object
   *
   * @param {Object} options
   *        The options passed to the tech
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */e.canPlaySource=function(t,i){let r=e.selectSourceHandler(t,i);return r?r.canHandleSource(t,i):""},/**
   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
   * function if it exists, with a fallback to the Techs seekable function.
   *
   * @method _Tech.seekable
   *//**
   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
   * function if it exists, otherwise it will fallback to the techs duration function.
   *
   * @method _Tech.duration
   */["seekable","seeking","duration"].forEach(function(e){let t=this[e];"function"==typeof t&&(this[e]=function(){return this.sourceHandler_&&this.sourceHandler_[e]?this.sourceHandler_[e].apply(this.sourceHandler_,arguments):t.apply(this,arguments)})},e.prototype),/**
   * Create a function for setting the source using a source object
   * and source handlers.
   * Should never be called unless a source handler was found.
   *
   * @param {SourceObject} source
   *        A source object with src and type keys
   */e.prototype.setSource=function(t){let i=e.selectSourceHandler(t,this.options_);i||(e.nativeSourceHandler?i=e.nativeSourceHandler:i8.error("No source handler found for the current source.")),// Dispose any existing source handler
this.disposeSourceHandler(),this.off("dispose",this.disposeSourceHandler_),i!==e.nativeSourceHandler&&(this.currentSource_=t),this.sourceHandler_=i.handleSource(t,this,this.options_),this.one("dispose",this.disposeSourceHandler_)},/**
   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
   *
   * @listens Tech#dispose
   */e.prototype.disposeSourceHandler=function(){this.currentSource_&&(this.clearTracks(["audio","video"]),this.currentSource_=null),// always clean up auto-text tracks
this.cleanupAutoTextTracks(),this.sourceHandler_&&(this.sourceHandler_.dispose&&this.sourceHandler_.dispose(),this.sourceHandler_=null)}},// The base Tech class needs to be registered as a Component. It is the only
// Tech that can be registered as a Component.
sN.registerComponent("Tech",np),np.registerTech("Tech",np),/**
 * A list of techs that should be added to techOrder on Players
 *
 * @private
 */np.defaultTechOrder_=[];/**
 * @file middleware.js
 * @module middleware
 */const nm={},nf={},ng={};/**
 * Takes the argument given to the player and calls the `call` version of the
 * method on each middleware from left to right.
 *
 * Then, call the passed in method on the tech and return the result unchanged
 * back to the player, through middleware, this time from right to left.
 *
 * @param  {Object[]} middleware
 *         An array of middleware instances.
 *
 * @param  { import('../tech/tech').default } tech
 *         The current tech.
 *
 * @param  {string} method
 *         A method name.
 *
 * @param  {*} arg
 *         The value to set on the tech.
 *
 * @return {*}
 *         The return value of the `method` of the `tech`, regardless of the
 *         return values of middlewares.
 */function ny(e,t,i,r=null){let s="call"+sP(i),n=e.reduce(nT(s),r),a=n===ng,o=a?null:t[i](n);return function(e,t,i,r){for(let s=e.length-1;s>=0;s--){let n=e[s];n[t]&&n[t](r,i)}}(e,i,o,a),o}/**
 * Enumeration of allowed getters where the keys are method names.
 *
 * @type {Object}
 */const n_={buffered:1,currentTime:1,duration:1,muted:1,played:1,paused:1,seekable:1,volume:1,ended:1},nb={setCurrentTime:1,setMuted:1,setVolume:1},nv={play:1,pause:1};function nT(e){return(t,i)=>// if the previous middleware terminated, pass along the termination
    t===ng?ng:i[e]?i[e](t):t}/**
 * Mimetypes
 *
 * @see https://www.iana.org/assignments/media-types/media-types.xhtml
 * @typedef Mimetypes~Kind
 * @enum
 */const nS={opus:"video/ogg",ogv:"video/ogg",mp4:"video/mp4",mov:"video/mp4",m4v:"video/mp4",mkv:"video/x-matroska",m4a:"audio/mp4",mp3:"audio/mpeg",aac:"audio/aac",caf:"audio/x-caf",flac:"audio/flac",oga:"audio/ogg",wav:"audio/wav",m3u8:"application/x-mpegURL",mpd:"application/dash+xml",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif",png:"image/png",svg:"image/svg+xml",webp:"image/webp"},nE=function(e=""){let t=nt(e),i=nS[t.toLowerCase()];return i||""},nw=(e,t)=>{if(!t)return"";// 1. check for the type in the `source` cache
if(e.cache_.source.src===t&&e.cache_.source.type)return e.cache_.source.type;// 2. see if we have this source in our `currentSources` cache
let i=e.cache_.sources.filter(e=>e.src===t);if(i.length)return i[0].type;// 3. look for the src url in source elements and use the type there
let r=e.$$("source");for(let e=0;e<r.length;e++){let i=r[e];if(i.type&&i.src&&i.src===t)return i.type}// 4. finally fallback to our list of mime types based on src url extension
return nE(t)},nk=function(e){// traverse array
if(Array.isArray(e)){let t=[];e.forEach(function(e){Array.isArray(e=nk(e))?t=t.concat(e):re(e)&&t.push(e)}),e=t}else e="string"==typeof e&&e.trim()?[nC({src:e})]:re(e)&&"string"==typeof e.src&&e.src&&e.src.trim()?[nC(e)]:[];return e};/**
 * Checks src mimetype, adding it when possible
 *
 * @param {Tech~SourceObject} src
 *        The src object to check
 * @return {Tech~SourceObject}
 *        src Object with known type
 */function nC(e){if(!e.type){let t=nE(e.src);t&&(e.type=t)}return e}sN.registerComponent("MediaLoader",/**
 * @file loader.js
 *//**
 * The `MediaLoader` is the `Component` that decides which playback technology to load
 * when a player is initialized.
 *
 * @extends Component
 */class extends sN{/**
   * Create an instance of this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function that is run when this component is ready.
   */constructor(e,t,i){// MediaLoader has no element
let r=ri({createEl:!1},t);// If there are no sources when the player is initialized,
// load the first supported playback technology.
if(super(e,r,i),t.playerOptions.sources&&0!==t.playerOptions.sources.length)// Then load the best source.
// A few assumptions here:
//   All playback technologies respect preload false.
e.src(t.playerOptions.sources);else for(let i=0,r=t.playerOptions.techOrder;i<r.length;i++){let t=sP(r[i]),s=np.getTech(t);// Check if the browser supports this technology
if(t||(s=sN.getComponent(t)),s&&s.isSupported()){e.loadTech_(t);break}}}});/**
 * @file clickable-component.js
 *//**
 * Component which is clickable or keyboard actionable, but is not a
 * native HTML button.
 *
 * @extends Component
 */class nx extends sN{/**
   * Creates an instance of this class.
   *
   * @param  { import('./player').default } player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of component options.
   *
   * @param  {function} [options.clickHandler]
   *         The function to call when the button is clicked / activated
   *
   * @param  {string} [options.controlText]
   *         The text to set on the button
   *
   * @param  {string} [options.className]
   *         A class or space separated list of classes to add the component
   *
   */constructor(e,t){super(e,t),this.options_.controlText&&this.controlText(this.options_.controlText),this.handleMouseOver_=e=>this.handleMouseOver(e),this.handleMouseOut_=e=>this.handleMouseOut(e),this.handleClick_=e=>this.handleClick(e),this.handleKeyDown_=e=>this.handleKeyDown(e),this.emitTapEvents(),this.enable()}/**
   * Create the `ClickableComponent`s DOM element.
   *
   * @param {string} [tag=div]
   *        The element's node type.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */createEl(e="div",t={},i={}){t=Object.assign({className:this.buildCSSClass(),tabIndex:0},t),"button"===e&&i8.error(`Creating a ClickableComponent with an HTML element of ${e} is not supported; use a Button instead.`),// Add ARIA attributes for clickable element which is not a native HTML button
i=Object.assign({role:"button"},i),this.tabIndex_=t.tabIndex;let r=rA(e,t,i);return this.player_.options_.experimentalSvgIcons||r.appendChild(rA("span",{className:"vjs-icon-placeholder"},{"aria-hidden":!0})),this.createControlTextEl(r),r}dispose(){// remove controlTextEl_ on dispose
this.controlTextEl_=null,super.dispose()}/**
   * Create a control text element on this `ClickableComponent`
   *
   * @param {Element} [el]
   *        Parent element for the control text.
   *
   * @return {Element}
   *         The control text element that gets created.
   */createControlTextEl(e){return this.controlTextEl_=rA("span",{className:"vjs-control-text"},{// let the screen reader user know that the text of the element may change
"aria-live":"polite"}),e&&e.appendChild(this.controlTextEl_),this.controlText(this.controlText_,e),this.controlTextEl_}/**
   * Get or set the localize text to use for the controls on the `ClickableComponent`.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */controlText(e,t=this.el()){if(void 0===e)return this.controlText_||"Need Text";let i=this.localize(e);/** @protected */this.controlText_=e,rL(this.controlTextEl_,i),this.nonIconControl||this.player_.options_.noUITitleAttributes||t.setAttribute("title",i)}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-control vjs-button ${super.buildCSSClass()}`}/**
   * Enable this `ClickableComponent`
   */enable(){this.enabled_||(this.enabled_=!0,this.removeClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","false"),void 0!==this.tabIndex_&&this.el_.setAttribute("tabIndex",this.tabIndex_),this.on(["tap","click"],this.handleClick_),this.on("keydown",this.handleKeyDown_))}/**
   * Disable this `ClickableComponent`
   */disable(){this.enabled_=!1,this.addClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","true"),void 0!==this.tabIndex_&&this.el_.removeAttribute("tabIndex"),this.off("mouseover",this.handleMouseOver_),this.off("mouseout",this.handleMouseOut_),this.off(["tap","click"],this.handleClick_),this.off("keydown",this.handleKeyDown_)}/**
   * Handles language change in ClickableComponent for the player in components
   *
   *
   */handleLanguagechange(){this.controlText(this.controlText_)}/**
   * Event handler that is called when a `ClickableComponent` receives a
   * `click` or `tap` event.
   *
   * @param {Event} event
   *        The `tap` or `click` event that caused this function to be called.
   *
   * @listens tap
   * @listens click
   * @abstract
   */handleClick(e){this.options_.clickHandler&&this.options_.clickHandler.call(this,arguments)}/**
   * Event handler that is called when a `ClickableComponent` receives a
   * `keydown` event.
   *
   * By default, if the key is Space or Enter, it will trigger a `click` event.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */handleKeyDown(e){// Support Space or Enter key operation to fire a click event. Also,
// prevent the event from propagating through the DOM and triggering
// Player hotkeys.
/*@__PURE__*/w(L).isEventKey(e,"Space")||/*@__PURE__*/w(L).isEventKey(e,"Enter")?(e.preventDefault(),e.stopPropagation(),this.trigger("click")):super.handleKeyDown(e)}}sN.registerComponent("ClickableComponent",nx);/**
 * @file poster-image.js
 *//**
 * A `ClickableComponent` that handles showing the poster image for the player.
 *
 * @extends ClickableComponent
 */class nD extends nx{/**
   * Create an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.update(),this.update_=e=>this.update(e),e.on("posterchange",this.update_)}/**
   * Clean up and dispose of the `PosterImage`.
   */dispose(){this.player().off("posterchange",this.update_),super.dispose()}/**
   * Create the `PosterImage`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */createEl(){// The el is an empty div to keep position in the DOM
// A picture and img el will be inserted when a source is set
return rA("div",{className:"vjs-poster"})}/**
   * Get or set the `PosterImage`'s crossOrigin option.
   *
   * @param {string|null} [value]
   *        The value to set the crossOrigin to. If an argument is
   *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.
   *
   * @return {string|null}
   *         - The current crossOrigin value of the `Player` when getting.
   *         - undefined when setting
   */crossOrigin(e){// `null` can be set to unset a value
if(void 0===e)return this.$("img")?this.$("img").crossOrigin:this.player_.tech_&&this.player_.tech_.isReady_?this.player_.crossOrigin():this.player_.options_.crossOrigin||this.player_.options_.crossorigin||null;if(null!==e&&"anonymous"!==e&&"use-credentials"!==e){this.player_.log.warn(`crossOrigin must be null,  "anonymous" or "use-credentials", given "${e}"`);return}this.$("img")&&(this.$("img").crossOrigin=e)}/**
   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
   *
   * @listens Player#posterchange
   *
   * @param {Event} [event]
   *        The `Player#posterchange` event that triggered this function.
   */update(e){let t=this.player().poster();this.setSrc(t),t?this.show():this.hide()}/**
   * Set the source of the `PosterImage` depending on the display method. (Re)creates
   * the inner picture and img elementss when needed.
   *
   * @param {string} [url]
   *        The URL to the source for the `PosterImage`. If not specified or falsy,
   *        any source and ant inner picture/img are removed.
   */setSrc(e){if(!e){this.el_.textContent="";return}this.$("img")||this.el_.appendChild(rA("picture",{className:"vjs-poster",// Don't want poster to be tabbable.
tabIndex:-1},{},rA("img",{loading:"lazy",crossOrigin:this.crossOrigin()},{alt:""}))),this.$("img").src=e}/**
   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
   * {@link ClickableComponent#handleClick} for instances where this will be triggered.
   *
   * @listens tap
   * @listens click
   * @listens keydown
   *
   * @param {Event} event
   +        The `click`, `tap` or `keydown` event that caused this function to be called.
   */handleClick(e){// We don't want a click to trigger playback when controls are disabled
this.player_.controls()&&(this.player_.tech(!0)&&this.player_.tech(!0).focus(),this.player_.paused()?sX(this.player_.play()):this.player_.pause())}}/**
 * Get or set the `PosterImage`'s crossorigin option. For the HTML5 player, this
 * sets the `crossOrigin` property on the `<img>` tag to control the CORS
 * behavior.
 *
 * @param {string|null} [value]
 *        The value to set the `PosterImages`'s crossorigin to. If an argument is
 *        given, must be one of `anonymous` or `use-credentials`.
 *
 * @return {string|null|undefined}
 *         - The current crossorigin value of the `Player` when getting.
 *         - undefined when setting
 */nD.prototype.crossorigin=nD.prototype.crossOrigin,sN.registerComponent("PosterImage",nD);/**
 * @file text-track-display.js
 */const nI="#222",nA="#ccc",nL={monospace:"monospace",sansSerif:"sans-serif",serif:"serif",monospaceSansSerif:'"Andale Mono", "Lucida Console", monospace',monospaceSerif:'"Courier New", monospace',proportionalSansSerif:"sans-serif",proportionalSerif:"serif",casual:'"Comic Sans MS", Impact, fantasy',script:'"Monotype Corsiva", cursive',smallcaps:'"Andale Mono", "Lucida Console", monospace, sans-serif'};/**
 * Construct an rgba color from a given hex color code.
 *
 * @param {number} color
 *        Hex number for color, like #f0e or #f604e2.
 *
 * @param {number} opacity
 *        Value for opacity, 0.0 - 1.0.
 *
 * @return {string}
 *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
 */function nP(e,t){let i;if(4===e.length)i=e[1]+e[1]+e[2]+e[2]+e[3]+e[3];else if(7===e.length)i=e.slice(1);else throw Error("Invalid color code provided, "+e+"; must be formatted as e.g. #f0e or #f604e2.");return"rgba("+parseInt(i.slice(0,2),16)+","+parseInt(i.slice(2,4),16)+","+parseInt(i.slice(4,6),16)+","+t+")"}/**
 * Try to update the style of a DOM element. Some style changes will throw an error,
 * particularly in IE8. Those should be noops.
 *
 * @param {Element} el
 *        The DOM element to be styled.
 *
 * @param {string} style
 *        The CSS property on the element that should be styled.
 *
 * @param {string} rule
 *        The style rule that should be applied to the property.
 *
 * @private
 */function nO(e,t,i){try{e.style[t]=i}catch(e){// Satisfies linter.
return}}/**
 * Converts the CSS top/right/bottom/left property numeric value to string in pixels.
 *
 * @param {number} position
 *        The CSS top/right/bottom/left property value.
 *
 * @return {string}
 *          The CSS property value that was created, like '10px'.
 *
 * @private
 */function nR(e){return e?`${e}px`:""}sN.registerComponent("TextTrackDisplay",/**
 * The component for displaying text track cues.
 *
 * @extends Component
 */class extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when `TextTrackDisplay` is ready.
   */constructor(e,t,i){super(e,t,i);let r=e=>{this.updateDisplayOverlay(),this.updateDisplay(e)};e.on("loadstart",e=>this.toggleDisplay(e)),e.on("texttrackchange",e=>this.updateDisplay(e)),e.on("loadedmetadata",e=>{this.updateDisplayOverlay(),this.preselectTrack(e)}),// This used to be called during player init, but was causing an error
// if a track should show by default and the display hadn't loaded yet.
// Should probably be moved to an external track loader when we support
// tracks that don't need a display.
e.ready(sp(this,function(){if(e.tech_&&e.tech_.featuresNativeTextTracks){this.hide();return}e.on("fullscreenchange",r),e.on("playerresize",r);let t=/*@__PURE__*/w(I).screen.orientation||/*@__PURE__*/w(I),i=/*@__PURE__*/w(I).screen.orientation?"change":"orientationchange";t.addEventListener(i,r),e.on("dispose",()=>t.removeEventListener(i,r));let s=this.options_.playerOptions.tracks||[];for(let e=0;e<s.length;e++)this.player_.addRemoteTextTrack(s[e],!0);this.preselectTrack()}))}/**
  * Preselect a track following this precedence:
  * - matches the previously selected {@link TextTrack}'s language and kind
  * - matches the previously selected {@link TextTrack}'s language only
  * - is the first default captions track
  * - is the first default descriptions track
  *
  * @listens Player#loadstart
  */preselectTrack(){let e,t,i;let r={captions:1,subtitles:1},s=this.player_.textTracks(),n=this.player_.cache_.selectedLanguage;for(let a=0;a<s.length;a++){let o=s[a];n&&n.enabled&&n.language&&n.language===o.language&&o.kind in r?o.kind===n.kind?i=o:i||(i=o):n&&!n.enabled?(i=null,e=null,t=null):o.default&&("descriptions"!==o.kind||e?o.kind in r&&!t&&(t=o):e=o)}// The preferredTrack matches the user preference and takes
// precedence over all the other tracks.
// So, display the preferredTrack before the first default track
// and the subtitles/captions track before the descriptions track
i?i.mode="showing":t?t.mode="showing":e&&(e.mode="showing")}/**
   * Turn display of {@link TextTrack}'s from the current state into the other state.
   * There are only two states:
   * - 'shown'
   * - 'hidden'
   *
   * @listens Player#loadstart
   */toggleDisplay(){this.player_.tech_&&this.player_.tech_.featuresNativeTextTracks?this.hide():this.show()}/**
   * Create the {@link Component}'s DOM element.
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return super.createEl("div",{className:"vjs-text-track-display"},{translate:"yes","aria-live":"off","aria-atomic":"true"})}/**
   * Clear all displayed {@link TextTrack}s.
   */clearDisplay(){"function"==typeof /*@__PURE__*/w(I).WebVTT&&/*@__PURE__*/w(I).WebVTT.processCues(/*@__PURE__*/w(I),[],this.el_)}/**
   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
   * a {@link Player#fullscreenchange} is fired.
   *
   * @listens Player#texttrackchange
   * @listens Player#fullscreenchange
   */updateDisplay(){let e=this.player_.textTracks(),t=this.options_.allowMultipleShowingTracks;if(this.clearDisplay(),t){let t=[];for(let i=0;i<e.length;++i){let r=e[i];"showing"===r.mode&&t.push(r)}this.updateForTrack(t);return}//  Track display prioritization model: if multiple tracks are 'showing',
//  display the first 'subtitles' or 'captions' track which is 'showing',
//  otherwise display the first 'descriptions' track which is 'showing'
let i=null,r=null,s=e.length;for(;s--;){let t=e[s];"showing"===t.mode&&("descriptions"===t.kind?i=t:r=t)}r?("off"!==this.getAttribute("aria-live")&&this.setAttribute("aria-live","off"),this.updateForTrack(r)):i&&("assertive"!==this.getAttribute("aria-live")&&this.setAttribute("aria-live","assertive"),this.updateForTrack(i))}/**
   * Updates the displayed TextTrack to be sure it overlays the video when a either
   * a {@link Player#texttrackchange} or a {@link Player#fullscreenchange} is fired.
   */updateDisplayOverlay(){// inset-inline and inset-block are not supprted on old chrome, but these are
// only likely to be used on TV devices
if(!this.player_.videoHeight()||!/*@__PURE__*/w(I).CSS.supports("inset-inline: 10px"))return;let e=this.player_.currentWidth(),t=this.player_.currentHeight(),i=e/t,r=this.player_.videoWidth()/this.player_.videoHeight(),s=0,n=0;Math.abs(i-r)>.1&&(i>r?s=Math.round((e-t*r)/2):n=Math.round((t-e/r)/2)),nO(this.el_,"insetInline",nR(s)),nO(this.el_,"insetBlock",nR(n))}/**
   * Style {@Link TextTrack} activeCues according to {@Link TextTrackSettings}.
   *
   * @param {TextTrack} track
   *        Text track object containing active cues to style.
   */updateDisplayState(e){let t=this.player_.textTrackSettings.getValues(),i=e.activeCues,r=i.length;for(;r--;){let e=i[r];if(!e)continue;let s=e.displayState;if(t.color&&(s.firstChild.style.color=t.color),t.textOpacity&&nO(s.firstChild,"color",nP(t.color||"#fff",t.textOpacity)),t.backgroundColor&&(s.firstChild.style.backgroundColor=t.backgroundColor),t.backgroundOpacity&&nO(s.firstChild,"backgroundColor",nP(t.backgroundColor||"#000",t.backgroundOpacity)),t.windowColor&&(t.windowOpacity?nO(s,"backgroundColor",nP(t.windowColor,t.windowOpacity)):s.style.backgroundColor=t.windowColor),t.edgeStyle&&("dropshadow"===t.edgeStyle?s.firstChild.style.textShadow=`2px 2px 3px ${nI}, 2px 2px 4px ${nI}, 2px 2px 5px ${nI}`:"raised"===t.edgeStyle?s.firstChild.style.textShadow=`1px 1px ${nI}, 2px 2px ${nI}, 3px 3px ${nI}`:"depressed"===t.edgeStyle?s.firstChild.style.textShadow=`1px 1px ${nA}, 0 1px ${nA}, -1px -1px ${nI}, 0 -1px ${nI}`:"uniform"===t.edgeStyle&&(s.firstChild.style.textShadow=`0 0 4px ${nI}, 0 0 4px ${nI}, 0 0 4px ${nI}, 0 0 4px ${nI}`)),t.fontPercent&&1!==t.fontPercent){let e=/*@__PURE__*/w(I).parseFloat(s.style.fontSize);s.style.fontSize=e*t.fontPercent+"px",s.style.height="auto",s.style.top="auto"}t.fontFamily&&"default"!==t.fontFamily&&("small-caps"===t.fontFamily?s.firstChild.style.fontVariant="small-caps":s.firstChild.style.fontFamily=nL[t.fontFamily])}}/**
   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.
   *
   * @param {TextTrack|TextTrack[]} tracks
   *        Text track object or text track array to be added to the list.
   */updateForTrack(e){if(Array.isArray(e)||(e=[e]),"function"!=typeof /*@__PURE__*/w(I).WebVTT||e.every(e=>!e.activeCues))return;let t=[];// push all active track cues
for(let i=0;i<e.length;++i){let r=e[i];for(let e=0;e<r.activeCues.length;++e)t.push(r.activeCues[e])}/*@__PURE__*/w(I).WebVTT.processCues(/*@__PURE__*/w(I),t,this.el_);// add unique class to each language text track & add settings styling if necessary
for(let t=0;t<e.length;++t){let i=e[t];for(let e=0;e<i.activeCues.length;++e){let r=i.activeCues[e].displayState;rR(r,"vjs-text-track-cue","vjs-text-track-cue-"+(i.language?i.language:t)),i.language&&rj(r,"lang",i.language)}this.player_.textTrackSettings&&this.updateDisplayState(i)}}}),sN.registerComponent("LoadingSpinner",/**
 * @file loading-spinner.js
 *//**
 * A loading spinner for use during waiting/loading events.
 *
 * @extends Component
 */class extends sN{/**
   * Create the `LoadingSpinner`s DOM element.
   *
   * @return {Element}
   *         The dom element that gets created.
   */createEl(){let e=this.player_.isAudio(),t=this.localize(e?"Audio Player":"Video Player"),i=rA("span",{className:"vjs-control-text",textContent:this.localize("{1} is loading.",[t])}),r=super.createEl("div",{className:"vjs-loading-spinner",dir:"ltr"});return r.appendChild(i),r}/**
   * Update control text on languagechange
   */handleLanguagechange(){this.$(".vjs-control-text").textContent=this.localize("{1} is loading.",[this.player_.isAudio()?"Audio Player":"Video Player"])}});/**
 * @file button.js
 *//**
 * Base class for all buttons.
 *
 * @extends ClickableComponent
 */class nN extends nx{/**
   * Create the `Button`s DOM element.
   *
   * @param {string} [tag="button"]
   *        The element's node type. This argument is IGNORED: no matter what
   *        is passed, it will always create a `button` element.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */createEl(e,t={},i={}){e="button",t=Object.assign({className:this.buildCSSClass()},t),// Add attributes for button element
i=Object.assign({// Necessary since the default button type is "submit"
type:"button"},i);let r=rA(e,t,i);return this.player_.options_.experimentalSvgIcons||r.appendChild(rA("span",{className:"vjs-icon-placeholder"},{"aria-hidden":!0})),this.createControlTextEl(r),r}/**
   * Add a child `Component` inside of this `Button`.
   *
   * @param {string|Component} child
   *        The name or instance of a child to add.
   *
   * @param {Object} [options={}]
   *        The key/value store of options that will get passed to children of
   *        the child.
   *
   * @return {Component}
   *         The `Component` that gets added as a child. When using a string the
   *         `Component` will get created by this process.
   *
   * @deprecated since version 5
   */addChild(e,t={}){let i=this.constructor.name;// Avoid the error message generated by ClickableComponent's addChild method
return i8.warn(`Adding an actionable (user controllable) child to a Button (${i}) is not supported; use a ClickableComponent instead.`),sN.prototype.addChild.call(this,e,t)}/**
   * Enable the `Button` element so that it can be activated or clicked. Use this with
   * {@link Button#disable}.
   */enable(){super.enable(),this.el_.removeAttribute("disabled")}/**
   * Disable the `Button` element so that it cannot be activated or clicked. Use this with
   * {@link Button#enable}.
   */disable(){super.disable(),this.el_.setAttribute("disabled","disabled")}/**
   * This gets called when a `Button` has focus and `keydown` is triggered via a key
   * press.
   *
   * @param {KeyboardEvent} event
   *        The event that caused this function to get called.
   *
   * @listens keydown
   */handleKeyDown(e){// Ignore Space or Enter key operation, which is handled by the browser for
// a button - though not for its super class, ClickableComponent. Also,
// prevent the event from propagating through the DOM and triggering Player
// hotkeys. We do not preventDefault here because we _want_ the browser to
// handle it.
if(/*@__PURE__*/w(L).isEventKey(e,"Space")||/*@__PURE__*/w(L).isEventKey(e,"Enter")){e.stopPropagation();return}// Pass keypress handling up for unsupported keys
super.handleKeyDown(e)}}sN.registerComponent("Button",nN);/**
 * @file big-play-button.js
 *//**
 * The initial play button that shows before the video has played. The hiding of the
 * `BigPlayButton` get done via CSS and `Player` states.
 *
 * @extends Button
 */class nM extends nN{constructor(e,t){super(e,t),this.mouseused_=!1,this.setIcon("play"),this.on("mousedown",e=>this.handleMouseDown(e))}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
   */buildCSSClass(){return"vjs-big-play-button"}/**
   * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {KeyboardEvent|MouseEvent|TouchEvent} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){let t=this.player_.play();// exit early if clicked via the mouse
if(this.mouseused_&&"clientX"in e&&"clientY"in e){sX(t),this.player_.tech(!0)&&this.player_.tech(!0).focus();return}let i=this.player_.getChild("controlBar"),r=i&&i.getChild("playToggle");if(!r){this.player_.tech(!0).focus();return}let s=()=>r.focus();sG(t)?t.then(s,()=>{}):this.setTimeout(s,1)}/**
   * Event handler that is called when a `BigPlayButton` receives a
   * `keydown` event.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */handleKeyDown(e){this.mouseused_=!1,super.handleKeyDown(e)}/**
   * Handle `mousedown` events on the `BigPlayButton`.
   *
   * @param {MouseEvent} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   */handleMouseDown(e){this.mouseused_=!0}}/**
 * The text that should display over the `BigPlayButton`s controls. Added to for localization.
 *
 * @type {string}
 * @protected
 */nM.prototype.controlText_="Play Video",sN.registerComponent("BigPlayButton",nM),sN.registerComponent("CloseButton",/**
 * @file close-button.js
 *//**
 * The `CloseButton` is a `{@link Button}` that fires a `close` event when
 * it gets clicked.
 *
 * @extends Button
 */class extends nN{/**
  * Creates an instance of the this class.
  *
  * @param  { import('./player').default } player
  *         The `Player` that this class should be attached to.
  *
  * @param  {Object} [options]
  *         The key/value store of player options.
  */constructor(e,t){super(e,t),this.setIcon("cancel"),this.controlText(t&&t.controlText||this.localize("Close"))}/**
  * Builds the default DOM `className`.
  *
  * @return {string}
  *         The DOM `className` for this object.
  */buildCSSClass(){return`vjs-close-button ${super.buildCSSClass()}`}/**
   * This gets called when a `CloseButton` gets clicked. See
   * {@link ClickableComponent#handleClick} for more information on when
   * this will be triggered
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   * @fires CloseButton#close
   */handleClick(e){/**
     * Triggered when the a `CloseButton` is clicked.
     *
     * @event CloseButton#close
     * @type {Event}
     *
     * @property {boolean} [bubbles=false]
     *           set to false so that the close event does not
     *           bubble up to parents if there is no listener
     */this.trigger({type:"close",bubbles:!1})}/**
   * Event handler that is called when a `CloseButton` receives a
   * `keydown` event.
   *
   * By default, if the key is Esc, it will trigger a `click` event.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */handleKeyDown(e){// Esc button will trigger `click` event
/*@__PURE__*/w(L).isEventKey(e,"Esc")?(e.preventDefault(),e.stopPropagation(),this.trigger("click")):super.handleKeyDown(e)}});/**
 * @file play-toggle.js
 *//**
 * Button to toggle between play and pause.
 *
 * @extends Button
 */class nU extends nN{/**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */constructor(e,t={}){super(e,t),// show or hide replay icon
t.replay=void 0===t.replay||t.replay,this.setIcon("play"),this.on(e,"play",e=>this.handlePlay(e)),this.on(e,"pause",e=>this.handlePause(e)),t.replay&&this.on(e,"ended",e=>this.handleEnded(e))}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-play-control ${super.buildCSSClass()}`}/**
   * This gets called when an `PlayToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){this.player_.paused()?sX(this.player_.play()):this.player_.pause()}/**
   * This gets called once after the video has ended and the user seeks so that
   * we can change the replay button back to a play button.
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#seeked
   */handleSeeked(e){this.removeClass("vjs-ended"),this.player_.paused()?this.handlePause(e):this.handlePlay(e)}/**
   * Add the vjs-playing class to the element so it can change appearance.
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#play
   */handlePlay(e){this.removeClass("vjs-ended","vjs-paused"),this.addClass("vjs-playing"),// change the button text to "Pause"
this.setIcon("pause"),this.controlText("Pause")}/**
   * Add the vjs-paused class to the element so it can change appearance.
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#pause
   */handlePause(e){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),// change the button text to "Play"
this.setIcon("play"),this.controlText("Play")}/**
   * Add the vjs-ended class to the element so it can change appearance
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ended
   */handleEnded(e){this.removeClass("vjs-playing"),this.addClass("vjs-ended"),// change the button text to "Replay"
this.setIcon("replay"),this.controlText("Replay"),// on the next seek remove the replay button
this.one(this.player_,"seeked",e=>this.handleSeeked(e))}}/**
 * The text that should display over the `PlayToggle`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */nU.prototype.controlText_="Play",sN.registerComponent("PlayToggle",nU);/**
 * @file time-display.js
 *//**
 * Displays time information about the video
 *
 * @extends Component
 */class nB extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.on(e,["timeupdate","ended"],e=>this.updateContent(e)),this.updateTextNode_()}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){let e=this.buildCSSClass(),t=super.createEl("div",{className:`${e} vjs-time-control vjs-control`}),i=rA("span",{className:"vjs-control-text",textContent:`${this.localize(this.labelText_)}\u00a0`},{role:"presentation"});return t.appendChild(i),this.contentEl_=rA("span",{className:`${e}-display`},{// span elements have no implicit role, but some screen readers (notably VoiceOver)
// treat them as a break between items in the DOM when using arrow keys
// (or left-to-right swipes on iOS) to read contents of a page. Using
// role='presentation' causes VoiceOver to NOT treat this span as a break.
role:"presentation"}),t.appendChild(this.contentEl_),t}dispose(){this.contentEl_=null,this.textNode_=null,super.dispose()}/**
   * Updates the time display text node with a new time
   *
   * @param {number} [time=0] the time to update to
   *
   * @private
   */updateTextNode_(e=0){e=sH(e),this.formattedTime_!==e&&(this.formattedTime_=e,this.requestNamedAnimationFrame("TimeDisplay#updateTextNode_",()=>{if(!this.contentEl_)return;let e=this.textNode_;e&&this.contentEl_.firstChild!==e&&(e=null,i8.warn("TimeDisplay#updateTextnode_: Prevented replacement of text node element since it was no longer a child of this node. Appending a new node instead.")),this.textNode_=/*@__PURE__*/w(A).createTextNode(this.formattedTime_),this.textNode_&&(e?this.contentEl_.replaceChild(this.textNode_,e):this.contentEl_.appendChild(this.textNode_))}))}/**
   * To be filled out in the child class, should update the displayed time
   * in accordance with the fact that the current time has changed.
   *
   * @param {Event} [event]
   *        The `timeupdate`  event that caused this to run.
   *
   * @listens Player#timeupdate
   */updateContent(e){}}/**
 * The text that is added to the `TimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */nB.prototype.labelText_="Time",/**
 * The text that should display over the `TimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @protected
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */nB.prototype.controlText_="Time",sN.registerComponent("TimeDisplay",nB);/**
 * @file current-time-display.js
 *//**
 * Displays the current time
 *
 * @extends Component
 */class nF extends nB{/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return"vjs-current-time"}/**
   * Update current time display
   *
   * @param {Event} [event]
   *        The `timeupdate` event that caused this function to run.
   *
   * @listens Player#timeupdate
   */updateContent(e){// Allows for smooth scrubbing, when player can't keep up.
let t;t=this.player_.ended()?this.player_.duration():this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime(),this.updateTextNode_(t)}}/**
 * The text that is added to the `CurrentTimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */nF.prototype.labelText_="Current Time",/**
 * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @protected
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */nF.prototype.controlText_="Current Time",sN.registerComponent("CurrentTimeDisplay",nF);/**
 * @file duration-display.js
 *//**
 * Displays the duration
 *
 * @extends Component
 */class nj extends nB{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t);let i=e=>this.updateContent(e);// we do not want to/need to throttle duration changes,
// as they should always display the changed duration as
// it has changed
this.on(e,"durationchange",i),// Listen to loadstart because the player duration is reset when a new media element is loaded,
// but the durationchange on the user agent will not fire.
// @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}
this.on(e,"loadstart",i),// Also listen for timeupdate (in the parent) and loadedmetadata because removing those
// listeners could have broken dependent applications/libraries. These
// can likely be removed for 7.0.
this.on(e,"loadedmetadata",i)}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return"vjs-duration"}/**
   * Update duration time display.
   *
   * @param {Event} [event]
   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
   *        this function to be called.
   *
   * @listens Player#durationchange
   * @listens Player#timeupdate
   * @listens Player#loadedmetadata
   */updateContent(e){let t=this.player_.duration();this.updateTextNode_(t)}}/**
 * The text that is added to the `DurationDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */nj.prototype.labelText_="Duration",/**
 * The text that should display over the `DurationDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @protected
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */nj.prototype.controlText_="Duration",sN.registerComponent("DurationDisplay",nj),sN.registerComponent("TimeDivider",/**
 * @file time-divider.js
 *//**
 * The separator between the current time and duration.
 * Can be hidden if it's not needed in the design.
 *
 * @extends Component
 */class extends sN{/**
   * Create the component's DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){let e=super.createEl("div",{className:"vjs-time-control vjs-time-divider"},{// this element and its contents can be hidden from assistive techs since
// it is made extraneous by the announcement of the control text
// for the current time and duration displays
"aria-hidden":!0}),t=super.createEl("div"),i=super.createEl("span",{textContent:"/"});return t.appendChild(i),e.appendChild(t),e}});/**
 * @file remaining-time-display.js
 *//**
 * Displays the time left in the video
 *
 * @extends Component
 */class nq extends nB{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.on(e,"durationchange",e=>this.updateContent(e))}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return"vjs-remaining-time"}/**
   * Create the `Component`'s DOM element with the "minus" character prepend to the time
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){let e=super.createEl();return!1!==this.options_.displayNegative&&e.insertBefore(rA("span",{},{"aria-hidden":!0},"-"),this.contentEl_),e}/**
   * Update remaining time display.
   *
   * @param {Event} [event]
   *        The `timeupdate` or `durationchange` event that caused this to run.
   *
   * @listens Player#timeupdate
   * @listens Player#durationchange
   */updateContent(e){let t;"number"==typeof this.player_.duration()&&(t=this.player_.ended()?0:this.player_.remainingTimeDisplay?this.player_.remainingTimeDisplay():this.player_.remainingTime(),this.updateTextNode_(t))}}/**
 * The text that is added to the `RemainingTimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */nq.prototype.labelText_="Remaining Time",/**
 * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @protected
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */nq.prototype.controlText_="Remaining Time",sN.registerComponent("RemainingTimeDisplay",nq),sN.registerComponent("LiveDisplay",/**
 * @file live-display.js
 */// TODO - Future make it click to snap to live
/**
 * Displays the live indicator when duration is Infinity.
 *
 * @extends Component
 */class extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.updateShowing(),this.on(this.player(),"durationchange",e=>this.updateShowing(e))}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){let e=super.createEl("div",{className:"vjs-live-control vjs-control"});return this.contentEl_=rA("div",{className:"vjs-live-display"},{"aria-live":"off"}),this.contentEl_.appendChild(rA("span",{className:"vjs-control-text",textContent:`${this.localize("Stream Type")}\u00a0`})),this.contentEl_.appendChild(/*@__PURE__*/w(A).createTextNode(this.localize("LIVE"))),e.appendChild(this.contentEl_),e}dispose(){this.contentEl_=null,super.dispose()}/**
   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
   * it accordingly
   *
   * @param {Event} [event]
   *        The {@link Player#durationchange} event that caused this function to run.
   *
   * @listens Player#durationchange
   */updateShowing(e){this.player().duration()===1/0?this.show():this.hide()}});/**
 * @file seek-to-live.js
 *//**
 * Displays the live indicator when duration is Infinity.
 *
 * @extends Component
 */class n$ extends nN{/**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.updateLiveEdgeStatus(),this.player_.liveTracker&&(this.updateLiveEdgeStatusHandler_=e=>this.updateLiveEdgeStatus(e),this.on(this.player_.liveTracker,"liveedgechange",this.updateLiveEdgeStatusHandler_))}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){let e=super.createEl("button",{className:"vjs-seek-to-live-control vjs-control"});return this.setIcon("circle",e),this.textEl_=rA("span",{className:"vjs-seek-to-live-text",textContent:this.localize("LIVE")},{"aria-hidden":"true"}),e.appendChild(this.textEl_),e}/**
   * Update the state of this button if we are at the live edge
   * or not
   */updateLiveEdgeStatus(){// default to live edge
!this.player_.liveTracker||this.player_.liveTracker.atLiveEdge()?(this.setAttribute("aria-disabled",!0),this.addClass("vjs-at-live-edge"),this.controlText("Seek to live, currently playing live")):(this.setAttribute("aria-disabled",!1),this.removeClass("vjs-at-live-edge"),this.controlText("Seek to live, currently behind live"))}/**
   * On click bring us as near to the live point as possible.
   * This requires that we wait for the next `live-seekable-change`
   * event which will happen every segment length seconds.
   */handleClick(){this.player_.liveTracker.seekToLiveEdge()}/**
   * Dispose of the element and stop tracking
   */dispose(){this.player_.liveTracker&&this.off(this.player_.liveTracker,"liveedgechange",this.updateLiveEdgeStatusHandler_),this.textEl_=null,super.dispose()}}/**
 * @file num.js
 * @module num
 *//**
 * Keep a number between a min and a max value
 *
 * @param {number} number
 *        The number to clamp
 *
 * @param {number} min
 *        The minimum value
 * @param {number} max
 *        The maximum value
 *
 * @return {number}
 *         the clamped number
 */function nH(e,t,i){return Math.min(i,Math.max(t,isNaN(e=Number(e))?t:e))}/**
 * The text that should display over the `SeekToLive`s control. Added for localization.
 *
 * @type {string}
 * @protected
 */n$.prototype.controlText_="Seek to live, currently playing live",sN.registerComponent("SeekToLive",n$);var nV=/*#__PURE__*/Object.freeze({__proto__:null,clamp:nH});/**
 * @file slider.js
 *//**
 * The base functionality for a slider. Can be vertical or horizontal.
 * For instance the volume bar or the seek bar on a video is a slider.
 *
 * @extends Component
 */class nz extends sN{/**
  * Create an instance of this class
  *
  * @param { import('../player').default } player
  *        The `Player` that this class should be attached to.
  *
  * @param {Object} [options]
  *        The key/value store of player options.
  */constructor(e,t){super(e,t),this.handleMouseDown_=e=>this.handleMouseDown(e),this.handleMouseUp_=e=>this.handleMouseUp(e),this.handleKeyDown_=e=>this.handleKeyDown(e),this.handleClick_=e=>this.handleClick(e),this.handleMouseMove_=e=>this.handleMouseMove(e),this.update_=e=>this.update(e),// Set property names to bar to match with the child Slider class is looking for
this.bar=this.getChild(this.options_.barName),// Set a horizontal or vertical class on the slider depending on the slider type
this.vertical(!!this.options_.vertical),this.enable()}/**
   * Are controls are currently enabled for this slider or not.
   *
   * @return {boolean}
   *         true if controls are enabled, false otherwise
   */enabled(){return this.enabled_}/**
   * Enable controls for this slider if they are disabled
   */enable(){this.enabled()||(this.on("mousedown",this.handleMouseDown_),this.on("touchstart",this.handleMouseDown_),this.on("keydown",this.handleKeyDown_),this.on("click",this.handleClick_),// TODO: deprecated, controlsvisible does not seem to be fired
this.on(this.player_,"controlsvisible",this.update),this.playerEvent&&this.on(this.player_,this.playerEvent,this.update),this.removeClass("disabled"),this.setAttribute("tabindex",0),this.enabled_=!0)}/**
   * Disable controls for this slider if they are enabled
   */disable(){if(!this.enabled())return;let e=this.bar.el_.ownerDocument;this.off("mousedown",this.handleMouseDown_),this.off("touchstart",this.handleMouseDown_),this.off("keydown",this.handleKeyDown_),this.off("click",this.handleClick_),this.off(this.player_,"controlsvisible",this.update_),this.off(e,"mousemove",this.handleMouseMove_),this.off(e,"mouseup",this.handleMouseUp_),this.off(e,"touchmove",this.handleMouseMove_),this.off(e,"touchend",this.handleMouseUp_),this.removeAttribute("tabindex"),this.addClass("disabled"),this.playerEvent&&this.off(this.player_,this.playerEvent,this.update),this.enabled_=!1}/**
   * Create the `Slider`s DOM element.
   *
   * @param {string} type
   *        Type of element to create.
   *
   * @param {Object} [props={}]
   *        List of properties in Object form.
   *
   * @param {Object} [attributes={}]
   *        list of attributes in Object form.
   *
   * @return {Element}
   *         The element that gets created.
   */createEl(e,t={},i={}){return(// Add the slider element class to all sub classes
t.className=t.className+" vjs-slider",t=Object.assign({tabIndex:0},t),i=Object.assign({role:"slider","aria-valuenow":0,"aria-valuemin":0,"aria-valuemax":100},i),super.createEl(e,t,i))}/**
   * Handle `mousedown` or `touchstart` events on the `Slider`.
   *
   * @param {MouseEvent} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   * @fires Slider#slideractive
   */handleMouseDown(e){let t=this.bar.el_.ownerDocument;"mousedown"===e.type&&e.preventDefault(),"touchstart"!==e.type||rc||e.preventDefault(),r$(),this.addClass("vjs-sliding"),/**
     * Triggered when the slider is in an active state
     *
     * @event Slider#slideractive
     * @type {MouseEvent}
     */this.trigger("slideractive"),this.on(t,"mousemove",this.handleMouseMove_),this.on(t,"mouseup",this.handleMouseUp_),this.on(t,"touchmove",this.handleMouseMove_),this.on(t,"touchend",this.handleMouseUp_),this.handleMouseMove(e,!0)}/**
   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
   * The `mousemove` and `touchmove` events will only only trigger this function during
   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
   * {@link Slider#handleMouseUp}.
   *
   * @param {MouseEvent} event
   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
   *        this function
   * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false.
   *
   * @listens mousemove
   * @listens touchmove
   */handleMouseMove(e){}/**
   * Handle `mouseup` or `touchend` events on the `Slider`.
   *
   * @param {MouseEvent} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   * @fires Slider#sliderinactive
   */handleMouseUp(e){let t=this.bar.el_.ownerDocument;rH(),this.removeClass("vjs-sliding"),/**
     * Triggered when the slider is no longer in an active state.
     *
     * @event Slider#sliderinactive
     * @type {Event}
     */this.trigger("sliderinactive"),this.off(t,"mousemove",this.handleMouseMove_),this.off(t,"mouseup",this.handleMouseUp_),this.off(t,"touchmove",this.handleMouseMove_),this.off(t,"touchend",this.handleMouseUp_),this.update()}/**
   * Update the progress bar of the `Slider`.
   *
   * @return {number}
   *          The percentage of progress the progress bar represents as a
   *          number from 0 to 1.
   */update(){// In VolumeBar init we have a setTimeout for update that pops and update
// to the end of the execution stack. The player is destroyed before then
// update will cause an error
// If there's no bar...
if(!this.el_||!this.bar)return;// clamp progress between 0 and 1
// and only round to four decimal places, as we round to two below
let e=this.getProgress();return e===this.progress_||(this.progress_=e,this.requestNamedAnimationFrame("Slider#update",()=>{// Set the new bar width or height
let t=this.vertical()?"height":"width";// Convert to a percentage for css value
this.bar.el().style[t]=(100*e).toFixed(2)+"%"})),e}/**
   * Get the percentage of the bar that should be filled
   * but clamped and rounded.
   *
   * @return {number}
   *         percentage filled that the slider is
   */getProgress(){return Number(nH(this.getPercent(),0,1).toFixed(4))}/**
   * Calculate distance for slider
   *
   * @param {Event} event
   *        The event that caused this function to run.
   *
   * @return {number}
   *         The current position of the Slider.
   *         - position.x for vertical `Slider`s
   *         - position.y for horizontal `Slider`s
   */calculateDistance(e){let t=rW(this.el_,e);return this.vertical()?t.y:t.x}/**
   * Handle a `keydown` event on the `Slider`. Watches for left, right, up, and down
   * arrow keys. This function will only be called when the slider has focus. See
   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
   *
   * @param {KeyboardEvent} event
   *        the `keydown` event that caused this function to run.
   *
   * @listens keydown
   */handleKeyDown(e){// Left and Down Arrows
/*@__PURE__*/w(L).isEventKey(e,"Left")||/*@__PURE__*/w(L).isEventKey(e,"Down")?(e.preventDefault(),e.stopPropagation(),this.stepBack()):/*@__PURE__*/w(L).isEventKey(e,"Right")||/*@__PURE__*/w(L).isEventKey(e,"Up")?(e.preventDefault(),e.stopPropagation(),this.stepForward()):super.handleKeyDown(e)}/**
   * Listener for click events on slider, used to prevent clicks
   *   from bubbling up to parent elements like button menus.
   *
   * @param {Object} event
   *        Event that caused this object to run
   */handleClick(e){e.stopPropagation(),e.preventDefault()}/**
   * Get/set if slider is horizontal for vertical
   *
   * @param {boolean} [bool]
   *        - true if slider is vertical,
   *        - false is horizontal
   *
   * @return {boolean}
   *         - true if slider is vertical, and getting
   *         - false if the slider is horizontal, and getting
   */vertical(e){if(void 0===e)return this.vertical_||!1;this.vertical_=!!e,this.vertical_?this.addClass("vjs-slider-vertical"):this.addClass("vjs-slider-horizontal")}}sN.registerComponent("Slider",nz);/**
 * @file load-progress-bar.js
 */// get the percent width of a time compared to the total end
const nW=(e,t)=>nH(e/t*100,0,100).toFixed(2)+"%";sN.registerComponent("LoadProgressBar",/**
 * Shows loading progress
 *
 * @extends Component
 */class extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.partEls_=[],this.on(e,"progress",e=>this.update(e))}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){let e=super.createEl("div",{className:"vjs-load-progress"}),t=rA("span",{className:"vjs-control-text"}),i=rA("span",{textContent:this.localize("Loaded")}),r=/*@__PURE__*/w(A).createTextNode(": ");return this.percentageEl_=rA("span",{className:"vjs-control-text-loaded-percentage",textContent:"0%"}),e.appendChild(t),t.appendChild(i),t.appendChild(r),t.appendChild(this.percentageEl_),e}dispose(){this.partEls_=null,this.percentageEl_=null,super.dispose()}/**
   * Update progress bar
   *
   * @param {Event} [event]
   *        The `progress` event that caused this function to run.
   *
   * @listens Player#progress
   */update(e){this.requestNamedAnimationFrame("LoadProgressBar#update",()=>{let e=this.player_.liveTracker,t=this.player_.buffered(),i=e&&e.isLive()?e.seekableEnd():this.player_.duration(),r=this.player_.bufferedEnd(),s=this.partEls_,n=nW(r,i);this.percent_!==n&&(// update the width of the progress bar
this.el_.style.width=n,// update the control-text
rL(this.percentageEl_,n),this.percent_=n);// add child elements to represent the individual buffered time ranges
for(let e=0;e<t.length;e++){let i=t.start(e),n=t.end(e),a=s[e];a||(a=this.el_.appendChild(rA()),s[e]=a),(a.dataset.start!==i||a.dataset.end!==n)&&(a.dataset.start=i,a.dataset.end=n,// set the percent based on the width of the progress bar (bufferedEnd)
a.style.left=nW(i,r),a.style.width=nW(n-i,r))}// remove unused buffered range elements
for(let e=s.length;e>t.length;e--)this.el_.removeChild(s[e-1]);s.length=t.length})}}),sN.registerComponent("TimeTooltip",/**
 * @file time-tooltip.js
 *//**
 * Time tooltips display a time above the progress bar.
 *
 * @extends Component
 */class extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.update=sm(sp(this,this.update),30)}/**
   * Create the time tooltip DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return super.createEl("div",{className:"vjs-time-tooltip"},{"aria-hidden":"true"})}/**
   * Updates the position of the time tooltip relative to the `SeekBar`.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */update(e,t,i){let r=rz(this.el_),s=rV(this.player_.el()),n=e.width*t;// do nothing if either rect isn't available
// for example, if the player isn't in the DOM for testing
if(!s||!r)return;// This is the space left of the `seekBarPoint` available within the bounds
// of the player. We calculate any gap between the left edge of the player
// and the left edge of the `SeekBar` and add the number of pixels in the
// `SeekBar` before hitting the `seekBarPoint`
let a=e.left-s.left+n,o=e.width-n+(s.right-e.right),l=r.width/2;a<l?l+=l-a:o<l&&(l=o),l<0?l=0:l>r.width&&(l=r.width),// prevent small width fluctuations within 0.4px from
// changing the value below.
// This really helps for live to prevent the play
// progress time tooltip from jittering
l=Math.round(l),this.el_.style.right=`-${l}px`,this.write(i)}/**
   * Write the time to the tooltip DOM element.
   *
   * @param {string} content
   *        The formatted time for the tooltip.
   */write(e){rL(this.el_,e)}/**
   * Updates the position of the time tooltip relative to the `SeekBar`.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   *
   * @param {number} time
   *        The time to update the tooltip to, not used during live playback
   *
   * @param {Function} cb
   *        A function that will be called during the request animation frame
   *        for tooltips that need to do additional animations from the default
   */updateTime(e,t,i,r){this.requestNamedAnimationFrame("TimeTooltip#updateTime",()=>{let s;let n=this.player_.duration();if(this.player_.liveTracker&&this.player_.liveTracker.isLive()){let e=this.player_.liveTracker.liveWindow(),i=e-t*e;s=(i<1?"":"-")+sH(i,e)}else s=sH(i,n);this.update(e,t,s),r&&r()})}});/**
 * @file play-progress-bar.js
 *//**
 * Used by {@link SeekBar} to display media playback progress as part of the
 * {@link ProgressControl}.
 *
 * @extends Component
 */class nG extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.setIcon("circle"),this.update=sm(sp(this,this.update),30)}/**
   * Create the the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return super.createEl("div",{className:"vjs-play-progress vjs-slider-bar"},{"aria-hidden":"true"})}/**
   * Enqueues updates to its own DOM as well as the DOM of its
   * {@link TimeTooltip} child.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */update(e,t){let i=this.getChild("timeTooltip");if(!i)return;let r=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime();i.updateTime(e,t,r)}}/**
 * Default options for {@link PlayProgressBar}.
 *
 * @type {Object}
 * @private
 */nG.prototype.options_={children:[]},rS||rl||nG.prototype.options_.children.push("timeTooltip"),sN.registerComponent("PlayProgressBar",nG);/**
 * @file mouse-time-display.js
 *//**
 * The {@link MouseTimeDisplay} component tracks mouse movement over the
 * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}
 * indicating the time which is represented by a given point in the
 * {@link ProgressControl}.
 *
 * @extends Component
 */class nX extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.update=sm(sp(this,this.update),30)}/**
   * Create the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return super.createEl("div",{className:"vjs-mouse-display"})}/**
   * Enqueues updates to its own DOM as well as the DOM of its
   * {@link TimeTooltip} child.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */update(e,t){let i=t*this.player_.duration();this.getChild("timeTooltip").updateTime(e,t,i,()=>{this.el_.style.left=`${e.width*t}px`})}}/**
 * Default options for `MouseTimeDisplay`
 *
 * @type {Object}
 * @private
 */nX.prototype.options_={children:["timeTooltip"]},sN.registerComponent("MouseTimeDisplay",nX);/**
 * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}
 * as its `bar`.
 *
 * @extends Slider
 */class nK extends nz{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.setEventHandlers_()}/**
   * Sets the event handlers
   *
   * @private
   */setEventHandlers_(){this.update_=sp(this,this.update),this.update=sm(this.update_,30),this.on(this.player_,["ended","durationchange","timeupdate"],this.update),this.player_.liveTracker&&this.on(this.player_.liveTracker,"liveedgechange",this.update),// when playing, let's ensure we smoothly update the play progress bar
// via an interval
this.updateInterval=null,this.enableIntervalHandler_=e=>this.enableInterval_(e),this.disableIntervalHandler_=e=>this.disableInterval_(e),this.on(this.player_,["playing"],this.enableIntervalHandler_),this.on(this.player_,["ended","pause","waiting"],this.disableIntervalHandler_),"hidden"in /*@__PURE__*/w(A)&&"visibilityState"in /*@__PURE__*/w(A)&&this.on(/*@__PURE__*/w(A),"visibilitychange",this.toggleVisibility_)}toggleVisibility_(e){"hidden"===/*@__PURE__*/w(A).visibilityState?(this.cancelNamedAnimationFrame("SeekBar#update"),this.cancelNamedAnimationFrame("Slider#update"),this.disableInterval_(e)):(this.player_.ended()||this.player_.paused()||this.enableInterval_(),// we just switched back to the page and someone may be looking, so, update ASAP
this.update())}enableInterval_(){this.updateInterval||(this.updateInterval=this.setInterval(this.update,30))}disableInterval_(e){this.player_.liveTracker&&this.player_.liveTracker.isLive()&&e&&"ended"!==e.type||!this.updateInterval||(this.clearInterval(this.updateInterval),this.updateInterval=null)}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return super.createEl("div",{className:"vjs-progress-holder"},{"aria-label":this.localize("Progress Bar")})}/**
   * This function updates the play progress bar and accessibility
   * attributes to whatever is passed in.
   *
   * @param {Event} [event]
   *        The `timeupdate` or `ended` event that caused this to run.
   *
   * @listens Player#timeupdate
   *
   * @return {number}
   *          The current percent at a number from 0-1
   */update(e){// ignore updates while the tab is hidden
if("hidden"===/*@__PURE__*/w(A).visibilityState)return;let t=super.update();return this.requestNamedAnimationFrame("SeekBar#update",()=>{let e=this.player_.ended()?this.player_.duration():this.getCurrentTime_(),i=this.player_.liveTracker,r=this.player_.duration();i&&i.isLive()&&(r=this.player_.liveTracker.liveCurrentTime()),this.percent_!==t&&(// machine readable value of progress bar (percentage complete)
this.el_.setAttribute("aria-valuenow",(100*t).toFixed(2)),this.percent_=t),(this.currentTime_!==e||this.duration_!==r)&&(// human readable value of progress bar (time complete)
this.el_.setAttribute("aria-valuetext",this.localize("progress bar timing: currentTime={1} duration={2}",[sH(e,r),sH(r,r)],"{1} of {2}")),this.currentTime_=e,this.duration_=r),this.bar&&this.bar.update(rV(this.el()),this.getProgress())}),t}/**
   * Prevent liveThreshold from causing seeks to seem like they
   * are not happening from a user perspective.
   *
   * @param {number} ct
   *        current time to seek to
   */userSeek_(e){this.player_.liveTracker&&this.player_.liveTracker.isLive()&&this.player_.liveTracker.nextSeekedFromUser(),this.player_.currentTime(e)}/**
   * Get the value of current time but allows for smooth scrubbing,
   * when player can't keep up.
   *
   * @return {number}
   *         The current time value to display
   *
   * @private
   */getCurrentTime_(){return this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime()}/**
   * Get the percentage of media played so far.
   *
   * @return {number}
   *         The percentage of media played so far (0 to 1).
   */getPercent(){let e;let t=this.getCurrentTime_(),i=this.player_.liveTracker;return i&&i.isLive()?(e=(t-i.seekableStart())/i.liveWindow(),i.atLiveEdge()&&(e=1)):e=t/this.player_.duration(),e}/**
   * Handle mouse down on seek bar
   *
   * @param {MouseEvent} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */handleMouseDown(e){rJ(e)&&(// Stop event propagation to prevent double fire in progress-control.js
e.stopPropagation(),this.videoWasPlaying=!this.player_.paused(),this.player_.pause(),super.handleMouseDown(e))}/**
   * Handle mouse move on seek bar
   *
   * @param {MouseEvent} event
   *        The `mousemove` event that caused this to run.
   * @param {boolean} mouseDown this is a flag that should be set to true if `handleMouseMove` is called directly. It allows us to skip things that should not happen if coming from mouse down but should happen on regular mouse move handler. Defaults to false
   *
   * @listens mousemove
   */handleMouseMove(e,t=!1){let i;if(!rJ(e)||isNaN(this.player_.duration()))return;t||this.player_.scrubbing()||this.player_.scrubbing(!0);let r=this.calculateDistance(e),s=this.player_.liveTracker;if(s&&s.isLive()){if(r>=.99){s.seekToLiveEdge();return}let e=s.seekableStart(),t=s.liveCurrentTime();// On android seekableEnd can be Infinity sometimes,
// this will cause newTime to be Infinity, which is
// not a valid currentTime.
if((i=e+r*s.liveWindow())>=t&&(i=t),i<=e&&(i=e+.1),i===1/0)return}else// Don't let video end while scrubbing.
(i=r*this.player_.duration())===this.player_.duration()&&(i-=.1);// Set new time (tell player to seek to new time)
this.userSeek_(i)}enable(){super.enable();let e=this.getChild("mouseTimeDisplay");e&&e.show()}disable(){super.disable();let e=this.getChild("mouseTimeDisplay");e&&e.hide()}/**
   * Handle mouse up on seek bar
   *
   * @param {MouseEvent} event
   *        The `mouseup` event that caused this to run.
   *
   * @listens mouseup
   */handleMouseUp(e){super.handleMouseUp(e),e&&e.stopPropagation(),this.player_.scrubbing(!1),/**
     * Trigger timeupdate because we're done seeking and the time has changed.
     * This is particularly useful for if the player is paused to time the time displays.
     *
     * @event Tech#timeupdate
     * @type {Event}
     */this.player_.trigger({type:"timeupdate",target:this,manuallyTriggered:!0}),this.videoWasPlaying?sX(this.player_.play()):// If the player is paused, make sure we display the correct time on the seek bar.
this.update_()}/**
   * Move more quickly fast forward for keyboard-only users
   */stepForward(){this.userSeek_(this.player_.currentTime()+5)}/**
   * Move more quickly rewind for keyboard-only users
   */stepBack(){this.userSeek_(this.player_.currentTime()-5)}/**
   * Toggles the playback state of the player
   * This gets called when enter or space is used on the seekbar
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called
   *
   */handleAction(e){this.player_.paused()?this.player_.play():this.player_.pause()}/**
   * Called when this SeekBar has focus and a key gets pressed down.
   * Supports the following keys:
   *
   *   Space or Enter key fire a click event
   *   Home key moves to start of the timeline
   *   End key moves to end of the timeline
   *   Digit "0" through "9" keys move to 0%, 10% ... 80%, 90% of the timeline
   *   PageDown key moves back a larger step than ArrowDown
   *   PageUp key moves forward a large step
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */handleKeyDown(e){let t=this.player_.liveTracker;if(/*@__PURE__*/w(L).isEventKey(e,"Space")||/*@__PURE__*/w(L).isEventKey(e,"Enter"))e.preventDefault(),e.stopPropagation(),this.handleAction(e);else if(/*@__PURE__*/w(L).isEventKey(e,"Home"))e.preventDefault(),e.stopPropagation(),this.userSeek_(0);else if(/*@__PURE__*/w(L).isEventKey(e,"End"))e.preventDefault(),e.stopPropagation(),t&&t.isLive()?this.userSeek_(t.liveCurrentTime()):this.userSeek_(this.player_.duration());else if(/^[0-9]$/.test(/*@__PURE__*/w(L)(e))){e.preventDefault(),e.stopPropagation();let i=(/*@__PURE__*/w(L).codes[/*@__PURE__*/w(L)(e)]-/*@__PURE__*/w(L).codes["0"])*10/100;t&&t.isLive()?this.userSeek_(t.seekableStart()+t.liveWindow()*i):this.userSeek_(this.player_.duration()*i)}else /*@__PURE__*/w(L).isEventKey(e,"PgDn")?(e.preventDefault(),e.stopPropagation(),this.userSeek_(this.player_.currentTime()-60)):/*@__PURE__*/w(L).isEventKey(e,"PgUp")?(e.preventDefault(),e.stopPropagation(),this.userSeek_(this.player_.currentTime()+60)):super.handleKeyDown(e)}dispose(){this.disableInterval_(),this.off(this.player_,["ended","durationchange","timeupdate"],this.update),this.player_.liveTracker&&this.off(this.player_.liveTracker,"liveedgechange",this.update),this.off(this.player_,["playing"],this.enableIntervalHandler_),this.off(this.player_,["ended","pause","waiting"],this.disableIntervalHandler_),"hidden"in /*@__PURE__*/w(A)&&"visibilityState"in /*@__PURE__*/w(A)&&this.off(/*@__PURE__*/w(A),"visibilitychange",this.toggleVisibility_),super.dispose()}}/**
 * Default options for the `SeekBar`
 *
 * @type {Object}
 * @private
 */nK.prototype.options_={children:["loadProgressBar","playProgressBar"],barName:"playProgressBar"},rS||rl||nK.prototype.options_.children.splice(1,0,"mouseTimeDisplay"),sN.registerComponent("SeekBar",nK);/**
 * @file progress-control.js
 *//**
 * The Progress Control component contains the seek bar, load progress,
 * and play progress.
 *
 * @extends Component
 */class nY extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.handleMouseMove=sm(sp(this,this.handleMouseMove),30),this.throttledHandleMouseSeek=sm(sp(this,this.handleMouseSeek),30),this.handleMouseUpHandler_=e=>this.handleMouseUp(e),this.handleMouseDownHandler_=e=>this.handleMouseDown(e),this.enable()}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return super.createEl("div",{className:"vjs-progress-control vjs-control"})}/**
   * When the mouse moves over the `ProgressControl`, the pointer position
   * gets passed down to the `MouseTimeDisplay` component.
   *
   * @param {Event} event
   *        The `mousemove` event that caused this function to run.
   *
   * @listen mousemove
   */handleMouseMove(e){let t=this.getChild("seekBar");if(!t)return;let i=t.getChild("playProgressBar"),r=t.getChild("mouseTimeDisplay");if(!i&&!r)return;let s=t.el(),n=rz(s),a=rW(s,e).x;// The default skin has a gap on either side of the `SeekBar`. This means
// that it's possible to trigger this behavior outside the boundaries of
// the `SeekBar`. This ensures we stay within it at all times.
a=nH(a,0,1),r&&r.update(n,a),i&&i.update(n,t.getProgress())}/**
   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.
   *
   * @method ProgressControl#throttledHandleMouseSeek
   * @param {Event} event
   *        The `mousemove` event that caused this function to run.
   *
   * @listen mousemove
   * @listen touchmove
   *//**
   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousemove
   * @listens touchmove
   */handleMouseSeek(e){let t=this.getChild("seekBar");t&&t.handleMouseMove(e)}/**
   * Are controls are currently enabled for this progress control.
   *
   * @return {boolean}
   *         true if controls are enabled, false otherwise
   */enabled(){return this.enabled_}/**
   * Disable all controls on the progress control and its children
   */disable(){if(this.children().forEach(e=>e.disable&&e.disable()),this.enabled()&&(this.off(["mousedown","touchstart"],this.handleMouseDownHandler_),this.off(this.el_,"mousemove",this.handleMouseMove),this.removeListenersAddedOnMousedownAndTouchstart(),this.addClass("disabled"),this.enabled_=!1,this.player_.scrubbing())){let e=this.getChild("seekBar");this.player_.scrubbing(!1),e.videoWasPlaying&&sX(this.player_.play())}}/**
   * Enable all controls on the progress control and its children
   */enable(){this.children().forEach(e=>e.enable&&e.enable()),this.enabled()||(this.on(["mousedown","touchstart"],this.handleMouseDownHandler_),this.on(this.el_,"mousemove",this.handleMouseMove),this.removeClass("disabled"),this.enabled_=!0)}/**
   * Cleanup listeners after the user finishes interacting with the progress controls
   */removeListenersAddedOnMousedownAndTouchstart(){let e=this.el_.ownerDocument;this.off(e,"mousemove",this.throttledHandleMouseSeek),this.off(e,"touchmove",this.throttledHandleMouseSeek),this.off(e,"mouseup",this.handleMouseUpHandler_),this.off(e,"touchend",this.handleMouseUpHandler_)}/**
   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */handleMouseDown(e){let t=this.el_.ownerDocument,i=this.getChild("seekBar");i&&i.handleMouseDown(e),this.on(t,"mousemove",this.throttledHandleMouseSeek),this.on(t,"touchmove",this.throttledHandleMouseSeek),this.on(t,"mouseup",this.handleMouseUpHandler_),this.on(t,"touchend",this.handleMouseUpHandler_)}/**
   * Handle `mouseup` or `touchend` events on the `ProgressControl`.
   *
   * @param {Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   */handleMouseUp(e){let t=this.getChild("seekBar");t&&t.handleMouseUp(e),this.removeListenersAddedOnMousedownAndTouchstart()}}/**
 * Default options for `ProgressControl`
 *
 * @type {Object}
 * @private
 */nY.prototype.options_={children:["seekBar"]},sN.registerComponent("ProgressControl",nY);/**
 * @file picture-in-picture-toggle.js
 *//**
 * Toggle Picture-in-Picture mode
 *
 * @extends Button
 */class nQ extends nN{/**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @listens Player#enterpictureinpicture
   * @listens Player#leavepictureinpicture
   */constructor(e,t){super(e,t),this.setIcon("picture-in-picture-enter"),this.on(e,["enterpictureinpicture","leavepictureinpicture"],e=>this.handlePictureInPictureChange(e)),this.on(e,["disablepictureinpicturechanged","loadedmetadata"],e=>this.handlePictureInPictureEnabledChange(e)),this.on(e,["loadedmetadata","audioonlymodechange","audiopostermodechange"],()=>this.handlePictureInPictureAudioModeChange()),// TODO: Deactivate button on player emptied event.
this.disable()}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-picture-in-picture-control vjs-hidden ${super.buildCSSClass()}`}/**
   * Displays or hides the button depending on the audio mode detection.
   * Exits picture-in-picture if it is enabled when switching to audio mode.
   */handlePictureInPictureAudioModeChange(){// This audio detection will not detect HLS or DASH audio-only streams because there was no reliable way to detect them at the time
let e="audio"===this.player_.currentType().substring(0,5),t=e||this.player_.audioPosterMode()||this.player_.audioOnlyMode();if(!t){this.show();return}this.player_.isInPictureInPicture()&&this.player_.exitPictureInPicture(),this.hide()}/**
   * Enables or disables button based on availability of a Picture-In-Picture mode.
   *
   * Enabled if
   * - `player.options().enableDocumentPictureInPicture` is true and
   *   window.documentPictureInPicture is available; or
   * - `player.disablePictureInPicture()` is false and
   *   element.requestPictureInPicture is available
   */handlePictureInPictureEnabledChange(){/*@__PURE__*/w(A).pictureInPictureEnabled&&!1===this.player_.disablePictureInPicture()||this.player_.options_.enableDocumentPictureInPicture&&"documentPictureInPicture"in /*@__PURE__*/w(I)?this.enable():this.disable()}/**
   * Handles enterpictureinpicture and leavepictureinpicture on the player and change control text accordingly.
   *
   * @param {Event} [event]
   *        The {@link Player#enterpictureinpicture} or {@link Player#leavepictureinpicture} event that caused this function to be
   *        called.
   *
   * @listens Player#enterpictureinpicture
   * @listens Player#leavepictureinpicture
   */handlePictureInPictureChange(e){this.player_.isInPictureInPicture()?(this.setIcon("picture-in-picture-exit"),this.controlText("Exit Picture-in-Picture")):(this.setIcon("picture-in-picture-enter"),this.controlText("Picture-in-Picture")),this.handlePictureInPictureEnabledChange()}/**
   * This gets called when an `PictureInPictureToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){this.player_.isInPictureInPicture()?this.player_.exitPictureInPicture():this.player_.requestPictureInPicture()}/**
   * Show the `Component`s element if it is hidden by removing the
   * 'vjs-hidden' class name from it only in browsers that support the Picture-in-Picture API.
   */show(){// Does not allow to display the pictureInPictureToggle in browsers that do not support the Picture-in-Picture API, e.g. Firefox.
"function"==typeof /*@__PURE__*/w(A).exitPictureInPicture&&super.show()}}/**
 * The text that should display over the `PictureInPictureToggle`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */nQ.prototype.controlText_="Picture-in-Picture",sN.registerComponent("PictureInPictureToggle",nQ);/**
 * @file fullscreen-toggle.js
 *//**
 * Toggle fullscreen video
 *
 * @extends Button
 */class nJ extends nN{/**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.setIcon("fullscreen-enter"),this.on(e,"fullscreenchange",e=>this.handleFullscreenChange(e)),!1===/*@__PURE__*/w(A)[e.fsApi_.fullscreenEnabled]&&this.disable()}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-fullscreen-control ${super.buildCSSClass()}`}/**
   * Handles fullscreenchange on the player and change control text accordingly.
   *
   * @param {Event} [event]
   *        The {@link Player#fullscreenchange} event that caused this function to be
   *        called.
   *
   * @listens Player#fullscreenchange
   */handleFullscreenChange(e){this.player_.isFullscreen()?(this.controlText("Exit Fullscreen"),this.setIcon("fullscreen-exit")):(this.controlText("Fullscreen"),this.setIcon("fullscreen-enter"))}/**
   * This gets called when an `FullscreenToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){this.player_.isFullscreen()?this.player_.exitFullscreen():this.player_.requestFullscreen()}}/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */nJ.prototype.controlText_="Fullscreen",sN.registerComponent("FullscreenToggle",nJ);/**
 * Check if volume control is supported and if it isn't hide the
 * `Component` that was passed  using the `vjs-hidden` class.
 *
 * @param { import('../../component').default } self
 *        The component that should be hidden if volume is unsupported
 *
 * @param { import('../../player').default } player
 *        A reference to the player
 *
 * @private
 */const nZ=function(e,t){t.tech_&&!t.tech_.featuresVolumeControl&&e.addClass("vjs-hidden"),e.on(t,"loadstart",function(){t.tech_.featuresVolumeControl?e.removeClass("vjs-hidden"):e.addClass("vjs-hidden")})};sN.registerComponent("VolumeLevel",/**
 * @file volume-level.js
 *//**
 * Shows volume level
 *
 * @extends Component
 */class extends sN{/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){let e=super.createEl("div",{className:"vjs-volume-level"});return this.setIcon("circle",e),e.appendChild(super.createEl("span",{className:"vjs-control-text"})),e}}),sN.registerComponent("VolumeLevelTooltip",/**
 * @file volume-level-tooltip.js
 *//**
 * Volume level tooltips display a volume above or side by side the volume bar.
 *
 * @extends Component
 */class extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.update=sm(sp(this,this.update),30)}/**
   * Create the volume tooltip DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return super.createEl("div",{className:"vjs-volume-tooltip"},{"aria-hidden":"true"})}/**
   * Updates the position of the tooltip relative to the `VolumeBar` and
   * its content text.
   *
   * @param {Object} rangeBarRect
   *        The `ClientRect` for the {@link VolumeBar} element.
   *
   * @param {number} rangeBarPoint
   *        A number from 0 to 1, representing a horizontal/vertical reference point
   *        from the left edge of the {@link VolumeBar}
   *
   * @param {boolean} vertical
   *        Referees to the Volume control position
   *        in the control bar{@link VolumeControl}
   *
   */update(e,t,i,r){if(!i){let i=rV(this.el_),r=rV(this.player_.el()),s=e.width*t;if(!r||!i)return;let n=e.left-r.left+s,a=e.width-s+(r.right-e.right),o=i.width/2;n<o?o+=o-n:a<o&&(o=a),o<0?o=0:o>i.width&&(o=i.width),this.el_.style.right=`-${o}px`}this.write(`${r}%`)}/**
   * Write the volume to the tooltip DOM element.
   *
   * @param {string} content
   *        The formatted volume for the tooltip.
   */write(e){rL(this.el_,e)}/**
   * Updates the position of the volume tooltip relative to the `VolumeBar`.
   *
   * @param {Object} rangeBarRect
   *        The `ClientRect` for the {@link VolumeBar} element.
   *
   * @param {number} rangeBarPoint
   *        A number from 0 to 1, representing a horizontal/vertical reference point
   *        from the left edge of the {@link VolumeBar}
   *
   * @param {boolean} vertical
   *        Referees to the Volume control position
   *        in the control bar{@link VolumeControl}
   *
   * @param {number} volume
   *        The volume level to update the tooltip to
   *
   * @param {Function} cb
   *        A function that will be called during the request animation frame
   *        for tooltips that need to do additional animations from the default
   */updateVolume(e,t,i,r,s){this.requestNamedAnimationFrame("VolumeLevelTooltip#updateVolume",()=>{this.update(e,t,i,r.toFixed(0)),s&&s()})}});/**
 * @file mouse-volume-level-display.js
 *//**
 * The {@link MouseVolumeLevelDisplay} component tracks mouse movement over the
 * {@link VolumeControl}. It displays an indicator and a {@link VolumeLevelTooltip}
 * indicating the volume level which is represented by a given point in the
 * {@link VolumeBar}.
 *
 * @extends Component
 */class n0 extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.update=sm(sp(this,this.update),30)}/**
   * Create the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return super.createEl("div",{className:"vjs-mouse-display"})}/**
   * Enquires updates to its own DOM as well as the DOM of its
   * {@link VolumeLevelTooltip} child.
   *
   * @param {Object} rangeBarRect
   *        The `ClientRect` for the {@link VolumeBar} element.
   *
   * @param {number} rangeBarPoint
   *        A number from 0 to 1, representing a horizontal/vertical reference point
   *        from the left edge of the {@link VolumeBar}
   *
   * @param {boolean} vertical
   *        Referees to the Volume control position
   *        in the control bar{@link VolumeControl}
   *
   */update(e,t,i){let r=100*t;this.getChild("volumeLevelTooltip").updateVolume(e,t,i,r,()=>{i?this.el_.style.bottom=`${e.height*t}px`:this.el_.style.left=`${e.width*t}px`})}}/**
 * Default options for `MouseVolumeLevelDisplay`
 *
 * @type {Object}
 * @private
 */n0.prototype.options_={children:["volumeLevelTooltip"]},sN.registerComponent("MouseVolumeLevelDisplay",n0);/**
 * @file volume-bar.js
 *//**
 * The bar that contains the volume level and can be clicked on to adjust the level
 *
 * @extends Slider
 */class n1 extends nz{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.on("slideractive",e=>this.updateLastVolume_(e)),this.on(e,"volumechange",e=>this.updateARIAAttributes(e)),e.ready(()=>this.updateARIAAttributes())}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return super.createEl("div",{className:"vjs-volume-bar vjs-slider-bar"},{"aria-label":this.localize("Volume Level"),"aria-live":"polite"})}/**
   * Handle mouse down on volume bar
   *
   * @param {Event} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */handleMouseDown(e){rJ(e)&&super.handleMouseDown(e)}/**
   * Handle movement events on the {@link VolumeMenuButton}.
   *
   * @param {Event} event
   *        The event that caused this function to run.
   *
   * @listens mousemove
   */handleMouseMove(e){let t=this.getChild("mouseVolumeLevelDisplay");if(t){let i=this.el(),r=rV(i),s=this.vertical(),n=rW(i,e);// The default skin has a gap on either side of the `VolumeBar`. This means
// that it's possible to trigger this behavior outside the boundaries of
// the `VolumeBar`. This ensures we stay within it at all times.
n=nH(n=s?n.y:n.x,0,1),t.update(r,n,s)}rJ(e)&&(this.checkMuted(),this.player_.volume(this.calculateDistance(e)))}/**
   * If the player is muted unmute it.
   */checkMuted(){this.player_.muted()&&this.player_.muted(!1)}/**
   * Get percent of volume level
   *
   * @return {number}
   *         Volume level percent as a decimal number.
   */getPercent(){return this.player_.muted()?0:this.player_.volume()}/**
   * Increase volume level for keyboard users
   */stepForward(){this.checkMuted(),this.player_.volume(this.player_.volume()+.1)}/**
   * Decrease volume level for keyboard users
   */stepBack(){this.checkMuted(),this.player_.volume(this.player_.volume()-.1)}/**
   * Update ARIA accessibility attributes
   *
   * @param {Event} [event]
   *        The `volumechange` event that caused this function to run.
   *
   * @listens Player#volumechange
   */updateARIAAttributes(e){let t=this.player_.muted()?0:this.volumeAsPercentage_();this.el_.setAttribute("aria-valuenow",t),this.el_.setAttribute("aria-valuetext",t+"%")}/**
   * Returns the current value of the player volume as a percentage
   *
   * @private
   */volumeAsPercentage_(){return Math.round(100*this.player_.volume())}/**
   * When user starts dragging the VolumeBar, store the volume and listen for
   * the end of the drag. When the drag ends, if the volume was set to zero,
   * set lastVolume to the stored volume.
   *
   * @listens slideractive
   * @private
   */updateLastVolume_(){let e=this.player_.volume();this.one("sliderinactive",()=>{0===this.player_.volume()&&this.player_.lastVolume_(e)})}}/**
 * Default options for the `VolumeBar`
 *
 * @type {Object}
 * @private
 */n1.prototype.options_={children:["volumeLevel"],barName:"volumeLevel"},rS||rl||n1.prototype.options_.children.splice(0,0,"mouseVolumeLevelDisplay"),/**
 * Call the update event for this Slider when this event happens on the player.
 *
 * @type {string}
 */n1.prototype.playerEvent="volumechange",sN.registerComponent("VolumeBar",n1);/**
 * @file volume-control.js
 *//**
 * The component for controlling the volume level
 *
 * @extends Component
 */class n2 extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */constructor(e,t={}){t.vertical=t.vertical||!1,(void 0===t.volumeBar||rt(t.volumeBar))&&(t.volumeBar=t.volumeBar||{},t.volumeBar.vertical=t.vertical),super(e,t),// hide this control if volume support is missing
nZ(this,e),this.throttledHandleMouseMove=sm(sp(this,this.handleMouseMove),30),this.handleMouseUpHandler_=e=>this.handleMouseUp(e),this.on("mousedown",e=>this.handleMouseDown(e)),this.on("touchstart",e=>this.handleMouseDown(e)),this.on("mousemove",e=>this.handleMouseMove(e)),// while the slider is active (the mouse has been pressed down and
// is dragging) or in focus we do not want to hide the VolumeBar
this.on(this.volumeBar,["focus","slideractive"],()=>{this.volumeBar.addClass("vjs-slider-active"),this.addClass("vjs-slider-active"),this.trigger("slideractive")}),this.on(this.volumeBar,["blur","sliderinactive"],()=>{this.volumeBar.removeClass("vjs-slider-active"),this.removeClass("vjs-slider-active"),this.trigger("sliderinactive")})}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){let e="vjs-volume-horizontal";return this.options_.vertical&&(e="vjs-volume-vertical"),super.createEl("div",{className:`vjs-volume-control vjs-control ${e}`})}/**
   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */handleMouseDown(e){let t=this.el_.ownerDocument;this.on(t,"mousemove",this.throttledHandleMouseMove),this.on(t,"touchmove",this.throttledHandleMouseMove),this.on(t,"mouseup",this.handleMouseUpHandler_),this.on(t,"touchend",this.handleMouseUpHandler_)}/**
   * Handle `mouseup` or `touchend` events on the `VolumeControl`.
   *
   * @param {Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   */handleMouseUp(e){let t=this.el_.ownerDocument;this.off(t,"mousemove",this.throttledHandleMouseMove),this.off(t,"touchmove",this.throttledHandleMouseMove),this.off(t,"mouseup",this.handleMouseUpHandler_),this.off(t,"touchend",this.handleMouseUpHandler_)}/**
   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
   *
   * @param {Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */handleMouseMove(e){this.volumeBar.handleMouseMove(e)}}/**
 * Default options for the `VolumeControl`
 *
 * @type {Object}
 * @private
 */n2.prototype.options_={children:["volumeBar"]},sN.registerComponent("VolumeControl",n2);/**
 * Check if muting volume is supported and if it isn't hide the mute toggle
 * button.
 *
 * @param { import('../../component').default } self
 *        A reference to the mute toggle button
 *
 * @param { import('../../player').default } player
 *        A reference to the player
 *
 * @private
 */const n4=function(e,t){t.tech_&&!t.tech_.featuresMuteControl&&e.addClass("vjs-hidden"),e.on(t,"loadstart",function(){t.tech_.featuresMuteControl?e.removeClass("vjs-hidden"):e.addClass("vjs-hidden")})};/**
 * @file mute-toggle.js
 *//**
 * A button component for muting the audio.
 *
 * @extends Button
 */class n8 extends nN{/**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),// hide this control if volume support is missing
n4(this,e),this.on(e,["loadstart","volumechange"],e=>this.update(e))}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-mute-control ${super.buildCSSClass()}`}/**
   * This gets called when an `MuteToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){let t=this.player_.volume(),i=this.player_.lastVolume_();if(0===t){let e=i<.1?.1:i;this.player_.volume(e),this.player_.muted(!1)}else this.player_.muted(!this.player_.muted())}/**
   * Update the `MuteToggle` button based on the state of `volume` and `muted`
   * on the player.
   *
   * @param {Event} [event]
   *        The {@link Player#loadstart} event if this function was called
   *        through an event.
   *
   * @listens Player#loadstart
   * @listens Player#volumechange
   */update(e){this.updateIcon_(),this.updateControlText_()}/**
   * Update the appearance of the `MuteToggle` icon.
   *
   * Possible states (given `level` variable below):
   * - 0: crossed out
   * - 1: zero bars of volume
   * - 2: one bar of volume
   * - 3: two bars of volume
   *
   * @private
   */updateIcon_(){let e=this.player_.volume(),t=3;this.setIcon("volume-high"),rS&&this.player_.tech_&&this.player_.tech_.el_&&this.player_.muted(this.player_.tech_.el_.muted),0===e||this.player_.muted()?(this.setIcon("volume-mute"),t=0):e<.33?(this.setIcon("volume-low"),t=1):e<.67&&(this.setIcon("volume-medium"),t=2),rN(this.el_,[0,1,2,3].reduce((e,t)=>e+`${t?" ":""}vjs-vol-${t}`,"")),rR(this.el_,`vjs-vol-${t}`)}/**
   * If `muted` has changed on the player, update the control text
   * (`title` attribute on `vjs-mute-control` element and content of
   * `vjs-control-text` element).
   *
   * @private
   */updateControlText_(){let e=this.player_.muted()||0===this.player_.volume(),t=e?"Unmute":"Mute";this.controlText()!==t&&this.controlText(t)}}/**
 * The text that should display over the `MuteToggle`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */n8.prototype.controlText_="Mute",sN.registerComponent("MuteToggle",n8);/**
 * @file volume-control.js
 *//**
 * A Component to contain the MuteToggle and VolumeControl so that
 * they can work together.
 *
 * @extends Component
 */class n5 extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */constructor(e,t={}){void 0!==t.inline?t.inline=t.inline:t.inline=!0,(void 0===t.volumeControl||rt(t.volumeControl))&&(t.volumeControl=t.volumeControl||{},t.volumeControl.vertical=!t.inline),super(e,t),// this handler is used by mouse handler methods below
this.handleKeyPressHandler_=e=>this.handleKeyPress(e),this.on(e,["loadstart"],e=>this.volumePanelState_(e)),this.on(this.muteToggle,"keyup",e=>this.handleKeyPress(e)),this.on(this.volumeControl,"keyup",e=>this.handleVolumeControlKeyUp(e)),this.on("keydown",e=>this.handleKeyPress(e)),this.on("mouseover",e=>this.handleMouseOver(e)),this.on("mouseout",e=>this.handleMouseOut(e)),// while the slider is active (the mouse has been pressed down and
// is dragging) we do not want to hide the VolumeBar
this.on(this.volumeControl,["slideractive"],this.sliderActive_),this.on(this.volumeControl,["sliderinactive"],this.sliderInactive_)}/**
   * Add vjs-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#slideractive
   * @private
   */sliderActive_(){this.addClass("vjs-slider-active")}/**
   * Removes vjs-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#sliderinactive
   * @private
   */sliderInactive_(){this.removeClass("vjs-slider-active")}/**
   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel
   * depending on MuteToggle and VolumeControl state
   *
   * @listens Player#loadstart
   * @private
   */volumePanelState_(){this.volumeControl.hasClass("vjs-hidden")&&this.muteToggle.hasClass("vjs-hidden")&&this.addClass("vjs-hidden"),this.volumeControl.hasClass("vjs-hidden")&&!this.muteToggle.hasClass("vjs-hidden")&&this.addClass("vjs-mute-toggle-only")}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){let e="vjs-volume-panel-horizontal";return this.options_.inline||(e="vjs-volume-panel-vertical"),super.createEl("div",{className:`vjs-volume-panel vjs-control ${e}`})}/**
   * Dispose of the `volume-panel` and all child components.
   */dispose(){this.handleMouseOut(),super.dispose()}/**
   * Handles `keyup` events on the `VolumeControl`, looking for ESC, which closes
   * the volume panel and sets focus on `MuteToggle`.
   *
   * @param {Event} event
   *        The `keyup` event that caused this function to be called.
   *
   * @listens keyup
   */handleVolumeControlKeyUp(e){/*@__PURE__*/w(L).isEventKey(e,"Esc")&&this.muteToggle.focus()}/**
   * This gets called when a `VolumePanel` gains hover via a `mouseover` event.
   * Turns on listening for `mouseover` event. When they happen it
   * calls `this.handleMouseOver`.
   *
   * @param {Event} event
   *        The `mouseover` event that caused this function to be called.
   *
   * @listens mouseover
   */handleMouseOver(e){this.addClass("vjs-hover"),so(/*@__PURE__*/w(A),"keyup",this.handleKeyPressHandler_)}/**
   * This gets called when a `VolumePanel` gains hover via a `mouseout` event.
   * Turns on listening for `mouseout` event. When they happen it
   * calls `this.handleMouseOut`.
   *
   * @param {Event} event
   *        The `mouseout` event that caused this function to be called.
   *
   * @listens mouseout
   */handleMouseOut(e){this.removeClass("vjs-hover"),sl(/*@__PURE__*/w(A),"keyup",this.handleKeyPressHandler_)}/**
   * Handles `keyup` event on the document or `keydown` event on the `VolumePanel`,
   * looking for ESC, which hides the `VolumeControl`.
   *
   * @param {Event} event
   *        The keypress that triggered this event.
   *
   * @listens keydown | keyup
   */handleKeyPress(e){/*@__PURE__*/w(L).isEventKey(e,"Esc")&&this.handleMouseOut()}}/**
 * Default options for the `VolumeControl`
 *
 * @type {Object}
 * @private
 */n5.prototype.options_={children:["muteToggle","volumeControl"]},sN.registerComponent("VolumePanel",n5),sN.registerComponent("SkipForward",/**
 * Button to skip forward a configurable amount of time
 * through a video. Renders in the control bar.
 *
 * e.g. options: {controlBar: {skipButtons: forward: 5}}
 *
 * @extends Button
 */class extends nN{constructor(e,t){super(e,t),this.validOptions=[5,10,30],this.skipTime=this.getSkipForwardTime(),this.skipTime&&this.validOptions.includes(this.skipTime)?(this.setIcon(`forward-${this.skipTime}`),this.controlText(this.localize("Skip forward {1} seconds",[this.skipTime])),this.show()):this.hide()}getSkipForwardTime(){let e=this.options_.playerOptions;return e.controlBar&&e.controlBar.skipButtons&&e.controlBar.skipButtons.forward}buildCSSClass(){return`vjs-skip-forward-${this.getSkipForwardTime()} ${super.buildCSSClass()}`}/**
   * On click, skips forward in the duration/seekable range by a configurable amount of seconds.
   * If the time left in the duration/seekable range is less than the configured 'skip forward' time,
   * skips to end of duration/seekable range.
   *
   * Handle a click on a `SkipForward` button
   *
   * @param {EventTarget~Event} event
   *        The `click` event that caused this function
   *        to be called
   */handleClick(e){let t;if(isNaN(this.player_.duration()))return;let i=this.player_.currentTime(),r=this.player_.liveTracker,s=r&&r.isLive()?r.seekableEnd():this.player_.duration();t=i+this.skipTime<=s?i+this.skipTime:s,this.player_.currentTime(t)}/**
   * Update control text on languagechange
   */handleLanguagechange(){this.controlText(this.localize("Skip forward {1} seconds",[this.skipTime]))}});/**
 * Button to skip backward a configurable amount of time
 * through a video. Renders in the control bar.
 *
 *  * e.g. options: {controlBar: {skipButtons: backward: 5}}
 *
 * @extends Button
 */class n3 extends nN{constructor(e,t){super(e,t),this.validOptions=[5,10,30],this.skipTime=this.getSkipBackwardTime(),this.skipTime&&this.validOptions.includes(this.skipTime)?(this.setIcon(`replay-${this.skipTime}`),this.controlText(this.localize("Skip backward {1} seconds",[this.skipTime])),this.show()):this.hide()}getSkipBackwardTime(){let e=this.options_.playerOptions;return e.controlBar&&e.controlBar.skipButtons&&e.controlBar.skipButtons.backward}buildCSSClass(){return`vjs-skip-backward-${this.getSkipBackwardTime()} ${super.buildCSSClass()}`}/**
   * On click, skips backward in the video by a configurable amount of seconds.
   * If the current time in the video is less than the configured 'skip backward' time,
   * skips to beginning of video or seekable range.
   *
   * Handle a click on a `SkipBackward` button
   *
   * @param {EventTarget~Event} event
   *        The `click` event that caused this function
   *        to be called
   */handleClick(e){let t;let i=this.player_.currentTime(),r=this.player_.liveTracker,s=r&&r.isLive()&&r.seekableStart();t=s&&i-this.skipTime<=s?s:i>=this.skipTime?i-this.skipTime:0,this.player_.currentTime(t)}/**
   * Update control text on languagechange
   */handleLanguagechange(){this.controlText(this.localize("Skip backward {1} seconds",[this.skipTime]))}}n3.prototype.controlText_="Skip Backward",sN.registerComponent("SkipBackward",n3);/**
 * @file menu.js
 *//**
 * The Menu component is used to build popup menus, including subtitle and
 * captions selection menus.
 *
 * @extends Component
 */class n6 extends sN{/**
   * Create an instance of this class.
   *
   * @param { import('../player').default } player
   *        the player that this component should attach to
   *
   * @param {Object} [options]
   *        Object of option names and values
   *
   */constructor(e,t){super(e,t),t&&(this.menuButton_=t.menuButton),this.focusedChild_=-1,this.on("keydown",e=>this.handleKeyDown(e)),// All the menu item instances share the same blur handler provided by the menu container.
this.boundHandleBlur_=e=>this.handleBlur(e),this.boundHandleTapClick_=e=>this.handleTapClick(e)}/**
   * Add event listeners to the {@link MenuItem}.
   *
   * @param {Object} component
   *        The instance of the `MenuItem` to add listeners to.
   *
   */addEventListenerForItem(e){e instanceof sN&&(this.on(e,"blur",this.boundHandleBlur_),this.on(e,["tap","click"],this.boundHandleTapClick_))}/**
   * Remove event listeners from the {@link MenuItem}.
   *
   * @param {Object} component
   *        The instance of the `MenuItem` to remove listeners.
   *
   */removeEventListenerForItem(e){e instanceof sN&&(this.off(e,"blur",this.boundHandleBlur_),this.off(e,["tap","click"],this.boundHandleTapClick_))}/**
   * This method will be called indirectly when the component has been added
   * before the component adds to the new menu instance by `addItem`.
   * In this case, the original menu instance will remove the component
   * by calling `removeChild`.
   *
   * @param {Object} component
   *        The instance of the `MenuItem`
   */removeChild(e){"string"==typeof e&&(e=this.getChild(e)),this.removeEventListenerForItem(e),super.removeChild(e)}/**
   * Add a {@link MenuItem} to the menu.
   *
   * @param {Object|string} component
   *        The name or instance of the `MenuItem` to add.
   *
   */addItem(e){let t=this.addChild(e);t&&this.addEventListenerForItem(t)}/**
   * Create the `Menu`s DOM element.
   *
   * @return {Element}
   *         the element that was created
   */createEl(){let e=this.options_.contentElType||"ul";this.contentEl_=rA(e,{className:"vjs-menu-content"}),this.contentEl_.setAttribute("role","menu");let t=super.createEl("div",{append:this.contentEl_,className:"vjs-menu"});return t.appendChild(this.contentEl_),// Prevent clicks from bubbling up. Needed for Menu Buttons,
// where a click on the parent is significant
so(t,"click",function(e){e.preventDefault(),e.stopImmediatePropagation()}),t}dispose(){this.contentEl_=null,this.boundHandleBlur_=null,this.boundHandleTapClick_=null,super.dispose()}/**
   * Called when a `MenuItem` loses focus.
   *
   * @param {Event} event
   *        The `blur` event that caused this function to be called.
   *
   * @listens blur
   */handleBlur(e){let t=e.relatedTarget||/*@__PURE__*/w(A).activeElement;// Close menu popup when a user clicks outside the menu
if(!this.children().some(e=>e.el()===t)){let e=this.menuButton_;e&&e.buttonPressed_&&t!==e.el().firstChild&&e.unpressButton()}}/**
   * Called when a `MenuItem` gets clicked or tapped.
   *
   * @param {Event} event
   *        The `click` or `tap` event that caused this function to be called.
   *
   * @listens click,tap
   */handleTapClick(e){// Unpress the associated MenuButton, and move focus back to it
if(this.menuButton_){this.menuButton_.unpressButton();let t=this.children();if(!Array.isArray(t))return;let i=t.filter(t=>t.el()===e.target)[0];i&&"CaptionSettingsMenuItem"!==i.name()&&this.menuButton_.focus()}}/**
   * Handle a `keydown` event on this menu. This listener is added in the constructor.
   *
   * @param {KeyboardEvent} event
   *        A `keydown` event that happened on the menu.
   *
   * @listens keydown
   */handleKeyDown(e){// Left and Down Arrows
/*@__PURE__*/w(L).isEventKey(e,"Left")||/*@__PURE__*/w(L).isEventKey(e,"Down")?(e.preventDefault(),e.stopPropagation(),this.stepForward()):(/*@__PURE__*/w(L).isEventKey(e,"Right")||/*@__PURE__*/w(L).isEventKey(e,"Up"))&&(e.preventDefault(),e.stopPropagation(),this.stepBack())}/**
   * Move to next (lower) menu item for keyboard users.
   */stepForward(){let e=0;void 0!==this.focusedChild_&&(e=this.focusedChild_+1),this.focus(e)}/**
   * Move to previous (higher) menu item for keyboard users.
   */stepBack(){let e=0;void 0!==this.focusedChild_&&(e=this.focusedChild_-1),this.focus(e)}/**
   * Set focus on a {@link MenuItem} in the `Menu`.
   *
   * @param {Object|string} [item=0]
   *        Index of child item set focus on.
   */focus(e=0){let t=this.children().slice(),i=t.length&&t[0].hasClass("vjs-menu-title");i&&t.shift(),t.length>0&&(e<0?e=0:e>=t.length&&(e=t.length-1),this.focusedChild_=e,t[e].el_.focus())}}sN.registerComponent("Menu",n6);/**
 * @file menu-button.js
 *//**
 * A `MenuButton` class for any popup {@link Menu}.
 *
 * @extends Component
 */class n7 extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */constructor(e,t={}){super(e,t),this.menuButton_=new nN(e,t),this.menuButton_.controlText(this.controlText_),this.menuButton_.el_.setAttribute("aria-haspopup","true");// Add buildCSSClass values to the button, not the wrapper
let i=nN.prototype.buildCSSClass();this.menuButton_.el_.className=this.buildCSSClass()+" "+i,this.menuButton_.removeClass("vjs-control"),this.addChild(this.menuButton_),this.update(),this.enabled_=!0;let r=e=>this.handleClick(e);this.handleMenuKeyUp_=e=>this.handleMenuKeyUp(e),this.on(this.menuButton_,"tap",r),this.on(this.menuButton_,"click",r),this.on(this.menuButton_,"keydown",e=>this.handleKeyDown(e)),this.on(this.menuButton_,"mouseenter",()=>{this.addClass("vjs-hover"),this.menu.show(),so(/*@__PURE__*/w(A),"keyup",this.handleMenuKeyUp_)}),this.on("mouseleave",e=>this.handleMouseLeave(e)),this.on("keydown",e=>this.handleSubmenuKeyDown(e))}/**
   * Update the menu based on the current state of its items.
   */update(){let e=this.createMenu();this.menu&&(this.menu.dispose(),this.removeChild(this.menu)),this.menu=e,this.addChild(e),/**
     * Track the state of the menu button
     *
     * @type {Boolean}
     * @private
     */this.buttonPressed_=!1,this.menuButton_.el_.setAttribute("aria-expanded","false"),this.items&&this.items.length<=this.hideThreshold_?(this.hide(),this.menu.contentEl_.removeAttribute("role")):(this.show(),this.menu.contentEl_.setAttribute("role","menu"))}/**
   * Create the menu and add all items to it.
   *
   * @return {Menu}
   *         The constructed menu
   */createMenu(){let e=new n6(this.player_,{menuButton:this});// Add a title list item to the top
if(/**
     * Hide the menu if the number of items is less than or equal to this threshold. This defaults
     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list
     * it here because every time we run `createMenu` we need to reset the value.
     *
     * @protected
     * @type {Number}
     */this.hideThreshold_=0,this.options_.title){let t=rA("li",{className:"vjs-menu-title",textContent:sP(this.options_.title),tabIndex:-1}),i=new sN(this.player_,{el:t});e.addItem(i)}if(this.items=this.createItems(),this.items)for(let t=0;t<this.items.length;t++)e.addItem(this.items[t]);return e}/**
   * Create the list of menu items. Specific to each subclass.
   *
   * @abstract
   */createItems(){}/**
   * Create the `MenuButtons`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */createEl(){return super.createEl("div",{className:this.buildWrapperCSSClass()},{})}/**
   * Overwrites the `setIcon` method from `Component`.
   * In this case, we want the icon to be appended to the menuButton.
   *
   * @param {string} name
   *         The icon name to be added.
   */setIcon(e){super.setIcon(e,this.menuButton_.el_)}/**
   * Allow sub components to stack CSS class names for the wrapper element
   *
   * @return {string}
   *         The constructed wrapper DOM `className`
   */buildWrapperCSSClass(){let e="vjs-menu-button";// If the inline option is passed, we want to use different styles altogether.
!0===this.options_.inline?e+="-inline":e+="-popup";// TODO: Fix the CSS so that this isn't necessary
let t=nN.prototype.buildCSSClass();return`vjs-menu-button ${e} ${t} ${super.buildCSSClass()}`}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){let e="vjs-menu-button";return!0===this.options_.inline?e+="-inline":e+="-popup",`vjs-menu-button ${e} ${super.buildCSSClass()}`}/**
   * Get or set the localized control text that will be used for accessibility.
   *
   * > NOTE: This will come from the internal `menuButton_` element.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.menuButton_.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */controlText(e,t=this.menuButton_.el()){return this.menuButton_.controlText(e,t)}/**
   * Dispose of the `menu-button` and all child components.
   */dispose(){this.handleMouseLeave(),super.dispose()}/**
   * Handle a click on a `MenuButton`.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){this.buttonPressed_?this.unpressButton():this.pressButton()}/**
   * Handle `mouseleave` for `MenuButton`.
   *
   * @param {Event} event
   *        The `mouseleave` event that caused this function to be called.
   *
   * @listens mouseleave
   */handleMouseLeave(e){this.removeClass("vjs-hover"),sl(/*@__PURE__*/w(A),"keyup",this.handleMenuKeyUp_)}/**
   * Set the focus to the actual button, not to this element
   */focus(){this.menuButton_.focus()}/**
   * Remove the focus from the actual button, not this element
   */blur(){this.menuButton_.blur()}/**
   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
   * {@link ClickableComponent#handleKeyDown} for instances where this is called.
   *
   * @param {Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */handleKeyDown(e){// Escape or Tab unpress the 'button'
/*@__PURE__*/w(L).isEventKey(e,"Esc")||/*@__PURE__*/w(L).isEventKey(e,"Tab")?(this.buttonPressed_&&this.unpressButton(),/*@__PURE__*/w(L).isEventKey(e,"Tab")||(e.preventDefault(),// Set focus back to the menu button's button
this.menuButton_.focus())):(/*@__PURE__*/w(L).isEventKey(e,"Up")||/*@__PURE__*/w(L).isEventKey(e,"Down"))&&!this.buttonPressed_&&(e.preventDefault(),this.pressButton())}/**
   * Handle a `keyup` event on a `MenuButton`. The listener for this is added in
   * the constructor.
   *
   * @param {Event} event
   *        Key press event
   *
   * @listens keyup
   */handleMenuKeyUp(e){// Escape hides popup menu
(/*@__PURE__*/w(L).isEventKey(e,"Esc")||/*@__PURE__*/w(L).isEventKey(e,"Tab"))&&this.removeClass("vjs-hover")}/**
   * This method name now delegates to `handleSubmenuKeyDown`. This means
   * anyone calling `handleSubmenuKeyPress` will not see their method calls
   * stop working.
   *
   * @param {Event} event
   *        The event that caused this function to be called.
   */handleSubmenuKeyPress(e){this.handleSubmenuKeyDown(e)}/**
   * Handle a `keydown` event on a sub-menu. The listener for this is added in
   * the constructor.
   *
   * @param {Event} event
   *        Key press event
   *
   * @listens keydown
   */handleSubmenuKeyDown(e){// Escape or Tab unpress the 'button'
(/*@__PURE__*/w(L).isEventKey(e,"Esc")||/*@__PURE__*/w(L).isEventKey(e,"Tab"))&&(this.buttonPressed_&&this.unpressButton(),/*@__PURE__*/w(L).isEventKey(e,"Tab")||(e.preventDefault(),// Set focus back to the menu button's button
this.menuButton_.focus()))}/**
   * Put the current `MenuButton` into a pressed state.
   */pressButton(){this.enabled_&&(this.buttonPressed_=!0,this.menu.show(),this.menu.lockShowing(),this.menuButton_.el_.setAttribute("aria-expanded","true"),rS&&rD()||this.menu.focus())}/**
   * Take the current `MenuButton` out of a pressed state.
   */unpressButton(){this.enabled_&&(this.buttonPressed_=!1,this.menu.unlockShowing(),this.menu.hide(),this.menuButton_.el_.setAttribute("aria-expanded","false"))}/**
   * Disable the `MenuButton`. Don't allow it to be clicked.
   */disable(){this.unpressButton(),this.enabled_=!1,this.addClass("vjs-disabled"),this.menuButton_.disable()}/**
   * Enable the `MenuButton`. Allow it to be clicked.
   */enable(){this.enabled_=!0,this.removeClass("vjs-disabled"),this.menuButton_.enable()}}sN.registerComponent("MenuButton",n7);/**
 * @file track-button.js
 *//**
 * The base class for buttons that toggle specific  track types (e.g. subtitles).
 *
 * @extends MenuButton
 */class n9 extends n7{/**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){let i=t.tracks;if(super(e,t),this.items.length<=1&&this.hide(),!i)return;let r=sp(this,this.update);i.addEventListener("removetrack",r),i.addEventListener("addtrack",r),i.addEventListener("labelchange",r),this.player_.on("ready",r),this.player_.on("dispose",function(){i.removeEventListener("removetrack",r),i.removeEventListener("addtrack",r),i.removeEventListener("labelchange",r)})}}sN.registerComponent("TrackButton",n9);/**
 * @file menu-keys.js
 *//**
  * All keys used for operation of a menu (`MenuButton`, `Menu`, and `MenuItem`)
  * Note that 'Enter' and 'Space' are not included here (otherwise they would
  * prevent the `MenuButton` and `MenuItem` from being keyboard-clickable)
 *
  * @typedef MenuKeys
  * @array
  */const ae=["Tab","Esc","Up","Down","Right","Left"];/**
 * @file menu-item.js
 *//**
 * The component for a menu item. `<li>`
 *
 * @extends ClickableComponent
 */class at extends nx{/**
   * Creates an instance of the this class.
   *
   * @param { import('../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   *
   */constructor(e,t){super(e,t),this.selectable=t.selectable,this.isSelected_=t.selected||!1,this.multiSelectable=t.multiSelectable,this.selected(this.isSelected_),this.selectable?this.multiSelectable?this.el_.setAttribute("role","menuitemcheckbox"):this.el_.setAttribute("role","menuitemradio"):this.el_.setAttribute("role","menuitem")}/**
   * Create the `MenuItem's DOM element
   *
   * @param {string} [type=li]
   *        Element's node type, not actually used, always set to `li`.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element
   *
   * @param {Object} [attrs={}]
   *        An object of attributes that should be set on the element
   *
   * @return {Element}
   *         The element that gets created.
   */createEl(e,t,i){// The control is textual, not just an icon
this.nonIconControl=!0;let r=super.createEl("li",Object.assign({className:"vjs-menu-item",tabIndex:-1},t),i),s=rA("span",{className:"vjs-menu-item-text",textContent:this.localize(this.options_.label)});return this.player_.options_.experimentalSvgIcons?r.appendChild(s):r.replaceChild(s,r.querySelector(".vjs-icon-placeholder")),r}/**
   * Ignore keys which are used by the menu, but pass any other ones up. See
   * {@link ClickableComponent#handleKeyDown} for instances where this is called.
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */handleKeyDown(e){ae.some(t=>/*@__PURE__*/w(L).isEventKey(e,t))||super.handleKeyDown(e)}/**
   * Any click on a `MenuItem` puts it into the selected state.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){this.selected(!0)}/**
   * Set the state for this menu item as selected or not.
   *
   * @param {boolean} selected
   *        if the menu item is selected or not
   */selected(e){this.selectable&&(e?(this.addClass("vjs-selected"),this.el_.setAttribute("aria-checked","true"),// aria-checked isn't fully supported by browsers/screen readers,
// so indicate selected state to screen reader in the control text.
this.controlText(", selected"),this.isSelected_=!0):(this.removeClass("vjs-selected"),this.el_.setAttribute("aria-checked","false"),// Indicate un-selected state to screen reader
this.controlText(""),this.isSelected_=!1))}}sN.registerComponent("MenuItem",at);/**
 * @file text-track-menu-item.js
 *//**
 * The specific menu item type for selecting a language within a text track kind
 *
 * @extends MenuItem
 */class ai extends at{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){let i=t.track,r=e.textTracks();// Modify options for parent MenuItem class's init.
t.label=i.label||i.language||"Unknown",t.selected="showing"===i.mode,super(e,t),this.track=i,// Determine the relevant kind(s) of tracks for this component and filter
// out empty kinds.
this.kinds=(t.kinds||[t.kind||this.track.kind]).filter(Boolean);let s=(...e)=>{this.handleTracksChange.apply(this,e)},n=(...e)=>{this.handleSelectedLanguageChange.apply(this,e)};// iOS7 doesn't dispatch change events to TextTrackLists when an
// associated track's mode changes. Without something like
// Object.observe() (also not present on iOS7), it's not
// possible to detect changes to the mode attribute and polyfill
// the change event. As a poor substitute, we manually dispatch
// change events whenever the controls modify the mode.
if(e.on(["loadstart","texttrackchange"],s),r.addEventListener("change",s),r.addEventListener("selectedlanguagechange",n),this.on("dispose",function(){e.off(["loadstart","texttrackchange"],s),r.removeEventListener("change",s),r.removeEventListener("selectedlanguagechange",n)}),void 0===r.onchange){let e;this.on(["tap","click"],function(){if("object"!=typeof /*@__PURE__*/w(I).Event)try{e=new/*@__PURE__*/(w(I)).Event("change")}catch(e){// continue regardless of error
}e||(e=/*@__PURE__*/w(A).createEvent("Event")).initEvent("change",!0,!0),r.dispatchEvent(e)})}// set the default state based on current tracks
this.handleTracksChange()}/**
   * This gets called when an `TextTrackMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){let t=this.track,i=this.player_.textTracks();if(super.handleClick(e),i)for(let e=0;e<i.length;e++){let r=i[e];// If the track from the text tracks list is not of the right kind,
// skip it. We do not want to affect tracks of incompatible kind(s).
-1!==this.kinds.indexOf(r.kind)&&(r===t?"showing"!==r.mode&&(r.mode="showing"):"disabled"!==r.mode&&(r.mode="disabled"))}}/**
   * Handle text track list change
   *
   * @param {Event} event
   *        The `change` event that caused this function to be called.
   *
   * @listens TextTrackList#change
   */handleTracksChange(e){let t="showing"===this.track.mode;// Prevent redundant selected() calls because they may cause
// screen readers to read the appended control text unnecessarily
t!==this.isSelected_&&this.selected(t)}handleSelectedLanguageChange(e){if("showing"===this.track.mode){let e=this.player_.cache_.selectedLanguage;// Don't replace the kind of track across the same language
e&&e.enabled&&e.language===this.track.language&&e.kind!==this.track.kind||(this.player_.cache_.selectedLanguage={enabled:!0,language:this.track.language,kind:this.track.kind})}}dispose(){// remove reference to track object on dispose
this.track=null,super.dispose()}}sN.registerComponent("TextTrackMenuItem",ai);/**
 * @file off-text-track-menu-item.js
 *//**
 * A special menu item for turning off a specific type of text track
 *
 * @extends TextTrackMenuItem
 */class ar extends ai{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){// Create pseudo track info
// Requires options['kind']
t.track={player:e,// it is no longer necessary to store `kind` or `kinds` on the track itself
// since they are now stored in the `kinds` property of all instances of
// TextTrackMenuItem, but this will remain for backwards compatibility
kind:t.kind,kinds:t.kinds,default:!1,mode:"disabled"},t.kinds||(t.kinds=[t.kind]),t.label?t.track.label=t.label:t.track.label=t.kinds.join(" and ")+" off",// MenuItem is selectable
t.selectable=!0,// MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
t.multiSelectable=!1,super(e,t)}/**
   * Handle text track change
   *
   * @param {Event} event
   *        The event that caused this function to run
   */handleTracksChange(e){let t=this.player().textTracks(),i=!0;for(let e=0,r=t.length;e<r;e++){let r=t[e];if(this.options_.kinds.indexOf(r.kind)>-1&&"showing"===r.mode){i=!1;break}}// Prevent redundant selected() calls because they may cause
// screen readers to read the appended control text unnecessarily
i!==this.isSelected_&&this.selected(i)}handleSelectedLanguageChange(e){let t=this.player().textTracks(),i=!0;for(let e=0,r=t.length;e<r;e++){let r=t[e];if(["captions","descriptions","subtitles"].indexOf(r.kind)>-1&&"showing"===r.mode){i=!1;break}}i&&(this.player_.cache_.selectedLanguage={enabled:!1})}/**
   * Update control text and label on languagechange
   */handleLanguagechange(){this.$(".vjs-menu-item-text").textContent=this.player_.localize(this.options_.label),super.handleLanguagechange()}}sN.registerComponent("OffTextTrackMenuItem",ar);/**
 * @file text-track-button.js
 *//**
 * The base class for buttons that toggle specific text track types (e.g. subtitles)
 *
 * @extends MenuButton
 */class as extends n9{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */constructor(e,t={}){t.tracks=e.textTracks(),super(e,t)}/**
   * Create a menu item for each text track
   *
   * @param {TextTrackMenuItem[]} [items=[]]
   *        Existing array of items to use during creation
   *
   * @return {TextTrackMenuItem[]}
   *         Array of menu items that were created
   */createItems(e=[],t=ai){let i;this.label_&&(i=`${this.label_} off`),// Add an OFF menu item to turn all tracks off
e.push(new ar(this.player_,{kinds:this.kinds_,kind:this.kind_,label:i})),this.hideThreshold_+=1;let r=this.player_.textTracks();Array.isArray(this.kinds_)||(this.kinds_=[this.kind_]);for(let i=0;i<r.length;i++){let s=r[i];// only add tracks that are of an appropriate kind and have a label
if(this.kinds_.indexOf(s.kind)>-1){let i=new t(this.player_,{track:s,kinds:this.kinds_,kind:this.kind_,// MenuItem is selectable
selectable:!0,// MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
multiSelectable:!1});i.addClass(`vjs-${s.kind}-menu-item`),e.push(i)}}return e}}sN.registerComponent("TextTrackButton",as);/**
 * @file chapters-track-menu-item.js
 *//**
 * The chapter track menu item
 *
 * @extends MenuItem
 */class an extends at{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){let i=t.track,r=t.cue,s=e.currentTime();// Modify options for parent MenuItem class's init.
t.selectable=!0,t.multiSelectable=!1,t.label=r.text,t.selected=r.startTime<=s&&s<r.endTime,super(e,t),this.track=i,this.cue=r}/**
   * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){super.handleClick(),this.player_.currentTime(this.cue.startTime)}}sN.registerComponent("ChaptersTrackMenuItem",an);/**
 * @file chapters-button.js
 *//**
 * The button component for toggling and selecting chapters
 * Chapters act much differently than other text tracks
 * Cues are navigation vs. other tracks of alternative languages
 *
 * @extends TextTrackButton
 */class aa extends as{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this function is ready.
   */constructor(e,t,i){super(e,t,i),this.setIcon("chapters"),this.selectCurrentItem_=()=>{this.items.forEach(e=>{e.selected(this.track_.activeCues[0]===e.cue)})}}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-chapters-button ${super.buildCSSClass()}`}buildWrapperCSSClass(){return`vjs-chapters-button ${super.buildWrapperCSSClass()}`}/**
   * Update the menu based on the current state of its items.
   *
   * @param {Event} [event]
   *        An event that triggered this function to run.
   *
   * @listens TextTrackList#addtrack
   * @listens TextTrackList#removetrack
   * @listens TextTrackList#change
   */update(e){if(e&&e.track&&"chapters"!==e.track.kind)return;let t=this.findChaptersTrack();t!==this.track_?(this.setTrack(t),super.update()):(!this.items||t&&t.cues&&t.cues.length!==this.items.length)&&super.update()}/**
   * Set the currently selected track for the chapters button.
   *
   * @param {TextTrack} track
   *        The new track to select. Nothing will change if this is the currently selected
   *        track.
   */setTrack(e){if(this.track_!==e){// here this.track_ refers to the old track instance
if(this.updateHandler_||(this.updateHandler_=this.update.bind(this)),this.track_){let e=this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);e&&e.removeEventListener("load",this.updateHandler_),this.track_.removeEventListener("cuechange",this.selectCurrentItem_),this.track_=null}// here this.track_ refers to the new track instance
if(this.track_=e,this.track_){this.track_.mode="hidden";let e=this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);e&&e.addEventListener("load",this.updateHandler_),this.track_.addEventListener("cuechange",this.selectCurrentItem_)}}}/**
   * Find the track object that is currently in use by this ChaptersButton
   *
   * @return {TextTrack|undefined}
   *         The current track or undefined if none was found.
   */findChaptersTrack(){let e=this.player_.textTracks()||[];for(let t=e.length-1;t>=0;t--){// We will always choose the last track as our chaptersTrack
let i=e[t];if(i.kind===this.kind_)return i}}/**
   * Get the caption for the ChaptersButton based on the track label. This will also
   * use the current tracks localized kind as a fallback if a label does not exist.
   *
   * @return {string}
   *         The tracks current label or the localized track kind.
   */getMenuCaption(){return this.track_&&this.track_.label?this.track_.label:this.localize(sP(this.kind_))}/**
   * Create menu from chapter track
   *
   * @return { import('../../menu/menu').default }
   *         New menu for the chapter buttons
   */createMenu(){return this.options_.title=this.getMenuCaption(),super.createMenu()}/**
   * Create a menu item for each text track
   *
   * @return  { import('./text-track-menu-item').default[] }
   *         Array of menu items
   */createItems(){let e=[];if(!this.track_)return e;let t=this.track_.cues;if(!t)return e;for(let i=0,r=t.length;i<r;i++){let r=t[i],s=new an(this.player_,{track:this.track_,cue:r});e.push(s)}return e}}/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */aa.prototype.kind_="chapters",/**
 * The text that should display over the `ChaptersButton`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */aa.prototype.controlText_="Chapters",sN.registerComponent("ChaptersButton",aa);/**
 * @file descriptions-button.js
 *//**
 * The button component for toggling and selecting descriptions
 *
 * @extends TextTrackButton
 */class ao extends as{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */constructor(e,t,i){super(e,t,i),this.setIcon("audio-description");let r=e.textTracks(),s=sp(this,this.handleTracksChange);r.addEventListener("change",s),this.on("dispose",function(){r.removeEventListener("change",s)})}/**
   * Handle text track change
   *
   * @param {Event} event
   *        The event that caused this function to run
   *
   * @listens TextTrackList#change
   */handleTracksChange(e){let t=this.player().textTracks(),i=!1;// Check whether a track of a different kind is showing
for(let e=0,r=t.length;e<r;e++){let r=t[e];if(r.kind!==this.kind_&&"showing"===r.mode){i=!0;break}}// If another track is showing, disable this menu button
i?this.disable():this.enable()}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-descriptions-button ${super.buildCSSClass()}`}buildWrapperCSSClass(){return`vjs-descriptions-button ${super.buildWrapperCSSClass()}`}}/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */ao.prototype.kind_="descriptions",/**
 * The text that should display over the `DescriptionsButton`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */ao.prototype.controlText_="Descriptions",sN.registerComponent("DescriptionsButton",ao);/**
 * @file subtitles-button.js
 *//**
 * The button component for toggling and selecting subtitles
 *
 * @extends TextTrackButton
 */class al extends as{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */constructor(e,t,i){super(e,t,i),this.setIcon("subtitles")}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-subtitles-button ${super.buildCSSClass()}`}buildWrapperCSSClass(){return`vjs-subtitles-button ${super.buildWrapperCSSClass()}`}}/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */al.prototype.kind_="subtitles",/**
 * The text that should display over the `SubtitlesButton`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */al.prototype.controlText_="Subtitles",sN.registerComponent("SubtitlesButton",al);/**
 * @file caption-settings-menu-item.js
 *//**
 * The menu item for caption track settings menu
 *
 * @extends TextTrackMenuItem
 */class au extends ai{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){t.track={player:e,kind:t.kind,label:t.kind+" settings",selectable:!1,default:!1,mode:"disabled"},// CaptionSettingsMenuItem has no concept of 'selected'
t.selectable=!1,t.name="CaptionSettingsMenuItem",super(e,t),this.addClass("vjs-texttrack-settings"),this.controlText(", opens "+t.kind+" settings dialog")}/**
   * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){this.player().getChild("textTrackSettings").open()}/**
   * Update control text and label on languagechange
   */handleLanguagechange(){this.$(".vjs-menu-item-text").textContent=this.player_.localize(this.options_.kind+" settings"),super.handleLanguagechange()}}sN.registerComponent("CaptionSettingsMenuItem",au);/**
 * @file captions-button.js
 *//**
 * The button component for toggling and selecting captions
 *
 * @extends TextTrackButton
 */class ah extends as{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */constructor(e,t,i){super(e,t,i),this.setIcon("captions")}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-captions-button ${super.buildCSSClass()}`}buildWrapperCSSClass(){return`vjs-captions-button ${super.buildWrapperCSSClass()}`}/**
   * Create caption menu items
   *
   * @return {CaptionSettingsMenuItem[]}
   *         The array of current menu items.
   */createItems(){let e=[];return!(this.player().tech_&&this.player().tech_.featuresNativeTextTracks)&&this.player().getChild("textTrackSettings")&&(e.push(new au(this.player_,{kind:this.kind_})),this.hideThreshold_+=1),super.createItems(e)}}/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */ah.prototype.kind_="captions",/**
 * The text that should display over the `CaptionsButton`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */ah.prototype.controlText_="Captions",sN.registerComponent("CaptionsButton",ah);/**
 * @file subs-caps-menu-item.js
 *//**
 * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles
 * in the SubsCapsMenu.
 *
 * @extends TextTrackMenuItem
 */class ad extends ai{createEl(e,t,i){let r=super.createEl(e,t,i),s=r.querySelector(".vjs-menu-item-text");return"captions"===this.options_.track.kind&&(this.player_.options_.experimentalSvgIcons?this.setIcon("captions",r):s.appendChild(rA("span",{className:"vjs-icon-placeholder"},{"aria-hidden":!0})),s.appendChild(rA("span",{className:"vjs-control-text",// space added as the text will visually flow with the
// label
textContent:` ${this.localize("Captions")}`}))),r}}sN.registerComponent("SubsCapsMenuItem",ad);/**
 * @file sub-caps-button.js
 *//**
 * The button component for toggling and selecting captions and/or subtitles
 *
 * @extends TextTrackButton
 */class ac extends as{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Function} [ready]
   *        The function to call when this component is ready.
   */constructor(e,t={}){super(e,t),// Although North America uses "captions" in most cases for
// "captions and subtitles" other locales use "subtitles"
this.label_="subtitles",this.setIcon("subtitles"),["en","en-us","en-ca","fr-ca"].indexOf(this.player_.language_)>-1&&(this.label_="captions",this.setIcon("captions")),this.menuButton_.controlText(sP(this.label_))}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-subs-caps-button ${super.buildCSSClass()}`}buildWrapperCSSClass(){return`vjs-subs-caps-button ${super.buildWrapperCSSClass()}`}/**
   * Create caption/subtitles menu items
   *
   * @return {CaptionSettingsMenuItem[]}
   *         The array of current menu items.
   */createItems(){let e=[];return!(this.player().tech_&&this.player().tech_.featuresNativeTextTracks)&&this.player().getChild("textTrackSettings")&&(e.push(new au(this.player_,{kind:this.label_})),this.hideThreshold_+=1),e=super.createItems(e,ad)}}/**
 * `kind`s of TextTrack to look for to associate it with this menu.
 *
 * @type {array}
 * @private
 */ac.prototype.kinds_=["captions","subtitles"],/**
 * The text that should display over the `SubsCapsButton`s controls.
 *
 *
 * @type {string}
 * @protected
 */ac.prototype.controlText_="Subtitles",sN.registerComponent("SubsCapsButton",ac);/**
 * @file audio-track-menu-item.js
 *//**
 * An {@link AudioTrack} {@link MenuItem}
 *
 * @extends MenuItem
 */class ap extends at{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){let i=t.track,r=e.audioTracks();// Modify options for parent MenuItem class's init.
t.label=i.label||i.language||"Unknown",t.selected=i.enabled,super(e,t),this.track=i,this.addClass(`vjs-${i.kind}-menu-item`);let s=(...e)=>{this.handleTracksChange.apply(this,e)};r.addEventListener("change",s),this.on("dispose",()=>{r.removeEventListener("change",s)})}createEl(e,t,i){let r=super.createEl(e,t,i),s=r.querySelector(".vjs-menu-item-text");return["main-desc","description"].indexOf(this.options_.track.kind)>=0&&(s.appendChild(rA("span",{className:"vjs-icon-placeholder"},{"aria-hidden":!0})),s.appendChild(rA("span",{className:"vjs-control-text",textContent:" "+this.localize("Descriptions")}))),r}/**
   * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){// when native audio tracks are used, we want to make sure that other tracks are turned off
if(super.handleClick(e),// the audio track list will automatically toggle other tracks
// off for us.
this.track.enabled=!0,this.player_.tech_.featuresNativeAudioTracks){let e=this.player_.audioTracks();for(let t=0;t<e.length;t++){let i=e[t];// skip the current track since we enabled it above
i!==this.track&&(i.enabled=i===this.track)}}}/**
   * Handle any {@link AudioTrack} change.
   *
   * @param {Event} [event]
   *        The {@link AudioTrackList#change} event that caused this to run.
   *
   * @listens AudioTrackList#change
   */handleTracksChange(e){this.selected(this.track.enabled)}}sN.registerComponent("AudioTrackMenuItem",ap);/**
 * @file audio-track-button.js
 *//**
 * The base class for buttons that toggle specific {@link AudioTrack} types.
 *
 * @extends TrackButton
 */class am extends n9{/**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */constructor(e,t={}){t.tracks=e.audioTracks(),super(e,t),this.setIcon("audio")}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-audio-button ${super.buildCSSClass()}`}buildWrapperCSSClass(){return`vjs-audio-button ${super.buildWrapperCSSClass()}`}/**
   * Create a menu item for each audio track
   *
   * @param {AudioTrackMenuItem[]} [items=[]]
   *        An array of existing menu items to use.
   *
   * @return {AudioTrackMenuItem[]}
   *         An array of menu items
   */createItems(e=[]){// if there's only one audio track, there no point in showing it
this.hideThreshold_=1;let t=this.player_.audioTracks();for(let i=0;i<t.length;i++){let r=t[i];e.push(new ap(this.player_,{track:r,// MenuItem is selectable
selectable:!0,// MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
multiSelectable:!1}))}return e}}/**
 * The text that should display over the `AudioTrackButton`s controls. Added for localization.
 *
 * @type {string}
 * @protected
 */am.prototype.controlText_="Audio Track",sN.registerComponent("AudioTrackButton",am);/**
 * @file playback-rate-menu-item.js
 *//**
 * The specific menu item type for selecting a playback rate.
 *
 * @extends MenuItem
 */class af extends at{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){let i=t.rate,r=parseFloat(i,10);// Modify options for parent MenuItem class's init.
t.label=i,t.selected=r===e.playbackRate(),t.selectable=!0,t.multiSelectable=!1,super(e,t),this.label=i,this.rate=r,this.on(e,"ratechange",e=>this.update(e))}/**
   * This gets called when an `PlaybackRateMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */handleClick(e){super.handleClick(),this.player().playbackRate(this.rate)}/**
   * Update the PlaybackRateMenuItem when the playbackrate changes.
   *
   * @param {Event} [event]
   *        The `ratechange` event that caused this function to run.
   *
   * @listens Player#ratechange
   */update(e){this.selected(this.player().playbackRate()===this.rate)}}/**
 * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */af.prototype.contentElType="button",sN.registerComponent("PlaybackRateMenuItem",af);/**
 * @file playback-rate-menu-button.js
 *//**
 * The component for controlling the playback rate.
 *
 * @extends MenuButton
 */class ag extends n7{/**
   * Creates an instance of this class.
   *
   * @param { import('../../player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */constructor(e,t){super(e,t),this.menuButton_.el_.setAttribute("aria-describedby",this.labelElId_),this.updateVisibility(),this.updateLabel(),this.on(e,"loadstart",e=>this.updateVisibility(e)),this.on(e,"ratechange",e=>this.updateLabel(e)),this.on(e,"playbackrateschange",e=>this.handlePlaybackRateschange(e))}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){let e=super.createEl();return this.labelElId_="vjs-playback-rate-value-label-"+this.id_,this.labelEl_=rA("div",{className:"vjs-playback-rate-value",id:this.labelElId_,textContent:"1x"}),e.appendChild(this.labelEl_),e}dispose(){this.labelEl_=null,super.dispose()}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-playback-rate ${super.buildCSSClass()}`}buildWrapperCSSClass(){return`vjs-playback-rate ${super.buildWrapperCSSClass()}`}/**
   * Create the list of menu items. Specific to each subclass.
   *
   */createItems(){let e=this.playbackRates(),t=[];for(let i=e.length-1;i>=0;i--)t.push(new af(this.player(),{rate:e[i]+"x"}));return t}/**
   * On playbackrateschange, update the menu to account for the new items.
   *
   * @listens Player#playbackrateschange
   */handlePlaybackRateschange(e){this.update()}/**
   * Get possible playback rates
   *
   * @return {Array}
   *         All possible playback rates
   */playbackRates(){let e=this.player();return e.playbackRates&&e.playbackRates()||[]}/**
   * Get whether playback rates is supported by the tech
   * and an array of playback rates exists
   *
   * @return {boolean}
   *         Whether changing playback rate is supported
   */playbackRateSupported(){return this.player().tech_&&this.player().tech_.featuresPlaybackRate&&this.playbackRates()&&this.playbackRates().length>0}/**
   * Hide playback rate controls when they're no playback rate options to select
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#loadstart
   */updateVisibility(e){this.playbackRateSupported()?this.removeClass("vjs-hidden"):this.addClass("vjs-hidden")}/**
   * Update button label when rate changed
   *
   * @param {Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ratechange
   */updateLabel(e){this.playbackRateSupported()&&(this.labelEl_.textContent=this.player().playbackRate()+"x")}}/**
 * The text that should display over the `PlaybackRateMenuButton`s controls.
 *
 * Added for localization.
 *
 * @type {string}
 * @protected
 */ag.prototype.controlText_="Playback Rate",sN.registerComponent("PlaybackRateMenuButton",ag);/**
 * @file spacer.js
 *//**
 * Just an empty spacer element that can be used as an append point for plugins, etc.
 * Also can be used to create space between elements when necessary.
 *
 * @extends Component
 */class ay extends sN{/**
  * Builds the default DOM `className`.
  *
  * @return {string}
  *         The DOM `className` for this object.
  */buildCSSClass(){return`vjs-spacer ${super.buildCSSClass()}`}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(e="div",t={},i={}){return t.className||(t.className=this.buildCSSClass()),super.createEl(e,t,i)}}sN.registerComponent("Spacer",ay),sN.registerComponent("CustomControlSpacer",/**
 * @file custom-control-spacer.js
 *//**
 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
 *
 * @extends Spacer
 */class extends ay{/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */buildCSSClass(){return`vjs-custom-control-spacer ${super.buildCSSClass()}`}/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return super.createEl("div",{className:this.buildCSSClass(),// No-flex/table-cell mode requires there be some content
// in the cell to fill the remaining space of the table.
textContent:"\xa0"})}});/**
 * @file control-bar.js
 *//**
 * Container of main controls.
 *
 * @extends Component
 */class a_ extends sN{/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return super.createEl("div",{className:"vjs-control-bar",dir:"ltr"})}}/**
 * Default options for `ControlBar`
 *
 * @type {Object}
 * @private
 */a_.prototype.options_={children:["playToggle","skipBackward","skipForward","volumePanel","currentTimeDisplay","timeDivider","durationDisplay","progressControl","liveDisplay","seekToLive","remainingTimeDisplay","customControlSpacer","playbackRateMenuButton","chaptersButton","descriptionsButton","subsCapsButton","audioTrackButton","pictureInPictureToggle","fullscreenToggle"]},sN.registerComponent("ControlBar",a_);/**
 * @file error-display.js
 *//**
 * A display that indicates an error has occurred. This means that the video
 * is unplayable.
 *
 * @extends ModalDialog
 */class ab extends sJ{/**
   * Creates an instance of this class.
   *
   * @param  { import('./player').default } player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of player options.
   */constructor(e,t){super(e,t),this.on(e,"error",e=>this.open(e))}/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   *
   * @deprecated Since version 5.
   */buildCSSClass(){return`vjs-error-display ${super.buildCSSClass()}`}/**
   * Gets the localized error message based on the `Player`s error.
   *
   * @return {string}
   *         The `Player`s error message localized or an empty string.
   */content(){let e=this.player().error();return e?this.localize(e.message):""}}/**
 * The default options for an `ErrorDisplay`.
 *
 * @private
 */ab.prototype.options_=Object.assign({},sJ.prototype.options_,{pauseOnOpen:!1,fillAlways:!0,temporary:!1,uncloseable:!0}),sN.registerComponent("ErrorDisplay",ab);/**
 * @file text-track-settings.js
 */const av="vjs-text-track-settings",aT=["#000","Black"],aS=["#00F","Blue"],aE=["#0FF","Cyan"],aw=["#0F0","Green"],ak=["#F0F","Magenta"],aC=["#F00","Red"],ax=["#FFF","White"],aD=["#FF0","Yellow"],aI=["1","Opaque"],aA=["0.5","Semi-Transparent"],aL=["0","Transparent"],aP={backgroundColor:{selector:".vjs-bg-color > select",id:"captions-background-color-%s",label:"Color",options:[aT,ax,aC,aw,aS,aD,ak,aE]},backgroundOpacity:{selector:".vjs-bg-opacity > select",id:"captions-background-opacity-%s",label:"Opacity",options:[aI,aA,aL]},color:{selector:".vjs-text-color > select",id:"captions-foreground-color-%s",label:"Color",options:[ax,aT,aC,aw,aS,aD,ak,aE]},edgeStyle:{selector:".vjs-edge-style > select",id:"%s",label:"Text Edge Style",options:[["none","None"],["raised","Raised"],["depressed","Depressed"],["uniform","Uniform"],["dropshadow","Drop shadow"]]},fontFamily:{selector:".vjs-font-family > select",id:"captions-font-family-%s",label:"Font Family",options:[["proportionalSansSerif","Proportional Sans-Serif"],["monospaceSansSerif","Monospace Sans-Serif"],["proportionalSerif","Proportional Serif"],["monospaceSerif","Monospace Serif"],["casual","Casual"],["script","Script"],["small-caps","Small Caps"]]},fontPercent:{selector:".vjs-font-percent > select",id:"captions-font-size-%s",label:"Font Size",options:[["0.50","50%"],["0.75","75%"],["1.00","100%"],["1.25","125%"],["1.50","150%"],["1.75","175%"],["2.00","200%"],["3.00","300%"],["4.00","400%"]],default:2,parser:e=>"1.00"===e?null:Number(e)},textOpacity:{selector:".vjs-text-opacity > select",id:"captions-foreground-opacity-%s",label:"Opacity",options:[aI,aA]},// Options for this object are defined below.
windowColor:{selector:".vjs-window-color > select",id:"captions-window-color-%s",label:"Color"},// Options for this object are defined below.
windowOpacity:{selector:".vjs-window-opacity > select",id:"captions-window-opacity-%s",label:"Opacity",options:[aL,aA,aI]}};/**
 * Get the actual value of an option.
 *
 * @param  {string} value
 *         The value to get
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {*}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */function aO(e,t){if(t&&(e=t(e)),e&&"none"!==e)return e}aP.windowColor.options=aP.backgroundColor.options,sN.registerComponent("TextTrackSettings",/**
 * Manipulate Text Tracks settings.
 *
 * @extends ModalDialog
 */class extends sJ{/**
   * Creates an instance of this class.
   *
   * @param { import('../player').default } player
   *         The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *         The key/value store of player options.
   */constructor(e,t){t.temporary=!1,super(e,t),this.updateDisplay=this.updateDisplay.bind(this),// fill the modal and pretend we have opened it
this.fill(),this.hasBeenOpened_=this.hasBeenFilled_=!0,this.endDialog=rA("p",{className:"vjs-control-text",textContent:this.localize("End of dialog window.")}),this.el().appendChild(this.endDialog),this.setDefaults(),void 0===t.persistTextTrackSettings&&(this.options_.persistTextTrackSettings=this.options_.playerOptions.persistTextTrackSettings),this.on(this.$(".vjs-done-button"),"click",()=>{this.saveSettings(),this.close()}),this.on(this.$(".vjs-default-button"),"click",()=>{this.setDefaults(),this.updateDisplay()}),i7(aP,e=>{this.on(this.$(e.selector),"change",this.updateDisplay)}),this.options_.persistTextTrackSettings&&this.restoreSettings()}dispose(){this.endDialog=null,super.dispose()}/**
   * Create a <select> element with configured options.
   *
   * @param {string} key
   *        Configuration key to use during creation.
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */createElSelect_(e,t="",i="label"){let r=aP[e],s=r.id.replace("%s",this.id_),n=[t,s].join(" ").trim();return[`<${i} id="${s}" class="${"label"===i?"vjs-label":""}">`,this.localize(r.label),`</${i}>`,`<select aria-labelledby="${n}">`].concat(r.options.map(e=>{let t=s+"-"+e[1].replace(/\W+/g,"");return[`<option id="${t}" value="${e[0]}" `,`aria-labelledby="${n} ${t}">`,this.localize(e[1]),"</option>"].join("")})).concat("</select>").join("")}/**
   * Create foreground color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */createElFgColor_(){let e=`captions-text-legend-${this.id_}`;return['<fieldset class="vjs-fg vjs-track-setting">',`<legend id="${e}">`,this.localize("Text"),"</legend>",'<span class="vjs-text-color">',this.createElSelect_("color",e),"</span>",'<span class="vjs-text-opacity vjs-opacity">',this.createElSelect_("textOpacity",e),"</span>","</fieldset>"].join("")}/**
   * Create background color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */createElBgColor_(){let e=`captions-background-${this.id_}`;return['<fieldset class="vjs-bg vjs-track-setting">',`<legend id="${e}">`,this.localize("Text Background"),"</legend>",'<span class="vjs-bg-color">',this.createElSelect_("backgroundColor",e),"</span>",'<span class="vjs-bg-opacity vjs-opacity">',this.createElSelect_("backgroundOpacity",e),"</span>","</fieldset>"].join("")}/**
   * Create window color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */createElWinColor_(){let e=`captions-window-${this.id_}`;return['<fieldset class="vjs-window vjs-track-setting">',`<legend id="${e}">`,this.localize("Caption Area Background"),"</legend>",'<span class="vjs-window-color">',this.createElSelect_("windowColor",e),"</span>",'<span class="vjs-window-opacity vjs-opacity">',this.createElSelect_("windowOpacity",e),"</span>","</fieldset>"].join("")}/**
   * Create color elements for the component
   *
   * @return {Element}
   *         The element that was created
   *
   * @private
   */createElColors_(){return rA("div",{className:"vjs-track-settings-colors",innerHTML:[this.createElFgColor_(),this.createElBgColor_(),this.createElWinColor_()].join("")})}/**
   * Create font elements for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */createElFont_(){return rA("div",{className:"vjs-track-settings-font",innerHTML:['<fieldset class="vjs-font-percent vjs-track-setting">',this.createElSelect_("fontPercent","","legend"),"</fieldset>",'<fieldset class="vjs-edge-style vjs-track-setting">',this.createElSelect_("edgeStyle","","legend"),"</fieldset>",'<fieldset class="vjs-font-family vjs-track-setting">',this.createElSelect_("fontFamily","","legend"),"</fieldset>"].join("")})}/**
   * Create controls for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */createElControls_(){let e=this.localize("restore all settings to the default values");return rA("div",{className:"vjs-track-settings-controls",innerHTML:[`<button type="button" class="vjs-default-button" title="${e}">`,this.localize("Reset"),`<span class="vjs-control-text"> ${e}</span>`,"</button>",`<button type="button" class="vjs-done-button">${this.localize("Done")}</button>`].join("")})}content(){return[this.createElColors_(),this.createElFont_(),this.createElControls_()]}label(){return this.localize("Caption Settings Dialog")}description(){return this.localize("Beginning of dialog window. Escape will cancel and close the window.")}buildCSSClass(){return super.buildCSSClass()+" vjs-text-track-settings"}/**
   * Gets an object of text track settings (or null).
   *
   * @return {Object}
   *         An object with config values parsed from the DOM or localStorage.
   */getValues(){return i9(aP,(e,t,i)=>{let r=/**
 * Gets the value of the selected <option> element within a <select> element.
 *
 * @param  {Element} el
 *         the element to look in
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {*}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */function(e,t){let i=e.options[e.options.selectedIndex].value;return aO(i,t)}(this.$(t.selector),t.parser);return void 0!==r&&(e[i]=r),e},{})}/**
   * Sets text track settings from an object of values.
   *
   * @param {Object} values
   *        An object with config values parsed from the DOM or localStorage.
   */setValues(e){i7(aP,(t,i)=>{!/**
 * Sets the selected <option> element within a <select> element based on a
 * given value.
 *
 * @param {Element} el
 *        The element to look in.
 *
 * @param {string} value
 *        the property to look on.
 *
 * @param {Function} [parser]
 *        Optional function to adjust the value before comparing.
 *
 * @private
 */function(e,t,i){if(t){for(let r=0;r<e.options.length;r++)if(aO(e.options[r].value,i)===t){e.selectedIndex=r;break}}}(this.$(t.selector),e[i],t.parser)})}/**
   * Sets all `<select>` elements to their default values.
   */setDefaults(){i7(aP,e=>{let t=e.hasOwnProperty("default")?e.default:0;this.$(e.selector).selectedIndex=t})}/**
   * Restore texttrack settings from localStorage
   */restoreSettings(){let e;try{e=JSON.parse(/*@__PURE__*/w(I).localStorage.getItem(av))}catch(e){i8.warn(e)}e&&this.setValues(e)}/**
   * Save text track settings to localStorage
   */saveSettings(){if(!this.options_.persistTextTrackSettings)return;let e=this.getValues();try{Object.keys(e).length?/*@__PURE__*/w(I).localStorage.setItem(av,JSON.stringify(e)):/*@__PURE__*/w(I).localStorage.removeItem(av)}catch(e){i8.warn(e)}}/**
   * Update display of text track settings
   */updateDisplay(){let e=this.player_.getChild("textTrackDisplay");e&&e.updateDisplay()}/**
   * conditionally blur the element and refocus the captions button
   *
   * @private
   */conditionalBlur_(){this.previouslyActiveEl_=null;let e=this.player_.controlBar,t=e&&e.subsCapsButton,i=e&&e.captionsButton;t?t.focus():i&&i.focus()}/**
   * Repopulate dialog with new localizations on languagechange
   */handleLanguagechange(){this.fill()}}),sN.registerComponent("ResizeManager",/**
 * @file resize-manager.js
 *//**
 * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.
 *
 * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.
 *
 * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.
 * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.
 *
 * @example <caption>How to disable the resize manager</caption>
 * const player = videojs('#vid', {
 *   resizeManager: false
 * });
 *
 * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}
 *
 * @extends Component
 */class extends sN{/**
   * Create the ResizeManager.
   *
   * @param {Object} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of ResizeManager options.
   *
   * @param {Object} [options.ResizeObserver]
   *        A polyfill for ResizeObserver can be passed in here.
   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.
   */constructor(e,t){let i=t.ResizeObserver||/*@__PURE__*/w(I).ResizeObserver;null===t.ResizeObserver&&(i=!1);// Only create an element when ResizeObserver isn't available
let r=ri({createEl:!i,reportTouchActivity:!1},t);super(e,r),this.ResizeObserver=t.ResizeObserver||/*@__PURE__*/w(I).ResizeObserver,this.loadListener_=null,this.resizeObserver_=null,this.debouncedHandler_=sf(()=>{this.resizeHandler()},100,!1,this),i?(this.resizeObserver_=new this.ResizeObserver(this.debouncedHandler_),this.resizeObserver_.observe(e.el())):(this.loadListener_=()=>{if(!this.el_||!this.el_.contentWindow)return;let e=this.debouncedHandler_,t=this.unloadListener_=function(){sl(this,"resize",e),sl(this,"unload",t),t=null};// safari and edge can unload the iframe before resizemanager dispose
// we have to dispose of event handlers correctly before that happens
so(this.el_.contentWindow,"unload",t),so(this.el_.contentWindow,"resize",e)},this.one("load",this.loadListener_))}createEl(){return super.createEl("iframe",{className:"vjs-resize-manager",tabIndex:-1,title:this.localize("No content")},{"aria-hidden":"true"})}/**
   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver
   *
   * @fires Player#playerresize
   */resizeHandler(){/**
     * Called when the player size has changed
     *
     * @event Player#playerresize
     * @type {Event}
     */// make sure player is still around to trigger
// prevents this from causing an error after dispose
this.player_&&this.player_.trigger&&this.player_.trigger("playerresize")}dispose(){this.debouncedHandler_&&this.debouncedHandler_.cancel(),this.resizeObserver_&&(this.player_.el()&&this.resizeObserver_.unobserve(this.player_.el()),this.resizeObserver_.disconnect()),this.loadListener_&&this.off("load",this.loadListener_),this.el_&&this.el_.contentWindow&&this.unloadListener_&&this.unloadListener_.call(this.el_.contentWindow),this.ResizeObserver=null,this.resizeObserver=null,this.debouncedHandler_=null,this.loadListener_=null,super.dispose()}});const aR={trackingThreshold:20,liveTolerance:15};sN.registerComponent("LiveTracker",/*
  track when we are at the live edge, and other helpers for live playback *//**
 * A class for checking live current time and determining when the player
 * is at or behind the live edge.
 */class extends sN{/**
   * Creates an instance of this class.
   *
   * @param { import('./player').default } player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {number} [options.trackingThreshold=20]
   *        Number of seconds of live window (seekableEnd - seekableStart) that
   *        media needs to have before the liveui will be shown.
   *
   * @param {number} [options.liveTolerance=15]
   *        Number of seconds behind live that we have to be
   *        before we will be considered non-live. Note that this will only
   *        be used when playing at the live edge. This allows large seekable end
   *        changes to not effect whether we are live or not.
   */constructor(e,t){// LiveTracker does not need an element
let i=ri(aR,t,{createEl:!1});super(e,i),this.trackLiveHandler_=()=>this.trackLive_(),this.handlePlay_=e=>this.handlePlay(e),this.handleFirstTimeupdate_=e=>this.handleFirstTimeupdate(e),this.handleSeeked_=e=>this.handleSeeked(e),this.seekToLiveEdge_=e=>this.seekToLiveEdge(e),this.reset_(),this.on(this.player_,"durationchange",e=>this.handleDurationchange(e)),// we should try to toggle tracking on canplay as native playback engines, like Safari
// may not have the proper values for things like seekableEnd until then
this.on(this.player_,"canplay",()=>this.toggleTracking())}/**
   * all the functionality for tracking when seek end changes
   * and for tracking how far past seek end we should be
   */trackLive_(){let e=this.player_.seekable();// skip undefined seekable
if(!e||!e.length)return;let t=Number(/*@__PURE__*/w(I).performance.now().toFixed(4)),i=-1===this.lastTime_?0:(t-this.lastTime_)/1e3;this.lastTime_=t,this.pastSeekEnd_=this.pastSeekEnd()+i;let r=this.liveCurrentTime(),s=this.player_.currentTime(),n=this.player_.paused()||this.seekedBehindLive_||Math.abs(r-s)>this.options_.liveTolerance;this.timeupdateSeen_&&r!==1/0||(n=!1),n!==this.behindLiveEdge_&&(this.behindLiveEdge_=n,this.trigger("liveedgechange"))}/**
   * handle a durationchange event on the player
   * and start/stop tracking accordingly.
   */handleDurationchange(){this.toggleTracking()}/**
   * start/stop tracking
   */toggleTracking(){this.player_.duration()===1/0&&this.liveWindow()>=this.options_.trackingThreshold?(this.player_.options_.liveui&&this.player_.addClass("vjs-liveui"),this.startTracking()):(this.player_.removeClass("vjs-liveui"),this.stopTracking())}/**
   * start tracking live playback
   */startTracking(){this.isTracking()||(this.timeupdateSeen_||(this.timeupdateSeen_=this.player_.hasStarted()),this.trackingInterval_=this.setInterval(this.trackLiveHandler_,30),this.trackLive_(),this.on(this.player_,["play","pause"],this.trackLiveHandler_),this.timeupdateSeen_?this.on(this.player_,"seeked",this.handleSeeked_):(this.one(this.player_,"play",this.handlePlay_),this.one(this.player_,"timeupdate",this.handleFirstTimeupdate_)))}/**
   * handle the first timeupdate on the player if it wasn't already playing
   * when live tracker started tracking.
   */handleFirstTimeupdate(){this.timeupdateSeen_=!0,this.on(this.player_,"seeked",this.handleSeeked_)}/**
   * Keep track of what time a seek starts, and listen for seeked
   * to find where a seek ends.
   */handleSeeked(){let e=Math.abs(this.liveCurrentTime()-this.player_.currentTime());this.seekedBehindLive_=this.nextSeekedFromUser_&&e>2,this.nextSeekedFromUser_=!1,this.trackLive_()}/**
   * handle the first play on the player, and make sure that we seek
   * right to the live edge.
   */handlePlay(){this.one(this.player_,"timeupdate",this.seekToLiveEdge_)}/**
   * Stop tracking, and set all internal variables to
   * their initial value.
   */reset_(){this.lastTime_=-1,this.pastSeekEnd_=0,this.lastSeekEnd_=-1,this.behindLiveEdge_=!0,this.timeupdateSeen_=!1,this.seekedBehindLive_=!1,this.nextSeekedFromUser_=!1,this.clearInterval(this.trackingInterval_),this.trackingInterval_=null,this.off(this.player_,["play","pause"],this.trackLiveHandler_),this.off(this.player_,"seeked",this.handleSeeked_),this.off(this.player_,"play",this.handlePlay_),this.off(this.player_,"timeupdate",this.handleFirstTimeupdate_),this.off(this.player_,"timeupdate",this.seekToLiveEdge_)}/**
   * The next seeked event is from the user. Meaning that any seek
   * > 2s behind live will be considered behind live for real and
   * liveTolerance will be ignored.
   */nextSeekedFromUser(){this.nextSeekedFromUser_=!0}/**
   * stop tracking live playback
   */stopTracking(){this.isTracking()&&(this.reset_(),this.trigger("liveedgechange"))}/**
   * A helper to get the player seekable end
   * so that we don't have to null check everywhere
   *
   * @return {number}
   *         The furthest seekable end or Infinity.
   */seekableEnd(){let e=this.player_.seekable(),t=[],i=e?e.length:0;for(;i--;)t.push(e.end(i));// grab the furthest seekable end after sorting, or if there are none
// default to Infinity
return t.length?t.sort()[t.length-1]:1/0}/**
   * A helper to get the player seekable start
   * so that we don't have to null check everywhere
   *
   * @return {number}
   *         The earliest seekable start or 0.
   */seekableStart(){let e=this.player_.seekable(),t=[],i=e?e.length:0;for(;i--;)t.push(e.start(i));// grab the first seekable start after sorting, or if there are none
// default to 0
return t.length?t.sort()[0]:0}/**
   * Get the live time window aka
   * the amount of time between seekable start and
   * live current time.
   *
   * @return {number}
   *         The amount of seconds that are seekable in
   *         the live video.
   */liveWindow(){let e=this.liveCurrentTime();return(// if liveCurrenTime is Infinity then we don't have a liveWindow at all
e===1/0?0:e-this.seekableStart())}/**
   * Determines if the player is live, only checks if this component
   * is tracking live playback or not
   *
   * @return {boolean}
   *         Whether liveTracker is tracking
   */isLive(){return this.isTracking()}/**
   * Determines if currentTime is at the live edge and won't fall behind
   * on each seekableendchange
   *
   * @return {boolean}
   *         Whether playback is at the live edge
   */atLiveEdge(){return!this.behindLiveEdge()}/**
   * get what we expect the live current time to be
   *
   * @return {number}
   *         The expected live current time
   */liveCurrentTime(){return this.pastSeekEnd()+this.seekableEnd()}/**
   * The number of seconds that have occurred after seekable end
   * changed. This will be reset to 0 once seekable end changes.
   *
   * @return {number}
   *         Seconds past the current seekable end
   */pastSeekEnd(){let e=this.seekableEnd();return -1!==this.lastSeekEnd_&&e!==this.lastSeekEnd_&&(this.pastSeekEnd_=0),this.lastSeekEnd_=e,this.pastSeekEnd_}/**
   * If we are currently behind the live edge, aka currentTime will be
   * behind on a seekableendchange
   *
   * @return {boolean}
   *         If we are behind the live edge
   */behindLiveEdge(){return this.behindLiveEdge_}/**
   * Whether live tracker is currently tracking or not.
   */isTracking(){return"number"==typeof this.trackingInterval_}/**
   * Seek to the live edge if we are behind the live edge
   */seekToLiveEdge(){this.seekedBehindLive_=!1,this.atLiveEdge()||(this.nextSeekedFromUser_=!1,this.player_.currentTime(this.liveCurrentTime()))}/**
   * Dispose of liveTracker
   */dispose(){this.stopTracking(),super.dispose()}}),sN.registerComponent("TitleBar",/**
 * Displays an element over the player which contains an optional title and
 * description for the current content.
 *
 * Much of the code for this component originated in the now obsolete
 * videojs-dock plugin: https://github.com/brightcove/videojs-dock/
 *
 * @extends Component
 */class extends sN{constructor(e,t){super(e,t),this.on("statechanged",e=>this.updateDom_()),this.updateDom_()}/**
   * Create the `TitleBar`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */createEl(){return this.els={title:rA("div",{className:"vjs-title-bar-title",id:`vjs-title-bar-title-${st++}`}),description:rA("div",{className:"vjs-title-bar-description",id:`vjs-title-bar-description-${st++}`})},rA("div",{className:"vjs-title-bar"},{},rr(this.els))}/**
   * Updates the DOM based on the component's state object.
   */updateDom_(){let e=this.player_.tech_,t=e&&e.el_,i={title:"aria-labelledby",description:"aria-describedby"};["title","description"].forEach(e=>{let r=this.state[e],s=this.els[e],n=i[e];rX(s),r&&rL(s,r),t&&(t.removeAttribute(n),r&&t.setAttribute(n,s.id))}),this.state.title||this.state.description?this.show():this.hide()}/**
   * Update the contents of the title bar component with new title and
   * description text.
   *
   * If both title and description are missing, the title bar will be hidden.
   *
   * If either title or description are present, the title bar will be visible.
   *
   * NOTE: Any previously set value will be preserved. To unset a previously
   * set value, you must pass an empty string or null.
   *
   * For example:
   *
   * ```
   * update({title: 'foo', description: 'bar'}) // title: 'foo', description: 'bar'
   * update({description: 'bar2'}) // title: 'foo', description: 'bar2'
   * update({title: ''}) // title: '', description: 'bar2'
   * update({title: 'foo', description: null}) // title: 'foo', description: null
   * ```
   *
   * @param  {Object} [options={}]
   *         An options object. When empty, the title bar will be hidden.
   *
   * @param  {string} [options.title]
   *         A title to display in the title bar.
   *
   * @param  {string} [options.description]
   *         A description to display in the title bar.
   */update(e){this.setState(e)}/**
   * Dispose the component.
   */dispose(){let e=this.player_.tech_,t=e&&e.el_;t&&(t.removeAttribute("aria-labelledby"),t.removeAttribute("aria-describedby")),super.dispose(),this.els=null}});/**
 * This function is used to fire a sourceset when there is something
 * similar to `mediaEl.load()` being called. It will try to find the source via
 * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`
 * with the source that was found or empty string if we cannot know. If it cannot
 * find a source then `sourceset` will not be fired.
 *
 * @param { import('./html5').default } tech
 *        The tech object that sourceset was setup on
 *
 * @return {boolean}
 *         returns false if the sourceset was not fired and true otherwise.
 */const aN=e=>{let t=e.el();// if `el.src` is set, that source will be loaded.
if(t.hasAttribute("src"))return e.triggerSourceset(t.src),!0;/**
   * Since there isn't a src property on the media element, source elements will be used for
   * implementing the source selection algorithm. This happens asynchronously and
   * for most cases were there is more than one source we cannot tell what source will
   * be loaded, without re-implementing the source selection algorithm. At this time we are not
   * going to do that. There are three special cases that we do handle here though:
   *
   * 1. If there are no sources, do not fire `sourceset`.
   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`
   * 3. If there is more than one `<source>` but all of them have the same `src` url.
   *    That will be our src.
   */let i=e.$$("source"),r=[],s="";// if there are no sources, do not fire sourceset
if(!i.length)return!1;// only count valid/non-duplicate source elements
for(let e=0;e<i.length;e++){let t=i[e].src;t&&-1===r.indexOf(t)&&r.push(t)}return(// there were no valid sources
!!r.length&&(1===r.length&&(s=r[0]),e.triggerSourceset(s),!0))},aM=Object.defineProperty({},"innerHTML",{get(){return this.cloneNode(!0).innerHTML},set(e){// make a dummy node to use innerHTML on
let t=/*@__PURE__*/w(A).createElement(this.nodeName.toLowerCase());// set innerHTML to the value provided
t.innerHTML=e;// make a document fragment to hold the nodes from dummy
let i=/*@__PURE__*/w(A).createDocumentFragment();// copy all of the nodes created by the innerHTML on dummy
// to the document fragment
for(;t.childNodes.length;)i.appendChild(t.childNodes[0]);// then return the result that innerHTML's setter would
return(// remove content
this.innerText="",/*@__PURE__*/w(I).Element.prototype.appendChild.call(this,i),this.innerHTML)}}),aU=(e,t)=>{let i={};for(let r=0;r<e.length&&(!(i=Object.getOwnPropertyDescriptor(e[r],t))||!i.set||!i.get);r++);return i.enumerable=!0,i.configurable=!0,i},aB=e=>aU([e.el(),/*@__PURE__*/w(I).HTMLMediaElement.prototype,/*@__PURE__*/w(I).Element.prototype,aM],"innerHTML"),aF=function(e){let t=e.el();// make sure firstSourceWatch isn't setup twice.
if(t.resetSourceWatch_)return;let i={},r=aB(e),s=i=>(...r)=>{let s=i.apply(t,r);return aN(e),s};["append","appendChild","insertAdjacentHTML"].forEach(e=>{t[e]&&(// store the old function
i[e]=t[e],// call the old function with a sourceset if a source
// was loaded
t[e]=s(i[e]))}),Object.defineProperty(t,"innerHTML",ri(r,{set:s(r.set)})),t.resetSourceWatch_=()=>{t.resetSourceWatch_=null,Object.keys(i).forEach(e=>{t[e]=i[e]}),Object.defineProperty(t,"innerHTML",r)},// on the first sourceset, we need to revert our changes
e.one("sourceset",t.resetSourceWatch_)},aj=Object.defineProperty({},"src",{get(){return this.hasAttribute("src")?ne(/*@__PURE__*/w(I).Element.prototype.getAttribute.call(this,"src")):""},set(e){return /*@__PURE__*/w(I).Element.prototype.setAttribute.call(this,"src",e),e}}),aq=e=>aU([e.el(),/*@__PURE__*/w(I).HTMLMediaElement.prototype,aj],"src"),a$=function(e){if(!e.featuresSourceset)return;let t=e.el();// make sure sourceset isn't setup twice.
if(t.resetSourceset_)return;let i=aq(e),r=t.setAttribute,s=t.load;Object.defineProperty(t,"src",ri(i,{set:r=>{let s=i.set.call(t,r);return(// we use the getter here to get the actual value set on src
e.triggerSourceset(t.src),s)}})),t.setAttribute=(i,s)=>{let n=r.call(t,i,s);return/src/i.test(i)&&e.triggerSourceset(t.src),n},t.load=()=>{let i=s.call(t);return aN(e)||(e.triggerSourceset(""),aF(e)),i},t.currentSrc?e.triggerSourceset(t.currentSrc):aN(e)||aF(e),t.resetSourceset_=()=>{t.resetSourceset_=null,t.load=s,t.setAttribute=r,Object.defineProperty(t,"src",i),t.resetSourceWatch_&&t.resetSourceWatch_()}};/**
 * @file html5.js
 *//**
 * HTML5 Media Controller - Wrapper for HTML5 Media API
 *
 * @mixes Tech~SourceHandlerAdditions
 * @extends Tech
 */class aH extends np{/**
  * Create an instance of this Tech.
  *
  * @param {Object} [options]
  *        The key/value store of player options.
  *
  * @param {Function} [ready]
  *        Callback function to call when the `HTML5` Tech is ready.
  */constructor(e,t){super(e,t);let i=e.source,r=!1;if(this.featuresVideoFrameCallback=this.featuresVideoFrameCallback&&"VIDEO"===this.el_.tagName,i&&(this.el_.currentSrc!==i.src||e.tag&&3===e.tag.initNetworkState_)?this.setSource(i):this.handleLateInit_(this.el_),e.enableSourceset&&this.setupSourcesetHandling_(),this.isScrubbing_=!1,this.el_.hasChildNodes()){let e=this.el_.childNodes,t=e.length,i=[];for(;t--;){let s=e[t],n=s.nodeName.toLowerCase();"track"===n&&(this.featuresNativeTextTracks?(// store HTMLTrackElement and TextTrack to remote list
this.remoteTextTrackEls().addTrackElement_(s),this.remoteTextTracks().addTrack(s.track),this.textTracks().addTrack(s.track),!r&&!this.el_.hasAttribute("crossorigin")&&ni(s.src)&&(r=!0)):// This may not be fast enough to stop HTML5 browsers from reading the tags
// so we'll need to turn off any default tracks if we're manually doing
// captions and subtitles. videoElement.textTracks
i.push(s))}for(let e=0;e<i.length;e++)this.el_.removeChild(i[e])}this.proxyNativeTracks_(),this.featuresNativeTextTracks&&r&&i8.warn("Text Tracks are being loaded from another origin but the crossorigin attribute isn't used.\nThis may prevent text tracks from loading."),// prevent iOS Safari from disabling metadata text tracks during native playback
this.restoreMetadataTracksInIOSNativePlayer_(),(rv||rb)&&!0===e.nativeControlsForTouch&&this.setControls(!0),// on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`
// into a `fullscreenchange` event
this.proxyWebkitFullscreen_(),this.triggerReady()}/**
   * Dispose of `HTML5` media element and remove all tracks.
   */dispose(){this.el_&&this.el_.resetSourceset_&&this.el_.resetSourceset_(),aH.disposeMediaElement(this.el_),this.options_=null,// tech will handle clearing of the emulated track list
super.dispose()}/**
   * Modify the media element so that we can detect when
   * the source is changed. Fires `sourceset` just after the source has changed
   */setupSourcesetHandling_(){a$(this)}/**
   * When a captions track is enabled in the iOS Safari native player, all other
   * tracks are disabled (including metadata tracks), which nulls all of their
   * associated cue points. This will restore metadata tracks to their pre-fullscreen
   * state in those cases so that cue points are not needlessly lost.
   *
   * @private
   */restoreMetadataTracksInIOSNativePlayer_(){let e;let t=this.textTracks(),i=()=>{e=[];for(let i=0;i<t.length;i++){let r=t[i];"metadata"===r.kind&&e.push({track:r,storedMode:r.mode})}};// snapshot each metadata track's initial state, and update the snapshot
// each time there is a track 'change' event
i(),t.addEventListener("change",i),this.on("dispose",()=>t.removeEventListener("change",i));let r=()=>{for(let t=0;t<e.length;t++){let i=e[t];"disabled"===i.track.mode&&i.track.mode!==i.storedMode&&(i.track.mode=i.storedMode)}// we only want this handler to be executed on the first 'change' event
t.removeEventListener("change",r)};// when we enter fullscreen playback, stop updating the snapshot and
// restore all track modes to their pre-fullscreen state
this.on("webkitbeginfullscreen",()=>{t.removeEventListener("change",i),// remove the listener before adding it just in case it wasn't previously removed
t.removeEventListener("change",r),t.addEventListener("change",r)}),// start updating the snapshot again after leaving fullscreen
this.on("webkitendfullscreen",()=>{// remove the listener before adding it just in case it wasn't previously removed
t.removeEventListener("change",i),t.addEventListener("change",i),// remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback
t.removeEventListener("change",r)})}/**
   * Attempt to force override of tracks for the given type
   *
   * @param {string} type - Track type to override, possible values include 'Audio',
   * 'Video', and 'Text'.
   * @param {boolean} override - If set to true native audio/video will be overridden,
   * otherwise native audio/video will potentially be used.
   * @private
   */overrideNative_(e,t){// If there is no behavioral change don't add/remove listeners
if(t!==this[`featuresNative${e}Tracks`])return;let i=e.toLowerCase();this[`${i}TracksListeners_`]&&Object.keys(this[`${i}TracksListeners_`]).forEach(e=>{let t=this.el()[`${i}Tracks`];t.removeEventListener(e,this[`${i}TracksListeners_`][e])}),this[`featuresNative${e}Tracks`]=!t,this[`${i}TracksListeners_`]=null,this.proxyNativeTracksForType_(i)}/**
   * Attempt to force override of native audio tracks.
   *
   * @param {boolean} override - If set to true native audio will be overridden,
   * otherwise native audio will potentially be used.
   */overrideNativeAudioTracks(e){this.overrideNative_("Audio",e)}/**
   * Attempt to force override of native video tracks.
   *
   * @param {boolean} override - If set to true native video will be overridden,
   * otherwise native video will potentially be used.
   */overrideNativeVideoTracks(e){this.overrideNative_("Video",e)}/**
   * Proxy native track list events for the given type to our track
   * lists if the browser we are playing in supports that type of track list.
   *
   * @param {string} name - Track type; values include 'audio', 'video', and 'text'
   * @private
   */proxyNativeTracksForType_(e){let t=nh[e],i=this.el()[t.getterName],r=this[t.getterName]();if(!this[`featuresNative${t.capitalName}Tracks`]||!i||!i.addEventListener)return;let s={change:t=>{let i={type:"change",target:r,currentTarget:r,srcElement:r};r.trigger(i),"text"===e&&this[nd.remoteText.getterName]().trigger(i)},addtrack(e){r.addTrack(e.track)},removetrack(e){r.removeTrack(e.track)}},n=function(){let e=[];for(let t=0;t<r.length;t++){let s=!1;for(let e=0;e<i.length;e++)if(i[e]===r[t]){s=!0;break}s||e.push(r[t])}for(;e.length;)r.removeTrack(e.shift())};this[t.getterName+"Listeners_"]=s,Object.keys(s).forEach(e=>{let t=s[e];i.addEventListener(e,t),this.on("dispose",r=>i.removeEventListener(e,t))}),// Remove (native) tracks that are not used anymore
this.on("loadstart",n),this.on("dispose",e=>this.off("loadstart",n))}/**
   * Proxy all native track list events to our track lists if the browser we are playing
   * in supports that type of track list.
   *
   * @private
   */proxyNativeTracks_(){nh.names.forEach(e=>{this.proxyNativeTracksForType_(e)})}/**
   * Create the `Html5` Tech's DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */createEl(){let e=this.options_.tag;// Check if this browser supports moving the element into the box.
// On the iPhone video will break if you move the element,
// So we have to create a brand new element.
// If we ingested the player div, we do not need to move the media element.
if(!e||!(this.options_.playerElIngest||this.movingMediaElementInDOM)){// If the original tag is still there, clone and remove it.
if(e){let t=e.cloneNode(!0);e.parentNode&&e.parentNode.insertBefore(t,e),aH.disposeMediaElement(e),e=t}else{e=/*@__PURE__*/w(A).createElement("video");// determine if native controls should be used
let t=this.options_.tag&&rB(this.options_.tag),i=ri({},t);rv&&!0===this.options_.nativeControlsForTouch||delete i.controls,rU(e,Object.assign(i,{id:this.options_.techId,class:"vjs-tech"}))}e.playerId=this.options_.playerId}void 0!==this.options_.preload&&rj(e,"preload",this.options_.preload),void 0!==this.options_.disablePictureInPicture&&(e.disablePictureInPicture=this.options_.disablePictureInPicture);// Update specific tag settings, in case they were overridden
// `autoplay` has to be *last* so that `muted` and `playsinline` are present
// when iOS/Safari or other browsers attempt to autoplay.
let t=["loop","muted","playsinline","autoplay"];for(let i=0;i<t.length;i++){let r=t[i],s=this.options_[r];void 0!==s&&(s?rj(e,r,r):rq(e,r),e[r]=s)}return e}/**
   * This will be triggered if the loadstart event has already fired, before videojs was
   * ready. Two known examples of when this can happen are:
   * 1. If we're loading the playback object after it has started loading
   * 2. The media is already playing the (often with autoplay on) then
   *
   * This function will fire another loadstart so that videojs can catchup.
   *
   * @fires Tech#loadstart
   *
   * @return {undefined}
   *         returns nothing.
   */handleLateInit_(e){if(0===e.networkState||3===e.networkState)// or didn't find a source
return;if(0===e.readyState){// NetworkState is set synchronously BUT loadstart is fired at the
// end of the current stack, usually before setInterval(fn, 0).
// So at this point we know loadstart may have already fired or is
// about to fire, and either way the player hasn't seen it yet.
// We don't want to fire loadstart prematurely here and cause a
// double loadstart so we'll wait and see if it happens between now
// and the next loop, and fire it if not.
// HOWEVER, we also want to make sure it fires before loadedmetadata
// which could also happen between now and the next loop, so we'll
// watch for that also.
let e=!1,t=function(){e=!0};this.on("loadstart",t);let i=function(){// We did miss the original loadstart. Make sure the player
// sees loadstart before loadedmetadata
e||this.trigger("loadstart")};this.on("loadedmetadata",i),this.ready(function(){this.off("loadstart",t),this.off("loadedmetadata",i),e||this.trigger("loadstart")});return}// From here on we know that loadstart already fired and we missed it.
// The other readyState events aren't as much of a problem if we double
// them, so not going to go to as much trouble as loadstart to prevent
// that unless we find reason to.
let t=["loadstart"];// loadedmetadata: newly equal to HAVE_METADATA (1) or greater
t.push("loadedmetadata"),e.readyState>=2&&t.push("loadeddata"),e.readyState>=3&&t.push("canplay"),e.readyState>=4&&t.push("canplaythrough"),// We still need to give the player time to add event listeners
this.ready(function(){t.forEach(function(e){this.trigger(e)},this)})}/**
   * Set whether we are scrubbing or not.
   * This is used to decide whether we should use `fastSeek` or not.
   * `fastSeek` is used to provide trick play on Safari browsers.
   *
   * @param {boolean} isScrubbing
   *                  - true for we are currently scrubbing
   *                  - false for we are no longer scrubbing
   */setScrubbing(e){this.isScrubbing_=e}/**
   * Get whether we are scrubbing or not.
   *
   * @return {boolean} isScrubbing
   *                  - true for we are currently scrubbing
   *                  - false for we are no longer scrubbing
   */scrubbing(){return this.isScrubbing_}/**
   * Set current time for the `HTML5` tech.
   *
   * @param {number} seconds
   *        Set the current time of the media to this.
   */setCurrentTime(e){try{this.isScrubbing_&&this.el_.fastSeek&&rE?this.el_.fastSeek(e):this.el_.currentTime=e}catch(e){i8(e,"Video is not ready. (Video.js)");// this.warning(VideoJS.warnings.videoNotReady);
}}/**
   * Get the current duration of the HTML5 media element.
   *
   * @return {number}
   *         The duration of the media or 0 if there is no duration.
   */duration(){// Android Chrome will report duration as Infinity for VOD HLS until after
// playback has started, which triggers the live display erroneously.
// Return NaN if playback has not started and trigger a durationupdate once
// the duration can be reliably known.
if(this.el_.duration===1/0&&rl&&rc&&0===this.el_.currentTime){// Wait for the first `timeupdate` with currentTime > 0 - there may be
// several with 0
let e=()=>{this.el_.currentTime>0&&(this.el_.duration===1/0&&this.trigger("durationchange"),this.off("timeupdate",e))};return this.on("timeupdate",e),NaN}return this.el_.duration||NaN}/**
   * Get the current width of the HTML5 media element.
   *
   * @return {number}
   *         The width of the HTML5 media element.
   */width(){return this.el_.offsetWidth}/**
   * Get the current height of the HTML5 media element.
   *
   * @return {number}
   *         The height of the HTML5 media element.
   */height(){return this.el_.offsetHeight}/**
   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
   * `fullscreenchange` event.
   *
   * @private
   * @fires fullscreenchange
   * @listens webkitendfullscreen
   * @listens webkitbeginfullscreen
   * @listens webkitbeginfullscreen
   */proxyWebkitFullscreen_(){if(!("webkitDisplayingFullscreen"in this.el_))return;let e=function(){this.trigger("fullscreenchange",{isFullscreen:!1}),this.el_.controls&&!this.options_.nativeControlsForTouch&&this.controls()&&(this.el_.controls=!1)},t=function(){"webkitPresentationMode"in this.el_&&"picture-in-picture"!==this.el_.webkitPresentationMode&&(this.one("webkitendfullscreen",e),this.trigger("fullscreenchange",{isFullscreen:!0,// set a flag in case another tech triggers fullscreenchange
nativeIOSFullscreen:!0}))};this.on("webkitbeginfullscreen",t),this.on("dispose",()=>{this.off("webkitbeginfullscreen",t),this.off("webkitendfullscreen",e)})}/**
   * Check if fullscreen is supported on the video el.
   *
   * @return {boolean}
   *         - True if fullscreen is supported.
   *         - False if fullscreen is not supported.
   */supportsFullScreen(){return"function"==typeof this.el_.webkitEnterFullScreen}/**
   * Request that the `HTML5` Tech enter fullscreen.
   */enterFullScreen(){let e=this.el_;if(e.paused&&e.networkState<=e.HAVE_METADATA)// attempt to prime the video element for programmatic access
// this isn't necessary on the desktop but shouldn't hurt
sX(this.el_.play()),// playing and pausing synchronously during the transition to fullscreen
// can get iOS ~6.1 devices into a play/pause loop
this.setTimeout(function(){e.pause();try{e.webkitEnterFullScreen()}catch(e){this.trigger("fullscreenerror",e)}},0);else try{e.webkitEnterFullScreen()}catch(e){this.trigger("fullscreenerror",e)}}/**
   * Request that the `HTML5` Tech exit fullscreen.
   */exitFullScreen(){if(!this.el_.webkitDisplayingFullscreen){this.trigger("fullscreenerror",Error("The video is not fullscreen"));return}this.el_.webkitExitFullScreen()}/**
   * Create a floating video window always on top of other windows so that users may
   * continue consuming media while they interact with other content sites, or
   * applications on their device.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @return {Promise}
   *         A promise with a Picture-in-Picture window.
   */requestPictureInPicture(){return this.el_.requestPictureInPicture()}/**
   * Native requestVideoFrameCallback if supported by browser/tech, or fallback
   * Don't use rVCF on Safari when DRM is playing, as it doesn't fire
   * Needs to be checked later than the constructor
   * This will be a false positive for clear sources loaded after a Fairplay source
   *
   * @param {function} cb function to call
   * @return {number} id of request
   */requestVideoFrameCallback(e){return this.featuresVideoFrameCallback&&!this.el_.webkitKeys?this.el_.requestVideoFrameCallback(e):super.requestVideoFrameCallback(e)}/**
   * Native or fallback requestVideoFrameCallback
   *
   * @param {number} id request id to cancel
   */cancelVideoFrameCallback(e){this.featuresVideoFrameCallback&&!this.el_.webkitKeys?this.el_.cancelVideoFrameCallback(e):super.cancelVideoFrameCallback(e)}/**
   * A getter/setter for the `Html5` Tech's source object.
   * > Note: Please use {@link Html5#setSource}
   *
   * @param {Tech~SourceObject} [src]
   *        The source object you want to set on the `HTML5` techs element.
   *
   * @return {Tech~SourceObject|undefined}
   *         - The current source object when a source is not passed in.
   *         - undefined when setting
   *
   * @deprecated Since version 5.
   */src(e){if(void 0===e)return this.el_.src;// Setting src through `src` instead of `setSrc` will be deprecated
this.setSrc(e)}/**
   * Reset the tech by removing all sources and then calling
   * {@link Html5.resetMediaElement}.
   */reset(){aH.resetMediaElement(this.el_)}/**
   * Get the current source on the `HTML5` Tech. Falls back to returning the source from
   * the HTML5 media element.
   *
   * @return {Tech~SourceObject}
   *         The current source object from the HTML5 tech. With a fallback to the
   *         elements source.
   */currentSrc(){return this.currentSource_?this.currentSource_.src:this.el_.currentSrc}/**
   * Set controls attribute for the HTML5 media Element.
   *
   * @param {string} val
   *        Value to set the controls attribute to
   */setControls(e){this.el_.controls=!!e}/**
   * Create and returns a remote {@link TextTrack} object.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @return {TextTrack}
   *         The TextTrack that gets created.
   */addTextTrack(e,t,i){return this.featuresNativeTextTracks?this.el_.addTextTrack(e,t,i):super.addTextTrack(e,t,i)}/**
   * Creates either native TextTrack or an emulated TextTrack depending
   * on the value of `featuresNativeTextTracks`
   *
   * @param {Object} options
   *        The object should contain the options to initialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label]
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @param {boolean} [options.default]
   *        Default this track to on.
   *
   * @param {string} [options.id]
   *        The internal id to assign this track.
   *
   * @param {string} [options.src]
   *        A source url for the track.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */createRemoteTextTrack(e){if(!this.featuresNativeTextTracks)return super.createRemoteTextTrack(e);let t=/*@__PURE__*/w(A).createElement("track");return e.kind&&(t.kind=e.kind),e.label&&(t.label=e.label),(e.language||e.srclang)&&(t.srclang=e.language||e.srclang),e.default&&(t.default=e.default),e.id&&(t.id=e.id),e.src&&(t.src=e.src),t}/**
   * Creates a remote text track object and returns an html track element.
   *
   * @param {Object} options The object should contain values for
   * kind, language, label, and src (location of the WebVTT file)
   * @param {boolean} [manualCleanup=false] if set to true, the TextTrack
   * will not be removed from the TextTrackList and HtmlTrackElementList
   * after a source change
   * @return {HTMLTrackElement} An Html Track Element.
   * This can be an emulated {@link HTMLTrackElement} or a native one.
   *
   */addRemoteTextTrack(e,t){let i=super.addRemoteTextTrack(e,t);return this.featuresNativeTextTracks&&this.el().appendChild(i),i}/**
   * Remove remote `TextTrack` from `TextTrackList` object
   *
   * @param {TextTrack} track
   *        `TextTrack` object to remove
   */removeRemoteTextTrack(e){if(super.removeRemoteTextTrack(e),this.featuresNativeTextTracks){let t=this.$$("track"),i=t.length;for(;i--;)(e===t[i]||e===t[i].track)&&this.el().removeChild(t[i])}}/**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   */getVideoPlaybackQuality(){if("function"==typeof this.el().getVideoPlaybackQuality)return this.el().getVideoPlaybackQuality();let e={};return void 0!==this.el().webkitDroppedFrameCount&&void 0!==this.el().webkitDecodedFrameCount&&(e.droppedVideoFrames=this.el().webkitDroppedFrameCount,e.totalVideoFrames=this.el().webkitDecodedFrameCount),/*@__PURE__*/w(I).performance&&(e.creationTime=/*@__PURE__*/w(I).performance.now()),e}}/* HTML5 Support Testing ---------------------------------------------------- *//**
 * Element for testing browser HTML5 media capabilities
 *
 * @type {Element}
 * @constant
 * @private
 */rs(aH,"TEST_VID",function(){if(!rC())return;let e=/*@__PURE__*/w(A).createElement("video"),t=/*@__PURE__*/w(A).createElement("track");return t.kind="captions",t.srclang="en",t.label="English",e.appendChild(t),e}),/**
 * Check if HTML5 media is supported by this browser/device.
 *
 * @return {boolean}
 *         - True if HTML5 media is supported.
 *         - False if HTML5 media is not supported.
 */aH.isSupported=function(){// IE with no Media Player is a LIAR! (#984)
try{aH.TEST_VID.volume=.5}catch(e){return!1}return!!(aH.TEST_VID&&aH.TEST_VID.canPlayType)},/**
 * Check if the tech can support the given type
 *
 * @param {string} type
 *        The mimetype to check
 * @return {string} 'probably', 'maybe', or '' (empty string)
 */aH.canPlayType=function(e){return aH.TEST_VID.canPlayType(e)},/**
 * Check if the tech can support the given source
 *
 * @param {Object} srcObj
 *        The source object
 * @param {Object} options
 *        The options passed to the tech
 * @return {string} 'probably', 'maybe', or '' (empty string)
 */aH.canPlaySource=function(e,t){return aH.canPlayType(e.type)},/**
 * Check if the volume can be changed in this browser/device.
 * Volume cannot be changed in a lot of mobile devices.
 * Specifically, it can't be changed from 1 on iOS.
 *
 * @return {boolean}
 *         - True if volume can be controlled
 *         - False otherwise
 */aH.canControlVolume=function(){// IE will error if Windows Media Player not installed #3315
try{let e=aH.TEST_VID.volume;aH.TEST_VID.volume=e/2+.1;let t=e!==aH.TEST_VID.volume;// With the introduction of iOS 15, there are cases where the volume is read as
// changed but reverts back to its original state at the start of the next tick.
// To determine whether volume can be controlled on iOS,
// a timeout is set and the volume is checked asynchronously.
// Since `features` doesn't currently work asynchronously, the value is manually set.
if(t&&rS)// default iOS to false, which will be updated in the timeout above.
return /*@__PURE__*/w(I).setTimeout(()=>{aH&&aH.prototype&&(aH.prototype.featuresVolumeControl=e!==aH.TEST_VID.volume)}),!1;return t}catch(e){return!1}},/**
 * Check if the volume can be muted in this browser/device.
 * Some devices, e.g. iOS, don't allow changing volume
 * but permits muting/unmuting.
 *
 * @return {boolean}
 *      - True if volume can be muted
 *      - False otherwise
 */aH.canMuteVolume=function(){try{let e=aH.TEST_VID.muted;return(// in some versions of iOS muted property doesn't always
// work, so we want to set both property and attribute
aH.TEST_VID.muted=!e,aH.TEST_VID.muted?rj(aH.TEST_VID,"muted","muted"):rq(aH.TEST_VID,"muted","muted"),e!==aH.TEST_VID.muted)}catch(e){return!1}},/**
 * Check if the playback rate can be changed in this browser/device.
 *
 * @return {boolean}
 *         - True if playback rate can be controlled
 *         - False otherwise
 */aH.canControlPlaybackRate=function(){// Playback rate API is implemented in Android Chrome, but doesn't do anything
// https://github.com/videojs/video.js/issues/3180
if(rl&&rc&&rm<58)return!1;// IE will error if Windows Media Player not installed #3315
try{let e=aH.TEST_VID.playbackRate;return aH.TEST_VID.playbackRate=e/2+.1,e!==aH.TEST_VID.playbackRate}catch(e){return!1}},/**
 * Check if we can override a video/audio elements attributes, with
 * Object.defineProperty.
 *
 * @return {boolean}
 *         - True if builtin attributes can be overridden
 *         - False otherwise
 */aH.canOverrideAttributes=function(){// if we cannot overwrite the src/innerHTML property, there is no support
// iOS 7 safari for instance cannot do this.
try{let e=()=>{};Object.defineProperty(/*@__PURE__*/w(A).createElement("video"),"src",{get:e,set:e}),Object.defineProperty(/*@__PURE__*/w(A).createElement("audio"),"src",{get:e,set:e}),Object.defineProperty(/*@__PURE__*/w(A).createElement("video"),"innerHTML",{get:e,set:e}),Object.defineProperty(/*@__PURE__*/w(A).createElement("audio"),"innerHTML",{get:e,set:e})}catch(e){return!1}return!0},/**
 * Check to see if native `TextTrack`s are supported by this browser/device.
 *
 * @return {boolean}
 *         - True if native `TextTrack`s are supported.
 *         - False otherwise
 */aH.supportsNativeTextTracks=function(){return rE||rS&&rc},/**
 * Check to see if native `VideoTrack`s are supported by this browser/device
 *
 * @return {boolean}
 *        - True if native `VideoTrack`s are supported.
 *        - False otherwise
 */aH.supportsNativeVideoTracks=function(){return!!(aH.TEST_VID&&aH.TEST_VID.videoTracks)},/**
 * Check to see if native `AudioTrack`s are supported by this browser/device
 *
 * @return {boolean}
 *        - True if native `AudioTrack`s are supported.
 *        - False otherwise
 */aH.supportsNativeAudioTracks=function(){return!!(aH.TEST_VID&&aH.TEST_VID.audioTracks)},/**
 * An array of events available on the Html5 tech.
 *
 * @private
 * @type {Array}
 */aH.Events=["loadstart","suspend","abort","error","emptied","stalled","loadedmetadata","loadeddata","canplay","canplaythrough","playing","waiting","seeking","seeked","ended","durationchange","timeupdate","progress","play","pause","ratechange","resize","volumechange"],/**
 * Boolean indicating whether the `Tech` supports volume control.
 *
 * @type {boolean}
 * @default {@link Html5.canControlVolume}
 *//**
 * Boolean indicating whether the `Tech` supports muting volume.
 *
 * @type {boolean}
 * @default {@link Html5.canMuteVolume}
 *//**
 * Boolean indicating whether the `Tech` supports changing the speed at which the media
 * plays. Examples:
 *   - Set player to play 2x (twice) as fast
 *   - Set player to play 0.5x (half) as fast
 *
 * @type {boolean}
 * @default {@link Html5.canControlPlaybackRate}
 *//**
 * Boolean indicating whether the `Tech` supports the `sourceset` event.
 *
 * @type {boolean}
 * @default
 *//**
 * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeTextTracks}
 *//**
 * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeVideoTracks}
 *//**
 * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeAudioTracks}
 */[["featuresMuteControl","canMuteVolume"],["featuresPlaybackRate","canControlPlaybackRate"],["featuresSourceset","canOverrideAttributes"],["featuresNativeTextTracks","supportsNativeTextTracks"],["featuresNativeVideoTracks","supportsNativeVideoTracks"],["featuresNativeAudioTracks","supportsNativeAudioTracks"]].forEach(function([e,t]){rs(aH.prototype,e,()=>aH[t](),!0)}),aH.prototype.featuresVolumeControl=aH.canControlVolume(),/**
 * Boolean indicating whether the `HTML5` tech currently supports the media element
 * moving in the DOM. iOS breaks if you move the media element, so this is set this to
 * false there. Everywhere else this should be true.
 *
 * @type {boolean}
 * @default
 */aH.prototype.movingMediaElementInDOM=!rS,// TODO: Previous comment: No longer appears to be used. Can probably be removed.
//       Is this true?
/**
 * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
 * when going into fullscreen.
 *
 * @type {boolean}
 * @default
 */aH.prototype.featuresFullscreenResize=!0,/**
 * Boolean indicating whether the `HTML5` tech currently supports the progress event.
 * If this is false, manual `progress` events will be triggered instead.
 *
 * @type {boolean}
 * @default
 */aH.prototype.featuresProgressEvents=!0,/**
 * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
 * If this is false, manual `timeupdate` events will be triggered instead.
 *
 * @default
 */aH.prototype.featuresTimeupdateEvents=!0,/**
 * Whether the HTML5 el supports `requestVideoFrameCallback`
 *
 * @type {boolean}
 */aH.prototype.featuresVideoFrameCallback=!!(aH.TEST_VID&&aH.TEST_VID.requestVideoFrameCallback),aH.disposeMediaElement=function(e){if(e){// remove any child track or source nodes to prevent their loading
for(e.parentNode&&e.parentNode.removeChild(e);e.hasChildNodes();)e.removeChild(e.firstChild);// remove any src reference. not setting `src=''` because that causes a warning
// in firefox
e.removeAttribute("src"),"function"==typeof e.load&&function(){try{e.load()}catch(e){// not supported
}}()}},aH.resetMediaElement=function(e){if(!e)return;let t=e.querySelectorAll("source"),i=t.length;for(;i--;)e.removeChild(t[i]);// remove any src reference.
// not setting `src=''` because that throws an error
e.removeAttribute("src"),"function"==typeof e.load&&function(){try{e.load()}catch(e){// satisfy linter
}}()},/* Native HTML5 element property wrapping ----------------------------------- */// Wrap native boolean attributes with getters that check both property and attribute
// The list is as followed:
// muted, defaultMuted, autoplay, controls, loop, playsinline
[/**
 * Get the value of `muted` from the media element. `muted` indicates
 * that the volume for the media should be set to silent. This does not actually change
 * the `volume` attribute.
 *
 * @method Html5#muted
 * @return {boolean}
 *         - True if the value of `volume` should be ignored and the audio set to silent.
 *         - False if the value of `volume` should be used.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
 */"muted",/**
 * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
 * whether the media should start muted or not. Only changes the default state of the
 * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the
 * current state.
 *
 * @method Html5#defaultMuted
 * @return {boolean}
 *         - The value of `defaultMuted` from the media element.
 *         - True indicates that the media should start muted.
 *         - False indicates that the media should not start muted
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
 */"defaultMuted",/**
 * Get the value of `autoplay` from the media element. `autoplay` indicates
 * that the media should start to play as soon as the page is ready.
 *
 * @method Html5#autoplay
 * @return {boolean}
 *         - The value of `autoplay` from the media element.
 *         - True indicates that the media should start as soon as the page loads.
 *         - False indicates that the media should not start as soon as the page loads.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
 */"autoplay",/**
 * Get the value of `controls` from the media element. `controls` indicates
 * whether the native media controls should be shown or hidden.
 *
 * @method Html5#controls
 * @return {boolean}
 *         - The value of `controls` from the media element.
 *         - True indicates that native controls should be showing.
 *         - False indicates that native controls should be hidden.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
 */"controls",/**
 * Get the value of `loop` from the media element. `loop` indicates
 * that the media should return to the start of the media and continue playing once
 * it reaches the end.
 *
 * @method Html5#loop
 * @return {boolean}
 *         - The value of `loop` from the media element.
 *         - True indicates that playback should seek back to start once
 *           the end of a media is reached.
 *         - False indicates that playback should not loop back to the start when the
 *           end of the media is reached.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
 */"loop",/**
 * Get the value of `playsinline` from the media element. `playsinline` indicates
 * to the browser that non-fullscreen playback is preferred when fullscreen
 * playback is the native default, such as in iOS Safari.
 *
 * @method Html5#playsinline
 * @return {boolean}
 *         - The value of `playsinline` from the media element.
 *         - True indicates that the media should play inline.
 *         - False indicates that the media should not play inline.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
 */"playsinline"].forEach(function(e){aH.prototype[e]=function(){return this.el_[e]||this.el_.hasAttribute(e)}}),// Wrap native boolean attributes with setters that set both property and attribute
// The list is as followed:
// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline
// setControls is special-cased above
[/**
 * Set the value of `muted` on the media element. `muted` indicates that the current
 * audio level should be silent.
 *
 * @method Html5#setMuted
 * @param {boolean} muted
 *        - True if the audio should be set to silent
 *        - False otherwise
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
 */"muted",/**
 * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current
 * audio level should be silent, but will only effect the muted level on initial playback..
 *
 * @method Html5.prototype.setDefaultMuted
 * @param {boolean} defaultMuted
 *        - True if the audio should be set to silent
 *        - False otherwise
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
 */"defaultMuted",/**
 * Set the value of `autoplay` on the media element. `autoplay` indicates
 * that the media should start to play as soon as the page is ready.
 *
 * @method Html5#setAutoplay
 * @param {boolean} autoplay
 *         - True indicates that the media should start as soon as the page loads.
 *         - False indicates that the media should not start as soon as the page loads.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
 */"autoplay",/**
 * Set the value of `loop` on the media element. `loop` indicates
 * that the media should return to the start of the media and continue playing once
 * it reaches the end.
 *
 * @method Html5#setLoop
 * @param {boolean} loop
 *         - True indicates that playback should seek back to start once
 *           the end of a media is reached.
 *         - False indicates that playback should not loop back to the start when the
 *           end of the media is reached.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
 */"loop",/**
 * Set the value of `playsinline` from the media element. `playsinline` indicates
 * to the browser that non-fullscreen playback is preferred when fullscreen
 * playback is the native default, such as in iOS Safari.
 *
 * @method Html5#setPlaysinline
 * @param {boolean} playsinline
 *         - True indicates that the media should play inline.
 *         - False indicates that the media should not play inline.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
 */"playsinline"].forEach(function(e){aH.prototype["set"+sP(e)]=function(t){this.el_[e]=t,t?this.el_.setAttribute(e,e):this.el_.removeAttribute(e)}}),// Wrap native properties with a getter
// The list is as followed
// paused, currentTime, buffered, volume, poster, preload, error, seeking
// seekable, ended, playbackRate, defaultPlaybackRate, disablePictureInPicture
// played, networkState, readyState, videoWidth, videoHeight, crossOrigin
[/**
 * Get the value of `paused` from the media element. `paused` indicates whether the media element
 * is currently paused or not.
 *
 * @method Html5#paused
 * @return {boolean}
 *         The value of `paused` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
 */"paused",/**
 * Get the value of `currentTime` from the media element. `currentTime` indicates
 * the current second that the media is at in playback.
 *
 * @method Html5#currentTime
 * @return {number}
 *         The value of `currentTime` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
 */"currentTime",/**
 * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
 * object that represents the parts of the media that are already downloaded and
 * available for playback.
 *
 * @method Html5#buffered
 * @return {TimeRange}
 *         The value of `buffered` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
 */"buffered",/**
 * Get the value of `volume` from the media element. `volume` indicates
 * the current playback volume of audio for a media. `volume` will be a value from 0
 * (silent) to 1 (loudest and default).
 *
 * @method Html5#volume
 * @return {number}
 *         The value of `volume` from the media element. Value will be between 0-1.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
 */"volume",/**
 * Get the value of `poster` from the media element. `poster` indicates
 * that the url of an image file that can/will be shown when no media data is available.
 *
 * @method Html5#poster
 * @return {string}
 *         The value of `poster` from the media element. Value will be a url to an
 *         image.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
 */"poster",/**
 * Get the value of `preload` from the media element. `preload` indicates
 * what should download before the media is interacted with. It can have the following
 * values:
 * - none: nothing should be downloaded
 * - metadata: poster and the first few frames of the media may be downloaded to get
 *   media dimensions and other metadata
 * - auto: allow the media and metadata for the media to be downloaded before
 *    interaction
 *
 * @method Html5#preload
 * @return {string}
 *         The value of `preload` from the media element. Will be 'none', 'metadata',
 *         or 'auto'.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
 */"preload",/**
 * Get the value of the `error` from the media element. `error` indicates any
 * MediaError that may have occurred during playback. If error returns null there is no
 * current error.
 *
 * @method Html5#error
 * @return {MediaError|null}
 *         The value of `error` from the media element. Will be `MediaError` if there
 *         is a current error and null otherwise.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
 */"error",/**
 * Get the value of `seeking` from the media element. `seeking` indicates whether the
 * media is currently seeking to a new position or not.
 *
 * @method Html5#seeking
 * @return {boolean}
 *         - The value of `seeking` from the media element.
 *         - True indicates that the media is currently seeking to a new position.
 *         - False indicates that the media is not seeking to a new position at this time.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
 */"seeking",/**
 * Get the value of `seekable` from the media element. `seekable` returns a
 * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
 *
 * @method Html5#seekable
 * @return {TimeRange}
 *         The value of `seekable` from the media element. A `TimeRange` object
 *         indicating the current ranges of time that can be seeked to.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
 */"seekable",/**
 * Get the value of `ended` from the media element. `ended` indicates whether
 * the media has reached the end or not.
 *
 * @method Html5#ended
 * @return {boolean}
 *         - The value of `ended` from the media element.
 *         - True indicates that the media has ended.
 *         - False indicates that the media has not ended.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
 */"ended",/**
 * Get the value of `playbackRate` from the media element. `playbackRate` indicates
 * the rate at which the media is currently playing back. Examples:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5#playbackRate
 * @return {number}
 *         The value of `playbackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */"playbackRate",/**
 * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates
 * the rate at which the media is currently playing back. This value will not indicate the current
 * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.
 *
 * Examples:
 *   - if defaultPlaybackRate is set to 2, media will play twice as fast.
 *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5.prototype.defaultPlaybackRate
 * @return {number}
 *         The value of `defaultPlaybackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */"defaultPlaybackRate",/**
 * Get the value of 'disablePictureInPicture' from the video element.
 *
 * @method Html5#disablePictureInPicture
 * @return {boolean} value
 *         - The value of `disablePictureInPicture` from the video element.
 *         - True indicates that the video can't be played in Picture-In-Picture mode
 *         - False indicates that the video can be played in Picture-In-Picture mode
 *
 * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
 */"disablePictureInPicture",/**
 * Get the value of `played` from the media element. `played` returns a `TimeRange`
 * object representing points in the media timeline that have been played.
 *
 * @method Html5#played
 * @return {TimeRange}
 *         The value of `played` from the media element. A `TimeRange` object indicating
 *         the ranges of time that have been played.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
 */"played",/**
 * Get the value of `networkState` from the media element. `networkState` indicates
 * the current network state. It returns an enumeration from the following list:
 * - 0: NETWORK_EMPTY
 * - 1: NETWORK_IDLE
 * - 2: NETWORK_LOADING
 * - 3: NETWORK_NO_SOURCE
 *
 * @method Html5#networkState
 * @return {number}
 *         The value of `networkState` from the media element. This will be a number
 *         from the list in the description.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
 */"networkState",/**
 * Get the value of `readyState` from the media element. `readyState` indicates
 * the current state of the media element. It returns an enumeration from the
 * following list:
 * - 0: HAVE_NOTHING
 * - 1: HAVE_METADATA
 * - 2: HAVE_CURRENT_DATA
 * - 3: HAVE_FUTURE_DATA
 * - 4: HAVE_ENOUGH_DATA
 *
 * @method Html5#readyState
 * @return {number}
 *         The value of `readyState` from the media element. This will be a number
 *         from the list in the description.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
 */"readyState",/**
 * Get the value of `videoWidth` from the video element. `videoWidth` indicates
 * the current width of the video in css pixels.
 *
 * @method Html5#videoWidth
 * @return {number}
 *         The value of `videoWidth` from the video element. This will be a number
 *         in css pixels.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
 */"videoWidth",/**
 * Get the value of `videoHeight` from the video element. `videoHeight` indicates
 * the current height of the video in css pixels.
 *
 * @method Html5#videoHeight
 * @return {number}
 *         The value of `videoHeight` from the video element. This will be a number
 *         in css pixels.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
 */"videoHeight",/**
 * Get the value of `crossOrigin` from the media element. `crossOrigin` indicates
 * to the browser that should sent the cookies along with the requests for the
 * different assets/playlists
 *
 * @method Html5#crossOrigin
 * @return {string}
 *         - anonymous indicates that the media should not sent cookies.
 *         - use-credentials indicates that the media should sent cookies along the requests.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
 */"crossOrigin"].forEach(function(e){aH.prototype[e]=function(){return this.el_[e]}}),// Wrap native properties with a setter in this format:
// set + toTitleCase(name)
// The list is as follows:
// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate,
// setDisablePictureInPicture, setCrossOrigin
[/**
 * Set the value of `volume` on the media element. `volume` indicates the current
 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
 * so on.
 *
 * @method Html5#setVolume
 * @param {number} percentAsDecimal
 *        The volume percent as a decimal. Valid range is from 0-1.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
 */"volume",/**
 * Set the value of `src` on the media element. `src` indicates the current
 * {@link Tech~SourceObject} for the media.
 *
 * @method Html5#setSrc
 * @param {Tech~SourceObject} src
 *        The source object to set as the current source.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
 */"src",/**
 * Set the value of `poster` on the media element. `poster` is the url to
 * an image file that can/will be shown when no media data is available.
 *
 * @method Html5#setPoster
 * @param {string} poster
 *        The url to an image that should be used as the `poster` for the media
 *        element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
 */"poster",/**
 * Set the value of `preload` on the media element. `preload` indicates
 * what should download before the media is interacted with. It can have the following
 * values:
 * - none: nothing should be downloaded
 * - metadata: poster and the first few frames of the media may be downloaded to get
 *   media dimensions and other metadata
 * - auto: allow the media and metadata for the media to be downloaded before
 *    interaction
 *
 * @method Html5#setPreload
 * @param {string} preload
 *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
 *         or 'auto'.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
 */"preload",/**
 * Set the value of `playbackRate` on the media element. `playbackRate` indicates
 * the rate at which the media should play back. Examples:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5#setPlaybackRate
 * @return {number}
 *         The value of `playbackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */"playbackRate",/**
 * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates
 * the rate at which the media should play back upon initial startup. Changing this value
 * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.
 *
 * Example Values:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5.prototype.setDefaultPlaybackRate
 * @return {number}
 *         The value of `defaultPlaybackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}
 */"defaultPlaybackRate",/**
 * Prevents the browser from suggesting a Picture-in-Picture context menu
 * or to request Picture-in-Picture automatically in some cases.
 *
 * @method Html5#setDisablePictureInPicture
 * @param {boolean} value
 *         The true value will disable Picture-in-Picture mode.
 *
 * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
 */"disablePictureInPicture",/**
 * Set the value of `crossOrigin` from the media element. `crossOrigin` indicates
 * to the browser that should sent the cookies along with the requests for the
 * different assets/playlists
 *
 * @method Html5#setCrossOrigin
 * @param {string} crossOrigin
 *         - anonymous indicates that the media should not sent cookies.
 *         - use-credentials indicates that the media should sent cookies along the requests.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
 */"crossOrigin"].forEach(function(e){aH.prototype["set"+sP(e)]=function(t){this.el_[e]=t}}),// wrap native functions with a function
// The list is as follows:
// pause, load, play
[/**
 * A wrapper around the media elements `pause` function. This will call the `HTML5`
 * media elements `pause` function.
 *
 * @method Html5#pause
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
 */"pause",/**
 * A wrapper around the media elements `load` function. This will call the `HTML5`s
 * media element `load` function.
 *
 * @method Html5#load
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
 */"load",/**
 * A wrapper around the media elements `play` function. This will call the `HTML5`s
 * media element `play` function.
 *
 * @method Html5#play
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}
 */"play"].forEach(function(e){aH.prototype[e]=function(){return this.el_[e]()}}),np.withSourceHandlers(aH),/**
 * Native source handler for Html5, simply passes the source to the media element.
 *
 * @property {Tech~SourceObject} source
 *        The source object
 *
 * @property {Html5} tech
 *        The instance of the HTML5 tech.
 */aH.nativeSourceHandler={},/**
 * Check if the media element can play the given mime type.
 *
 * @param {string} type
 *        The mimetype to check
 *
 * @return {string}
 *         'probably', 'maybe', or '' (empty string)
 */aH.nativeSourceHandler.canPlayType=function(e){// IE without MediaPlayer throws an error (#519)
try{return aH.TEST_VID.canPlayType(e)}catch(e){return""}},/**
 * Check if the media element can handle a source natively.
 *
 * @param {Tech~SourceObject} source
 *         The source object
 *
 * @param {Object} [options]
 *         Options to be passed to the tech.
 *
 * @return {string}
 *         'probably', 'maybe', or '' (empty string).
 */aH.nativeSourceHandler.canHandleSource=function(e,t){// If a type was provided we should rely on that
if(e.type)return aH.nativeSourceHandler.canPlayType(e.type);if(e.src){let t=nt(e.src);return aH.nativeSourceHandler.canPlayType(`video/${t}`)}return""},/**
 * Pass the source to the native media element.
 *
 * @param {Tech~SourceObject} source
 *        The source object
 *
 * @param {Html5} tech
 *        The instance of the Html5 tech
 *
 * @param {Object} [options]
 *        The options to pass to the source
 */aH.nativeSourceHandler.handleSource=function(e,t,i){t.setSrc(e.src)},/**
 * A noop for the native dispose function, as cleanup is not needed.
 */aH.nativeSourceHandler.dispose=function(){},// Register the native source handler
aH.registerSourceHandler(aH.nativeSourceHandler),np.registerTech("Html5",aH);/**
 * @file player.js
 */// The following tech events are simply re-triggered
// on the player when they happen
const aV=[/**
 * Fired while the user agent is downloading media data.
 *
 * @event Player#progress
 * @type {Event}
 *//**
 * Retrigger the `progress` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechProgress_
 * @fires Player#progress
 * @listens Tech#progress
 */"progress",/**
 * Fires when the loading of an audio/video is aborted.
 *
 * @event Player#abort
 * @type {Event}
 *//**
 * Retrigger the `abort` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechAbort_
 * @fires Player#abort
 * @listens Tech#abort
 */"abort",/**
 * Fires when the browser is intentionally not getting media data.
 *
 * @event Player#suspend
 * @type {Event}
 *//**
 * Retrigger the `suspend` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechSuspend_
 * @fires Player#suspend
 * @listens Tech#suspend
 */"suspend",/**
 * Fires when the current playlist is empty.
 *
 * @event Player#emptied
 * @type {Event}
 *//**
 * Retrigger the `emptied` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechEmptied_
 * @fires Player#emptied
 * @listens Tech#emptied
 */"emptied",/**
 * Fires when the browser is trying to get media data, but data is not available.
 *
 * @event Player#stalled
 * @type {Event}
 *//**
 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechStalled_
 * @fires Player#stalled
 * @listens Tech#stalled
 */"stalled",/**
 * Fires when the browser has loaded meta data for the audio/video.
 *
 * @event Player#loadedmetadata
 * @type {Event}
 *//**
 * Retrigger the `loadedmetadata` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechLoadedmetadata_
 * @fires Player#loadedmetadata
 * @listens Tech#loadedmetadata
 */"loadedmetadata",/**
 * Fires when the browser has loaded the current frame of the audio/video.
 *
 * @event Player#loadeddata
 * @type {event}
 *//**
 * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechLoaddeddata_
 * @fires Player#loadeddata
 * @listens Tech#loadeddata
 */"loadeddata",/**
 * Fires when the current playback position has changed.
 *
 * @event Player#timeupdate
 * @type {event}
 *//**
 * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechTimeUpdate_
 * @fires Player#timeupdate
 * @listens Tech#timeupdate
 */"timeupdate",/**
 * Fires when the video's intrinsic dimensions change
 *
 * @event Player#resize
 * @type {event}
 *//**
 * Retrigger the `resize` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechResize_
 * @fires Player#resize
 * @listens Tech#resize
 */"resize",/**
 * Fires when the volume has been changed
 *
 * @event Player#volumechange
 * @type {event}
 *//**
 * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechVolumechange_
 * @fires Player#volumechange
 * @listens Tech#volumechange
 */"volumechange",/**
 * Fires when the text track has been changed
 *
 * @event Player#texttrackchange
 * @type {event}
 *//**
 * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechTexttrackchange_
 * @fires Player#texttrackchange
 * @listens Tech#texttrackchange
 */"texttrackchange"],az={canplay:"CanPlay",canplaythrough:"CanPlayThrough",playing:"Playing",seeked:"Seeked"},aW=["tiny","xsmall","small","medium","large","xlarge","huge"],aG={};// grep: vjs-layout-tiny
// grep: vjs-layout-x-small
// grep: vjs-layout-small
// grep: vjs-layout-medium
// grep: vjs-layout-large
// grep: vjs-layout-x-large
// grep: vjs-layout-huge
aW.forEach(e=>{let t="x"===e.charAt(0)?`x-${e.substring(1)}`:e;aG[e]=`vjs-layout-${t}`});const aX={tiny:210,xsmall:320,small:425,medium:768,large:1440,xlarge:2560,huge:1/0};/**
 * An instance of the `Player` class is created when any of the Video.js setup methods
 * are used to initialize a video.
 *
 * After an instance has been created it can be accessed globally in three ways:
 * 1. By calling `videojs.getPlayer('example_video_1');`
 * 2. By calling `videojs('example_video_1');` (not recommended)
 * 2. By using it directly via `videojs.players.example_video_1;`
 *
 * @extends Component
 * @global
 */class aK extends sN{/**
   * Create an instance of this class.
   *
   * @param {Element} tag
   *        The original video DOM element used for configuring options.
   *
   * @param {Object} [options]
   *        Object of option names and values.
   *
   * @param {Function} [ready]
   *        Ready callback function.
   */constructor(e,t,i){// If language is not set, get the closest lang attribute
if(// Make sure tag ID exists
// also here.. probably better
e.id=e.id||t.id||`vjs_video_${st++}`,// Delay the initialization of children because we need to set up
// player properties first, and can't use `this` before `super()`
// Set Options
// The options argument overrides options set in the video tag
// which overrides globally set options.
// This latter part coincides with the load order
// (tag must exist before Player)
(t=Object.assign(aK.getTagSettings(e),t)).initChildren=!1,// Same with creating the element
t.createEl=!1,// don't auto mixin the evented mixin
t.evented=!1,// we don't want the player to report touch activity on itself
// see enableTouchActivity in Component
t.reportTouchActivity=!1,!t.language){let i=e.closest("[lang]");i&&(t.language=i.getAttribute("lang"))}// if the global option object was accidentally blown away by
// someone, bail early with an informative error
if(// Run base component initializing with new options
super(null,t,i),// Create bound methods for document listeners.
this.boundDocumentFullscreenChange_=e=>this.documentFullscreenChange_(e),this.boundFullWindowOnEscKey_=e=>this.fullWindowOnEscKey(e),this.boundUpdateStyleEl_=e=>this.updateStyleEl_(e),this.boundApplyInitTime_=e=>this.applyInitTime_(e),this.boundUpdateCurrentBreakpoint_=e=>this.updateCurrentBreakpoint_(e),this.boundHandleTechClick_=e=>this.handleTechClick_(e),this.boundHandleTechDoubleClick_=e=>this.handleTechDoubleClick_(e),this.boundHandleTechTouchStart_=e=>this.handleTechTouchStart_(e),this.boundHandleTechTouchMove_=e=>this.handleTechTouchMove_(e),this.boundHandleTechTouchEnd_=e=>this.handleTechTouchEnd_(e),this.boundHandleTechTap_=e=>this.handleTechTap_(e),// default isFullscreen_ to false
this.isFullscreen_=!1,// create logger
this.log=i5(this.id_),// Hold our own reference to fullscreen api so it can be mocked in tests
this.fsApi_=iZ,// Tracks when a tech changes the poster
this.isPosterFromTech_=!1,// Holds callback info that gets queued when playback rate is zero
// and a seek is happening
this.queuedCallbacks_=[],// Turn off API access because we're loading a new tech that might load asynchronously
this.isReady_=!1,// Init state hasStarted_
this.hasStarted_=!1,// Init state userActive_
this.userActive_=!1,// Init debugEnabled_
this.debugEnabled_=!1,// Init state audioOnlyMode_
this.audioOnlyMode_=!1,// Init state audioPosterMode_
this.audioPosterMode_=!1,// Init state audioOnlyCache_
this.audioOnlyCache_={playerHeight:null,hiddenChildren:[]},!this.options_||!this.options_.techOrder||!this.options_.techOrder.length)throw Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");// Update Supported Languages
if(// Store the original tag used to set options
this.tag=e,// Store the tag attributes used to restore html5 element
this.tagAttributes=e&&rB(e),// Update current language
this.language(this.options_.language),t.languages){// Normalise player option languages to lowercase
let e={};Object.getOwnPropertyNames(t.languages).forEach(function(i){e[i.toLowerCase()]=t.languages[i]}),this.languages_=e}else this.languages_=aK.prototype.options_.languages;this.resetCache_(),// Set poster
/** @type string */this.poster_=t.poster||"",// Set controls
/** @type {boolean} */this.controls_=!!t.controls,// Original tag settings stored in options
// now remove immediately so native controls don't flash.
// May be turned back on by HTML5 tech if nativeControlsForTouch is true
e.controls=!1,e.removeAttribute("controls"),this.changingSrc_=!1,this.playCallbacks_=[],this.playTerminatedQueue_=[],e.hasAttribute("autoplay")?this.autoplay(!0):// set the correct value.
this.autoplay(this.options_.autoplay),t.plugins&&Object.keys(t.plugins).forEach(e=>{if("function"!=typeof this[e])throw Error(`plugin "${e}" does not exist`)}),/*
     * Store the internal state of scrubbing
     *
     * @private
     * @return {Boolean} True if the user is scrubbing
     */this.scrubbing_=!1,this.el_=this.createEl(),// Make this an evented object and use `el_` as its event bus.
sD(this,{eventBusKey:"el_"}),this.fsApi_.requestFullscreen&&(so(/*@__PURE__*/w(A),this.fsApi_.fullscreenchange,this.boundDocumentFullscreenChange_),this.on(this.fsApi_.fullscreenchange,this.boundDocumentFullscreenChange_)),this.fluid_&&this.on(["playerreset","resize"],this.boundUpdateStyleEl_);// We also want to pass the original player options to each component and plugin
// as well so they don't need to reach back into the player for options later.
// We also need to do another copy of this.options_ so we don't end up with
// an infinite loop.
let r=ri(this.options_);if(t.plugins&&Object.keys(t.plugins).forEach(e=>{this[e](t.plugins[e])}),t.debug&&this.debug(!0),this.options_.playerOptions=r,this.middleware_=[],this.playbackRates(t.playbackRates),t.experimentalSvgIcons){// Add SVG Sprite to the DOM
let e=new/*@__PURE__*/(w(I)).DOMParser,t=e.parseFromString('<svg xmlns="http://www.w3.org/2000/svg">\n  <defs>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-play">\n      <path d="M16 10v28l22-14z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-pause">\n      <path d="M12 38h8V10h-8v28zm16-28v28h8V10h-8z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-audio">\n      <path d="M24 2C14.06 2 6 10.06 6 20v14c0 3.31 2.69 6 6 6h6V24h-8v-4c0-7.73 6.27-14 14-14s14 6.27 14 14v4h-8v16h6c3.31 0 6-2.69 6-6V20c0-9.94-8.06-18-18-18z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-captions">\n      <path d="M38 8H10c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h28c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM22 22h-3v-1h-4v6h4v-1h3v2a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2zm14 0h-3v-1h-4v6h4v-1h3v2a2 2 0 0 1-2 2h-6a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-subtitles">\n      <path d="M40 8H8c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h32c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zM8 24h8v4H8v-4zm20 12H8v-4h20v4zm12 0h-8v-4h8v4zm0-8H20v-4h20v4z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-fullscreen-enter">\n      <path d="M14 28h-4v10h10v-4h-6v-6zm-4-8h4v-6h6v-4H10v10zm24 14h-6v4h10V28h-4v6zm-6-24v4h6v6h4V10H28z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-fullscreen-exit">\n      <path d="M10 32h6v6h4V28H10v4zm6-16h-6v4h10V10h-4v6zm12 22h4v-6h6v-4H28v10zm4-22v-6h-4v10h10v-4h-6z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-play-circle">\n      <path d="M20 33l12-9-12-9v18zm4-29C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-mute">\n      <path d="M33 24c0-3.53-2.04-6.58-5-8.05v4.42l4.91 4.91c.06-.42.09-.85.09-1.28zm5 0c0 1.88-.41 3.65-1.08 5.28l3.03 3.03C41.25 29.82 42 27 42 24c0-8.56-5.99-15.72-14-17.54v4.13c5.78 1.72 10 7.07 10 13.41zM8.55 6L6 8.55 15.45 18H6v12h8l10 10V26.55l8.51 8.51c-1.34 1.03-2.85 1.86-4.51 2.36v4.13a17.94 17.94 0 0 0 7.37-3.62L39.45 42 42 39.45l-18-18L8.55 6zM24 8l-4.18 4.18L24 16.36V8z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-low">\n      <path d="M14 18v12h8l10 10V8L22 18h-8z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-medium">\n      <path d="M37 24c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zm-27-6v12h8l10 10V8L18 18h-8z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-volume-high">\n      <path d="M6 18v12h8l10 10V8L14 18H6zm27 6c0-3.53-2.04-6.58-5-8.05v16.11c2.96-1.48 5-4.53 5-8.06zM28 6.46v4.13c5.78 1.72 10 7.07 10 13.41s-4.22 11.69-10 13.41v4.13c8.01-1.82 14-8.97 14-17.54S36.01 8.28 28 6.46z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-spinner">\n      <path d="M18.8 21l9.53-16.51C26.94 4.18 25.49 4 24 4c-4.8 0-9.19 1.69-12.64 4.51l7.33 12.69.11-.2zm24.28-3c-1.84-5.85-6.3-10.52-11.99-12.68L23.77 18h19.31zm.52 2H28.62l.58 1 9.53 16.5C41.99 33.94 44 29.21 44 24c0-1.37-.14-2.71-.4-4zm-26.53 4l-7.8-13.5C6.01 14.06 4 18.79 4 24c0 1.37.14 2.71.4 4h14.98l-2.31-4zM4.92 30c1.84 5.85 6.3 10.52 11.99 12.68L24.23 30H4.92zm22.54 0l-7.8 13.51c1.4.31 2.85.49 4.34.49 4.8 0 9.19-1.69 12.64-4.51L29.31 26.8 27.46 30z"></path>\n    </symbol>\n    <symbol viewBox="0 0 24 24" id="vjs-icon-hd">\n      <path d="M19 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-8 12H9.5v-2h-2v2H6V9h1.5v2.5h2V9H11v6zm2-6h4c.55 0 1 .45 1 1v4c0 .55-.45 1-1 1h-4V9zm1.5 4.5h2v-3h-2v3z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-chapters">\n      <path d="M6 26h4v-4H6v4zm0 8h4v-4H6v4zm0-16h4v-4H6v4zm8 8h28v-4H14v4zm0 8h28v-4H14v4zm0-20v4h28v-4H14z"></path>\n    </symbol>\n    <symbol viewBox="0 0 40 40" id="vjs-icon-downloading">\n      <path d="M18.208 36.875q-3.208-.292-5.979-1.729-2.771-1.438-4.812-3.729-2.042-2.292-3.188-5.229-1.146-2.938-1.146-6.23 0-6.583 4.334-11.416 4.333-4.834 10.833-5.5v3.166q-5.167.75-8.583 4.646Q6.25 14.75 6.25 19.958q0 5.209 3.396 9.104 3.396 3.896 8.562 4.646zM20 28.417L11.542 20l2.083-2.083 4.917 4.916v-11.25h2.916v11.25l4.875-4.916L28.417 20zm1.792 8.458v-3.167q1.833-.25 3.541-.958 1.709-.708 3.167-1.875l2.333 2.292q-1.958 1.583-4.25 2.541-2.291.959-4.791 1.167zm6.791-27.792q-1.541-1.125-3.25-1.854-1.708-.729-3.541-1.021V3.042q2.5.25 4.77 1.208 2.271.958 4.271 2.5zm4.584 21.584l-2.25-2.25q1.166-1.5 1.854-3.209.687-1.708.937-3.541h3.209q-.292 2.5-1.229 4.791-.938 2.292-2.521 4.209zm.541-12.417q-.291-1.833-.958-3.562-.667-1.73-1.833-3.188l2.375-2.208q1.541 1.916 2.458 4.208.917 2.292 1.167 4.75z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-file-download">\n      <path d="M10.8 40.55q-1.35 0-2.375-1T7.4 37.15v-7.7h3.4v7.7h26.35v-7.7h3.4v7.7q0 1.4-1 2.4t-2.4 1zM24 32.1L13.9 22.05l2.45-2.45 5.95 5.95V7.15h3.4v18.4l5.95-5.95 2.45 2.45z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-file-download-done">\n      <path d="M9.8 40.5v-3.45h28.4v3.45zm9.2-9.05L7.4 19.85l2.45-2.35L19 26.65l19.2-19.2 2.4 2.4z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-file-download-off">\n      <path d="M4.9 4.75L43.25 43.1 41 45.3l-4.75-4.75q-.05.05-.075.025-.025-.025-.075-.025H10.8q-1.35 0-2.375-1T7.4 37.15v-7.7h3.4v7.7h22.05l-7-7-1.85 1.8L13.9 21.9l1.85-1.85L2.7 7zm26.75 14.7l2.45 2.45-3.75 3.8-2.45-2.5zM25.7 7.15V21.1l-3.4-3.45V7.15z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-share">\n      <path d="M36 32.17c-1.52 0-2.89.59-3.93 1.54L17.82 25.4c.11-.45.18-.92.18-1.4s-.07-.95-.18-1.4l14.1-8.23c1.07 1 2.5 1.62 4.08 1.62 3.31 0 6-2.69 6-6s-2.69-6-6-6-6 2.69-6 6c0 .48.07.95.18 1.4l-14.1 8.23c-1.07-1-2.5-1.62-4.08-1.62-3.31 0-6 2.69-6 6s2.69 6 6 6c1.58 0 3.01-.62 4.08-1.62l14.25 8.31c-.1.42-.16.86-.16 1.31A5.83 5.83 0 1 0 36 32.17z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-cog">\n      <path d="M38.86 25.95c.08-.64.14-1.29.14-1.95s-.06-1.31-.14-1.95l4.23-3.31c.38-.3.49-.84.24-1.28l-4-6.93c-.25-.43-.77-.61-1.22-.43l-4.98 2.01c-1.03-.79-2.16-1.46-3.38-1.97L29 4.84c-.09-.47-.5-.84-1-.84h-8c-.5 0-.91.37-.99.84l-.75 5.3a14.8 14.8 0 0 0-3.38 1.97L9.9 10.1a1 1 0 0 0-1.22.43l-4 6.93c-.25.43-.14.97.24 1.28l4.22 3.31C9.06 22.69 9 23.34 9 24s.06 1.31.14 1.95l-4.22 3.31c-.38.3-.49.84-.24 1.28l4 6.93c.25.43.77.61 1.22.43l4.98-2.01c1.03.79 2.16 1.46 3.38 1.97l.75 5.3c.08.47.49.84.99.84h8c.5 0 .91-.37.99-.84l.75-5.3a14.8 14.8 0 0 0 3.38-1.97l4.98 2.01a1 1 0 0 0 1.22-.43l4-6.93c.25-.43.14-.97-.24-1.28l-4.22-3.31zM24 31c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-square">\n      <path d="M36 8H12c-2.21 0-4 1.79-4 4v24c0 2.21 1.79 4 4 4h24c2.21 0 4-1.79 4-4V12c0-2.21-1.79-4-4-4zm0 28H12V12h24v24z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-circle">\n      <circle cx="24" cy="24" r="20"></circle>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-circle-outline">\n      <path d="M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-circle-inner-circle">\n      <path d="M24 4C12.97 4 4 12.97 4 24s8.97 20 20 20 20-8.97 20-20S35.03 4 24 4zm0 36c-8.82 0-16-7.18-16-16S15.18 8 24 8s16 7.18 16 16-7.18 16-16 16zm6-16c0 3.31-2.69 6-6 6s-6-2.69-6-6 2.69-6 6-6 6 2.69 6 6z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-cancel">\n      <path d="M24 4C12.95 4 4 12.95 4 24s8.95 20 20 20 20-8.95 20-20S35.05 4 24 4zm10 27.17L31.17 34 24 26.83 16.83 34 14 31.17 21.17 24 14 16.83 16.83 14 24 21.17 31.17 14 34 16.83 26.83 24 34 31.17z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-replay">\n      <path d="M24 10V2L14 12l10 10v-8c6.63 0 12 5.37 12 12s-5.37 12-12 12-12-5.37-12-12H8c0 8.84 7.16 16 16 16s16-7.16 16-16-7.16-16-16-16z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-repeat">\n      <path d="M14 14h20v6l8-8-8-8v6H10v12h4v-8zm20 20H14v-6l-8 8 8 8v-6h24V26h-4v8z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-replay-5">\n      <path d="M17.689 98l-8.697 8.696 8.697 8.697 2.486-2.485-4.32-4.319h1.302c4.93 0 9.071 1.722 12.424 5.165 3.352 3.443 5.029 7.638 5.029 12.584h3.55c0-2.958-.553-5.73-1.658-8.313-1.104-2.583-2.622-4.841-4.555-6.774-1.932-1.932-4.19-3.45-6.773-4.555-2.584-1.104-5.355-1.657-8.313-1.657H15.5l4.615-4.615zm-8.08 21.659v13.861h11.357v5.008H9.609V143h12.7c.834 0 1.55-.298 2.146-.894.596-.597.895-1.31.895-2.145v-7.781c0-.835-.299-1.55-.895-2.147a2.929 2.929 0 0 0-2.147-.894h-8.227v-5.096H25.35v-4.384z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-replay-10">\n      <path d="M42.315 125.63c0-4.997-1.694-9.235-5.08-12.713-3.388-3.479-7.571-5.218-12.552-5.218h-1.315l4.363 4.363-2.51 2.51-8.787-8.786L25.221 97l2.45 2.45-4.662 4.663h1.375c2.988 0 5.788.557 8.397 1.673 2.61 1.116 4.892 2.65 6.844 4.602 1.953 1.953 3.487 4.234 4.602 6.844 1.116 2.61 1.674 5.41 1.674 8.398zM8.183 142v-19.657H3.176V117.8h9.643V142zm13.63 0c-1.156 0-2.127-.393-2.912-1.178-.778-.778-1.168-1.746-1.168-2.902v-16.04c0-1.156.393-2.127 1.178-2.912.779-.779 1.746-1.168 2.902-1.168h7.696c1.156 0 2.126.392 2.911 1.177.779.78 1.168 1.747 1.168 2.903v16.04c0 1.156-.392 2.127-1.177 2.912-.779.779-1.746 1.168-2.902 1.168zm.556-4.636h6.583v-15.02H22.37z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-replay-30">\n      <path d="M26.047 97l-8.733 8.732 8.733 8.733 2.496-2.494-4.336-4.338h1.307c4.95 0 9.108 1.73 12.474 5.187 3.367 3.458 5.051 7.668 5.051 12.635h3.565c0-2.97-.556-5.751-1.665-8.346-1.109-2.594-2.633-4.862-4.574-6.802-1.94-1.941-4.208-3.466-6.803-4.575-2.594-1.109-5.375-1.664-8.345-1.664H23.85l4.634-4.634zM2.555 117.531v4.688h10.297v5.25H5.873v4.687h6.979v5.156H2.555V142H13.36c1.061 0 1.95-.395 2.668-1.186.718-.79 1.076-1.772 1.076-2.94v-16.218c0-1.168-.358-2.149-1.076-2.94-.717-.79-1.607-1.185-2.668-1.185zm22.482.14c-1.149 0-2.11.39-2.885 1.165-.78.78-1.172 1.744-1.172 2.893v15.943c0 1.149.388 2.11 1.163 2.885.78.78 1.745 1.172 2.894 1.172h7.649c1.148 0 2.11-.388 2.884-1.163.78-.78 1.17-1.745 1.17-2.894v-15.943c0-1.15-.386-2.111-1.16-2.885-.78-.78-1.746-1.172-2.894-1.172zm.553 4.518h6.545v14.93H25.59z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-forward-5">\n      <path d="M29.508 97l-2.431 2.43 4.625 4.625h-1.364c-2.965 0-5.742.554-8.332 1.66-2.589 1.107-4.851 2.629-6.788 4.566-1.937 1.937-3.458 4.2-4.565 6.788-1.107 2.59-1.66 5.367-1.66 8.331h3.557c0-4.957 1.68-9.16 5.04-12.611 3.36-3.45 7.51-5.177 12.451-5.177h1.304l-4.326 4.33 2.49 2.49 8.715-8.716zm-9.783 21.61v13.89h11.382v5.018H19.725V142h12.727a2.93 2.93 0 0 0 2.15-.896 2.93 2.93 0 0 0 .896-2.15v-7.798c0-.837-.299-1.554-.896-2.152a2.93 2.93 0 0 0-2.15-.896h-8.245V123h11.29v-4.392z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-forward-10">\n      <path d="M23.119 97l-2.386 2.383 4.538 4.538h-1.339c-2.908 0-5.633.543-8.173 1.63-2.54 1.085-4.76 2.577-6.66 4.478-1.9 1.9-3.392 4.12-4.478 6.66-1.085 2.54-1.629 5.264-1.629 8.172h3.49c0-4.863 1.648-8.986 4.944-12.372 3.297-3.385 7.368-5.078 12.216-5.078h1.279l-4.245 4.247 2.443 2.442 8.55-8.55zm-9.52 21.45v4.42h4.871V142h4.513v-23.55zm18.136 0c-1.125 0-2.066.377-2.824 1.135-.764.764-1.148 1.709-1.148 2.834v15.612c0 1.124.38 2.066 1.139 2.824.764.764 1.708 1.145 2.833 1.145h7.489c1.125 0 2.066-.378 2.824-1.136.764-.764 1.145-1.709 1.145-2.833v-15.612c0-1.125-.378-2.067-1.136-2.825-.764-.764-1.708-1.145-2.833-1.145zm.54 4.42h6.408v14.617h-6.407z"></path>\n    </symbol>\n    <symbol viewBox="0 96 48 48" id="vjs-icon-forward-30">\n      <path d="M25.549 97l-2.437 2.434 4.634 4.635H26.38c-2.97 0-5.753.555-8.347 1.664-2.594 1.109-4.861 2.633-6.802 4.574-1.94 1.94-3.465 4.207-4.574 6.802-1.109 2.594-1.664 5.377-1.664 8.347h3.565c0-4.967 1.683-9.178 5.05-12.636 3.366-3.458 7.525-5.187 12.475-5.187h1.307l-4.335 4.338 2.495 2.494 8.732-8.732zm-11.553 20.53v4.689h10.297v5.249h-6.978v4.688h6.978v5.156H13.996V142h10.808c1.06 0 1.948-.395 2.666-1.186.718-.79 1.077-1.771 1.077-2.94v-16.217c0-1.169-.36-2.15-1.077-2.94-.718-.79-1.605-1.186-2.666-1.186zm21.174.168c-1.149 0-2.11.389-2.884 1.163-.78.78-1.172 1.745-1.172 2.894v15.942c0 1.15.388 2.11 1.162 2.885.78.78 1.745 1.17 2.894 1.17h7.649c1.149 0 2.11-.386 2.885-1.16.78-.78 1.17-1.746 1.17-2.895v-15.942c0-1.15-.387-2.11-1.161-2.885-.78-.78-1.745-1.172-2.894-1.172zm.552 4.516h6.542v14.931h-6.542z"></path>\n    </symbol>\n    <symbol viewBox="0 0 512 512" id="vjs-icon-audio-description">\n      <g fill-rule="evenodd"><path d="M227.29 381.351V162.993c50.38-1.017 89.108-3.028 117.631 17.126 27.374 19.342 48.734 56.965 44.89 105.325-4.067 51.155-41.335 94.139-89.776 98.475-24.085 2.155-71.972 0-71.972 0s-.84-1.352-.773-2.568m48.755-54.804c31.43 1.26 53.208-16.633 56.495-45.386 4.403-38.51-21.188-63.552-58.041-60.796v103.612c-.036 1.466.575 2.22 1.546 2.57"></path><path d="M383.78 381.328c13.336 3.71 17.387-11.06 23.215-21.408 12.722-22.571 22.294-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.51c-.587 3.874 2.226 7.315 3.865 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894"></path><path d="M425.154 381.328c13.336 3.71 17.384-11.061 23.215-21.408 12.721-22.571 22.291-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.511c-.586 3.874 2.226 7.315 3.866 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894"></path><path d="M466.26 381.328c13.337 3.71 17.385-11.061 23.216-21.408 12.722-22.571 22.292-51.594 22.445-84.774.221-47.594-18.343-82.517-35.6-106.182h-8.51c-.587 3.874 2.225 7.315 3.865 10.276 13.166 23.762 25.367 56.553 25.54 94.194.2 43.176-14.162 79.278-30.955 107.894M4.477 383.005H72.58l18.573-28.484 64.169-.135s.065 19.413.065 28.62h48.756V160.307h-58.816c-5.653 9.537-140.85 222.697-140.85 222.697zm152.667-145.282v71.158l-40.453-.27 40.453-70.888z"></path></g>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-next-item">\n      <path d="M12 36l17-12-17-12v24zm20-24v24h4V12h-4z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-previous-item">\n      <path d="M12 12h4v24h-4zm7 12l17 12V12z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-shuffle">\n      <path d="M21.17 18.34L10.83 8 8 10.83l10.34 10.34 2.83-2.83zM29 8l4.09 4.09L8 37.17 10.83 40l25.09-25.09L40 19V8H29zm.66 18.83l-2.83 2.83 6.26 6.26L29 40h11V29l-4.09 4.09-6.25-6.26z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-cast">\n      <path d="M42 6H6c-2.21 0-4 1.79-4 4v6h4v-6h36v28H28v4h14c2.21 0 4-1.79 4-4V10c0-2.21-1.79-4-4-4zM2 36v6h6c0-3.31-2.69-6-6-6zm0-8v4c5.52 0 10 4.48 10 10h4c0-7.73-6.27-14-14-14zm0-8v4c9.94 0 18 8.06 18 18h4c0-12.15-9.85-22-22-22z"></path>\n    </symbol>\n    <symbol viewBox="0 0 48 48" id="vjs-icon-picture-in-picture-enter">\n      <path d="M38 22H22v11.99h16V22zm8 16V9.96C46 7.76 44.2 6 42 6H6C3.8 6 2 7.76 2 9.96V38c0 2.2 1.8 4 4 4h36c2.2 0 4-1.8 4-4zm-4 .04H6V9.94h36v28.1z"></path>\n    </symbol>\n    <symbol viewBox="0 0 22 18" id="vjs-icon-picture-in-picture-exit">\n      <path d="M18 4H4v10h14V4zm4 12V1.98C22 .88 21.1 0 20 0H2C.9 0 0 .88 0 1.98V16c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zm-2 .02H2V1.97h18v14.05z"></path>\n      <path fill="none" d="M-1-3h24v24H-1z"></path>\n    </symbol>\n    <symbol viewBox="0 0 1792 1792" id="vjs-icon-facebook">\n      <path d="M1343 12v264h-157q-86 0-116 36t-30 108v189h293l-39 296h-254v759H734V905H479V609h255V391q0-186 104-288.5T1115 0q147 0 228 12z"></path>\n    </symbol>\n    <symbol viewBox="0 0 1792 1792" id="vjs-icon-linkedin">\n      <path d="M477 625v991H147V625h330zm21-306q1 73-50.5 122T312 490h-2q-82 0-132-49t-50-122q0-74 51.5-122.5T314 148t133 48.5T498 319zm1166 729v568h-329v-530q0-105-40.5-164.5T1168 862q-63 0-105.5 34.5T999 982q-11 30-11 81v553H659q2-399 2-647t-1-296l-1-48h329v144h-2q20-32 41-56t56.5-52 87-43.5T1285 602q171 0 275 113.5t104 332.5z"></path>\n    </symbol>\n    <symbol viewBox="0 0 1792 1792" id="vjs-icon-twitter">\n      <path d="M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5T1369.5 1125 1185 1335.5t-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5T285 1033q33 5 61 5 43 0 85-11-112-23-185.5-111.5T172 710v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5T884 653q-8-38-8-74 0-134 94.5-228.5T1199 256q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z"></path>\n    </symbol>\n    <symbol viewBox="0 0 1792 1792" id="vjs-icon-tumblr">\n      <path d="M1328 1329l80 237q-23 35-111 66t-177 32q-104 2-190.5-26T787 1564t-95-106-55.5-120-16.5-118V676H452V461q72-26 129-69.5t91-90 58-102 34-99T779 12q1-5 4.5-8.5T791 0h244v424h333v252h-334v518q0 30 6.5 56t22.5 52.5 49.5 41.5 81.5 14q78-2 134-29z"></path>\n    </symbol>\n    <symbol viewBox="0 0 1792 1792" id="vjs-icon-pinterest">\n      <path d="M1664 896q0 209-103 385.5T1281.5 1561 896 1664q-111 0-218-32 59-93 78-164 9-34 54-211 20 39 73 67.5t114 28.5q121 0 216-68.5t147-188.5 52-270q0-114-59.5-214T1180 449t-255-63q-105 0-196 29t-154.5 77-109 110.5-67 129.5T377 866q0 104 40 183t117 111q30 12 38-20 2-7 8-31t8-30q6-23-11-43-51-61-51-151 0-151 104.5-259.5T904 517q151 0 235.5 82t84.5 213q0 170-68.5 289T980 1220q-61 0-98-43.5T859 1072q8-35 26.5-93.5t30-103T927 800q0-50-27-83t-77-33q-62 0-105 57t-43 142q0 73 25 122l-99 418q-17 70-13 177-206-91-333-281T128 896q0-209 103-385.5T510.5 231 896 128t385.5 103T1561 510.5 1664 896z"></path>\n    </symbol>\n  </defs>\n</svg>',"image/svg+xml"),i=t.querySelector("parsererror");if(i)i8.warn("Failed to load SVG Icons. Falling back to Font Icons."),this.options_.experimentalSvgIcons=null;else{let e=t.documentElement;e.style.display="none",this.el_.appendChild(e),this.addClass("vjs-svg-icons-enabled")}}this.initChildren(),// Set isAudio based on whether or not an audio tag was used
this.isAudio("audio"===e.nodeName.toLowerCase()),this.controls()?this.addClass("vjs-controls-enabled"):this.addClass("vjs-controls-disabled"),// Set ARIA label and region role depending on player type
this.el_.setAttribute("role","region"),this.isAudio()?this.el_.setAttribute("aria-label",this.localize("Audio Player")):this.el_.setAttribute("aria-label",this.localize("Video Player")),this.isAudio()&&this.addClass("vjs-audio"),rv&&this.addClass("vjs-touch-enabled"),rS||this.addClass("vjs-workinghover"),// Make player easily findable by ID
aK.players[this.id_]=this;// Add a major version class to aid css in plugins
let s=iK.split(".")[0];this.addClass(`vjs-v${s}`),// When the player is first initialized, trigger activity so components
// like the control bar show themselves if needed
this.userActive(!0),this.reportUserActivity(),this.one("play",e=>this.listenForUserActivity_(e)),this.on("keydown",e=>this.handleKeyDown(e)),this.on("languagechange",e=>this.handleLanguagechange(e)),this.breakpoints(this.options_.breakpoints),this.responsive(this.options_.responsive),// Calling both the audio mode methods after the player is fully
// setup to be able to listen to the events triggered by them
this.on("ready",()=>{// Calling the audioPosterMode method first so that
// the audioOnlyMode can take precedence when both options are set to true
this.audioPosterMode(this.options_.audioPosterMode),this.audioOnlyMode(this.options_.audioOnlyMode)})}/**
   * Destroys the video player and does any necessary cleanup.
   *
   * This is especially helpful if you are dynamically adding and removing videos
   * to/from the DOM.
   *
   * @fires Player#dispose
   */dispose(){/**
     * Called when the player is being disposed of.
     *
     * @event Player#dispose
     * @type {Event}
     */this.trigger("dispose"),// prevent dispose from being called twice
this.off("dispose"),// Make sure all player-specific document listeners are unbound. This is
sl(/*@__PURE__*/w(A),this.fsApi_.fullscreenchange,this.boundDocumentFullscreenChange_),sl(/*@__PURE__*/w(A),"keydown",this.boundFullWindowOnEscKey_),this.styleEl_&&this.styleEl_.parentNode&&(this.styleEl_.parentNode.removeChild(this.styleEl_),this.styleEl_=null),// Kill reference to this player
aK.players[this.id_]=null,this.tag&&this.tag.player&&(this.tag.player=null),this.el_&&this.el_.player&&(this.el_.player=null),this.tech_&&(this.tech_.dispose(),this.isPosterFromTech_=!1,this.poster_=""),this.playerElIngest_&&(this.playerElIngest_=null),this.tag&&(this.tag=null),nf[this.id()]=null,// remove all event handlers for track lists
// all tracks and track listeners are removed on
// tech dispose
nc.names.forEach(e=>{let t=nc[e],i=this[t.getterName]();// if it is not a native list
// we have to manually remove event listeners
i&&i.off&&i.off()}),// the actual .el_ is removed here, or replaced if
super.dispose({restoreEl:this.options_.restoreEl})}/**
   * Create the `Player`'s DOM element.
   *
   * @return {Element}
   *         The DOM element that gets created.
   */createEl(){let e,t=this.tag,i=this.playerElIngest_=t.parentNode&&t.parentNode.hasAttribute&&t.parentNode.hasAttribute("data-vjs-player"),r="video-js"===this.tag.tagName.toLowerCase();i?e=this.el_=t.parentNode:r||(e=this.el_=super.createEl("div"));// Copy over all the attributes from the tag, including ID and class
// ID will now reference player box, not the video tag
let s=rB(t);if(r){for(e=this.el_=t,t=this.tag=/*@__PURE__*/w(A).createElement("video");e.children.length;)t.appendChild(e.firstChild);rO(e,"video-js")||rR(e,"video-js"),e.appendChild(t),i=this.playerElIngest_=e,// move properties over from our custom `video-js` element
// to our new `video` element. This will move things like
// `src` or `controls` that were set via js before the player
// was initialized.
Object.keys(e).forEach(i=>{try{t[i]=e[i]}catch(e){// we got a a property like outerHTML which we can't actually copy, ignore it
}})}// Add a style element in the player that we'll use to set the width/height
// of the player in a way that's still overridable by CSS, just like the
// video element
if(// set tabindex to -1 to remove the video element from the focus order
t.setAttribute("tabindex","-1"),s.tabindex="-1",rc&&ry&&(t.setAttribute("role","application"),s.role="application"),// Remove width/height attrs from tag so CSS can make it 100% width/height
t.removeAttribute("width"),t.removeAttribute("height"),"width"in s&&delete s.width,"height"in s&&delete s.height,Object.getOwnPropertyNames(s).forEach(function(i){r&&"class"===i||e.setAttribute(i,s[i]),r&&t.setAttribute(i,s[i])}),// Update tag id/class for use as HTML5 playback tech
// Might think we should do this after embedding in container so .vjs-tech class
// doesn't flash 100% width/height, but class only applies with .video-js parent
t.playerId=t.id,t.id+="_html5_api",t.className="vjs-tech",// Make player findable on elements
t.player=e.player=this,// Default state of video is paused
this.addClass("vjs-paused"),!0!==/*@__PURE__*/w(I).VIDEOJS_NO_DYNAMIC_STYLE){this.styleEl_=r7("vjs-styles-dimensions");let e=rZ(".vjs-styles-defaults"),t=rZ("head");t.insertBefore(this.styleEl_,e?e.nextSibling:t.firstChild)}this.fill_=!1,this.fluid_=!1,// Pass in the width/height/aspectRatio options which will update the style el
this.width(this.options_.width),this.height(this.options_.height),this.fill(this.options_.fill),this.fluid(this.options_.fluid),this.aspectRatio(this.options_.aspectRatio),// support both crossOrigin and crossorigin to reduce confusion and issues around the name
this.crossOrigin(this.options_.crossOrigin||this.options_.crossorigin);// Hide any links within the video/audio tag,
// because IE doesn't hide them completely from screen readers.
let n=t.getElementsByTagName("a");for(let e=0;e<n.length;e++){let t=n.item(e);rR(t,"vjs-hidden"),t.setAttribute("hidden","hidden")}return(// insertElFirst seems to cause the networkState to flicker from 3 to 2, so
// keep track of the original for later so we can know if the source originally failed
t.initNetworkState_=t.networkState,t.parentNode&&!i&&t.parentNode.insertBefore(e,t),// insert the tag as the first child of the player element
// then manually add it to the children array so that this.addChild
// will work properly for other components
//
// Breaks iPhone, fixed in HTML5 setup.
rP(t,e),this.children_.unshift(t),// Set lang attr on player to ensure CSS :lang() in consistent with player
// if it's been set to something different to the doc
this.el_.setAttribute("lang",this.language_),this.el_.setAttribute("translate","no"),this.el_=e,e)}/**
   * Get or set the `Player`'s crossOrigin option. For the HTML5 player, this
   * sets the `crossOrigin` property on the `<video>` tag to control the CORS
   * behavior.
   *
   * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}
   *
   * @param {string|null} [value]
   *        The value to set the `Player`'s crossOrigin to. If an argument is
   *        given, must be one of `'anonymous'` or `'use-credentials'`, or 'null'.
   *
   * @return {string|null|undefined}
   *         - The current crossOrigin value of the `Player` when getting.
   *         - undefined when setting
   */crossOrigin(e){// `null` can be set to unset a value
if(void 0===e)return this.techGet_("crossOrigin");if(null!==e&&"anonymous"!==e&&"use-credentials"!==e){i8.warn(`crossOrigin must be null,  "anonymous" or "use-credentials", given "${e}"`);return}this.techCall_("setCrossOrigin",e),this.posterImage&&this.posterImage.crossOrigin(e)}/**
   * A getter/setter for the `Player`'s width. Returns the player's configured value.
   * To get the current width use `currentWidth()`.
   *
   * @param {number|string} [value]
   *        CSS value to set the `Player`'s width to.
   *
   * @return {number|undefined}
   *         - The current width of the `Player` when getting.
   *         - Nothing when setting
   */width(e){return this.dimension("width",e)}/**
   * A getter/setter for the `Player`'s height. Returns the player's configured value.
   * To get the current height use `currentheight()`.
   *
   * @param {number|string} [value]
   *        CSS value to set the `Player`'s height to.
   *
   * @return {number|undefined}
   *         - The current height of the `Player` when getting.
   *         - Nothing when setting
   */height(e){return this.dimension("height",e)}/**
   * A getter/setter for the `Player`'s width & height.
   *
   * @param {string} dimension
   *        This string can be:
   *        - 'width'
   *        - 'height'
   *
   * @param {number|string} [value]
   *        Value for dimension specified in the first argument.
   *
   * @return {number}
   *         The dimension arguments value when getting (width/height).
   */dimension(e,t){let i=e+"_";if(void 0===t)return this[i]||0;if(""===t||"auto"===t){// If an empty string is given, reset the dimension to be automatic
this[i]=void 0,this.updateStyleEl_();return}let r=parseFloat(t);if(isNaN(r)){i8.error(`Improper value "${t}" supplied for for ${e}`);return}this[i]=r,this.updateStyleEl_()}/**
   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
   *
   * Turning this on will turn off fill mode.
   *
   * @param {boolean} [bool]
   *        - A value of true adds the class.
   *        - A value of false removes the class.
   *        - No value will be a getter.
   *
   * @return {boolean|undefined}
   *         - The value of fluid when getting.
   *         - `undefined` when setting.
   */fluid(e){if(void 0===e)return!!this.fluid_;this.fluid_=!!e,sb(this)&&this.off(["playerreset","resize"],this.boundUpdateStyleEl_),e?(this.addClass("vjs-fluid"),this.fill(!1),sv(this,()=>{this.on(["playerreset","resize"],this.boundUpdateStyleEl_)})):this.removeClass("vjs-fluid"),this.updateStyleEl_()}/**
   * A getter/setter/toggler for the vjs-fill `className` on the `Player`.
   *
   * Turning this on will turn off fluid mode.
   *
   * @param {boolean} [bool]
   *        - A value of true adds the class.
   *        - A value of false removes the class.
   *        - No value will be a getter.
   *
   * @return {boolean|undefined}
   *         - The value of fluid when getting.
   *         - `undefined` when setting.
   */fill(e){if(void 0===e)return!!this.fill_;this.fill_=!!e,e?(this.addClass("vjs-fill"),this.fluid(!1)):this.removeClass("vjs-fill")}/**
   * Get/Set the aspect ratio
   *
   * @param {string} [ratio]
   *        Aspect ratio for player
   *
   * @return {string|undefined}
   *         returns the current aspect ratio when getting
   *//**
   * A getter/setter for the `Player`'s aspect ratio.
   *
   * @param {string} [ratio]
   *        The value to set the `Player`'s aspect ratio to.
   *
   * @return {string|undefined}
   *         - The current aspect ratio of the `Player` when getting.
   *         - undefined when setting
   */aspectRatio(e){if(void 0===e)return this.aspectRatio_;// Check for width:height format
if(!/^\d+\:\d+$/.test(e))throw Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");this.aspectRatio_=e,// We're assuming if you set an aspect ratio you want fluid mode,
// because in fixed mode you could calculate width and height yourself.
this.fluid(!0),this.updateStyleEl_()}/**
   * Update styles of the `Player` element (height, width and aspect ratio).
   *
   * @private
   * @listens Tech#loadedmetadata
   */updateStyleEl_(){let e,t,i,r;if(!0===/*@__PURE__*/w(I).VIDEOJS_NO_DYNAMIC_STYLE){let e="number"==typeof this.width_?this.width_:this.options_.width,t="number"==typeof this.height_?this.height_:this.options_.height,i=this.tech_&&this.tech_.el();i&&(e>=0&&(i.width=e),t>=0&&(i.height=t));return}i=void 0!==this.aspectRatio_&&"auto"!==this.aspectRatio_?this.aspectRatio_:this.videoWidth()>0?this.videoWidth()+":"+this.videoHeight():"16:9";// Get the ratio as a decimal we can use to calculate dimensions
let s=i.split(":"),n=s[1]/s[0];e=void 0!==this.width_?this.width_:void 0!==this.height_?this.height_/n:this.videoWidth()||300,t=void 0!==this.height_?this.height_:e*n,r=/^[^a-zA-Z]/.test(this.id())?"dimensions-"+this.id():this.id()+"-dimensions",// Ensure the right class is still on the player for the style element
this.addClass(r),r9(this.styleEl_,`
      .${r} {
        width: ${e}px;
        height: ${t}px;
      }

      .${r}.vjs-fluid:not(.vjs-audio-only-mode) {
        padding-top: ${100*n}%;
      }
    `)}/**
   * Load/Create an instance of playback {@link Tech} including element
   * and API methods. Then append the `Tech` element in `Player` as a child.
   *
   * @param {string} techName
   *        name of the playback technology
   *
   * @param {string} source
   *        video source
   *
   * @private
   */loadTech_(e,t){this.tech_&&this.unloadTech_();let i=sP(e),r=e.charAt(0).toLowerCase()+e.slice(1);"Html5"!==i&&this.tag&&(np.getTech("Html5").disposeMediaElement(this.tag),this.tag.player=null,this.tag=null),this.techName_=i,// Turn off API access because we're loading a new tech that might load asynchronously
this.isReady_=!1;let s=this.autoplay();("string"==typeof this.autoplay()||!0===this.autoplay()&&this.options_.normalizeAutoplay)&&(s=!1);// Grab tech-specific options from player options and add source and parent element to use.
let n={source:t,autoplay:s,nativeControlsForTouch:this.options_.nativeControlsForTouch,playerId:this.id(),techId:`${this.id()}_${r}_api`,playsinline:this.options_.playsinline,preload:this.options_.preload,loop:this.options_.loop,disablePictureInPicture:this.options_.disablePictureInPicture,muted:this.options_.muted,poster:this.poster(),language:this.language(),playerElIngest:this.playerElIngest_||!1,"vtt.js":this.options_["vtt.js"],canOverridePoster:!!this.options_.techCanOverridePoster,enableSourceset:this.options_.enableSourceset};nc.names.forEach(e=>{let t=nc[e];n[t.getterName]=this[t.privateName]}),Object.assign(n,this.options_[i]),Object.assign(n,this.options_[r]),Object.assign(n,this.options_[e.toLowerCase()]),this.tag&&(n.tag=this.tag),t&&t.src===this.cache_.src&&this.cache_.currentTime>0&&(n.startTime=this.cache_.currentTime);// Initialize tech instance
let a=np.getTech(e);if(!a)throw Error(`No Tech named '${i}' exists! '${i}' should be registered using videojs.registerTech()'`);this.tech_=new a(n),// player.triggerReady is always async, so don't need this to be async
this.tech_.ready(sp(this,this.handleTechReady_),!0),sY.jsonToTextTracks(this.textTracksJson_||[],this.tech_),// Listen to all HTML5-defined events and trigger them on the player
aV.forEach(e=>{this.on(this.tech_,e,t=>this[`handleTech${sP(e)}_`](t))}),Object.keys(az).forEach(e=>{this.on(this.tech_,e,t=>{if(0===this.tech_.playbackRate()&&this.tech_.seeking()){this.queuedCallbacks_.push({callback:this[`handleTech${az[e]}_`].bind(this),event:t});return}this[`handleTech${az[e]}_`](t)})}),this.on(this.tech_,"loadstart",e=>this.handleTechLoadStart_(e)),this.on(this.tech_,"sourceset",e=>this.handleTechSourceset_(e)),this.on(this.tech_,"waiting",e=>this.handleTechWaiting_(e)),this.on(this.tech_,"ended",e=>this.handleTechEnded_(e)),this.on(this.tech_,"seeking",e=>this.handleTechSeeking_(e)),this.on(this.tech_,"play",e=>this.handleTechPlay_(e)),this.on(this.tech_,"pause",e=>this.handleTechPause_(e)),this.on(this.tech_,"durationchange",e=>this.handleTechDurationChange_(e)),this.on(this.tech_,"fullscreenchange",(e,t)=>this.handleTechFullscreenChange_(e,t)),this.on(this.tech_,"fullscreenerror",(e,t)=>this.handleTechFullscreenError_(e,t)),this.on(this.tech_,"enterpictureinpicture",e=>this.handleTechEnterPictureInPicture_(e)),this.on(this.tech_,"leavepictureinpicture",e=>this.handleTechLeavePictureInPicture_(e)),this.on(this.tech_,"error",e=>this.handleTechError_(e)),this.on(this.tech_,"posterchange",e=>this.handleTechPosterChange_(e)),this.on(this.tech_,"textdata",e=>this.handleTechTextData_(e)),this.on(this.tech_,"ratechange",e=>this.handleTechRateChange_(e)),this.on(this.tech_,"loadedmetadata",this.boundUpdateStyleEl_),this.usingNativeControls(this.techGet_("controls")),this.controls()&&!this.usingNativeControls()&&this.addTechControlsListeners_(),this.tech_.el().parentNode===this.el()||"Html5"===i&&this.tag||rP(this.tech_.el(),this.el()),this.tag&&(this.tag.player=null,this.tag=null)}/**
   * Unload and dispose of the current playback {@link Tech}.
   *
   * @private
   */unloadTech_(){// Save the current text tracks so that we can reuse the same text tracks with the next tech
nc.names.forEach(e=>{let t=nc[e];this[t.privateName]=this[t.getterName]()}),this.textTracksJson_=sY.textTracksToJson(this.tech_),this.isReady_=!1,this.tech_.dispose(),this.tech_=!1,this.isPosterFromTech_&&(this.poster_="",this.trigger("posterchange")),this.isPosterFromTech_=!1}/**
   * Return a reference to the current {@link Tech}.
   * It will print a warning by default about the danger of using the tech directly
   * but any argument that is passed in will silence the warning.
   *
   * @param {*} [safety]
   *        Anything passed in to silence the warning
   *
   * @return {Tech}
   *         The Tech
   */tech(e){return void 0===e&&i8.warn("Using the tech directly can be dangerous. I hope you know what you're doing.\nSee https://github.com/videojs/video.js/issues/2617 for more info.\n"),this.tech_}/**
   * Set up click and touch listeners for the playback element
   *
   * - On desktops: a click on the video itself will toggle playback
   * - On mobile devices: a click on the video toggles controls
   *   which is done by toggling the user state between active and
   *   inactive
   * - A tap can signal that a user has become active or has become inactive
   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
   *   quick tap should hide them again (signaling the user is in an inactive
   *   viewing state)
   * - In addition to this, we still want the user to be considered inactive after
   *   a few seconds of inactivity.
   *
   * > Note: the only part of iOS interaction we can't mimic with this setup
   * is a touch and hold on the video element counting as activity in order to
   * keep the controls showing, but that shouldn't be an issue. A touch and hold
   * on any controls will still keep the user active
   *
   * @private
   */addTechControlsListeners_(){// Make sure to remove all the previous listeners in case we are called multiple times.
this.removeTechControlsListeners_(),this.on(this.tech_,"click",this.boundHandleTechClick_),this.on(this.tech_,"dblclick",this.boundHandleTechDoubleClick_),// If the controls were hidden we don't want that to change without a tap event
// so we'll check if the controls were already showing before reporting user
// activity
this.on(this.tech_,"touchstart",this.boundHandleTechTouchStart_),this.on(this.tech_,"touchmove",this.boundHandleTechTouchMove_),this.on(this.tech_,"touchend",this.boundHandleTechTouchEnd_),// The tap listener needs to come after the touchend listener because the tap
// listener cancels out any reportedUserActivity when setting userActive(false)
this.on(this.tech_,"tap",this.boundHandleTechTap_)}/**
   * Remove the listeners used for click and tap controls. This is needed for
   * toggling to controls disabled, where a tap/touch should do nothing.
   *
   * @private
   */removeTechControlsListeners_(){// We don't want to just use `this.off()` because there might be other needed
// listeners added by techs that extend this.
this.off(this.tech_,"tap",this.boundHandleTechTap_),this.off(this.tech_,"touchstart",this.boundHandleTechTouchStart_),this.off(this.tech_,"touchmove",this.boundHandleTechTouchMove_),this.off(this.tech_,"touchend",this.boundHandleTechTouchEnd_),this.off(this.tech_,"click",this.boundHandleTechClick_),this.off(this.tech_,"dblclick",this.boundHandleTechDoubleClick_)}/**
   * Player waits for the tech to be ready
   *
   * @private
   */handleTechReady_(){this.triggerReady(),this.cache_.volume&&this.techCall_("setVolume",this.cache_.volume),// Look if the tech found a higher resolution poster while loading
this.handleTechPosterChange_(),// Update the duration if available
this.handleTechDurationChange_()}/**
   * Retrigger the `loadstart` event that was triggered by the {@link Tech}.
   *
   * @fires Player#loadstart
   * @listens Tech#loadstart
   * @private
   */handleTechLoadStart_(){// TODO: Update to use `emptied` event instead. See #1277.
this.removeClass("vjs-ended","vjs-seeking"),// reset the error state
this.error(null),// Update the duration
this.handleTechDurationChange_(),this.paused()&&// reset the hasStarted state
this.hasStarted(!1),/**
       * Fired when the user agent begins looking for media data
       *
       * @event Player#loadstart
       * @type {Event}
       */this.trigger("loadstart"),// autoplay happens after loadstart for the browser,
// so we mimic that behavior
this.manualAutoplay_(!0===this.autoplay()&&this.options_.normalizeAutoplay?"play":this.autoplay())}/**
   * Handle autoplay string values, rather than the typical boolean
   * values that should be handled by the tech. Note that this is not
   * part of any specification. Valid values and what they do can be
   * found on the autoplay getter at Player#autoplay()
   */manualAutoplay_(e){let t;if(!this.tech_||"string"!=typeof e)return;// Save original muted() value, set muted to true, and attempt to play().
// On promise rejection, restore muted from saved value
let i=()=>{let e=this.muted();this.muted(!0);let t=()=>{this.muted(e)};// restore muted on play terminatation
this.playTerminatedQueue_.push(t);let i=this.play();if(sG(i))return i.catch(e=>{throw t(),Error(`Rejection at manualAutoplay. Restoring muted value. ${e||""}`)})};if("any"!==e||this.muted()?t="muted"!==e||this.muted()?this.play():i():sG(t=this.play())&&(t=t.catch(i)),sG(t))return t.then(()=>{this.trigger({type:"autoplay-success",autoplay:e})}).catch(()=>{this.trigger({type:"autoplay-failure",autoplay:e})})}/**
   * Update the internal source caches so that we return the correct source from
   * `src()`, `currentSource()`, and `currentSources()`.
   *
   * > Note: `currentSources` will not be updated if the source that is passed in exists
   *         in the current `currentSources` cache.
   *
   *
   * @param {Tech~SourceObject} srcObj
   *        A string or object source to update our caches to.
   */updateSourceCaches_(e=""){let t=e,i="";"string"!=typeof t&&(t=e.src,i=e.type),// make sure all the caches are set to default values
// to prevent null checking
this.cache_.source=this.cache_.source||{},this.cache_.sources=this.cache_.sources||[],t&&!i&&(i=nw(this,t)),// update `currentSource` cache always
this.cache_.source=ri({},e,{src:t,type:i});let r=this.cache_.sources.filter(e=>e.src&&e.src===t),s=[],n=this.$$("source"),a=[];for(let e=0;e<n.length;e++){let i=rB(n[e]);s.push(i),i.src&&i.src===t&&a.push(i.src)}a.length&&!r.length?this.cache_.sources=s:r.length||(this.cache_.sources=[this.cache_.source]),// update the tech `src` cache
this.cache_.src=t}/**
   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}
   * causing the media element to reload.
   *
   * It will fire for the initial source and each subsequent source.
   * This event is a custom event from Video.js and is triggered by the {@link Tech}.
   *
   * The event object for this event contains a `src` property that will contain the source
   * that was available when the event was triggered. This is generally only necessary if Video.js
   * is switching techs while the source was being changed.
   *
   * It is also fired when `load` is called on the player (or media element)
   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}
   * says that the resource selection algorithm needs to be aborted and restarted.
   * In this case, it is very likely that the `src` property will be set to the
   * empty string `""` to indicate we do not know what the source will be but
   * that it is changing.
   *
   * *This event is currently still experimental and may change in minor releases.*
   * __To use this, pass `enableSourceset` option to the player.__
   *
   * @event Player#sourceset
   * @type {Event}
   * @prop {string} src
   *                The source url available when the `sourceset` was triggered.
   *                It will be an empty string if we cannot know what the source is
   *                but know that the source will change.
   *//**
   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.
   *
   * @fires Player#sourceset
   * @listens Tech#sourceset
   * @private
   */handleTechSourceset_(e){// only update the source cache when the source
// was not updated using the player api
if(!this.changingSrc_){let t=e=>this.updateSourceCaches_(e),i=this.currentSource().src,r=e.src;i&&!/^blob:/.test(i)&&/^blob:/.test(r)&&(!this.lastSource_||this.lastSource_.tech!==r&&this.lastSource_.player!==i)&&(t=()=>{}),// update the source to the initial source right away
// in some cases this will be empty string
t(r),e.src||this.tech_.any(["sourceset","loadstart"],e=>{// if a sourceset happens before a `loadstart` there
// is nothing to do as this `handleTechSourceset_`
// will be called again and this will be handled there.
if("sourceset"===e.type)return;let t=this.techGet_("currentSrc");this.lastSource_.tech=t,this.updateSourceCaches_(t)})}this.lastSource_={player:this.currentSource().src,tech:e.src},this.trigger({src:e.src,type:"sourceset"})}/**
   * Add/remove the vjs-has-started class
   *
   *
   * @param {boolean} request
   *        - true: adds the class
   *        - false: remove the class
   *
   * @return {boolean}
   *         the boolean value of hasStarted_
   */hasStarted(e){if(void 0===e)return this.hasStarted_;e!==this.hasStarted_&&(this.hasStarted_=e,this.hasStarted_?this.addClass("vjs-has-started"):this.removeClass("vjs-has-started"))}/**
   * Fired whenever the media begins or resumes playback
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
   * @fires Player#play
   * @listens Tech#play
   * @private
   */handleTechPlay_(){this.removeClass("vjs-ended","vjs-paused"),this.addClass("vjs-playing"),// hide the poster when the user hits play
this.hasStarted(!0),/**
     * Triggered whenever an {@link Tech#play} event happens. Indicates that
     * playback has started or resumed.
     *
     * @event Player#play
     * @type {Event}
     */this.trigger("play")}/**
   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
   *
   * If there were any events queued while the playback rate was zero, fire
   * those events now.
   *
   * @private
   * @method Player#handleTechRateChange_
   * @fires Player#ratechange
   * @listens Tech#ratechange
   */handleTechRateChange_(){this.tech_.playbackRate()>0&&0===this.cache_.lastPlaybackRate&&(this.queuedCallbacks_.forEach(e=>e.callback(e.event)),this.queuedCallbacks_=[]),this.cache_.lastPlaybackRate=this.tech_.playbackRate(),/**
     * Fires when the playing speed of the audio/video is changed
     *
     * @event Player#ratechange
     * @type {event}
     */this.trigger("ratechange")}/**
   * Retrigger the `waiting` event that was triggered by the {@link Tech}.
   *
   * @fires Player#waiting
   * @listens Tech#waiting
   * @private
   */handleTechWaiting_(){this.addClass("vjs-waiting"),/**
     * A readyState change on the DOM element has caused playback to stop.
     *
     * @event Player#waiting
     * @type {Event}
     */this.trigger("waiting");// Browsers may emit a timeupdate event after a waiting event. In order to prevent
// premature removal of the waiting class, wait for the time to change.
let e=this.currentTime(),t=()=>{e!==this.currentTime()&&(this.removeClass("vjs-waiting"),this.off("timeupdate",t))};this.on("timeupdate",t)}/**
   * Retrigger the `canplay` event that was triggered by the {@link Tech}.
   * > Note: This is not consistent between browsers. See #1351
   *
   * @fires Player#canplay
   * @listens Tech#canplay
   * @private
   */handleTechCanPlay_(){this.removeClass("vjs-waiting"),/**
     * The media has a readyState of HAVE_FUTURE_DATA or greater.
     *
     * @event Player#canplay
     * @type {Event}
     */this.trigger("canplay")}/**
   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
   *
   * @fires Player#canplaythrough
   * @listens Tech#canplaythrough
   * @private
   */handleTechCanPlayThrough_(){this.removeClass("vjs-waiting"),/**
     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
     * entire media file can be played without buffering.
     *
     * @event Player#canplaythrough
     * @type {Event}
     */this.trigger("canplaythrough")}/**
   * Retrigger the `playing` event that was triggered by the {@link Tech}.
   *
   * @fires Player#playing
   * @listens Tech#playing
   * @private
   */handleTechPlaying_(){this.removeClass("vjs-waiting"),/**
     * The media is no longer blocked from playback, and has started playing.
     *
     * @event Player#playing
     * @type {Event}
     */this.trigger("playing")}/**
   * Retrigger the `seeking` event that was triggered by the {@link Tech}.
   *
   * @fires Player#seeking
   * @listens Tech#seeking
   * @private
   */handleTechSeeking_(){this.addClass("vjs-seeking"),/**
     * Fired whenever the player is jumping to a new time
     *
     * @event Player#seeking
     * @type {Event}
     */this.trigger("seeking")}/**
   * Retrigger the `seeked` event that was triggered by the {@link Tech}.
   *
   * @fires Player#seeked
   * @listens Tech#seeked
   * @private
   */handleTechSeeked_(){this.removeClass("vjs-seeking","vjs-ended"),/**
     * Fired when the player has finished jumping to a new time
     *
     * @event Player#seeked
     * @type {Event}
     */this.trigger("seeked")}/**
   * Retrigger the `pause` event that was triggered by the {@link Tech}.
   *
   * @fires Player#pause
   * @listens Tech#pause
   * @private
   */handleTechPause_(){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),/**
     * Fired whenever the media has been paused
     *
     * @event Player#pause
     * @type {Event}
     */this.trigger("pause")}/**
   * Retrigger the `ended` event that was triggered by the {@link Tech}.
   *
   * @fires Player#ended
   * @listens Tech#ended
   * @private
   */handleTechEnded_(){this.addClass("vjs-ended"),this.removeClass("vjs-waiting"),this.options_.loop?(this.currentTime(0),this.play()):this.paused()||this.pause(),/**
     * Fired when the end of the media resource is reached (currentTime == duration)
     *
     * @event Player#ended
     * @type {Event}
     */this.trigger("ended")}/**
   * Fired when the duration of the media resource is first known or changed
   *
   * @listens Tech#durationchange
   * @private
   */handleTechDurationChange_(){this.duration(this.techGet_("duration"))}/**
   * Handle a click on the media element to play/pause
   *
   * @param {Event} event
   *        the event that caused this function to trigger
   *
   * @listens Tech#click
   * @private
   */handleTechClick_(e){// When controls are disabled a click should not toggle playback because
// the click is considered a control
this.controls_&&(void 0===this.options_||void 0===this.options_.userActions||void 0===this.options_.userActions.click||!1!==this.options_.userActions.click)&&(void 0!==this.options_&&void 0!==this.options_.userActions&&"function"==typeof this.options_.userActions.click?this.options_.userActions.click.call(this,e):this.paused()?sX(this.play()):this.pause())}/**
   * Handle a double-click on the media element to enter/exit fullscreen
   *
   * @param {Event} event
   *        the event that caused this function to trigger
   *
   * @listens Tech#dblclick
   * @private
   */handleTechDoubleClick_(e){if(!this.controls_)return;// we do not want to toggle fullscreen state
// when double-clicking inside a control bar or a modal
let t=Array.prototype.some.call(this.$$(".vjs-control-bar, .vjs-modal-dialog"),t=>t.contains(e.target));t||void 0!==this.options_&&void 0!==this.options_.userActions&&void 0!==this.options_.userActions.doubleClick&&!1===this.options_.userActions.doubleClick||(void 0!==this.options_&&void 0!==this.options_.userActions&&"function"==typeof this.options_.userActions.doubleClick?this.options_.userActions.doubleClick.call(this,e):this.isFullscreen()?this.exitFullscreen():this.requestFullscreen())}/**
   * Handle a tap on the media element. It will toggle the user
   * activity state, which hides and shows the controls.
   *
   * @listens Tech#tap
   * @private
   */handleTechTap_(){this.userActive(!this.userActive())}/**
   * Handle touch to start
   *
   * @listens Tech#touchstart
   * @private
   */handleTechTouchStart_(){this.userWasActive=this.userActive()}/**
   * Handle touch to move
   *
   * @listens Tech#touchmove
   * @private
   */handleTechTouchMove_(){this.userWasActive&&this.reportUserActivity()}/**
   * Handle touch to end
   *
   * @param {Event} event
   *        the touchend event that triggered
   *        this function
   *
   * @listens Tech#touchend
   * @private
   */handleTechTouchEnd_(e){// Stop the mouse events from also happening
e.cancelable&&e.preventDefault()}/**
   * @private
   */toggleFullscreenClass_(){this.isFullscreen()?this.addClass("vjs-fullscreen"):this.removeClass("vjs-fullscreen")}/**
   * when the document fschange event triggers it calls this
   */documentFullscreenChange_(e){let t=e.target.player;// if another player was fullscreen
// do a null check for targetPlayer because older firefox's would put document as e.target
if(t&&t!==this)return;let i=this.el(),r=/*@__PURE__*/w(A)[this.fsApi_.fullscreenElement]===i;!r&&i.matches&&(r=i.matches(":"+this.fsApi_.fullscreen)),this.isFullscreen(r)}/**
   * Handle Tech Fullscreen Change
   *
   * @param {Event} event
   *        the fullscreenchange event that triggered this function
   *
   * @param {Object} data
   *        the data that was sent with the event
   *
   * @private
   * @listens Tech#fullscreenchange
   * @fires Player#fullscreenchange
   */handleTechFullscreenChange_(e,t){t&&(t.nativeIOSFullscreen&&(this.addClass("vjs-ios-native-fs"),this.tech_.one("webkitendfullscreen",()=>{this.removeClass("vjs-ios-native-fs")})),this.isFullscreen(t.isFullscreen))}handleTechFullscreenError_(e,t){this.trigger("fullscreenerror",t)}/**
   * @private
   */togglePictureInPictureClass_(){this.isInPictureInPicture()?this.addClass("vjs-picture-in-picture"):this.removeClass("vjs-picture-in-picture")}/**
   * Handle Tech Enter Picture-in-Picture.
   *
   * @param {Event} event
   *        the enterpictureinpicture event that triggered this function
   *
   * @private
   * @listens Tech#enterpictureinpicture
   */handleTechEnterPictureInPicture_(e){this.isInPictureInPicture(!0)}/**
   * Handle Tech Leave Picture-in-Picture.
   *
   * @param {Event} event
   *        the leavepictureinpicture event that triggered this function
   *
   * @private
   * @listens Tech#leavepictureinpicture
   */handleTechLeavePictureInPicture_(e){this.isInPictureInPicture(!1)}/**
   * Fires when an error occurred during the loading of an audio/video.
   *
   * @private
   * @listens Tech#error
   */handleTechError_(){let e=this.tech_.error();e&&this.error(e)}/**
   * Retrigger the `textdata` event that was triggered by the {@link Tech}.
   *
   * @fires Player#textdata
   * @listens Tech#textdata
   * @private
   */handleTechTextData_(){let e=null;arguments.length>1&&(e=arguments[1]),/**
     * Fires when we get a textdata event from tech
     *
     * @event Player#textdata
     * @type {Event}
     */this.trigger("textdata",e)}/**
   * Get object for cached values.
   *
   * @return {Object}
   *         get the current object cache
   */getCache(){return this.cache_}/**
   * Resets the internal cache object.
   *
   * Using this function outside the player constructor or reset method may
   * have unintended side-effects.
   *
   * @private
   */resetCache_(){this.cache_={// Right now, the currentTime is not _really_ cached because it is always
// retrieved from the tech (see: currentTime). However, for completeness,
// we set it to zero here to ensure that if we do start actually caching
// it, we reset it along with everything else.
currentTime:0,initTime:0,inactivityTimeout:this.options_.inactivityTimeout,duration:NaN,lastVolume:1,lastPlaybackRate:this.defaultPlaybackRate(),media:null,src:"",source:{},sources:[],playbackRates:[],volume:1}}/**
   * Pass values to the playback tech
   *
   * @param {string} [method]
   *        the method to call
   *
   * @param {Object} [arg]
   *        the argument to pass
   *
   * @private
   */techCall_(e,t){// If it's not ready yet, call method when it is
this.ready(function(){if(e in nb){var i;return i=this.middleware_,this.tech_[e](i.reduce(nT(e),t))}if(e in nv)return ny(this.middleware_,this.tech_,e,t);try{this.tech_&&this.tech_[e](t)}catch(e){throw i8(e),e}},!0)}/**
   * Mediate attempt to call playback tech method
   * and return the value of the method called.
   *
   * @param {string} method
   *        Tech method
   *
   * @return {*}
   *         Value returned by the tech method called, undefined if tech
   *         is not ready or tech method is not present
   *
   * @private
   */techGet_(e){if(this.tech_&&this.tech_.isReady_){if(e in n_){var t,i;return t=this.middleware_,i=this.tech_,t.reduceRight(nT(e),i[e]())}if(e in nv)return ny(this.middleware_,this.tech_,e);// Log error when playback tech object is present but method
// is undefined or unavailable
try{return this.tech_[e]()}catch(t){// When building additional tech libs, an expected method may not be defined yet
if(void 0===this.tech_[e])throw i8(`Video.js: ${e} method not defined for ${this.techName_} playback technology.`,t),t;// When a method isn't available on the object it throws a TypeError
if("TypeError"===t.name)throw i8(`Video.js: ${e} unavailable on ${this.techName_} playback technology element.`,t),this.tech_.isReady_=!1,t;throw(// If error unknown, just log and throw
i8(t),t)}}}/**
   * Attempt to begin playback at the first opportunity.
   *
   * @return {Promise|undefined}
   *         Returns a promise if the browser supports Promises (or one
   *         was passed in as an option). This promise will be resolved on
   *         the return value of play. If this is undefined it will fulfill the
   *         promise chain otherwise the promise chain will be fulfilled when
   *         the promise from play is fulfilled.
   */play(){return new Promise(e=>{this.play_(e)})}/**
   * The actual logic for play, takes a callback that will be resolved on the
   * return value of play. This allows us to resolve to the play promise if there
   * is one on modern browsers.
   *
   * @private
   * @param {Function} [callback]
   *        The callback that should be called when the techs play is actually called
   */play_(e=sX){this.playCallbacks_.push(e);let t=!!(!this.changingSrc_&&(this.src()||this.currentSrc())),i=!!(rE||rS);// if the player/tech is not ready or the src itself is not ready
// queue up a call to play on `ready` or `loadstart`
if(this.waitToPlay_&&(this.off(["ready","loadstart"],this.waitToPlay_),this.waitToPlay_=null),!this.isReady_||!t){this.waitToPlay_=e=>{this.play_()},this.one(["ready","loadstart"],this.waitToPlay_),!t&&i&&this.load();return}// If the player/tech is ready and we have a source, we can attempt playback.
let r=this.techGet_("play"),s=i&&this.hasClass("vjs-ended");s&&this.resetProgressBar_(),null===r?this.runPlayTerminatedQueue_():this.runPlayCallbacks_(r)}/**
   * These functions will be run when if play is terminated. If play
   * runPlayCallbacks_ is run these function will not be run. This allows us
   * to differentiate between a terminated play and an actual call to play.
   */runPlayTerminatedQueue_(){let e=this.playTerminatedQueue_.slice(0);this.playTerminatedQueue_=[],e.forEach(function(e){e()})}/**
   * When a callback to play is delayed we have to run these
   * callbacks when play is actually called on the tech. This function
   * runs the callbacks that were delayed and accepts the return value
   * from the tech.
   *
   * @param {undefined|Promise} val
   *        The return value from the tech.
   */runPlayCallbacks_(e){let t=this.playCallbacks_.slice(0);this.playCallbacks_=[],// clear play terminatedQueue since we finished a real play
this.playTerminatedQueue_=[],t.forEach(function(t){t(e)})}/**
   * Pause the video playback
   */pause(){this.techCall_("pause")}/**
   * Check if the player is paused or has yet to play
   *
   * @return {boolean}
   *         - false: if the media is currently playing
   *         - true: if media is not currently playing
   */paused(){// The initial state of paused should be true (in Safari it's actually false)
return!1!==this.techGet_("paused")}/**
   * Get a TimeRange object representing the current ranges of time that the user
   * has played.
   *
   * @return { import('./utils/time').TimeRange }
   *         A time range object that represents all the increments of time that have
   *         been played.
   */played(){return this.techGet_("played")||sB(0,0)}/**
   * Sets or returns whether or not the user is "scrubbing". Scrubbing is
   * when the user has clicked the progress bar handle and is
   * dragging it along the progress bar.
   *
   * @param {boolean} [isScrubbing]
   *        whether the user is or is not scrubbing
   *
   * @return {boolean|undefined}
   *         - The value of scrubbing when getting
   *         - Nothing when setting
   */scrubbing(e){if(void 0===e)return this.scrubbing_;this.scrubbing_=!!e,this.techCall_("setScrubbing",this.scrubbing_),e?this.addClass("vjs-scrubbing"):this.removeClass("vjs-scrubbing")}/**
   * Get or set the current time (in seconds)
   *
   * @param {number|string} [seconds]
   *        The time to seek to in seconds
   *
   * @return {number|undefined}
   *         - the current time in seconds when getting
   *         - Nothing when setting
   */currentTime(e){if(void 0===e)return(// cache last currentTime and return. default to 0 seconds
//
// Caching the currentTime is meant to prevent a massive amount of reads on the tech's
// currentTime when scrubbing, but may not provide much performance benefit after all.
// Should be tested. Also something has to read the actual current time or the cache will
// never get updated.
this.cache_.currentTime=this.techGet_("currentTime")||0,this.cache_.currentTime);if(e<0&&(e=0),!this.isReady_||this.changingSrc_||!this.tech_||!this.tech_.isReady_){this.cache_.initTime=e,this.off("canplay",this.boundApplyInitTime_),this.one("canplay",this.boundApplyInitTime_);return}this.techCall_("setCurrentTime",e),this.cache_.initTime=0,isFinite(e)&&(this.cache_.currentTime=Number(e))}/**
   * Apply the value of initTime stored in cache as currentTime.
   *
   * @private
   */applyInitTime_(){this.currentTime(this.cache_.initTime)}/**
   * Normally gets the length in time of the video in seconds;
   * in all but the rarest use cases an argument will NOT be passed to the method
   *
   * > **NOTE**: The video must have started loading before the duration can be
   * known, and depending on preload behaviour may not be known until the video starts
   * playing.
   *
   * @fires Player#durationchange
   *
   * @param {number} [seconds]
   *        The duration of the video to set in seconds
   *
   * @return {number|undefined}
   *         - The duration of the video in seconds when getting
   *         - Nothing when setting
   */duration(e){if(void 0===e)return void 0!==this.cache_.duration?this.cache_.duration:NaN;(e=parseFloat(e))<0&&(e=1/0),e===this.cache_.duration||(// Cache the last set value for optimized scrubbing
this.cache_.duration=e,e===1/0?this.addClass("vjs-live"):this.removeClass("vjs-live"),isNaN(e)||// @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}
/**
         * @event Player#durationchange
         * @type {Event}
         */this.trigger("durationchange"))}/**
   * Calculates how much time is left in the video. Not part
   * of the native video API.
   *
   * @return {number}
   *         The time remaining in seconds
   */remainingTime(){return this.duration()-this.currentTime()}/**
   * A remaining time function that is intended to be used when
   * the time is to be displayed directly to the user.
   *
   * @return {number}
   *         The rounded time remaining in seconds
   */remainingTimeDisplay(){return Math.floor(this.duration())-Math.floor(this.currentTime())}//
// Kind of like an array of portions of the video that have been downloaded.
/**
   * Get a TimeRange object with an array of the times of the video
   * that have been downloaded. If you just want the percent of the
   * video that's been downloaded, use bufferedPercent.
   *
   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
   *
   * @return { import('./utils/time').TimeRange }
   *         A mock {@link TimeRanges} object (following HTML spec)
   */buffered(){let e=this.techGet_("buffered");return e&&e.length||(e=sB(0,0)),e}/**
   * Get the percent (as a decimal) of the video that's been downloaded.
   * This method is not a part of the native HTML video API.
   *
   * @return {number}
   *         A decimal between 0 and 1 representing the percent
   *         that is buffered 0 being 0% and 1 being 100%
   */bufferedPercent(){return sz(this.buffered(),this.duration())}/**
   * Get the ending time of the last buffered time range
   * This is used in the progress bar to encapsulate all time ranges.
   *
   * @return {number}
   *         The end of the last buffered time range
   */bufferedEnd(){let e=this.buffered(),t=this.duration(),i=e.end(e.length-1);return i>t&&(i=t),i}/**
   * Get or set the current volume of the media
   *
   * @param  {number} [percentAsDecimal]
   *         The new volume as a decimal percent:
   *         - 0 is muted/0%/off
   *         - 1.0 is 100%/full
   *         - 0.5 is half volume or 50%
   *
   * @return {number|undefined}
   *         The current volume as a percent when getting
   */volume(e){let t;if(void 0!==e){// Force value to between 0 and 1
t=Math.max(0,Math.min(1,e)),this.cache_.volume=t,this.techCall_("setVolume",t),t>0&&this.lastVolume_(t);return}return isNaN(// Default to 1 when returning current volume.
t=parseFloat(this.techGet_("volume")))?1:t}/**
   * Get the current muted state, or turn mute on or off
   *
   * @param {boolean} [muted]
   *        - true to mute
   *        - false to unmute
   *
   * @return {boolean|undefined}
   *         - true if mute is on and getting
   *         - false if mute is off and getting
   *         - nothing if setting
   */muted(e){if(void 0!==e){this.techCall_("setMuted",e);return}return this.techGet_("muted")||!1}/**
   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted
   * indicates the state of muted on initial playback.
   *
   * ```js
   *   var myPlayer = videojs('some-player-id');
   *
   *   myPlayer.src("http://www.example.com/path/to/video.mp4");
   *
   *   // get, should be false
   *   console.log(myPlayer.defaultMuted());
   *   // set to true
   *   myPlayer.defaultMuted(true);
   *   // get should be true
   *   console.log(myPlayer.defaultMuted());
   * ```
   *
   * @param {boolean} [defaultMuted]
   *        - true to mute
   *        - false to unmute
   *
   * @return {boolean|undefined}
   *         - true if defaultMuted is on and getting
   *         - false if defaultMuted is off and getting
   *         - Nothing when setting
   */defaultMuted(e){return void 0!==e&&this.techCall_("setDefaultMuted",e),this.techGet_("defaultMuted")||!1}/**
   * Get the last volume, or set it
   *
   * @param  {number} [percentAsDecimal]
   *         The new last volume as a decimal percent:
   *         - 0 is muted/0%/off
   *         - 1.0 is 100%/full
   *         - 0.5 is half volume or 50%
   *
   * @return {number|undefined}
   *         - The current value of lastVolume as a percent when getting
   *         - Nothing when setting
   *
   * @private
   */lastVolume_(e){if(void 0!==e&&0!==e){this.cache_.lastVolume=e;return}return this.cache_.lastVolume}/**
   * Check if current tech can support native fullscreen
   * (e.g. with built in controls like iOS)
   *
   * @return {boolean}
   *         if native fullscreen is supported
   */supportsFullScreen(){return this.techGet_("supportsFullScreen")||!1}/**
   * Check if the player is in fullscreen mode or tell the player that it
   * is or is not in fullscreen mode.
   *
   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
   * property and instead document.fullscreenElement is used. But isFullscreen is
   * still a valuable property for internal player workings.
   *
   * @param  {boolean} [isFS]
   *         Set the players current fullscreen state
   *
   * @return {boolean|undefined}
   *         - true if fullscreen is on and getting
   *         - false if fullscreen is off and getting
   *         - Nothing when setting
   */isFullscreen(e){if(void 0!==e){let t=this.isFullscreen_;this.isFullscreen_=!!e,this.isFullscreen_!==t&&this.fsApi_.prefixed&&/**
           * @event Player#fullscreenchange
           * @type {Event}
           */this.trigger("fullscreenchange"),this.toggleFullscreenClass_();return}return this.isFullscreen_}/**
   * Increase the size of the video to full screen
   * In some browsers, full screen is not supported natively, so it enters
   * "full window mode", where the video fills the browser window.
   * In browsers and devices that support native full screen, sometimes the
   * browser's default controls will be shown, and not the Video.js custom skin.
   * This includes most mobile devices (iOS, Android) and older versions of
   * Safari.
   *
   * @param  {Object} [fullscreenOptions]
   *         Override the player fullscreen options
   *
   * @fires Player#fullscreenchange
   */requestFullscreen(e){this.isInPictureInPicture()&&this.exitPictureInPicture();let t=this;return new Promise((i,r)=>{function s(){t.off("fullscreenerror",a),t.off("fullscreenchange",n)}function n(){s(),i()}function a(e,t){s(),r(t)}t.one("fullscreenchange",n),t.one("fullscreenerror",a);let o=t.requestFullscreenHelper_(e);o&&(o.then(s,s),o.then(i,r))})}requestFullscreenHelper_(e){let t;// This method works as follows:
// 1. if a fullscreen api is available, use it
//   1. call requestFullscreen with potential options
//   2. if we got a promise from above, use it to update isFullscreen()
// 2. otherwise, if the tech supports fullscreen, call `enterFullScreen` on it.
//   This is particularly used for iPhone, older iPads, and non-safari browser on iOS.
// 3. otherwise, use "fullWindow" mode
if(this.fsApi_.prefixed||(t=this.options_.fullscreen&&this.options_.fullscreen.options||{},void 0===e||(t=e)),this.fsApi_.requestFullscreen){let e=this.el_[this.fsApi_.requestFullscreen](t);return e&&e.then(()=>this.isFullscreen(!0),()=>this.isFullscreen(!1)),e}this.tech_.supportsFullScreen()&&!0==!this.options_.preferFullWindow?// with native controls
this.techCall_("enterFullScreen"):// fill the viewport
this.enterFullWindow()}/**
   * Return the video to its normal size after having been in full screen mode
   *
   * @fires Player#fullscreenchange
   */exitFullscreen(){let e=this;return new Promise((t,i)=>{function r(){e.off("fullscreenerror",n),e.off("fullscreenchange",s)}function s(){r(),t()}function n(e,t){r(),i(t)}e.one("fullscreenchange",s),e.one("fullscreenerror",n);let a=e.exitFullscreenHelper_();a&&(a.then(r,r),// map the promise to our resolve/reject methods
a.then(t,i))})}exitFullscreenHelper_(){if(this.fsApi_.requestFullscreen){let e=/*@__PURE__*/w(A)[this.fsApi_.exitFullscreen]();return e&&// potential error so that this chain doesn't have unhandled errors
sX(e.then(()=>this.isFullscreen(!1))),e}this.tech_.supportsFullScreen()&&!0==!this.options_.preferFullWindow?this.techCall_("exitFullScreen"):this.exitFullWindow()}/**
   * When fullscreen isn't supported we can stretch the
   * video container to as wide as the browser will let us.
   *
   * @fires Player#enterFullWindow
   */enterFullWindow(){this.isFullscreen(!0),this.isFullWindow=!0,// Storing original doc overflow value to return to when fullscreen is off
this.docOrigOverflow=/*@__PURE__*/w(A).documentElement.style.overflow,// Add listener for esc key to exit fullscreen
so(/*@__PURE__*/w(A),"keydown",this.boundFullWindowOnEscKey_),/*@__PURE__*/w(A).documentElement.style.overflow="hidden",// Apply fullscreen styles
rR(/*@__PURE__*/w(A).body,"vjs-full-window"),/**
     * @event Player#enterFullWindow
     * @type {Event}
     */this.trigger("enterFullWindow")}/**
   * Check for call to either exit full window or
   * full screen on ESC key
   *
   * @param {string} event
   *        Event to check for key press
   */fullWindowOnEscKey(e){/*@__PURE__*/w(L).isEventKey(e,"Esc")&&!0===this.isFullscreen()&&(this.isFullWindow?this.exitFullWindow():this.exitFullscreen())}/**
   * Exit full window
   *
   * @fires Player#exitFullWindow
   */exitFullWindow(){this.isFullscreen(!1),this.isFullWindow=!1,sl(/*@__PURE__*/w(A),"keydown",this.boundFullWindowOnEscKey_),/*@__PURE__*/w(A).documentElement.style.overflow=this.docOrigOverflow,// Remove fullscreen styles
rN(/*@__PURE__*/w(A).body,"vjs-full-window"),// Resize the box, controller, and poster to original sizes
// this.positionAll();
/**
     * @event Player#exitFullWindow
     * @type {Event}
     */this.trigger("exitFullWindow")}/**
   * Get or set disable Picture-in-Picture mode.
   *
   * @param {boolean} [value]
   *                  - true will disable Picture-in-Picture mode
   *                  - false will enable Picture-in-Picture mode
   */disablePictureInPicture(e){if(void 0===e)return this.techGet_("disablePictureInPicture");this.techCall_("setDisablePictureInPicture",e),this.options_.disablePictureInPicture=e,this.trigger("disablepictureinpicturechanged")}/**
   * Check if the player is in Picture-in-Picture mode or tell the player that it
   * is or is not in Picture-in-Picture mode.
   *
   * @param  {boolean} [isPiP]
   *         Set the players current Picture-in-Picture state
   *
   * @return {boolean|undefined}
   *         - true if Picture-in-Picture is on and getting
   *         - false if Picture-in-Picture is off and getting
   *         - nothing if setting
   */isInPictureInPicture(e){if(void 0!==e){this.isInPictureInPicture_=!!e,this.togglePictureInPictureClass_();return}return!!this.isInPictureInPicture_}/**
   * Create a floating video window always on top of other windows so that users may
   * continue consuming media while they interact with other content sites, or
   * applications on their device.
   *
   * This can use document picture-in-picture or element picture in picture
   *
   * Set `enableDocumentPictureInPicture` to `true` to use docPiP on a supported browser
   * Else set `disablePictureInPicture` to `false` to disable elPiP on a supported browser
   *
   *
   * @see [Spec]{@link https://w3c.github.io/picture-in-picture/}
   * @see [Spec]{@link https://wicg.github.io/document-picture-in-picture/}
   *
   * @fires Player#enterpictureinpicture
   *
   * @return {Promise}
   *         A promise with a Picture-in-Picture window.
   */requestPictureInPicture(){if(this.options_.enableDocumentPictureInPicture&&/*@__PURE__*/w(I).documentPictureInPicture){let e=/*@__PURE__*/w(A).createElement(this.el().tagName);return e.classList=this.el().classList,e.classList.add("vjs-pip-container"),this.posterImage&&e.appendChild(this.posterImage.el().cloneNode(!0)),this.titleBar&&e.appendChild(this.titleBar.el().cloneNode(!0)),e.appendChild(rA("p",{className:"vjs-pip-text"},{},this.localize("Playing in picture-in-picture"))),/*@__PURE__*/w(I).documentPictureInPicture.requestWindow({// The aspect ratio won't be correct, Chrome bug https://crbug.com/1407629
width:this.videoWidth(),height:this.videoHeight()}).then(t=>(r2(t),this.el_.parentNode.insertBefore(e,this.el_),t.document.body.appendChild(this.el_),t.document.body.classList.add("vjs-pip-window"),this.player_.isInPictureInPicture(!0),this.player_.trigger("enterpictureinpicture"),// Listen for the PiP closing event to move the video back.
    t.addEventListener("pagehide",t=>{let i=t.target.querySelector(".video-js");e.parentNode.replaceChild(i,e),this.player_.isInPictureInPicture(!1),this.player_.trigger("leavepictureinpicture")}),t))}return"pictureInPictureEnabled"in /*@__PURE__*/w(A)&&!1===this.disablePictureInPicture()?this.techGet_("requestPictureInPicture"):Promise.reject("No PiP mode is available")}/**
   * Exit Picture-in-Picture mode.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @fires Player#leavepictureinpicture
   *
   * @return {Promise}
   *         A promise.
   */exitPictureInPicture(){return /*@__PURE__*/w(I).documentPictureInPicture&&/*@__PURE__*/w(I).documentPictureInPicture.window?(/*@__PURE__*/w(I).documentPictureInPicture.window.close(),Promise.resolve()):"pictureInPictureEnabled"in /*@__PURE__*/w(A)?/*@__PURE__*/w(A).exitPictureInPicture():void 0}/**
   * Called when this Player has focus and a key gets pressed down, or when
   * any Component of this player receives a key press that it doesn't handle.
   * This allows player-wide hotkeys (either as defined below, or optionally
   * by an external function).
   *
   * @param {KeyboardEvent} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */handleKeyDown(e){let{userActions:t}=this.options_;// Bail out if hotkeys are not configured.
t&&t.hotkeys&&((e=>{let t=e.tagName.toLowerCase();return(// The first and easiest test is for `contenteditable` elements.
!!e.isContentEditable||("input"===t?-1===["button","checkbox","hidden","radio","reset","submit"].indexOf(e.type):-1!==["textarea"].indexOf(t)))})(this.el_.ownerDocument.activeElement)||("function"==typeof t.hotkeys?t.hotkeys.call(this,e):this.handleHotkeys(e)))}/**
   * Called when this Player receives a hotkey keydown event.
   * Supported player-wide hotkeys are:
   *
   *   f          - toggle fullscreen
   *   m          - toggle mute
   *   k or Space - toggle play/pause
   *
   * @param {Event} event
   *        The `keydown` event that caused this function to be called.
   */handleHotkeys(e){let t=this.options_.userActions?this.options_.userActions.hotkeys:{},{fullscreenKey:i=e=>/*@__PURE__*/w(L).isEventKey(e,"f"),muteKey:r=e=>/*@__PURE__*/w(L).isEventKey(e,"m"),playPauseKey:s=e=>/*@__PURE__*/w(L).isEventKey(e,"k")||/*@__PURE__*/w(L).isEventKey(e,"Space")}=t;if(i.call(this,e)){e.preventDefault(),e.stopPropagation();let t=sN.getComponent("FullscreenToggle");!1!==/*@__PURE__*/w(A)[this.fsApi_.fullscreenEnabled]&&t.prototype.handleClick.call(this,e)}else if(r.call(this,e)){e.preventDefault(),e.stopPropagation();let t=sN.getComponent("MuteToggle");t.prototype.handleClick.call(this,e)}else if(s.call(this,e)){e.preventDefault(),e.stopPropagation();let t=sN.getComponent("PlayToggle");t.prototype.handleClick.call(this,e)}}/**
   * Check whether the player can play a given mimetype
   *
   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
   *
   * @param {string} type
   *        The mimetype to check
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */canPlayType(e){let t;// Loop through each playback technology in the options order
for(let i=0,r=this.options_.techOrder;i<r.length;i++){let s=r[i],n=np.getTech(s);// Check if the current tech is defined before continuing
if(n||(n=sN.getComponent(s)),!n){i8.error(`The "${s}" tech is undefined. Skipped browser support check for that tech.`);continue}// Check if the browser supports this technology
if(n.isSupported()&&(t=n.canPlayType(e)))return t}return""}/**
   * Select source based on tech-order or source-order
   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
   * defaults to tech-order selection
   *
   * @param {Array} sources
   *        The sources for a media asset
   *
   * @return {Object|boolean}
   *         Object of source and tech order or false
   */selectSource(e){let t;// Get only the techs specified in `techOrder` that exist and are supported by the
// current platform
let i=this.options_.techOrder.map(e=>[e,np.getTech(e)]).filter(([e,t])=>// Check if the current tech is defined before continuing
    t?t.isSupported():(i8.error(`The "${e}" tech is undefined. Skipped browser support check for that tech.`),!1)),r=function(e,t,i){let r;return e.some(e=>t.some(t=>{if(r=i(e,t))return!0})),r},s=([e,t],i)=>{if(t.canPlaySource(i,this.options_[e.toLowerCase()]))return{source:i,tech:e}};return(t=this.options_.sourceOrder?r(e,i,(e,t)=>s(t,e)):r(i,e,s))||!1}/**
   * Executes source setting and getting logic
   *
   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
   *        A SourceObject, an array of SourceObjects, or a string referencing
   *        a URL to a media source. It is _highly recommended_ that an object
   *        or array of objects is used here, so that source selection
   *        algorithms can take the `type` into account.
   *
   *        If not provided, this method acts as a getter.
   * @param {boolean} [isRetry]
   *        Indicates whether this is being called internally as a result of a retry
   *
   * @return {string|undefined}
   *         If the `source` argument is missing, returns the current source
   *         URL. Otherwise, returns nothing/undefined.
   */handleSrc_(e,t){// getter usage
if(void 0===e)return this.cache_.src||"";this.resetRetryOnError_&&this.resetRetryOnError_();// filter out invalid sources and turn our source into
// an array of source objects
let i=nk(e);// if a source was passed in then it is invalid because
// it was filtered to a zero length Array. So we have to
// show an error
if(!i.length){this.setTimeout(function(){this.error({code:4,message:this.options_.notSupportedMessage})},0);return}// Try another available source if this one fails before playback.
if(// initial sources
this.changingSrc_=!0,t||(this.cache_.sources=i),this.updateSourceCaches_(i[0]),!// middlewareSource is the source after it has been changed by middleware
/**
 * Asynchronously sets a source using middleware by recursing through any
 * matching middlewares and calling `setSource` on each, passing along the
 * previous returned value each time.
 *
 * @param  { import('../player').default } player
 *         A {@link Player} instance.
 *
 * @param  {Tech~SourceObject} src
 *         A source object.
 *
 * @param  {Function}
 *         The next middleware to run.
 */function(e,t,i){e.setTimeout(()=>(function e(t={},i=[],r,s,n=[],a=!1){let[o,...l]=i;// if mwFactory is a string, then we're at a fork in the road
    if("string"==typeof o)e(t,nm[o],r,s,n,a);else if(o){let i=/**
 * {
 *  [playerId]: [[mwFactory, mwInstance], ...]
 * }
 *
 * @private
 */function(e,t){let i=nf[e.id()],r=null;if(null==i)return r=t(e),nf[e.id()]=[[t,r]],r;for(let e=0;e<i.length;e++){let[s,n]=i[e];s===t&&(r=n)}return null===r&&(r=t(e),i.push([t,r])),r}(s,o);// if setSource isn't present, implicitly select this middleware
    if(!i.setSource)return n.push(i),e(t,l,r,s,n,a);i.setSource(Object.assign({},t),function(o,u){// something happened, try the next middleware on the current level
    // make sure to use the old src
    if(o)return e(t,l,r,s,n,a);// we've succeeded, now we need to go deeper
    n.push(i),// if it's the same type, continue down the current chain
    // otherwise, we want to go down the new chain
    e(u,t.type===u.type?l:nm[u.type],r,s,n,a)})}else l.length?e(t,l,r,s,n,a):a?r(t,n):e(t,nm["*"],r,s,n,!0)})(t,nm[t.type],i,e),1)}(this,i[0],(e,r)=>{this.middleware_=r,t||(this.cache_.sources=i),this.updateSourceCaches_(e);let s=this.src_(e);if(s)return i.length>1?this.handleSrc_(i.slice(1)):(this.changingSrc_=!1,// We need to wrap this in a timeout to give folks a chance to add error event handlers
this.setTimeout(function(){this.error({code:4,message:this.options_.notSupportedMessage})},0),void // we could not find an appropriate tech, but let's still notify the delegate that this is it
// this needs a better comment about why this is needed
this.triggerReady());!/**
 * When the tech is set, passes the tech to each middleware's `setTech` method.
 *
 * @param {Object[]} middleware
 *        An array of middleware instances.
 *
 * @param { import('../tech/tech').default } tech
 *        A Video.js tech.
 */function(e,t){e.forEach(e=>e.setTech&&e.setTech(t))}(r,this.tech_)}),i.length>1){let e=()=>{// Remove the error modal
this.error(null),this.handleSrc_(i.slice(1),!0)},t=()=>{this.off("error",e)};this.one("error",e),this.one("playing",t),this.resetRetryOnError_=()=>{this.off("error",e),this.off("playing",t)}}}/**
   * Get or set the video source.
   *
   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
   *        A SourceObject, an array of SourceObjects, or a string referencing
   *        a URL to a media source. It is _highly recommended_ that an object
   *        or array of objects is used here, so that source selection
   *        algorithms can take the `type` into account.
   *
   *        If not provided, this method acts as a getter.
   *
   * @return {string|undefined}
   *         If the `source` argument is missing, returns the current source
   *         URL. Otherwise, returns nothing/undefined.
   */src(e){return this.handleSrc_(e,!1)}/**
   * Set the source object on the tech, returns a boolean that indicates whether
   * there is a tech that can play the source or not
   *
   * @param {Tech~SourceObject} source
   *        The source object to set on the Tech
   *
   * @return {boolean}
   *         - True if there is no Tech to playback this source
   *         - False otherwise
   *
   * @private
   */src_(e){let t=this.selectSource([e]);return!t||(sO(t.tech,this.techName_)?// wait until the tech is ready to set the source
// and set it synchronously if possible (#2326)
this.ready(function(){this.tech_.constructor.prototype.hasOwnProperty("setSource")?this.techCall_("setSource",e):this.techCall_("src",e.src),this.changingSrc_=!1},!0):(this.changingSrc_=!0,// load this technology with the chosen source
this.loadTech_(t.tech,t.source),this.tech_.ready(()=>{this.changingSrc_=!1})),!1)}/**
   * Begin loading the src data.
   */load(){// Workaround to use the load method with the VHS.
// Does not cover the case when the load method is called directly from the mediaElement.
if(this.tech_&&this.tech_.vhs){this.src(this.currentSource());return}this.techCall_("load")}/**
   * Reset the player. Loads the first tech in the techOrder,
   * removes all the text tracks in the existing `tech`,
   * and calls `reset` on the `tech`.
   */reset(){if(this.paused())this.doReset_();else{let e=this.play();sX(e.then(()=>this.doReset_()))}}doReset_(){this.tech_&&this.tech_.clearTracks("text"),this.resetCache_(),this.poster(""),this.loadTech_(this.options_.techOrder[0],null),this.techCall_("reset"),this.resetControlBarUI_(),sb(this)&&this.trigger("playerreset")}/**
   * Reset Control Bar's UI by calling sub-methods that reset
   * all of Control Bar's components
   */resetControlBarUI_(){this.resetProgressBar_(),this.resetPlaybackRate_(),this.resetVolumeBar_()}/**
   * Reset tech's progress so progress bar is reset in the UI
   */resetProgressBar_(){this.currentTime(0);let{currentTimeDisplay:e,durationDisplay:t,progressControl:i,remainingTimeDisplay:r}=this.controlBar||{},{seekBar:s}=i||{};e&&e.updateContent(),t&&t.updateContent(),r&&r.updateContent(),s&&(s.update(),s.loadProgressBar&&s.loadProgressBar.update())}/**
   * Reset Playback ratio
   */resetPlaybackRate_(){this.playbackRate(this.defaultPlaybackRate()),this.handleTechRateChange_()}/**
   * Reset Volume bar
   */resetVolumeBar_(){this.volume(1),this.trigger("volumechange")}/**
   * Returns all of the current source objects.
   *
   * @return {Tech~SourceObject[]}
   *         The current source objects
   */currentSources(){let e=this.currentSource(),t=[];return 0!==Object.keys(e).length&&t.push(e),this.cache_.sources||t}/**
   * Returns the current source object.
   *
   * @return {Tech~SourceObject}
   *         The current source object
   */currentSource(){return this.cache_.source||{}}/**
   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
   * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.
   *
   * @return {string}
   *         The current source
   */currentSrc(){return this.currentSource()&&this.currentSource().src||""}/**
   * Get the current source type e.g. video/mp4
   * This can allow you rebuild the current source object so that you could load the same
   * source and tech later
   *
   * @return {string}
   *         The source MIME type
   */currentType(){return this.currentSource()&&this.currentSource().type||""}/**
   * Get or set the preload attribute
   *
   * @param {'none'|'auto'|'metadata'} [value]
   *        Preload mode to pass to tech
   *
   * @return {string|undefined}
   *         - The preload attribute value when getting
   *         - Nothing when setting
   */preload(e){if(void 0!==e){this.techCall_("setPreload",e),this.options_.preload=e;return}return this.techGet_("preload")}/**
   * Get or set the autoplay option. When this is a boolean it will
   * modify the attribute on the tech. When this is a string the attribute on
   * the tech will be removed and `Player` will handle autoplay on loadstarts.
   *
   * @param {boolean|'play'|'muted'|'any'} [value]
   *        - true: autoplay using the browser behavior
   *        - false: do not autoplay
   *        - 'play': call play() on every loadstart
   *        - 'muted': call muted() then play() on every loadstart
   *        - 'any': call play() on every loadstart. if that fails call muted() then play().
   *        - *: values other than those listed here will be set `autoplay` to true
   *
   * @return {boolean|string|undefined}
   *         - The current value of autoplay when getting
   *         - Nothing when setting
   */autoplay(e){let t;// getter usage
if(void 0===e)return this.options_.autoplay||!1;"string"==typeof e&&/(any|play|muted)/.test(e)||!0===e&&this.options_.normalizeAutoplay?(this.options_.autoplay=e,this.manualAutoplay_("string"==typeof e?e:"play"),t=!1):e?this.options_.autoplay=!0:this.options_.autoplay=!1,t=void 0===t?this.options_.autoplay:t,this.tech_&&this.techCall_("setAutoplay",t)}/**
   * Set or unset the playsinline attribute.
   * Playsinline tells the browser that non-fullscreen playback is preferred.
   *
   * @param {boolean} [value]
   *        - true means that we should try to play inline by default
   *        - false means that we should use the browser's default playback mode,
   *          which in most cases is inline. iOS Safari is a notable exception
   *          and plays fullscreen by default.
   *
   * @return {string|undefined}
   *         - the current value of playsinline
   *         - Nothing when setting
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
   */playsinline(e){return void 0!==e&&(this.techCall_("setPlaysinline",e),this.options_.playsinline=e),this.techGet_("playsinline")}/**
   * Get or set the loop attribute on the video element.
   *
   * @param {boolean} [value]
   *        - true means that we should loop the video
   *        - false means that we should not loop the video
   *
   * @return {boolean|undefined}
   *         - The current value of loop when getting
   *         - Nothing when setting
   */loop(e){if(void 0!==e){this.techCall_("setLoop",e),this.options_.loop=e;return}return this.techGet_("loop")}/**
   * Get or set the poster image source url
   *
   * @fires Player#posterchange
   *
   * @param {string} [src]
   *        Poster image source URL
   *
   * @return {string|undefined}
   *         - The current value of poster when getting
   *         - Nothing when setting
   */poster(e){if(void 0===e)return this.poster_;e||(e=""),e!==this.poster_&&(// update the internal poster variable
this.poster_=e,// update the tech's poster
this.techCall_("setPoster",e),this.isPosterFromTech_=!1,// alert components that the poster has been set
/**
     * This event fires when the poster image is changed on the player.
     *
     * @event Player#posterchange
     * @type {Event}
     */this.trigger("posterchange"))}/**
   * Some techs (e.g. YouTube) can provide a poster source in an
   * asynchronous way. We want the poster component to use this
   * poster source so that it covers up the tech's controls.
   * (YouTube's play button). However we only want to use this
   * source if the player user hasn't set a poster through
   * the normal APIs.
   *
   * @fires Player#posterchange
   * @listens Tech#posterchange
   * @private
   */handleTechPosterChange_(){if((!this.poster_||this.options_.techCanOverridePoster)&&this.tech_&&this.tech_.poster){let e=this.tech_.poster()||"";e!==this.poster_&&(this.poster_=e,this.isPosterFromTech_=!0,// Let components know the poster has changed
this.trigger("posterchange"))}}/**
   * Get or set whether or not the controls are showing.
   *
   * @fires Player#controlsenabled
   *
   * @param {boolean} [bool]
   *        - true to turn controls on
   *        - false to turn controls off
   *
   * @return {boolean|undefined}
   *         - The current value of controls when getting
   *         - Nothing when setting
   */controls(e){if(void 0===e)return!!this.controls_;e=!!e,this.controls_===e||(this.controls_=e,this.usingNativeControls()&&this.techCall_("setControls",e),this.controls_?(this.removeClass("vjs-controls-disabled"),this.addClass("vjs-controls-enabled"),/**
       * @event Player#controlsenabled
       * @type {Event}
       */this.trigger("controlsenabled"),this.usingNativeControls()||this.addTechControlsListeners_()):(this.removeClass("vjs-controls-enabled"),this.addClass("vjs-controls-disabled"),/**
       * @event Player#controlsdisabled
       * @type {Event}
       */this.trigger("controlsdisabled"),this.usingNativeControls()||this.removeTechControlsListeners_()))}/**
   * Toggle native controls on/off. Native controls are the controls built into
   * devices (e.g. default iPhone controls) or other techs
   * (e.g. Vimeo Controls)
   * **This should only be set by the current tech, because only the tech knows
   * if it can support native controls**
   *
   * @fires Player#usingnativecontrols
   * @fires Player#usingcustomcontrols
   *
   * @param {boolean} [bool]
   *        - true to turn native controls on
   *        - false to turn native controls off
   *
   * @return {boolean|undefined}
   *         - The current value of native controls when getting
   *         - Nothing when setting
   */usingNativeControls(e){if(void 0===e)return!!this.usingNativeControls_;e=!!e,this.usingNativeControls_!==e&&(this.usingNativeControls_=e,this.usingNativeControls_?(this.addClass("vjs-using-native-controls"),/**
       * player is using the native device controls
       *
       * @event Player#usingnativecontrols
       * @type {Event}
       */this.trigger("usingnativecontrols")):(this.removeClass("vjs-using-native-controls"),/**
       * player is using the custom HTML controls
       *
       * @event Player#usingcustomcontrols
       * @type {Event}
       */this.trigger("usingcustomcontrols")))}/**
   * Set or get the current MediaError
   *
   * @fires Player#error
   *
   * @param  {MediaError|string|number} [err]
   *         A MediaError or a string/number to be turned
   *         into a MediaError
   *
   * @return {MediaError|null|undefined}
   *         - The current MediaError when getting (or null)
   *         - Nothing when setting
   */error(e){if(void 0===e)return this.error_||null;// Suppress the first error message for no compatible source until
// user interaction
if(// allow hooks to modify error object
iQ("beforeerror").forEach(t=>{let i=t(this,e);if(!(re(i)&&!Array.isArray(i)||"string"==typeof i||"number"==typeof i||null===i)){this.log.error("please return a value that MediaError expects in beforeerror hooks");return}e=i}),this.options_.suppressNotSupportedError&&e&&4===e.code){let t=function(){this.error(e)};this.options_.suppressNotSupportedError=!1,this.any(["click","touchstart"],t),this.one("loadstart",function(){this.off(["click","touchstart"],t)});return}// restoring to default
if(null===e){this.error_=null,this.removeClass("vjs-error"),this.errorDisplay&&this.errorDisplay.close();return}this.error_=new sW(e),// add the vjs-error classname to the player
this.addClass("vjs-error"),// log the name of the error type and any message
// IE11 logs "[object object]" and required you to expand message to see error object
i8.error(`(CODE:${this.error_.code} ${sW.errorTypes[this.error_.code]})`,this.error_.message,this.error_),/**
     * @event Player#error
     * @type {Event}
     */this.trigger("error"),// notify hooks of the per player error
iQ("error").forEach(e=>e(this,this.error_))}/**
   * Report user activity
   *
   * @param {Object} event
   *        Event object
   */reportUserActivity(e){this.userActivity_=!0}/**
   * Get/set if user is active
   *
   * @fires Player#useractive
   * @fires Player#userinactive
   *
   * @param {boolean} [bool]
   *        - true if the user is active
   *        - false if the user is inactive
   *
   * @return {boolean|undefined}
   *         - The current value of userActive when getting
   *         - Nothing when setting
   */userActive(e){if(void 0===e)return this.userActive_;if((e=!!e)!==this.userActive_){if(this.userActive_=e,this.userActive_){this.userActivity_=!0,this.removeClass("vjs-user-inactive"),this.addClass("vjs-user-active"),/**
       * @event Player#useractive
       * @type {Event}
       */this.trigger("useractive");return}this.tech_&&this.tech_.one("mousemove",function(e){e.stopPropagation(),e.preventDefault()}),this.userActivity_=!1,this.removeClass("vjs-user-active"),this.addClass("vjs-user-inactive"),/**
     * @event Player#userinactive
     * @type {Event}
     */this.trigger("userinactive")}}/**
   * Listen for user activity based on timeout value
   *
   * @private
   */listenForUserActivity_(){let e,t,i,r;let s=sp(this,this.reportUserActivity),n=function(t){s(),// Stop the interval that maintains activity if the mouse/touch is down
this.clearInterval(e)};// Any mouse movement will be considered user activity
this.on("mousedown",function(){s(),// For as long as the they are touching the device or have their mouse down,
// we consider them active even if they're not moving their finger or mouse.
// So we want to continue to update that they are active
this.clearInterval(e),// Setting userActivity=true now and setting the interval to the same time
// as the activityCheck interval (250) should ensure we never miss the
// next activityCheck
e=this.setInterval(s,250)}),this.on("mousemove",function(e){// #1068 - Prevent mousemove spamming
// Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
(e.screenX!==t||e.screenY!==i)&&(t=e.screenX,i=e.screenY,s())}),this.on("mouseup",n),this.on("mouseleave",n);let a=this.getChild("controlBar");!a||rS||rl||(a.on("mouseenter",function(e){0!==this.player().options_.inactivityTimeout&&(this.player().cache_.inactivityTimeout=this.player().options_.inactivityTimeout),this.player().options_.inactivityTimeout=0}),a.on("mouseleave",function(e){this.player().options_.inactivityTimeout=this.player().cache_.inactivityTimeout})),// Listen for keyboard navigation
// Shouldn't need to use inProgress interval because of key repeat
this.on("keydown",s),this.on("keyup",s),this.setInterval(function(){// Check to see if mouse/touch activity has happened
if(!this.userActivity_)return;// Reset the activity tracker
this.userActivity_=!1,// If the user state was inactive, set the state to active
this.userActive(!0),// Clear any existing inactivity timeout to start the timer over
this.clearTimeout(r);let e=this.options_.inactivityTimeout;e<=0||// In <timeout> milliseconds, if no more activity has occurred the
// user will be considered inactive
(r=this.setTimeout(function(){// Protect against the case where the inactivityTimeout can trigger just
// before the next user activity is picked up by the activity check loop
// causing a flicker
this.userActivity_||this.userActive(!1)},e))},250)}/**
   * Gets or sets the current playback rate. A playback rate of
   * 1.0 represents normal speed and 0.5 would indicate half-speed
   * playback, for instance.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
   *
   * @param {number} [rate]
   *       New playback rate to set.
   *
   * @return {number|undefined}
   *         - The current playback rate when getting or 1.0
   *         - Nothing when setting
   */playbackRate(e){if(void 0!==e){// NOTE: this.cache_.lastPlaybackRate is set from the tech handler
// that is registered above
this.techCall_("setPlaybackRate",e);return}return this.tech_&&this.tech_.featuresPlaybackRate?this.cache_.lastPlaybackRate||this.techGet_("playbackRate"):1}/**
   * Gets or sets the current default playback rate. A default playback rate of
   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.
   * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not
   * not the current playbackRate.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate
   *
   * @param {number} [rate]
   *       New default playback rate to set.
   *
   * @return {number|undefined}
   *         - The default playback rate when getting or 1.0
   *         - Nothing when setting
   */defaultPlaybackRate(e){return void 0!==e?this.techCall_("setDefaultPlaybackRate",e):this.tech_&&this.tech_.featuresPlaybackRate?this.techGet_("defaultPlaybackRate"):1}/**
   * Gets or sets the audio flag
   *
   * @param {boolean} [bool]
   *        - true signals that this is an audio player
   *        - false signals that this is not an audio player
   *
   * @return {boolean|undefined}
   *         - The current value of isAudio when getting
   *         - Nothing when setting
   */isAudio(e){if(void 0!==e){this.isAudio_=!!e;return}return!!this.isAudio_}enableAudioOnlyUI_(){// Update styling immediately to show the control bar so we can get its height
this.addClass("vjs-audio-only-mode");let e=this.children(),t=this.getChild("ControlBar"),i=t&&t.currentHeight();// Hide all player components except the control bar. Control bar components
// needed only for video are hidden with CSS
e.forEach(e=>{e!==t&&e.el_&&!e.hasClass("vjs-hidden")&&(e.hide(),this.audioOnlyCache_.hiddenChildren.push(e))}),this.audioOnlyCache_.playerHeight=this.currentHeight(),// Set the player height the same as the control bar
this.height(i),this.trigger("audioonlymodechange")}disableAudioOnlyUI_(){this.removeClass("vjs-audio-only-mode"),// Show player components that were previously hidden
this.audioOnlyCache_.hiddenChildren.forEach(e=>e.show()),// Reset player height
this.height(this.audioOnlyCache_.playerHeight),this.trigger("audioonlymodechange")}/**
   * Get the current audioOnlyMode state or set audioOnlyMode to true or false.
   *
   * Setting this to `true` will hide all player components except the control bar,
   * as well as control bar components needed only for video.
   *
   * @param {boolean} [value]
   *         The value to set audioOnlyMode to.
   *
   * @return {Promise|boolean}
   *        A Promise is returned when setting the state, and a boolean when getting
   *        the present state
   */audioOnlyMode(e){if("boolean"!=typeof e||e===this.audioOnlyMode_)return this.audioOnlyMode_;// Enable Audio Only Mode
if(this.audioOnlyMode_=e,e){let e=[];return this.isInPictureInPicture()&&e.push(this.exitPictureInPicture()),this.isFullscreen()&&e.push(this.exitFullscreen()),this.audioPosterMode()&&e.push(this.audioPosterMode(!1)),Promise.all(e).then(()=>this.enableAudioOnlyUI_())}// Disable Audio Only Mode
return Promise.resolve().then(()=>this.disableAudioOnlyUI_())}enablePosterModeUI_(){// Hide the video element and show the poster image to enable posterModeUI
let e=this.tech_&&this.tech_;e.hide(),this.addClass("vjs-audio-poster-mode"),this.trigger("audiopostermodechange")}disablePosterModeUI_(){// Show the video element and hide the poster image to disable posterModeUI
let e=this.tech_&&this.tech_;e.show(),this.removeClass("vjs-audio-poster-mode"),this.trigger("audiopostermodechange")}/**
   * Get the current audioPosterMode state or set audioPosterMode to true or false
   *
   * @param {boolean} [value]
   *         The value to set audioPosterMode to.
   *
   * @return {Promise|boolean}
   *         A Promise is returned when setting the state, and a boolean when getting
   *        the present state
   */audioPosterMode(e){if("boolean"!=typeof e||e===this.audioPosterMode_)return this.audioPosterMode_;if(this.audioPosterMode_=e,e){if(this.audioOnlyMode()){let e=this.audioOnlyMode(!1);return e.then(()=>{// enable audio poster mode after audio only mode is disabled
this.enablePosterModeUI_()})}return Promise.resolve().then(()=>{// enable audio poster mode
this.enablePosterModeUI_()})}return Promise.resolve().then(()=>{// disable audio poster mode
this.disablePosterModeUI_()})}/**
   * A helper method for adding a {@link TextTrack} to our
   * {@link TextTrackList}.
   *
   * In addition to the W3C settings we allow adding additional info through options.
   *
   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
   *
   * @param {string} [kind]
   *        the kind of TextTrack you are adding
   *
   * @param {string} [label]
   *        the label to give the TextTrack label
   *
   * @param {string} [language]
   *        the language to set on the TextTrack
   *
   * @return {TextTrack|undefined}
   *         the TextTrack that was added or undefined
   *         if there is no tech
   */addTextTrack(e,t,i){if(this.tech_)return this.tech_.addTextTrack(e,t,i)}/**
   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}.
   *
   * @param {Object} options
   *        Options to pass to {@link HTMLTrackElement} during creation. See
   *        {@link HTMLTrackElement} for object properties that you should use.
   *
   * @param {boolean} [manualCleanup=false] if set to true, the TextTrack will not be removed
   *                                        from the TextTrackList and HtmlTrackElementList
   *                                        after a source change
   *
   * @return { import('./tracks/html-track-element').default }
   *         the HTMLTrackElement that was created and added
   *         to the HtmlTrackElementList and the remote
   *         TextTrackList
   *
   */addRemoteTextTrack(e,t){if(this.tech_)return this.tech_.addRemoteTextTrack(e,t)}/**
   * Remove a remote {@link TextTrack} from the respective
   * {@link TextTrackList} and {@link HtmlTrackElementList}.
   *
   * @param {Object} track
   *        Remote {@link TextTrack} to remove
   *
   * @return {undefined}
   *         does not return anything
   */removeRemoteTextTrack(e={}){let{track:t}=e;// destructure the input into an object with a track argument, defaulting to arguments[0]
// default the whole argument to an empty object if nothing was passed in
if(t||(t=e),this.tech_)return this.tech_.removeRemoteTextTrack(t)}/**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object|undefined}
   *         An object with supported media playback quality metrics or undefined if there
   *         is no tech or the tech does not support it.
   */getVideoPlaybackQuality(){return this.techGet_("getVideoPlaybackQuality")}/**
   * Get video width
   *
   * @return {number}
   *         current video width
   */videoWidth(){return this.tech_&&this.tech_.videoWidth&&this.tech_.videoWidth()||0}/**
   * Get video height
   *
   * @return {number}
   *         current video height
   */videoHeight(){return this.tech_&&this.tech_.videoHeight&&this.tech_.videoHeight()||0}/**
   * Set or get the player's language code.
   *
   * Changing the language will trigger
   * [languagechange]{@link Player#event:languagechange}
   * which Components can use to update control text.
   * ClickableComponent will update its control text by default on
   * [languagechange]{@link Player#event:languagechange}.
   *
   * @fires Player#languagechange
   *
   * @param {string} [code]
   *        the language code to set the player to
   *
   * @return {string|undefined}
   *         - The current language code when getting
   *         - Nothing when setting
   */language(e){if(void 0===e)return this.language_;this.language_!==String(e).toLowerCase()&&(this.language_=String(e).toLowerCase(),sb(this)&&/**
        * fires when the player language change
        *
        * @event Player#languagechange
        * @type {Event}
        */this.trigger("languagechange"))}/**
   * Get the player's language dictionary
   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
   * Languages specified directly in the player options have precedence
   *
   * @return {Array}
   *         An array of of supported languages
   */languages(){return ri(aK.prototype.options_.languages,this.languages_)}/**
   * returns a JavaScript object representing the current track
   * information. **DOES not return it as JSON**
   *
   * @return {Object}
   *         Object representing the current of track info
   */toJSON(){let e=ri(this.options_),t=e.tracks;e.tracks=[];for(let i=0;i<t.length;i++){let r=t[i];// deep merge tracks and null out player so no circular references
(r=ri(r)).player=void 0,e.tracks[i]=r}return e}/**
   * Creates a simple modal dialog (an instance of the {@link ModalDialog}
   * component) that immediately overlays the player with arbitrary
   * content and removes itself when closed.
   *
   * @param {string|Function|Element|Array|null} content
   *        Same as {@link ModalDialog#content}'s param of the same name.
   *        The most straight-forward usage is to provide a string or DOM
   *        element.
   *
   * @param {Object} [options]
   *        Extra options which will be passed on to the {@link ModalDialog}.
   *
   * @return {ModalDialog}
   *         the {@link ModalDialog} that was created
   */createModal(e,t){(t=t||{}).content=e||"";let i=new sJ(this,t);return this.addChild(i),i.on("dispose",()=>{this.removeChild(i)}),i.open(),i}/**
   * Change breakpoint classes when the player resizes.
   *
   * @private
   */updateCurrentBreakpoint_(){if(!this.responsive())return;let e=this.currentBreakpoint(),t=this.currentWidth();for(let i=0;i<aW.length;i++){let r=aW[i],s=this.breakpoints_[r];if(t<=s){// The current breakpoint did not change, nothing to do.
if(e===r)return;e&&this.removeClass(aG[e]),this.addClass(aG[r]),this.breakpoint_=r;break}}}/**
   * Removes the current breakpoint.
   *
   * @private
   */removeCurrentBreakpoint_(){let e=this.currentBreakpointClass();this.breakpoint_="",e&&this.removeClass(e)}/**
   * Get or set breakpoints on the player.
   *
   * Calling this method with an object or `true` will remove any previous
   * custom breakpoints and start from the defaults again.
   *
   * @param  {Object|boolean} [breakpoints]
   *         If an object is given, it can be used to provide custom
   *         breakpoints. If `true` is given, will set default breakpoints.
   *         If this argument is not given, will simply return the current
   *         breakpoints.
   *
   * @param  {number} [breakpoints.tiny]
   *         The maximum width for the "vjs-layout-tiny" class.
   *
   * @param  {number} [breakpoints.xsmall]
   *         The maximum width for the "vjs-layout-x-small" class.
   *
   * @param  {number} [breakpoints.small]
   *         The maximum width for the "vjs-layout-small" class.
   *
   * @param  {number} [breakpoints.medium]
   *         The maximum width for the "vjs-layout-medium" class.
   *
   * @param  {number} [breakpoints.large]
   *         The maximum width for the "vjs-layout-large" class.
   *
   * @param  {number} [breakpoints.xlarge]
   *         The maximum width for the "vjs-layout-x-large" class.
   *
   * @param  {number} [breakpoints.huge]
   *         The maximum width for the "vjs-layout-huge" class.
   *
   * @return {Object}
   *         An object mapping breakpoint names to maximum width values.
   */breakpoints(e){return void 0===e||(this.breakpoint_="",this.breakpoints_=Object.assign({},aX,e),// When breakpoint definitions change, we need to update the currently
// selected breakpoint.
this.updateCurrentBreakpoint_()),Object.assign(this.breakpoints_)}/**
   * Get or set a flag indicating whether or not this player should adjust
   * its UI based on its dimensions.
   *
   * @param  {boolean} [value]
   *         Should be `true` if the player should adjust its UI based on its
   *         dimensions; otherwise, should be `false`.
   *
   * @return {boolean|undefined}
   *         Will be `true` if this player should adjust its UI based on its
   *         dimensions; otherwise, will be `false`.
   *         Nothing if setting
   */responsive(e){// Used as a getter.
if(void 0===e)return this.responsive_;e=!!e;let t=this.responsive_;// Nothing changed.
if(e!==t)return(// The value actually changed, set it.
this.responsive_=e,e?(this.on("playerresize",this.boundUpdateCurrentBreakpoint_),this.updateCurrentBreakpoint_()):(this.off("playerresize",this.boundUpdateCurrentBreakpoint_),this.removeCurrentBreakpoint_()),e)}/**
   * Get current breakpoint name, if any.
   *
   * @return {string}
   *         If there is currently a breakpoint set, returns a the key from the
   *         breakpoints object matching it. Otherwise, returns an empty string.
   */currentBreakpoint(){return this.breakpoint_}/**
   * Get the current breakpoint class name.
   *
   * @return {string}
   *         The matching class name (e.g. `"vjs-layout-tiny"` or
   *         `"vjs-layout-large"`) for the current breakpoint. Empty string if
   *         there is no current breakpoint.
   */currentBreakpointClass(){return aG[this.breakpoint_]||""}/**
   * An object that describes a single piece of media.
   *
   * Properties that are not part of this type description will be retained; so,
   * this can be viewed as a generic metadata storage mechanism as well.
   *
   * @see      {@link https://wicg.github.io/mediasession/#the-mediametadata-interface}
   * @typedef  {Object} Player~MediaObject
   *
   * @property {string} [album]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {string} [artist]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {Object[]} [artwork]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API. If not specified, will be populated via the `poster`, if
   *           available.
   *
   * @property {string} [poster]
   *           URL to an image that will display before playback.
   *
   * @property {Tech~SourceObject|Tech~SourceObject[]|string} [src]
   *           A single source object, an array of source objects, or a string
   *           referencing a URL to a media source. It is _highly recommended_
   *           that an object or array of objects is used here, so that source
   *           selection algorithms can take the `type` into account.
   *
   * @property {string} [title]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {Object[]} [textTracks]
   *           An array of objects to be used to create text tracks, following
   *           the {@link https://www.w3.org/TR/html50/embedded-content-0.html#the-track-element|native track element format}.
   *           For ease of removal, these will be created as "remote" text
   *           tracks and set to automatically clean up on source changes.
   *
   *           These objects may have properties like `src`, `kind`, `label`,
   *           and `language`, see {@link Tech#createRemoteTextTrack}.
   *//**
   * Populate the player using a {@link Player~MediaObject|MediaObject}.
   *
   * @param  {Player~MediaObject} media
   *         A media object.
   *
   * @param  {Function} ready
   *         A callback to be called when the player is ready.
   */loadMedia(e,t){if(!e||"object"!=typeof e)return;let i=this.crossOrigin();this.reset(),// Clone the media object so it cannot be mutated from outside.
this.cache_.media=ri(e);let{artist:r,artwork:s,description:n,poster:a,src:o,textTracks:l,title:u}=this.cache_.media;!s&&a&&(this.cache_.media.artwork=[{src:a,type:nE(a)}]),i&&this.crossOrigin(i),o&&this.src(o),a&&this.poster(a),Array.isArray(l)&&l.forEach(e=>this.addRemoteTextTrack(e,!1)),this.titleBar&&this.titleBar.update({title:u,description:n||r||""}),this.ready(t)}/**
   * Get a clone of the current {@link Player~MediaObject} for this player.
   *
   * If the `loadMedia` method has not been used, will attempt to return a
   * {@link Player~MediaObject} based on the current state of the player.
   *
   * @return {Player~MediaObject}
   */getMedia(){if(!this.cache_.media){let e=this.poster(),t=this.currentSources(),i=Array.prototype.map.call(this.remoteTextTracks(),e=>({kind:e.kind,label:e.label,language:e.language,src:e.src})),r={src:t,textTracks:i};return e&&(r.poster=e,r.artwork=[{src:r.poster,type:nE(r.poster)}]),r}return ri(this.cache_.media)}/**
   * Gets tag settings
   *
   * @param {Element} tag
   *        The player tag
   *
   * @return {Object}
   *         An object containing all of the settings
   *         for a player tag
   */static getTagSettings(e){let t={sources:[],tracks:[]},i=rB(e),r=i["data-setup"];// Check if data-setup attr exists.
if(rO(e,"vjs-fill")&&(i.fill=!0),rO(e,"vjs-fluid")&&(i.fluid=!0),null!==r){// Parse options JSON
// If empty string, make it a parsable json object.
let[e,t]=/*@__PURE__*/w(P)(r||"{}");e&&i8.error(e),Object.assign(i,t)}// Get tag children settings
if(Object.assign(t,i),e.hasChildNodes()){let i=e.childNodes;for(let e=0,r=i.length;e<r;e++){let r=i[e],s=r.nodeName.toLowerCase();"source"===s?t.sources.push(rB(r)):"track"===s&&t.tracks.push(rB(r))}}return t}/**
   * Set debug mode to enable/disable logs at info level.
   *
   * @param {boolean} enabled
   * @fires Player#debugon
   * @fires Player#debugoff
   * @return {boolean|undefined}
   */debug(e){if(void 0===e)return this.debugEnabled_;e?(this.trigger("debugon"),this.previousLogLevel_=this.log.level,this.log.level("debug"),this.debugEnabled_=!0):(this.trigger("debugoff"),this.log.level(this.previousLogLevel_),this.previousLogLevel_=void 0,this.debugEnabled_=!1)}/**
   * Set or get current playback rates.
   * Takes an array and updates the playback rates menu with the new items.
   * Pass in an empty array to hide the menu.
   * Values other than arrays are ignored.
   *
   * @fires Player#playbackrateschange
   * @param {number[]} newRates
   *                   The new rates that the playback rates menu should update to.
   *                   An empty array will hide the menu
   * @return {number[]} When used as a getter will return the current playback rates
   */playbackRates(e){if(void 0===e)return this.cache_.playbackRates;// ignore any value that isn't an array
Array.isArray(e)&&e.every(e=>"number"==typeof e)&&(this.cache_.playbackRates=e,/**
    * fires when the playback rates in a player are changed
    *
    * @event Player#playbackrateschange
    * @type {Event}
    */this.trigger("playbackrateschange"))}}/**
 * Get the {@link VideoTrackList}
 *
 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
 *
 * @return {VideoTrackList}
 *         the current video track list
 *
 * @method Player.prototype.videoTracks
 *//**
 * Get the {@link AudioTrackList}
 *
 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
 *
 * @return {AudioTrackList}
 *         the current audio track list
 *
 * @method Player.prototype.audioTracks
 *//**
 * Get the {@link TextTrackList}
 *
 * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
 *
 * @return {TextTrackList}
 *         the current text track list
 *
 * @method Player.prototype.textTracks
 *//**
 * Get the remote {@link TextTrackList}
 *
 * @return {TextTrackList}
 *         The current remote text track list
 *
 * @method Player.prototype.remoteTextTracks
 *//**
 * Get the remote {@link HtmlTrackElementList} tracks.
 *
 * @return {HtmlTrackElementList}
 *         The current remote text track element list
 *
 * @method Player.prototype.remoteTextTrackEls
 */nc.names.forEach(function(e){let t=nc[e];aK.prototype[t.getterName]=function(){return this.tech_?this.tech_[t.getterName]():(// if we have not yet loadTech_, we create {video,audio,text}Tracks_
// these will be passed to the tech during loading
this[t.privateName]=this[t.privateName]||new t.ListClass,this[t.privateName])}}),/**
 * Get or set the `Player`'s crossorigin option. For the HTML5 player, this
 * sets the `crossOrigin` property on the `<video>` tag to control the CORS
 * behavior.
 *
 * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}
 *
 * @param {string} [value]
 *        The value to set the `Player`'s crossorigin to. If an argument is
 *        given, must be one of `anonymous` or `use-credentials`.
 *
 * @return {string|undefined}
 *         - The current crossorigin value of the `Player` when getting.
 *         - undefined when setting
 */aK.prototype.crossorigin=aK.prototype.crossOrigin,/**
 * Global enumeration of players.
 *
 * The keys are the player IDs and the values are either the {@link Player}
 * instance or `null` for disposed players.
 *
 * @type {Object}
 */aK.players={};const aY=/*@__PURE__*/w(I).navigator;/*
 * Player instance options, surfaced using options
 * options = Player.prototype.options_
 * Make changes in options, not here.
 *
 * @type {Object}
 * @private
 */aK.prototype.options_={// Default order of fallback technology
techOrder:np.defaultTechOrder_,html5:{},// enable sourceset by default
enableSourceset:!0,// default inactivity timeout
inactivityTimeout:2e3,// default playback rates
playbackRates:[],// Add playback rate selection by adding rates
// 'playbackRates': [0.5, 1, 1.5, 2],
liveui:!1,// Included control sets
children:["mediaLoader","posterImage","titleBar","textTrackDisplay","loadingSpinner","bigPlayButton","liveTracker","controlBar","errorDisplay","textTrackSettings","resizeManager"],language:aY&&(aY.languages&&aY.languages[0]||aY.userLanguage||aY.language)||"en",// locales and their language translations
languages:{},// Default message to show when a video cannot be played.
notSupportedMessage:"No compatible source was found for this media.",normalizeAutoplay:!1,fullscreen:{options:{navigationUI:"hide"}},breakpoints:{},responsive:!1,audioOnlyMode:!1,audioPosterMode:!1},[/**
 * Returns whether or not the player is in the "ended" state.
 *
 * @return {Boolean} True if the player is in the ended state, false if not.
 * @method Player#ended
 */"ended",/**
 * Returns whether or not the player is in the "seeking" state.
 *
 * @return {Boolean} True if the player is in the seeking state, false if not.
 * @method Player#seeking
 */"seeking",/**
 * Returns the TimeRanges of the media that are currently available
 * for seeking to.
 *
 * @return {TimeRanges} the seekable intervals of the media timeline
 * @method Player#seekable
 */"seekable",/**
 * Returns the current state of network activity for the element, from
 * the codes in the list below.
 * - NETWORK_EMPTY (numeric value 0)
 *   The element has not yet been initialised. All attributes are in
 *   their initial states.
 * - NETWORK_IDLE (numeric value 1)
 *   The element's resource selection algorithm is active and has
 *   selected a resource, but it is not actually using the network at
 *   this time.
 * - NETWORK_LOADING (numeric value 2)
 *   The user agent is actively trying to download data.
 * - NETWORK_NO_SOURCE (numeric value 3)
 *   The element's resource selection algorithm is active, but it has
 *   not yet found a resource to use.
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
 * @return {number} the current network activity state
 * @method Player#networkState
 */"networkState",/**
 * Returns a value that expresses the current state of the element
 * with respect to rendering the current playback position, from the
 * codes in the list below.
 * - HAVE_NOTHING (numeric value 0)
 *   No information regarding the media resource is available.
 * - HAVE_METADATA (numeric value 1)
 *   Enough of the resource has been obtained that the duration of the
 *   resource is available.
 * - HAVE_CURRENT_DATA (numeric value 2)
 *   Data for the immediate current playback position is available.
 * - HAVE_FUTURE_DATA (numeric value 3)
 *   Data for the immediate current playback position is available, as
 *   well as enough data for the user agent to advance the current
 *   playback position in the direction of playback.
 * - HAVE_ENOUGH_DATA (numeric value 4)
 *   The user agent estimates that enough data is available for
 *   playback to proceed uninterrupted.
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
 * @return {number} the current playback rendering state
 * @method Player#readyState
 */"readyState"].forEach(function(e){aK.prototype[e]=function(){return this.techGet_(e)}}),aV.forEach(function(e){aK.prototype[`handleTech${sP(e)}_`]=function(){return this.trigger(e)}}),/**
 * Fired when the player has initial duration and dimension information
 *
 * @event Player#loadedmetadata
 * @type {Event}
 *//**
 * Fired when the player has downloaded data at the current playback position
 *
 * @event Player#loadeddata
 * @type {Event}
 *//**
 * Fired when the current playback position has changed *
 * During playback this is fired every 15-250 milliseconds, depending on the
 * playback technology in use.
 *
 * @event Player#timeupdate
 * @type {Event}
 *//**
 * Fired when the volume changes
 *
 * @event Player#volumechange
 * @type {Event}
 *//**
 * Reports whether or not a player has a plugin available.
 *
 * This does not report whether or not the plugin has ever been initialized
 * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.
 *
 * @method Player#hasPlugin
 * @param  {string}  name
 *         The name of a plugin.
 *
 * @return {boolean}
 *         Whether or not this player has the requested plugin available.
 *//**
 * Reports whether or not a player is using a plugin by name.
 *
 * For basic plugins, this only reports whether the plugin has _ever_ been
 * initialized on this player.
 *
 * @method Player#usingPlugin
 * @param  {string} name
 *         The name of a plugin.
 *
 * @return {boolean}
 *         Whether or not this player is using the requested plugin.
 */sN.registerComponent("Player",aK);/**
 * @file plugin.js
 *//**
 * The base plugin name.
 *
 * @private
 * @constant
 * @type {string}
 */const aQ="plugin",aJ="activePlugins_",aZ={},a0=e=>aZ.hasOwnProperty(e),a1=e=>a0(e)?aZ[e]:void 0,a2=(e,t)=>{e[aJ]=e[aJ]||{},e[aJ][t]=!0},a4=(e,t,i)=>{let r=(i?"before":"")+"pluginsetup";e.trigger(r,t),e.trigger(r+":"+t.name,t)},a8=function(e,t){let i=function(){// We trigger the "beforepluginsetup" and "pluginsetup" events on the player
// regardless, but we want the hash to be consistent with the hash provided
// for advanced plugins.
//
// The only potentially counter-intuitive thing here is the `instance` in
// the "pluginsetup" event is the value returned by the `plugin` function.
a4(this,{name:e,plugin:t,instance:null},!0);let i=t.apply(this,arguments);return a2(this,e),a4(this,{name:e,plugin:t,instance:i}),i};return Object.keys(t).forEach(function(e){i[e]=t[e]}),i},a5=(e,t)=>(// Add a `name` property to the plugin prototype so that each plugin can
    // refer to itself by name.
    t.prototype.name=e,function(...i){a4(this,{name:e,plugin:t,instance:null},!0);let r=new t(...[this,...i]);return(// The plugin is replaced by a function that returns the current instance.
    this[e]=()=>r,a4(this,r.getEventHash()),r)});/**
 * Parent class for all advanced plugins.
 *
 * @mixes   module:evented~EventedMixin
 * @mixes   module:stateful~StatefulMixin
 * @fires   Player#beforepluginsetup
 * @fires   Player#beforepluginsetup:$name
 * @fires   Player#pluginsetup
 * @fires   Player#pluginsetup:$name
 * @listens Player#dispose
 * @throws  {Error}
 *          If attempting to instantiate the base {@link Plugin} class
 *          directly instead of via a sub-class.
 */class a3{/**
   * Creates an instance of this class.
   *
   * Sub-classes should call `super` to ensure plugins are properly initialized.
   *
   * @param {Player} player
   *        A Video.js player instance.
   */constructor(e){if(this.constructor===a3)throw Error("Plugin must be sub-classed; not directly instantiated.");this.player=e,this.log||(this.log=this.player.log.createLogger(this.name)),// Make this object evented, but remove the added `trigger` method so we
// use the prototype version instead.
sD(this),delete this.trigger,sA(this,this.constructor.defaultState),a2(e,this.name),// Auto-bind the dispose method so we can use it as a listener and unbind
// it later easily.
this.dispose=this.dispose.bind(this),// If the player is disposed, dispose the plugin.
e.on("dispose",this.dispose)}/**
   * Get the version of the plugin that was set on <pluginName>.VERSION
   */version(){return this.constructor.VERSION}/**
   * Each event triggered by plugins includes a hash of additional data with
   * conventional properties.
   *
   * This returns that object or mutates an existing hash.
   *
   * @param   {Object} [hash={}]
   *          An object to be used as event an event hash.
   *
   * @return {PluginEventHash}
   *          An event hash object with provided properties mixed-in.
   */getEventHash(e={}){return e.name=this.name,e.plugin=this.constructor,e.instance=this,e}/**
   * Triggers an event on the plugin object and overrides
   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash={}]
   *          Additional data hash to merge with a
   *          {@link PluginEventHash|PluginEventHash}.
   *
   * @return {boolean}
   *          Whether or not default was prevented.
   */trigger(e,t={}){return su(this.eventBusEl_,e,this.getEventHash(t))}/**
   * Handles "statechanged" events on the plugin. No-op by default, override by
   * subclassing.
   *
   * @abstract
   * @param    {Event} e
   *           An event object provided by a "statechanged" event.
   *
   * @param    {Object} e.changes
   *           An object describing changes that occurred with the "statechanged"
   *           event.
   */handleStateChanged(e){}/**
   * Disposes a plugin.
   *
   * Subclasses can override this if they want, but for the sake of safety,
   * it's probably best to subscribe the "dispose" event.
   *
   * @fires Plugin#dispose
   */dispose(){let{name:e,player:t}=this;/**
     * Signals that a advanced plugin is about to be disposed.
     *
     * @event Plugin#dispose
     * @type  {Event}
     */this.trigger("dispose"),this.off(),t.off("dispose",this.dispose),// Eliminate any possible sources of leaking memory by clearing up
// references between the player and the plugin instance and nulling out
// the plugin's state and replacing methods with a function that throws.
t[aJ][e]=!1,this.player=this.state=null,// Finally, replace the plugin name on the player with a new factory
// function, so that the plugin is ready to be set up again.
t[e]=a5(e,aZ[e])}/**
   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).
   *
   * @param   {string|Function} plugin
   *          If a string, matches the name of a plugin. If a function, will be
   *          tested directly.
   *
   * @return {boolean}
   *          Whether or not a plugin is a basic plugin.
   */static isBasic(e){let t="string"==typeof e?a1(e):e;return"function"==typeof t&&!a3.prototype.isPrototypeOf(t.prototype)}/**
   * Register a Video.js plugin.
   *
   * @param   {string} name
   *          The name of the plugin to be registered. Must be a string and
   *          must not match an existing plugin or a method on the `Player`
   *          prototype.
   *
   * @param   {typeof Plugin|Function} plugin
   *          A sub-class of `Plugin` or a function for basic plugins.
   *
   * @return {typeof Plugin|Function}
   *          For advanced plugins, a factory function for that plugin. For
   *          basic plugins, a wrapper function that initializes the plugin.
   */static registerPlugin(e,t){if("string"!=typeof e)throw Error(`Illegal plugin name, "${e}", must be a string, was ${typeof e}.`);if(a0(e))i8.warn(`A plugin named "${e}" already exists. You may want to avoid re-registering plugins!`);else if(aK.prototype.hasOwnProperty(e))throw Error(`Illegal plugin name, "${e}", cannot share a name with an existing player method!`);if("function"!=typeof t)throw Error(`Illegal plugin for "${e}", must be a function, was ${typeof t}.`);return aZ[e]=t,e!==aQ&&(a3.isBasic(t)?aK.prototype[e]=a8(e,t):aK.prototype[e]=a5(e,t)),t}/**
   * De-register a Video.js plugin.
   *
   * @param  {string} name
   *         The name of the plugin to be de-registered. Must be a string that
   *         matches an existing plugin.
   *
   * @throws {Error}
   *         If an attempt is made to de-register the base plugin.
   */static deregisterPlugin(e){if(e===aQ)throw Error("Cannot de-register base plugin.");a0(e)&&(delete aZ[e],delete aK.prototype[e])}/**
   * Gets an object containing multiple Video.js plugins.
   *
   * @param   {Array} [names]
   *          If provided, should be an array of plugin names. Defaults to _all_
   *          plugin names.
   *
   * @return {Object|undefined}
   *          An object containing plugin(s) associated with their name(s) or
   *          `undefined` if no matching plugins exist).
   */static getPlugins(e=Object.keys(aZ)){let t;return e.forEach(e=>{let i=a1(e);i&&((t=t||{})[e]=i)}),t}/**
   * Gets a plugin's version, if available
   *
   * @param   {string} name
   *          The name of a plugin.
   *
   * @return {string}
   *          The plugin's version or an empty string.
   */static getPluginVersion(e){let t=a1(e);return t&&t.VERSION||""}}/**
 * Internal function used to mark a function as deprecated in the next major
 * version with consistent messaging.
 *
 * @param  {number}   major   The major version where it will be removed
 * @param  {string}   oldName The old function name
 * @param  {string}   newName The new function name
 * @param  {Function} fn      The function to deprecate
 * @return {Function}         The decorated function
 */function a6(e,t,i,r){var s;let n;return s=`${t} is deprecated and will be removed in ${e}.0; please use ${i} instead.`,n=!1,function(...e){return n||i8.warn(s),n=!0,r.apply(this,e)}}/**
 * Gets a plugin by name if it exists.
 *
 * @static
 * @method   getPlugin
 * @memberOf Plugin
 * @param    {string} name
 *           The name of a plugin.
 *
 * @returns  {typeof Plugin|Function|undefined}
 *           The plugin (or `undefined`).
 */a3.getPlugin=a1,/**
 * The name of the base plugin class as it is registered.
 *
 * @type {string}
 */a3.BASE_PLUGIN_NAME=aQ,a3.registerPlugin(aQ,a3),/**
 * Documented in player.js
 *
 * @ignore
 */aK.prototype.usingPlugin=function(e){return!!this[aJ]&&!0===this[aJ][e]},/**
 * Documented in player.js
 *
 * @ignore
 */aK.prototype.hasPlugin=function(e){return!!a0(e)};/**
 * @file video.js
 * @module videojs
 *//**
 * Normalize an `id` value by trimming off a leading `#`
 *
 * @private
 * @param   {string} id
 *          A string, maybe with a leading `#`.
 *
 * @return {string}
 *          The string, without any leading `#`.
 */const a7=e=>0===e.indexOf("#")?e.slice(1):e;/**
 * A callback that is called when a component is ready. Does not have any
 * parameters and any callback value will be ignored. See: {@link Component~ReadyCallback}
 *
 * @callback ReadyCallback
 *//**
 * The `videojs()` function doubles as the main function for users to create a
 * {@link Player} instance as well as the main library namespace.
 *
 * It can also be used as a getter for a pre-existing {@link Player} instance.
 * However, we _strongly_ recommend using `videojs.getPlayer()` for this
 * purpose because it avoids any potential for unintended initialization.
 *
 * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)
 * of our JSDoc template, we cannot properly document this as both a function
 * and a namespace, so its function signature is documented here.
 *
 * #### Arguments
 * ##### id
 * string|Element, **required**
 *
 * Video element or video element ID.
 *
 * ##### options
 * Object, optional
 *
 * Options object for providing settings.
 * See: [Options Guide](https://docs.videojs.com/tutorial-options.html).
 *
 * ##### ready
 * {@link Component~ReadyCallback}, optional
 *
 * A function to be called when the {@link Player} and {@link Tech} are ready.
 *
 * #### Return Value
 *
 * The `videojs()` function returns a {@link Player} instance.
 *
 * @namespace
 *
 * @borrows AudioTrack as AudioTrack
 * @borrows Component.getComponent as getComponent
 * @borrows module:events.on as on
 * @borrows module:events.one as one
 * @borrows module:events.off as off
 * @borrows module:events.trigger as trigger
 * @borrows EventTarget as EventTarget
 * @borrows module:middleware.use as use
 * @borrows Player.players as players
 * @borrows Plugin.registerPlugin as registerPlugin
 * @borrows Plugin.deregisterPlugin as deregisterPlugin
 * @borrows Plugin.getPlugins as getPlugins
 * @borrows Plugin.getPlugin as getPlugin
 * @borrows Plugin.getPluginVersion as getPluginVersion
 * @borrows Tech.getTech as getTech
 * @borrows Tech.registerTech as registerTech
 * @borrows TextTrack as TextTrack
 * @borrows VideoTrack as VideoTrack
 *
 * @param  {string|Element} id
 *         Video element or video element ID.
 *
 * @param  {Object} [options]
 *         Options object for providing settings.
 *         See: [Options Guide](https://docs.videojs.com/tutorial-options.html).
 *
 * @param  {ReadyCallback} [ready]
 *         A function to be called when the {@link Player} and {@link Tech} are
 *         ready.
 *
 * @return {Player}
 *         The `videojs()` function returns a {@link Player|Player} instance.
 */function a9(e,t,i){let r=a9.getPlayer(e);if(r)return t&&i8.warn(`Player "${e}" is already initialised. Options will not be applied.`),i&&r.ready(i),r;let s="string"==typeof e?rZ("#"+a7(e)):e;if(!rx(s))throw TypeError("The element or ID supplied is not valid. (videojs)");// document.body.contains(el) will only check if el is contained within that one document.
// This causes problems for elements in iframes.
// Instead, use the element's ownerDocument instead of the global document.
// This will make sure that the element is indeed in the dom of that document.
// Additionally, check that the document in question has a default view.
// If the document is no longer attached to the dom, the defaultView of the document will be null.
// If element is inside Shadow DOM (e.g. is part of a Custom element), ownerDocument.body
// always returns false. Instead, use the Shadow DOM root.
let n="getRootNode"in s&&s.getRootNode() instanceof /*@__PURE__*/w(I).ShadowRoot,a=n?s.getRootNode():s.ownerDocument.body;s.ownerDocument.defaultView&&a.contains(s)||i8.warn("The element supplied is not included in the DOM"),!0===(t=t||{}).restoreEl&&(t.restoreEl=(s.parentNode&&s.parentNode.hasAttribute("data-vjs-player")?s.parentNode:s).cloneNode(!0)),iQ("beforesetup").forEach(e=>{let i=e(s,ri(t));if(!re(i)||Array.isArray(i)){i8.error("please return an object in beforesetup hooks");return}t=ri(t,i)});// We get the current "Player" component here in case an integration has
// replaced it with a custom player.
let o=sN.getComponent("Player");return r=new o(s,t,i),iQ("setup").forEach(e=>e(r)),r}// Add default styles
if(a9.hooks_=iY,a9.hooks=iQ,a9.hook=function(e,t){iQ(e,t)},a9.hookOnce=function(e,t){iQ(e,[].concat(t).map(t=>{let i=(...r)=>(iJ(e,i),t(...r));return i}))},a9.removeHook=iJ,!0!==/*@__PURE__*/w(I).VIDEOJS_NO_DYNAMIC_STYLE&&rC()){let e=rZ(".vjs-styles-defaults");if(!e){e=r7("vjs-styles-defaults");let t=rZ("head");t&&t.insertBefore(e,t.firstChild),r9(e,`
      .video-js {
        width: 300px;
        height: 150px;
      }

      .vjs-fluid:not(.vjs-audio-only-mode) {
        padding-top: 56.25%
      }
    `)}}// Run Auto-load players
// You have to wait at least once in case this script is loaded after your
// video in the DOM (weird behavior only with minified version)
r3(1,a9),/**
 * Current Video.js version. Follows [semantic versioning](https://semver.org/).
 *
 * @type {string}
 */a9.VERSION=iK,/**
 * The global options object. These are the settings that take effect
 * if no overrides are specified when the player is created.
 *
 * @type {Object}
 */a9.options=aK.prototype.options_,/**
 * Get an object with the currently created players, keyed by player ID
 *
 * @return {Object}
 *         The created players
 */a9.getPlayers=()=>aK.players,/**
 * Get a single player based on an ID or DOM element.
 *
 * This is useful if you want to check if an element or ID has an associated
 * Video.js player, but not create one if it doesn't.
 *
 * @param   {string|Element} id
 *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -
 *          or a string matching the `id` of such an element.
 *
 * @return {Player|undefined}
 *          A player instance or `undefined` if there is no player instance
 *          matching the argument.
 */a9.getPlayer=e=>{let t;let i=aK.players;if("string"==typeof e){let r=a7(e),s=i[r];if(s)return s;t=rZ("#"+r)}else t=e;if(rx(t)){let{player:e,playerId:r}=t;// Element may have a `player` property referring to an already created
// player instance. If so, return that.
if(e||i[r])return e||i[r]}},/**
 * Returns an array of all current players.
 *
 * @return {Array}
 *         An array of all players. The array will be in the order that
 *         `Object.keys` provides, which could potentially vary between
 *         JavaScript engines.
 *
 */a9.getAllPlayers=()=>// we filter those out.
    Object.keys(aK.players).map(e=>aK.players[e]).filter(Boolean),a9.players=aK.players,a9.getComponent=sN.getComponent,/**
 * Register a component so it can referred to by name. Used when adding to other
 * components, either through addChild `component.addChild('myComponent')` or through
 * default children options  `{ children: ['myComponent'] }`.
 *
 * > NOTE: You could also just initialize the component before adding.
 * `component.addChild(new MyComponent());`
 *
 * @param {string} name
 *        The class name of the component
 *
 * @param {typeof Component} comp
 *        The component class
 *
 * @return {typeof Component}
 *         The newly registered component
 */a9.registerComponent=(e,t)=>(np.isTech(t)&&i8.warn(`The ${e} tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)`),sN.registerComponent.call(sN,e,t)),a9.getTech=np.getTech,a9.registerTech=np.registerTech,a9.use=/**
 * A middleware object is a plain JavaScript object that has methods that
 * match the {@link Tech} methods found in the lists of allowed
 * {@link module:middleware.allowedGetters|getters},
 * {@link module:middleware.allowedSetters|setters}, and
 * {@link module:middleware.allowedMediators|mediators}.
 *
 * @typedef {Object} MiddlewareObject
 *//**
 * A middleware factory function that should return a
 * {@link module:middleware~MiddlewareObject|MiddlewareObject}.
 *
 * This factory will be called for each player when needed, with the player
 * passed in as an argument.
 *
 * @callback MiddlewareFactory
 * @param { import('../player').default } player
 *        A Video.js player.
 *//**
 * Define a middleware that the player should use by way of a factory function
 * that returns a middleware object.
 *
 * @param  {string} type
 *         The MIME type to match or `"*"` for all MIME types.
 *
 * @param  {MiddlewareFactory} middleware
 *         A middleware factory function that will be executed for
 *         matching types.
 */function(e,t){nm[e]=nm[e]||[],nm[e].push(t)},/**
 * An object that can be returned by a middleware to signify
 * that the middleware is being terminated.
 *
 * @type {object}
 * @property {object} middleware.TERMINATOR
 */Object.defineProperty(a9,"middleware",{value:{},writeable:!1,enumerable:!0}),Object.defineProperty(a9.middleware,"TERMINATOR",{value:ng,writeable:!1,enumerable:!0}),/**
 * A reference to the {@link module:browser|browser utility module} as an object.
 *
 * @type {Object}
 * @see  {@link module:browser|browser}
 */a9.browser=rw,/**
 * A reference to the {@link module:obj|obj utility module} as an object.
 *
 * @type {Object}
 * @see  {@link module:obj|obj}
 */a9.obj=rn,/**
 * Deprecated reference to the {@link module:obj.merge|merge function}
 *
 * @type {Function}
 * @see {@link module:obj.merge|merge}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.merge instead.
 */a9.mergeOptions=a6(9,"videojs.mergeOptions","videojs.obj.merge",ri),/**
 * Deprecated reference to the {@link module:obj.defineLazyProperty|defineLazyProperty function}
 *
 * @type {Function}
 * @see {@link module:obj.defineLazyProperty|defineLazyProperty}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.obj.defineLazyProperty instead.
 */a9.defineLazyProperty=a6(9,"videojs.defineLazyProperty","videojs.obj.defineLazyProperty",rs),/**
 * Deprecated reference to the {@link module:fn.bind_|fn.bind_ function}
 *
 * @type {Function}
 * @see {@link module:fn.bind_|fn.bind_}
 * @deprecated Deprecated and will be removed in 9.0. Please use native Function.prototype.bind instead.
 */a9.bind=a6(9,"videojs.bind","native Function.prototype.bind",sp),a9.registerPlugin=a3.registerPlugin,a9.deregisterPlugin=a3.deregisterPlugin,/**
 * Deprecated method to register a plugin with Video.js
 *
 * @deprecated Deprecated and will be removed in 9.0. Use videojs.registerPlugin() instead.
 *
 * @param {string} name
 *        The plugin name
*
 * @param {typeof Plugin|Function} plugin
 *         The plugin sub-class or function
 *
 * @return {typeof Plugin|Function}
 */a9.plugin=(e,t)=>(i8.warn("videojs.plugin() is deprecated; use videojs.registerPlugin() instead"),a3.registerPlugin(e,t)),a9.getPlugins=a3.getPlugins,a9.getPlugin=a3.getPlugin,a9.getPluginVersion=a3.getPluginVersion,/**
 * Adding languages so that they're available to all players.
 * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
 *
 * @param {string} code
 *        The language code or dictionary property
 *
 * @param {Object} data
 *        The data values to be translated
 *
 * @return {Object}
 *         The resulting language dictionary object
 */a9.addLanguage=function(e,t){return e=(""+e).toLowerCase(),a9.options.languages=ri(a9.options.languages,{[e]:t}),a9.options.languages[e]},/**
 * A reference to the {@link module:log|log utility module} as an object.
 *
 * @type {Function}
 * @see  {@link module:log|log}
 */a9.log=i8,a9.createLogger=i5,/**
 * A reference to the {@link module:time|time utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:time|time}
 */a9.time=sV,/**
 * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}
 *
 * @type {Function}
 * @see {@link module:time.createTimeRanges|createTimeRanges}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.
 */a9.createTimeRange=a6(9,"videojs.createTimeRange","videojs.time.createTimeRanges",sB),/**
 * Deprecated reference to the {@link module:time.createTimeRanges|createTimeRanges function}
 *
 * @type {Function}
 * @see {@link module:time.createTimeRanges|createTimeRanges}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.createTimeRanges instead.
 */a9.createTimeRanges=a6(9,"videojs.createTimeRanges","videojs.time.createTimeRanges",sB),/**
 * Deprecated reference to the {@link module:time.formatTime|formatTime function}
 *
 * @type {Function}
 * @see {@link module:time.formatTime|formatTime}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.format instead.
 */a9.formatTime=a6(9,"videojs.formatTime","videojs.time.formatTime",sH),/**
 * Deprecated reference to the {@link module:time.setFormatTime|setFormatTime function}
 *
 * @type {Function}
 * @see {@link module:time.setFormatTime|setFormatTime}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.setFormat instead.
 */a9.setFormatTime=a6(9,"videojs.setFormatTime","videojs.time.setFormatTime",sq),/**
 * Deprecated reference to the {@link module:time.resetFormatTime|resetFormatTime function}
 *
 * @type {Function}
 * @see {@link module:time.resetFormatTime|resetFormatTime}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.time.resetFormat instead.
 */a9.resetFormatTime=a6(9,"videojs.resetFormatTime","videojs.time.resetFormatTime",s$),/**
 * Deprecated reference to the {@link module:url.parseUrl|Url.parseUrl function}
 *
 * @type {Function}
 * @see {@link module:url.parseUrl|parseUrl}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.parseUrl instead.
 */a9.parseUrl=a6(9,"videojs.parseUrl","videojs.url.parseUrl",s9),/**
 * Deprecated reference to the {@link module:url.isCrossOrigin|Url.isCrossOrigin function}
 *
 * @type {Function}
 * @see {@link module:url.isCrossOrigin|isCrossOrigin}
 * @deprecated Deprecated and will be removed in 9.0. Please use videojs.url.isCrossOrigin instead.
 */a9.isCrossOrigin=a6(9,"videojs.isCrossOrigin","videojs.url.isCrossOrigin",ni),a9.EventTarget=sy,a9.any=sd,a9.on=so,a9.one=sh,a9.off=sl,a9.trigger=su,/**
 * A cross-browser XMLHttpRequest wrapper.
 *
 * @function
 * @param    {Object} options
 *           Settings for the request.
 *
 * @return   {XMLHttpRequest|XDomainRequest}
 *           The request object.
 *
 * @see      https://github.com/Raynos/xhr
 */a9.xhr=/*@__PURE__*/w(O),a9.TextTrack=na,a9.AudioTrack=no,a9.VideoTrack=nl,["isEl","isTextNode","createEl","hasClass","addClass","removeClass","toggleClass","setAttributes","getAttributes","emptyEl","appendContent","insertContent"].forEach(e=>{a9[e]=function(){return i8.warn(`videojs.${e}() is deprecated; use videojs.dom.${e}() instead`),r4[e].apply(null,arguments)}}),a9.computedStyle=a6(9,"videojs.computedStyle","videojs.dom.computedStyle",r1),/**
 * A reference to the {@link module:dom|DOM utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:dom|dom}
 */a9.dom=r4,/**
 * A reference to the {@link module:fn|fn utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:fn|fn}
 */a9.fn=sg,/**
 * A reference to the {@link module:num|num utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:num|num}
 */a9.num=nV,/**
 * A reference to the {@link module:str|str utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:str|str}
 */a9.str=sR,/**
 * A reference to the {@link module:url|URL utility module} as an object.
 *
 * @type {Object}
 * @see {@link module:url|url}
 */a9.url=nr;/*! @name videojs-contrib-quality-levels @version 4.0.0 @license Apache-2.0 *//**
 * A single QualityLevel.
 *
 * interface QualityLevel {
 *   readonly attribute DOMString id;
 *            attribute DOMString label;
 *   readonly attribute long width;
 *   readonly attribute long height;
 *   readonly attribute long bitrate;
 *            attribute boolean enabled;
 * };
 *
 * @class QualityLevel
 */class oe{/**
   * Creates a QualityLevel
   *
   * @param {Representation|Object} representation The representation of the quality level
   * @param {string}   representation.id        Unique id of the QualityLevel
   * @param {number=}  representation.width     Resolution width of the QualityLevel
   * @param {number=}  representation.height    Resolution height of the QualityLevel
   * @param {number}   representation.bandwidth Bitrate of the QualityLevel
   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel
   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel
   */constructor(e){let t=this;// eslint-disable-line
return t.id=e.id,t.label=t.id,t.width=e.width,t.height=e.height,t.bitrate=e.bandwidth,t.frameRate=e.frameRate,t.enabled_=e.enabled,Object.defineProperty(t,"enabled",{/**
       * Get whether the QualityLevel is enabled.
       *
       * @return {boolean} True if the QualityLevel is enabled.
       */get:()=>t.enabled_(),/**
       * Enable or disable the QualityLevel.
       *
       * @param {boolean} enable true to enable QualityLevel, false to disable.
       */set(e){t.enabled_(e)}}),t}}/**
 * A list of QualityLevels.
 *
 * interface QualityLevelList : EventTarget {
 *   getter QualityLevel (unsigned long index);
 *   readonly attribute unsigned long length;
 *   readonly attribute long selectedIndex;
 *
 *   void addQualityLevel(QualityLevel qualityLevel)
 *   void removeQualityLevel(QualityLevel remove)
 *   QualityLevel? getQualityLevelById(DOMString id);
 *
 *   attribute EventHandler onchange;
 *   attribute EventHandler onaddqualitylevel;
 *   attribute EventHandler onremovequalitylevel;
 * };
 *
 * @extends videojs.EventTarget
 * @class QualityLevelList
 */class ot extends a9.EventTarget{/**
   * Creates a QualityLevelList.
   */constructor(){super();let e=this;// eslint-disable-line
return e.levels_=[],e.selectedIndex_=-1,/**
     * Get the index of the currently selected QualityLevel.
     *
     * @returns {number} The index of the selected QualityLevel. -1 if none selected.
     * @readonly
     */Object.defineProperty(e,"selectedIndex",{get:()=>e.selectedIndex_}),/**
     * Get the length of the list of QualityLevels.
     *
     * @returns {number} The length of the list.
     * @readonly
     */Object.defineProperty(e,"length",{get:()=>e.levels_.length}),e[Symbol.iterator]=()=>e.levels_.values(),e}/**
   * Adds a quality level to the list.
   *
   * @param {Representation|Object} representation The representation of the quality level
   * @param {string}   representation.id        Unique id of the QualityLevel
   * @param {number=}  representation.width     Resolution width of the QualityLevel
   * @param {number=}  representation.height    Resolution height of the QualityLevel
   * @param {number}   representation.bandwidth Bitrate of the QualityLevel
   * @param {number=}  representation.frameRate Frame-rate of the QualityLevel
   * @param {Function} representation.enabled   Callback to enable/disable QualityLevel
   * @return {QualityLevel} the QualityLevel added to the list
   * @method addQualityLevel
   */addQualityLevel(e){let t=this.getQualityLevelById(e.id);// Do not add duplicate quality levels
if(t)return t;let i=this.levels_.length;return t=new oe(e),""+i in this||Object.defineProperty(this,i,{get(){return this.levels_[i]}}),this.levels_.push(t),this.trigger({qualityLevel:t,type:"addqualitylevel"}),t}/**
   * Removes a quality level from the list.
   *
   * @param {QualityLevel} qualityLevel The QualityLevel to remove from the list.
   * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed
   * @method removeQualityLevel
   */removeQualityLevel(e){let t=null;for(let i=0,r=this.length;i<r;i++)if(this[i]===e){t=this.levels_.splice(i,1)[0],this.selectedIndex_===i?this.selectedIndex_=-1:this.selectedIndex_>i&&this.selectedIndex_--;break}return t&&this.trigger({qualityLevel:e,type:"removequalitylevel"}),t}/**
   * Searches for a QualityLevel with the given id.
   *
   * @param {string} id The id of the QualityLevel to find.
   * @return {QualityLevel|null} The QualityLevel with id, or null if not found.
   * @method getQualityLevelById
   */getQualityLevelById(e){for(let t=0,i=this.length;t<i;t++){let i=this[t];if(i.id===e)return i}return null}/**
   * Resets the list of QualityLevels to empty
   *
   * @method dispose
   */dispose(){this.selectedIndex_=-1,this.levels_.length=0}}for(const e in /**
 * change - The selected QualityLevel has changed.
 * addqualitylevel - A QualityLevel has been added to the QualityLevelList.
 * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.
 */ot.prototype.allowedEvents_={change:"change",addqualitylevel:"addqualitylevel",removequalitylevel:"removequalitylevel"},ot.prototype.allowedEvents_)ot.prototype["on"+e]=null;var oi="4.0.0";/**
 * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and
 * event handlers.
 *
 * @param {Player} player Player object.
 * @param {Object} options Plugin options object.
 * @return {QualityLevelList} a list of QualityLevels
 */const or=function(e,t){let i=e.qualityLevels,r=new ot,s=function(){r.dispose(),e.qualityLevels=i,e.off("dispose",s)};return e.on("dispose",s),e.qualityLevels=()=>r,e.qualityLevels.VERSION=oi,r},os=function(e){return or(this,a9.obj.merge({},e))};a9.registerPlugin("qualityLevels",os),os.VERSION=oi;/*! @name @videojs/http-streaming @version 3.7.0 @license Apache-2.0 *//**
 * @file resolve-url.js - Handling how URLs are resolved and manipulated
 */const on=function(e,t){// return early if we don't need to resolve
if(/^[a-z]+:/i.test(t))return t;/^data:/.test(e)&&(e=/*@__PURE__*/w(I).location&&/*@__PURE__*/w(I).location.href||"");// IE11 supports URL but not the URL constructor
// feature detect the behavior we want
var i="function"==typeof /*@__PURE__*/w(I).URL,r=/^\/\//.test(e),s=!/*@__PURE__*/w(I).location&&!/\/\//i.test(e);if(i?e=new/*@__PURE__*/(w(I)).URL(e,/*@__PURE__*/w(I).location||K):/\/\//i.test(e)||(e=/*@__PURE__*/w(X).buildAbsoluteURL(/*@__PURE__*/w(I).location&&/*@__PURE__*/w(I).location.href||"",e)),i){var n=new URL(t,e);// if we're a protocol-less url, remove the protocol
return(// and if we're location-less, remove the location
// otherwise, return the url unmodified
s?n.href.slice(K.length):r?n.href.slice(n.protocol.length):n.href)}return /*@__PURE__*/w(X).buildAbsoluteURL(e,t)},oa=(e,t)=>// To understand how the responseURL below is set and generated:
    // - https://fetch.spec.whatwg.org/#concept-response-url
    // - https://fetch.spec.whatwg.org/#atomic-http-redirect-handling
    t&&t.responseURL&&e!==t.responseURL?t.responseURL:e,oo=e=>a9.log.debug?a9.log.debug.bind(a9,"VHS:",`${e} >`):function(){};/**
 * Provides a compatibility layer between Video.js 7 and 8 API changes for VHS.
 *//**
 * Delegates to videojs.obj.merge (Video.js 8) or
 * videojs.mergeOptions (Video.js 7).
 */function ol(...e){let t=a9.obj||a9,i=t.merge||t.mergeOptions;return i.apply(t,e)}/**
 * Delegates to videojs.time.createTimeRanges (Video.js 8) or
 * videojs.createTimeRanges (Video.js 7).
 */function ou(...e){let t=a9.time||a9,i=t.createTimeRanges||t.createTimeRanges;return i.apply(t,e)}/**
 * ranges
 *
 * Utilities for working with TimeRanges.
 *
 */const oh=1/30,od=3*oh,oc=function(e,t){let i;let r=[];if(e&&e.length)// Search for ranges that match the predicate
for(i=0;i<e.length;i++)t(e.start(i),e.end(i))&&r.push([e.start(i),e.end(i)]);return ou(r)},op=function(e,t){return oc(e,function(e,i){return e-od<=t&&i+od>=t})},om=function(e,t){return oc(e,function(e){return e-oh>=t})},of=function(e){if(e.length<2)return ou();let t=[];for(let i=1;i<e.length;i++){let r=e.end(i-1),s=e.start(i);t.push([r,s])}return ou(t)},og=function(e,t){let i=null,r=null,s=0,n=[],a=[];if(!e||!e.length||!t||!t.length)return ou();// Handle the case where we have both buffers and create an
// intersection of the two
let o=e.length;// A) Gather up all start and end times
for(;o--;)n.push({time:e.start(o),type:"start"}),n.push({time:e.end(o),type:"end"});for(o=t.length;o--;)n.push({time:t.start(o),type:"start"}),n.push({time:t.end(o),type:"end"});// B) Sort them by time
//    arity for ends
for(n.sort(function(e,t){return e.time-t.time}),o=0;o<n.length;o++)"start"===n[o].type?2==++s&&(i=n[o].time):"end"===n[o].type&&1==--s&&(r=n[o].time),null!==i&&null!==r&&(a.push([i,r]),i=null,r=null);return ou(a)},oy=e=>{let t=[];if(!e||!e.length)return"";for(let i=0;i<e.length;i++)t.push(e.start(i)+" => "+e.end(i));return t.join(", ")},o_=function(e,t,i=1){let r=e.length?e.end(e.length-1):0;return(r-t)/i},ob=e=>{let t=[];for(let i=0;i<e.length;i++)t.push({start:e.start(i),end:e.end(i)});return t},ov=function(e,t){// same object
if(e===t)return!1;// one or the other is undefined
if(!e&&t||!t&&e||e.length!==t.length)return!0;// see if any start/end pair is different
for(let i=0;i<e.length;i++)if(e.start(i)!==t.start(i)||e.end(i)!==t.end(i))return!0;// if the length and every pair is the same
// this is the same time range
return!1},oT=function(e){if(e&&e.length&&e.end)return e.end(e.length-1)},oS=function(e,t){let i=0;if(!e||!e.length)return i;for(let r=0;r<e.length;r++){let s=e.start(r),n=e.end(r);if(!(t>n)){// startTime is within this range
if(t>s&&t<=n){i+=n-t;continue}// startTime is before this range.
i+=n-s}}return i},oE=(e,t)=>{// if this isn't a preload segment
// then we will have a segment duration that is accurate.
if(!t.preload)return t.duration;// otherwise we have to add up parts and preload hints
// to get an up to date duration.
let i=0;return(t.parts||[]).forEach(function(e){i+=e.duration}),// as they won't even have a duration yet.
(t.preloadHints||[]).forEach(function(t){"PART"===t.type&&(i+=e.partTargetDuration)}),i},ow=e=>(e.segments||[]).reduce((e,t,i)=>(t.parts?t.parts.forEach(function(r,s){e.push({duration:r.duration,segmentIndex:i,partIndex:s,part:r,segment:t})}):e.push({duration:t.duration,segmentIndex:i,partIndex:null,segment:t,part:null}),e),[]),ok=e=>{let t=e.segments&&e.segments.length&&e.segments[e.segments.length-1];return t&&t.parts||[]},oC=({preloadSegment:e})=>{if(!e)return;let{parts:t,preloadHints:i}=e;return(i||[]).reduce((e,t)=>e+("PART"===t.type?1:0),0)+(t&&t.length?t.length:0)},ox=(e,t)=>{if(t.endList)return 0;// dash suggestedPresentationDelay trumps everything
if(e&&e.suggestedPresentationDelay)return e.suggestedPresentationDelay;let i=ok(t).length>0;// look for "part" delays from ll-hls first
return i&&t.serverControl&&t.serverControl.partHoldBack?t.serverControl.partHoldBack:i&&t.partTargetDuration?3*t.partTargetDuration:t.serverControl&&t.serverControl.holdBack?t.serverControl.holdBack:t.targetDuration?3*t.targetDuration:0},oD=function(e,t){let i=0,r=t-e.mediaSequence,s=e.segments[r];// information that is earlier than endSequence
if(s){if(void 0!==s.start)return{result:s.start,precise:!0};if(void 0!==s.end)return{result:s.end-s.duration,precise:!0}}for(;r--;){if(void 0!==(s=e.segments[r]).end)return{result:i+s.end,precise:!0};if(i+=oE(e,s),void 0!==s.start)return{result:i+s.start,precise:!0}}return{result:i,precise:!1}},oI=function(e,t){let i,r=0,s=t-e.mediaSequence;// information
for(;s<e.segments.length;s++){if(void 0!==(i=e.segments[s]).start)return{result:i.start-r,precise:!0};if(r+=oE(e,i),void 0!==i.end)return{result:i.end-r,precise:!0}}// indicate we didn't find a useful duration estimate
return{result:-1,precise:!1}},oA=function(e,t,i){if(void 0===t&&(t=e.mediaSequence+e.segments.length),t<e.mediaSequence)return 0;// do a backward walk to estimate the duration
let r=oD(e,t);if(r.precise)// information provided directly from the Media Source, return
// it
return r.result;// walk forward to see if a precise duration estimate can be made
// that way
let s=oI(e,t);return s.precise?s.result:r.result+i},oL=function(e,t,i){if(!e)return 0;// if a slice of the total duration is not requested, use
// playlist-level duration indicators when they're present
if("number"!=typeof i&&(i=0),void 0===t){// if present, use the duration specified in the playlist
if(e.totalDuration)return e.totalDuration;// duration should be Infinity for live playlists
if(!e.endList)return /*@__PURE__*/w(I).Infinity}// calculate the total duration based on the segment durations
return oA(e,t,i)},oP=function({defaultDuration:e,durationList:t,startIndex:i,endIndex:r}){let s=0;if(i>r&&([i,r]=[r,i]),i<0){for(let t=i;t<Math.min(0,r);t++)s+=e;i=0}for(let e=i;e<r;e++)s+=t[e].duration;return s},oO=function(e,t,i,r){if(!e||!e.segments)return null;if(e.endList)return oL(e);if(null===t)return null;t=t||0;let s=oA(e,e.mediaSequence+e.segments.length,t);return i&&(s-=r="number"==typeof r?r:ox(null,e)),Math.max(0,s)},oR=function(e){return e.excludeUntil&&e.excludeUntil>Date.now()},oN=function(e){return e.excludeUntil&&e.excludeUntil===1/0},oM=function(e){let t=oR(e);return!e.disabled&&!t},oU=function(e,t){return t.attributes&&t.attributes[e]},oB=(e,t)=>{if(1===e.playlists.length)return!0;let i=t.attributes.BANDWIDTH||Number.MAX_VALUE;return 0===e.playlists.filter(e=>!!oM(e)&&(e.attributes.BANDWIDTH||0)<i).length},oF=(e,t)=>// both playlits are null
    // or only one playlist is non-null
    // no match
    (!!e||!!t)&&(!!e||!t)&&(!e||!!t)&&(e===t||!!e.id&&!!t.id&&e.id===t.id||!!e.resolvedUri&&!!t.resolvedUri&&e.resolvedUri===t.resolvedUri||!!e.uri&&!!t.uri&&e.uri===t.uri),oj=function(e,t){let i=e&&e.mediaGroups&&e.mediaGroups.AUDIO||{},r=!1;for(let e in i){for(let s in i[e])if(r=t(i[e][s]))break;if(r)break}return!!r},oq=e=>{// we are audio only if we have no main playlists but do
// have media group playlists.
if(!e||!e.playlists||!e.playlists.length){// without audio variants or playlists this
// is not an audio only main.
let t=oj(e,e=>e.playlists&&e.playlists.length||e.uri);return t}// if every playlist has only an audio codec it is audio only
for(let t=0;t<e.playlists.length;t++){let i=e.playlists[t],r=i.attributes&&i.attributes.CODECS;if(r&&r.split(",").every(e=>eZ(e)))continue;// playlist is in an audio group it is audio only
let s=oj(e,e=>oF(i,e));if(!s)// if we make it here this playlist isn't audio and we
// are not audio only
return!1}// if we make it past every playlist without returning, then
// this is an audio only playlist.
return!0};// Comparisons between time values such as current time and the end of the buffered range
var o$={liveEdgeDelay:ox,duration:oL,seekable:function(e,t,i){let r=t||0,s=oO(e,t,!0,i);return null===s?ou():(s<r&&(s=r),ou(r,s))},getMediaInfoForTime:function({playlist:e,currentTime:t,startingSegmentIndex:i,startingPartIndex:r,startTime:s,exactManifestTimings:n}){let a=t-s,o=ow(e),l=0;for(let e=0;e<o.length;e++){let t=o[e];if(i===t.segmentIndex&&("number"!=typeof r||"number"!=typeof t.partIndex||r===t.partIndex)){l=e;break}}if(a<0){// Walk backward from startIndex in the playlist, adding durations
// until we find a segment that contains `time` and return it
if(l>0)for(let t=l-1;t>=0;t--){let i=o[t];if(a+=i.duration,n){if(a<0)continue}else if(a+oh<=0)continue;return{partIndex:i.partIndex,segmentIndex:i.segmentIndex,startTime:s-oP({defaultDuration:e.targetDuration,durationList:o,startIndex:l,endIndex:t})}}// We were unable to find a good segment within the playlist
// so select the first segment
return{partIndex:o[0]&&o[0].partIndex||null,segmentIndex:o[0]&&o[0].segmentIndex||0,startTime:t}}// When startIndex is negative, we first walk forward to first segment
// adding target durations. If we "run out of time" before getting to
// the first segment, return the first segment
if(l<0){for(let i=l;i<0;i++)if((a-=e.targetDuration)<0)return{partIndex:o[0]&&o[0].partIndex||null,segmentIndex:o[0]&&o[0].segmentIndex||0,startTime:t};l=0}// Walk forward from startIndex in the playlist, subtracting durations
// until we find a segment that contains `time` and return it
for(let t=l;t<o.length;t++){let i=o[t];if(a-=i.duration,n){if(a>0)continue}else if(a-oh>=0)continue;return{partIndex:i.partIndex,segmentIndex:i.segmentIndex,startTime:s+oP({defaultDuration:e.targetDuration,durationList:o,startIndex:l,endIndex:t})}}// We are out of possible candidates so load the last one...
return{segmentIndex:o[o.length-1].segmentIndex,partIndex:o[o.length-1].partIndex,startTime:t}},isEnabled:oM,isDisabled:function(e){return e.disabled},isExcluded:oR,isIncompatible:oN,playlistEnd:oO,isAes:function(e){for(let t=0;t<e.segments.length;t++)if(e.segments[t].key)return!0;return!1},hasAttribute:oU,estimateSegmentRequestTime:function(e,t,i,r=0){if(!oU("BANDWIDTH",i))return NaN;let s=e*i.attributes.BANDWIDTH;return(s-8*r)/t},isLowestEnabledRendition:oB,isAudioOnly:oq,playlistMatch:oF,segmentDurationWithParts:oE};const{log:oH}=a9,oV=(e,t)=>`${e}-${t}`,oz=(e,t,i)=>`placeholder-uri-${e}-${t}-${i}`,oW=({onwarn:e,oninfo:t,manifestString:i,customTagParsers:r=[],customTagMappers:s=[],llhls:n})=>{let a=new eW;e&&a.on("warn",e),t&&a.on("info",t),r.forEach(e=>a.addParser(e)),s.forEach(e=>a.addTagMapper(e)),a.push(i),a.end();let o=a.manifest;// remove llhls features from the parsed manifest
if(!n&&(["preloadSegment","skip","serverControl","renditionReports","partInf","partTargetDuration"].forEach(function(e){o.hasOwnProperty(e)&&delete o[e]}),o.segments&&o.segments.forEach(function(e){["parts","preloadHints"].forEach(function(t){e.hasOwnProperty(t)&&delete e[t]})})),!o.targetDuration){let t=10;o.segments&&o.segments.length&&(t=o.segments.reduce((e,t)=>Math.max(e,t.duration),0)),e&&e(`manifest has no targetDuration defaulting to ${t}`),o.targetDuration=t}let l=ok(o);if(l.length&&!o.partTargetDuration){let t=l.reduce((e,t)=>Math.max(e,t.duration),0);e&&(e(`manifest has no partTargetDuration defaulting to ${t}`),oH.error("LL-HLS manifest has parts but lacks required #EXT-X-PART-INF:PART-TARGET value. See https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-09#section-4.4.3.7. Playback is not guaranteed.")),o.partTargetDuration=t}return o},oG=(e,t)=>{e.mediaGroups&&["AUDIO","SUBTITLES"].forEach(i=>{if(e.mediaGroups[i])for(let r in e.mediaGroups[i])for(let s in e.mediaGroups[i][r]){let n=e.mediaGroups[i][r][s];t(n,i,r,s)}})},oX=({playlist:e,uri:t,id:i})=>{e.id=i,e.playlistErrors_=0,t&&// playlists do not contain their own source URI, but one is needed for consistency in
// VHS.
(e.uri=t),// For HLS main playlists, even though certain attributes MUST be defined, the
// stream may still be played without them.
// For HLS media playlists, m3u8-parser does not attach an attributes object to the
// manifest.
//
// To avoid undefined reference errors through the project, and make the code easier
// to write/read, add an empty attributes object for these cases.
e.attributes=e.attributes||{}},oK=e=>{let t=e.playlists.length;for(;t--;){let i=e.playlists[t];oX({playlist:i,id:oV(t,i.uri)}),i.resolvedUri=on(e.uri,i.uri),e.playlists[i.id]=i,e.playlists[i.uri]=i,i.attributes.BANDWIDTH||oH.warn("Invalid playlist STREAM-INF detected. Missing BANDWIDTH attribute.")}},oY=e=>{oG(e,t=>{t.uri&&(t.resolvedUri=on(e.uri,t.uri))})},oQ=(e,t)=>{let i=oV(0,t),r={mediaGroups:{AUDIO:{},VIDEO:{},"CLOSED-CAPTIONS":{},SUBTITLES:{}},uri:/*@__PURE__*/w(I).location.href,resolvedUri:/*@__PURE__*/w(I).location.href,playlists:[{uri:t,id:i,resolvedUri:t,// m3u8-parser does not attach an attributes property to media playlists so make
// sure that the property is attached to avoid undefined reference errors
attributes:{}}]};return r.playlists[i]=r.playlists[0],r.playlists[t]=r.playlists[0],r},oJ=(e,t,i=oz)=>{e.uri=t;for(let t=0;t<e.playlists.length;t++)if(!e.playlists[t].uri){// Set up phony URIs for the playlists since playlists are referenced by their URIs
// throughout VHS, but some formats (e.g., DASH) don't have external URIs
// TODO: consider adding dummy URIs in mpd-parser
let i=`placeholder-uri-${t}`;e.playlists[t].uri=i}let r=oq(e);oG(e,(t,s,n,a)=>{// add a playlist array under properties
if(!t.playlists||!t.playlists.length){// If the manifest is audio only and this media group does not have a uri, check
// if the media group is located in the main list of playlists. If it is, don't add
// placeholder properties as it shouldn't be considered an alternate audio track.
if(r&&"AUDIO"===s&&!t.uri)for(let t=0;t<e.playlists.length;t++){let i=e.playlists[t];if(i.attributes&&i.attributes.AUDIO&&i.attributes.AUDIO===n)return}t.playlists=[/*@__PURE__*/w(R)({},t)]}t.playlists.forEach(function(t,r){let o=i(s,n,a,t),l=oV(r,o);t.uri?t.resolvedUri=t.resolvedUri||on(e.uri,t.uri):(// DEPRECATED, this has been added to prevent a breaking change.
// previously we only ever had a single media group playlist, so
// we mark the first playlist uri without prepending the index as we used to
// ideally we would do all of the playlists the same way.
t.uri=0===r?o:l,// the placeholder again
t.resolvedUri=t.uri),t.id=t.id||l,// expected to have this.
t.attributes=t.attributes||{},e.playlists[t.id]=t,e.playlists[t.uri]=t})}),oK(e),oY(e)};class oZ{constructor(){this.offset_=null,this.pendingDateRanges_=new Map,this.processedDateRanges_=new Map}setOffset(e=[]){// already set
if(null!==this.offset_||!e.length)return;let[t]=e;// no program date time
void 0!==t.programDateTime&&// Set offset as ProgramDateTime for the very first segment of the very first playlist load:
(this.offset_=t.programDateTime/1e3)}setPendingDateRanges(e=[]){if(!e.length)return;let[t]=e,i=t.startDate.getTime();this.trimProcessedDateRanges_(i),this.pendingDateRanges_=e.reduce((e,t)=>(e.set(t.id,t),e),new Map)}processDateRange(e){this.pendingDateRanges_.delete(e.id),this.processedDateRanges_.set(e.id,e)}getDateRangesToProcess(){if(null===this.offset_)return[];let e={},t=[];for(let i of(this.pendingDateRanges_.forEach((i,r)=>{if(!this.processedDateRanges_.has(r)&&(i.startTime=i.startDate.getTime()/1e3-this.offset_,i.processDateRange=()=>this.processDateRange(i),t.push(i),i.class)){if(e[i.class]){let t=e[i.class].push(i);i.classListIndex=t-1}else e[i.class]=[i],i.classListIndex=0}}),t)){let t=e[i.class]||[];i.endDate?i.endTime=i.endDate.getTime()/1e3-this.offset_:i.endOnNext&&t[i.classListIndex+1]?i.endTime=t[i.classListIndex+1].startTime:i.duration?i.endTime=i.startTime+i.duration:i.plannedDuration?i.endTime=i.startTime+i.plannedDuration:i.endTime=i.startTime}return t}trimProcessedDateRanges_(e){let t=new Map(this.processedDateRanges_);t.forEach((t,i)=>{t.startDate.getTime()<e&&this.processedDateRanges_.delete(i)})}}/**
 * @file playlist-loader.js
 *
 * A state machine that manages the loading, caching, and updating of
 * M3U8 playlists.
 *
 */const{EventTarget:o0}=a9,o1=(e,t)=>{if(t.endList||!t.serverControl)return e;let i={};if(t.serverControl.canBlockReload){let{preloadSegment:e}=t,r=t.mediaSequence+t.segments.length;// next msn is a zero based value, length is not.
// that we are going to request a part of that preload segment.
// the logic below is used to determine that.
if(e){let s=e.parts||[],n=oC(t)-1;// _HLS_part is a zero based index
n>-1&&n!==s.length-1&&// eslint-disable-next-line
(i._HLS_part=n),(n>-1||s.length)&&r--}// add _HLS_msn= in front of any _HLS_part query
// eslint-disable-next-line
i._HLS_msn=r}if(t.serverControl&&t.serverControl.canSkipUntil&&// eslint-disable-next-line
(i._HLS_skip=t.serverControl.canSkipDateranges?"v2":"YES"),Object.keys(i).length){let t=new/*@__PURE__*/(w(I)).URL(e);["_HLS_skip","_HLS_msn","_HLS_part"].forEach(function(e){i.hasOwnProperty(e)&&t.searchParams.set(e,i[e])}),e=t.toString()}return e},o2=(e,t)=>{if(!e)return t;let i=ol(e,t);// if only the old segment has preload hints
// if only the old segment has parts
// then the parts are no longer valid
if(e.preloadHints&&!t.preloadHints&&delete i.preloadHints,e.parts&&!t.parts)delete i.parts;// if both segments have parts
else if(e.parts&&t.parts)for(let r=0;r<t.parts.length;r++)e.parts&&e.parts[r]&&(i.parts[r]=ol(e.parts[r],t.parts[r]));// set skipped to false for segments that have
return!e.skipped&&t.skipped&&(i.skipped=!1),e.preload&&!t.preload&&(i.preload=!1),i},o4=(e,t,i)=>{let r;let s=e.slice(),n=t.slice();i=i||0;let a=[];for(let e=0;e<n.length;e++){let t=s[e+i],o=n[e];t?(r=t.map||r,a.push(o2(t,o))):(r&&!o.map&&(o.map=r),a.push(o))}return a},o8=(e,t)=>{!e.resolvedUri&&e.uri&&(e.resolvedUri=on(t,e.uri)),e.key&&!e.key.resolvedUri&&(e.key.resolvedUri=on(t,e.key.uri)),e.map&&!e.map.resolvedUri&&(e.map.resolvedUri=on(t,e.map.uri)),e.map&&e.map.key&&!e.map.key.resolvedUri&&(e.map.key.resolvedUri=on(t,e.map.key.uri)),e.parts&&e.parts.length&&e.parts.forEach(e=>{e.resolvedUri||(e.resolvedUri=on(t,e.uri))}),e.preloadHints&&e.preloadHints.length&&e.preloadHints.forEach(e=>{e.resolvedUri||(e.resolvedUri=on(t,e.uri))})},o5=function(e){let t=e.segments||[],i=e.preloadSegment;// a usable segment, only include a preloadSegment that has
// parts.
if(i&&i.parts&&i.parts.length){// if preloadHints has a MAP that means that the
// init segment is going to change. We cannot use any of the parts
// from this preload segment.
if(i.preloadHints){for(let e=0;e<i.preloadHints.length;e++)if("MAP"===i.preloadHints[e].type)return t}// set the duration for our preload segment to target duration.
i.duration=e.targetDuration,i.preload=!0,t.push(i)}return t},o3=(e,t)=>e===t||e.segments&&t.segments&&e.segments.length===t.segments.length&&e.endList===t.endList&&e.mediaSequence===t.mediaSequence&&e.preloadSegment===t.preloadSegment,o6=(e,t,i=o3)=>{let r=ol(e,{}),s=r.playlists[t.id];if(!s||i(s,t))return null;t.segments=o5(t);let n=ol(s,t);// always use the new media's preload segment
// if the update could overlap existing segment information, merge the two segment lists
if(n.preloadSegment&&!t.preloadSegment&&delete n.preloadSegment,s.segments){if(t.skip){t.segments=t.segments||[];// add back in objects for skipped segments, so that we merge
// old properties into the new segments
for(let e=0;e<t.skip.skippedSegments;e++)t.segments.unshift({skipped:!0})}n.segments=o4(s.segments,t.segments,t.mediaSequence-s.mediaSequence)}// resolve any segment URIs to prevent us from having to do it later
n.segments.forEach(e=>{o8(e,n.resolvedUri)});// that is referenced by index, and one by URI. The index reference may no longer be
// necessary.
for(let e=0;e<r.playlists.length;e++)r.playlists[e].id===t.id&&(r.playlists[e]=n);return r.playlists[t.id]=n,r.playlists[t.uri]=n,oG(e,(e,i,r,s)=>{if(e.playlists)for(let i=0;i<e.playlists.length;i++)t.id===e.playlists[i].id&&(e.playlists[i]=n)}),r},o7=(e,t)=>{let i=e.segments||[],r=i[i.length-1],s=r&&r.parts&&r.parts[r.parts.length-1],n=s&&s.duration||r&&r.duration;return t&&n?1e3*n:500*(e.partTargetDuration||e.targetDuration||10)};/**
 * Load a playlist from a remote location
 *
 * @class PlaylistLoader
 * @extends Stream
 * @param {string|Object} src url or object of manifest
 * @param {boolean} withCredentials the withCredentials xhr option
 * @class
 */class o9 extends o0{constructor(e,t,i={}){if(super(),!e)throw Error("A non-empty playlist URL or object is required");this.logger_=oo("PlaylistLoader");let{withCredentials:r=!1}=i;this.src=e,this.vhs_=t,this.withCredentials=r,this.addDateRangesToTextTrack_=i.addDateRangesToTextTrack;let s=t.options_;this.customTagParsers=s&&s.customTagParsers||[],this.customTagMappers=s&&s.customTagMappers||[],this.llhls=s&&s.llhls,this.dateRangesStorage_=new oZ,this.state="HAVE_NOTHING",this.handleMediaupdatetimeout_=this.handleMediaupdatetimeout_.bind(this),this.on("mediaupdatetimeout",this.handleMediaupdatetimeout_),this.on("loadedplaylist",this.handleLoadedPlaylist_.bind(this))}handleLoadedPlaylist_(){let e=this.media();if(!e)return;this.dateRangesStorage_.setOffset(e.segments),this.dateRangesStorage_.setPendingDateRanges(e.dateRanges);let t=this.dateRangesStorage_.getDateRangesToProcess();t.length&&this.addDateRangesToTextTrack_&&this.addDateRangesToTextTrack_(t)}handleMediaupdatetimeout_(){if("HAVE_METADATA"!==this.state)return;let e=this.media(),t=on(this.main.uri,e.uri);this.llhls&&(t=o1(t,e)),this.state="HAVE_CURRENT_METADATA",this.request=this.vhs_.xhr({uri:t,withCredentials:this.withCredentials},(e,t)=>{// disposed
if(this.request){if(e)return this.playlistRequestError(this.request,this.media(),"HAVE_METADATA");this.haveMetadata({playlistString:this.request.responseText,url:this.media().uri,id:this.media().id})}})}playlistRequestError(e,t,i){let{uri:r,id:s}=t;// any in-flight request is now finished
this.request=null,i&&(this.state=i),this.error={playlist:this.main.playlists[s],status:e.status,message:`HLS playlist request error at URL: ${r}.`,responseText:e.responseText,code:e.status>=500?4:2},this.trigger("error")}parseManifest_({url:e,manifestString:t}){return oW({onwarn:({message:t})=>this.logger_(`m3u8-parser warn for ${e}: ${t}`),oninfo:({message:t})=>this.logger_(`m3u8-parser info for ${e}: ${t}`),manifestString:t,customTagParsers:this.customTagParsers,customTagMappers:this.customTagMappers,llhls:this.llhls})}/**
   * Update the playlist loader's state in response to a new or updated playlist.
   *
   * @param {string} [playlistString]
   *        Playlist string (if playlistObject is not provided)
   * @param {Object} [playlistObject]
   *        Playlist object (if playlistString is not provided)
   * @param {string} url
   *        URL of playlist
   * @param {string} id
   *        ID to use for playlist
   */haveMetadata({playlistString:e,playlistObject:t,url:i,id:r}){// any in-flight request is now finished
this.request=null,this.state="HAVE_METADATA";let s=t||this.parseManifest_({url:i,manifestString:e});s.lastRequest=Date.now(),oX({playlist:s,uri:i,id:r});let n=o6(this.main,s);this.targetDuration=s.partTargetDuration||s.targetDuration,this.pendingMedia_=null,n?(this.main=n,this.media_=this.main.playlists[r]):this.trigger("playlistunchanged"),this.updateMediaUpdateTimeout_(o7(this.media(),!!n)),this.trigger("loadedplaylist")}/**
    * Abort any outstanding work and clean up.
    */dispose(){this.trigger("dispose"),this.stopRequest(),/*@__PURE__*/w(I).clearTimeout(this.mediaUpdateTimeout),/*@__PURE__*/w(I).clearTimeout(this.finalRenditionTimeout),this.dateRangesStorage_=new oZ,this.off()}stopRequest(){if(this.request){let e=this.request;this.request=null,e.onreadystatechange=null,e.abort()}}/**
    * When called without any arguments, returns the currently
    * active media playlist. When called with a single argument,
    * triggers the playlist loader to asynchronously switch to the
    * specified media playlist. Calling this method while the
    * loader is in the HAVE_NOTHING causes an error to be emitted
    * but otherwise has no effect.
    *
    * @param {Object=} playlist the parsed media playlist
    * object to switch to
    * @param {boolean=} shouldDelay whether we should delay the request by half target duration
    *
    * @return {Playlist} the current loaded media
    */media(e,t){// getter
if(!e)return this.media_;// setter
if("HAVE_NOTHING"===this.state)throw Error("Cannot switch media playlist from "+this.state);// find the playlist object if the target playlist has been
// specified by URI
if("string"==typeof e){if(!this.main.playlists[e])throw Error("Unknown playlist URI: "+e);e=this.main.playlists[e]}if(/*@__PURE__*/w(I).clearTimeout(this.finalRenditionTimeout),t){let t=(e.partTargetDuration||e.targetDuration)/2*1e3||5e3;this.finalRenditionTimeout=/*@__PURE__*/w(I).setTimeout(this.media.bind(this,e,!1),t);return}let i=this.state,r=!this.media_||e.id!==this.media_.id,s=this.main.playlists[e.id];if(s&&s.endList||// handle the case of a playlist object (e.g., if using vhs-json with a resolved
// media playlist or, for the case of demuxed audio, a resolved audio media group)
e.endList&&e.segments.length){this.request&&(this.request.onreadystatechange=null,this.request.abort(),this.request=null),this.state="HAVE_METADATA",this.media_=e,r&&(this.trigger("mediachanging"),"HAVE_MAIN_MANIFEST"===i?// also provided (in the form of a resolved playlist object) as part of the
// source object (rather than just a URL). Therefore, since the media playlist
// doesn't need to be requested, loadedmetadata won't trigger as part of the
// normal flow, and needs an explicit trigger here.
this.trigger("loadedmetadata"):this.trigger("mediachange"));return}// We update/set the timeout here so that live playlists
if(// that are not a media change will "start" the loader as expected.
// We expect that this function will start the media update timeout
// cycle again. This also prevents a playlist switch failure from
// causing us to stall during live.
this.updateMediaUpdateTimeout_(o7(e,!0)),r){if(this.state="SWITCHING_MEDIA",this.request){if(e.resolvedUri===this.request.url)// has no effect after the first
return;this.request.onreadystatechange=null,this.request.abort(),this.request=null}// request the new playlist
this.media_&&this.trigger("mediachanging"),this.pendingMedia_=e,this.request=this.vhs_.xhr({uri:e.resolvedUri,withCredentials:this.withCredentials},(t,r)=>{// disposed
if(this.request){if(e.lastRequest=Date.now(),e.resolvedUri=oa(e.resolvedUri,r),t)return this.playlistRequestError(this.request,e,i);this.haveMetadata({playlistString:r.responseText,url:e.uri,id:e.id}),"HAVE_MAIN_MANIFEST"===i?this.trigger("loadedmetadata"):this.trigger("mediachange")}})}}/**
   * pause loading of the playlist
   */pause(){this.mediaUpdateTimeout&&(/*@__PURE__*/w(I).clearTimeout(this.mediaUpdateTimeout),this.mediaUpdateTimeout=null),this.stopRequest(),"HAVE_NOTHING"===this.state&&// started, so reset to an unstarted state.
(this.started=!1),"SWITCHING_MEDIA"===this.state?this.media_?this.state="HAVE_METADATA":this.state="HAVE_MAIN_MANIFEST":"HAVE_CURRENT_METADATA"===this.state&&(this.state="HAVE_METADATA")}/**
   * start loading of the playlist
   */load(e){this.mediaUpdateTimeout&&(/*@__PURE__*/w(I).clearTimeout(this.mediaUpdateTimeout),this.mediaUpdateTimeout=null);let t=this.media();if(e){let e=t?(t.partTargetDuration||t.targetDuration)/2*1e3:5e3;this.mediaUpdateTimeout=/*@__PURE__*/w(I).setTimeout(()=>{this.mediaUpdateTimeout=null,this.load()},e);return}if(!this.started){this.start();return}t&&!t.endList?this.trigger("mediaupdatetimeout"):this.trigger("loadedplaylist")}updateMediaUpdateTimeout_(e){this.mediaUpdateTimeout&&(/*@__PURE__*/w(I).clearTimeout(this.mediaUpdateTimeout),this.mediaUpdateTimeout=null),this.media()&&!this.media().endList&&(this.mediaUpdateTimeout=/*@__PURE__*/w(I).setTimeout(()=>{this.mediaUpdateTimeout=null,this.trigger("mediaupdatetimeout"),this.updateMediaUpdateTimeout_(e)},e))}/**
   * start loading of the playlist
   */start(){if(this.started=!0,"object"==typeof this.src){this.src.uri||(this.src.uri=/*@__PURE__*/w(I).location.href),// resolvedUri is added on internally after the initial request. Since there's no
// request for pre-resolved manifests, add on resolvedUri here.
this.src.resolvedUri=this.src.uri,// request can be skipped (since the top level of the manifest, at a minimum, is
// already available as a parsed manifest object). However, if the manifest object
// represents a main playlist, some media playlists may need to be resolved before
// the starting segment list is available. Therefore, go directly to setup of the
// initial playlist, and let the normal flow continue from there.
//
// Note that the call to setup is asynchronous, as other sections of VHS may assume
// that the first request is asynchronous.
setTimeout(()=>{this.setupInitialPlaylist(this.src)},0);return}// request the specified URL
this.request=this.vhs_.xhr({uri:this.src,withCredentials:this.withCredentials},(e,t)=>{// disposed
if(!this.request)return;if(// clear the loader's request reference
this.request=null,e)return this.error={status:t.status,message:`HLS playlist request error at URL: ${this.src}.`,responseText:t.responseText,// MEDIA_ERR_NETWORK
code:2},"HAVE_NOTHING"===this.state&&(this.started=!1),this.trigger("error");this.src=oa(this.src,t);let i=this.parseManifest_({manifestString:t.responseText,url:this.src});this.setupInitialPlaylist(i)})}srcUri(){return"string"==typeof this.src?this.src:this.src.uri}/**
   * Given a manifest object that's either a main or media playlist, trigger the proper
   * events and set the state of the playlist loader.
   *
   * If the manifest object represents a main playlist, `loadedplaylist` will be
   * triggered to allow listeners to select a playlist. If none is selected, the loader
   * will default to the first one in the playlists array.
   *
   * If the manifest object represents a media playlist, `loadedplaylist` will be
   * triggered followed by `loadedmetadata`, as the only available playlist is loaded.
   *
   * In the case of a media playlist, a main playlist object wrapper with one playlist
   * will be created so that all logic can handle playlists in the same fashion (as an
   * assumed manifest object schema).
   *
   * @param {Object} manifest
   *        The parsed manifest object
   */setupInitialPlaylist(e){if(this.state="HAVE_MAIN_MANIFEST",e.playlists){this.main=e,oJ(this.main,this.srcUri()),// then resolve URIs in advance, as they are usually done after a playlist request,
// which may not happen if the playlist is resolved.
e.playlists.forEach(e=>{e.segments=o5(e),e.segments.forEach(t=>{o8(t,e.resolvedUri)})}),this.trigger("loadedplaylist"),this.request||// from the first listed one
this.media(this.main.playlists[0]);return}// In order to support media playlists passed in as vhs-json, the case where the uri
// is not provided as part of the manifest should be considered, and an appropriate
// default used.
let t=this.srcUri()||/*@__PURE__*/w(I).location.href;this.main=oQ(e,t),this.haveMetadata({playlistObject:e,url:t,id:this.main.playlists[0].id}),this.trigger("loadedmetadata")}}/**
 * @file xhr.js
 */const{xhr:le}=a9,lt=function(e,t,i,r){let s="arraybuffer"===e.responseType?e.response:e.responseText;t||!s||(e.responseTime=Date.now(),e.roundTripTime=e.responseTime-e.requestTime,e.bytesReceived=s.byteLength||s.length,e.bandwidth||(e.bandwidth=Math.floor(e.bytesReceived/e.roundTripTime*8e3))),i.headers&&(e.responseHeaders=i.headers),t&&"ETIMEDOUT"===t.code&&(e.timedout=!0),t||e.aborted||200===i.statusCode||206===i.statusCode||0===i.statusCode||(t=Error("XHR Failed with a response of: "+(e&&(s||e.responseText)))),r(t,e)},li=(e,t)=>{if(!e||!e.size)return;let i=t;return e.forEach(e=>{i=e(i)}),i},lr=(e,t,i,r)=>{e&&e.size&&e.forEach(e=>{e(t,i,r)})},ls=function(){let e=function e(t,i){// Add a default timeout
t=ol({timeout:45e3},t);// object before we construct the xhr request
// TODO: Remove beforeRequest in the next major release.
let r=e.beforeRequest||a9.Vhs.xhr.beforeRequest,s=e._requestCallbackSet||a9.Vhs.xhr._requestCallbackSet||new Set,n=e._responseCallbackSet||a9.Vhs.xhr._responseCallbackSet;// onRequest and onResponse hooks as a Set, at either the player or global level.
r&&"function"==typeof r&&(a9.log.warn("beforeRequest is deprecated, use onRequest instead."),s.add(r));// TODO: switch back to videojs.Vhs.xhr.name === 'XhrFunction' when we drop IE11
let a=!0===a9.Vhs.xhr.original?le:a9.Vhs.xhr,o=li(s,t);// call all registered onRequest hooks, assign new options.
s.delete(r);let l=a(o||t,function(e,t){return(// call all registered onResponse hooks
lr(n,l,e,t),lt(l,e,t,i))}),u=l.abort;return l.abort=function(){return l.aborted=!0,u.apply(l,arguments)},l.uri=t.uri,l.requestTime=Date.now(),l};return e.original=!0,e},ln=function(e){let t=e.offset;return"bytes="+t+"-"+("bigint"==typeof e.offset||"bigint"==typeof e.length?/*@__PURE__*/w(I).BigInt(e.offset)+/*@__PURE__*/w(I).BigInt(e.length)-/*@__PURE__*/w(I).BigInt(1):e.offset+e.length-1)},la=function(e){let t={};return e.byterange&&(t.Range=ln(e.byterange)),t},lo=function(e,t){let i=e.toString(16);return"00".substring(0,2-i.length)+i+(t%2?" ":"")},ll=function(e){return e>=32&&e<126?String.fromCharCode(e):"."},lu=function(e){let t={};return Object.keys(e).forEach(i=>{let r=e[i];e6(r)?t[i]={bytes:r.buffer,byteOffset:r.byteOffset,byteLength:r.byteLength}:t[i]=r}),t},lh=function(e){let t=e.byterange||{length:1/0,offset:0};return[t.length,t.offset,e.resolvedUri].join(",")},ld=function(e){return e.resolvedUri},lc=e=>{let t=Array.prototype.slice.call(e),i="";for(let e=0;e<t.length/16;e++)i+=t.slice(16*e,16*e+16).map(lo).join("")+" "+t.slice(16*e,16*e+16).map(ll).join("")+"\n";return i};var lp=/*#__PURE__*/Object.freeze({__proto__:null,createTransferableMessage:lu,initSegmentId:lh,segmentKeyId:ld,hexDump:lc,tagDump:({bytes:e})=>lc(e),textRanges:e=>{let t,i="";for(t=0;t<e.length;t++){var r;i+=(r=t,e.start(r)+"-"+e.end(r)+" ")}return i}});/**
 * Converts a player time (any time that can be gotten/set from player.currentTime(),
 * e.g., any time within player.seekable().start(0) to player.seekable().end(0)) to a
 * program time (any time referencing the real world (e.g., EXT-X-PROGRAM-DATE-TIME)).
 *
 * The containing segment is required as the EXT-X-PROGRAM-DATE-TIME serves as an "anchor
 * point" (a point where we have a mapping from program time to player time, with player
 * time being the post transmux start of the segment).
 *
 * For more details, see [this doc](../../docs/program-time-from-player-time.md).
 *
 * @param {number} playerTime the player time
 * @param {Object} segment the segment which contains the player time
 * @return {Date} program time
 */const lm=(e,t)=>{if(!t.dateTimeObject)// be used to map the start of a segment with a real world time).
return null;let i=t.videoTimingInfo.transmuxerPrependedSeconds,r=t.videoTimingInfo.transmuxedPresentationStart;return new Date(t.dateTimeObject.getTime()+1e3*(e-(r+i)))},lf=e=>e.transmuxedPresentationEnd-e.transmuxedPresentationStart-e.transmuxerPrependedSeconds,lg=(e,t)=>{let i;try{i=new Date(e)}catch(e){return null}if(!t||!t.segments||0===t.segments.length)return null;let r=t.segments[0];if(i<new Date(r.dateTimeObject))return null;for(let e=0;e<t.segments.length-1;e++){r=t.segments[e];let s=new Date(t.segments[e+1].dateTimeObject);if(i<s)break}let s=t.segments[t.segments.length-1],n=s.dateTimeObject,a=s.videoTimingInfo?lf(s.videoTimingInfo):s.duration+.25*s.duration,o=new Date(n.getTime()+1e3*a);return i>o?null:(i>new Date(n)&&(r=s),{segment:r,estimatedStart:r.videoTimingInfo?r.videoTimingInfo.transmuxedPresentationStart:o$.duration(t,t.mediaSequence+t.segments.indexOf(r)),// Although, given that all segments have accurate date time objects, the segment
// selected should be accurate, unless the video has been transmuxed at some point
// (determined by the presence of the videoTimingInfo object), the segment's "player
// time" (the start time in the player) can't be considered accurate.
type:r.videoTimingInfo?"accurate":"estimate"})},ly=(e,t)=>{let i;// Assumptions:
// - there will always be a segment.duration
// - we can start from zero
// - segments are in time order
if(!t||!t.segments||0===t.segments.length)return null;let r=0;for(let s=0;s<t.segments.length&&!(e<=// should contain the most accurate values we have for the segment's player times.
//
// Use the accurate transmuxedPresentationEnd value if it is available, otherwise fall
// back to an estimate based on the manifest derived (inaccurate) segment.duration, to
// calculate an end value.
(r=(i=t.segments[s]).videoTimingInfo?i.videoTimingInfo.transmuxedPresentationEnd:r+i.duration));s++);let s=t.segments[t.segments.length-1];if(s.videoTimingInfo&&s.videoTimingInfo.transmuxedPresentationEnd<e)return null;if(e>r){// The time is within or beyond the last segment.
//
// Check to see if the time is beyond a reasonable guess of the end of the stream.
if(e>r+.25*s.duration)// exist in the last segment, however, there isn't enough information to make even
// a reasonable estimate.
return null;i=s}return{segment:i,estimatedStart:i.videoTimingInfo?i.videoTimingInfo.transmuxedPresentationStart:r-i.duration,// Because videoTimingInfo is only set after transmux, it is the only way to get
// accurate timing values.
type:i.videoTimingInfo?"accurate":"estimate"}},l_=(e,t)=>{let i,r;try{i=new Date(e),r=new Date(t)}catch(e){}let s=i.getTime(),n=r.getTime();return(n-s)/1e3},lb=e=>{if(!e.segments||0===e.segments.length)return!1;for(let t=0;t<e.segments.length;t++){let i=e.segments[t];if(!i.dateTimeObject)return!1}return!0},lv=({playlist:e,time:t,callback:i})=>{if(!i)throw Error("getProgramTime: callback must be provided");if(!e||void 0===t)return i({message:"getProgramTime: playlist and time must be provided"});let r=ly(t,e);if(!r)return i({message:"valid programTime was not found"});if("estimate"===r.type)return i({message:"Accurate programTime could not be determined. Please seek to e.seekTime and try again",seekTime:r.estimatedStart});let s={mediaSeconds:t},n=lm(t,r.segment);return n&&(s.programDateTime=n.toISOString()),i(null,s)},lT=({programTime:e,playlist:t,retryCount:i=2,seekTo:r,pauseAfterSeek:s=!0,tech:n,callback:a})=>{if(!a)throw Error("seekToProgramTime: callback must be provided");if(void 0===e||!t||!r)return a({message:"seekToProgramTime: programTime, seekTo and playlist must be provided"});if(!t.endList&&!n.hasStarted_)return a({message:"player must be playing a live stream to start buffering"});if(!lb(t))return a({message:"programDateTime tags must be provided in the manifest "+t.resolvedUri});let o=lg(e,t);// no match
if(!o)return a({message:`${e} was not found in the stream`});let l=o.segment,u=l_(l.dateTimeObject,e);if("estimate"===o.type)return(// we've run out of retries
0===i?a({message:`${e} is not buffered yet. Try again`}):(r(o.estimatedStart+u),void n.one("seeked",()=>{lT({programTime:e,playlist:t,retryCount:i-1,seekTo:r,pauseAfterSeek:s,tech:n,callback:a})})));// Since the segment.start value is determined from the buffered end or ending time
// of the prior segment, the seekToTime doesn't need to account for any transmuxer
// modifications.
let h=l.start+u;n.one("seeked",()=>a(null,n.currentTime())),s&&n.pause(),r(h)},lS=(e,t)=>{if(4===e.readyState)return t()},lE=(e,t,i)=>{let r,s=[],n=!1,a=function(e,t,r,s){return t.abort(),n=!0,i(e,t,r,s)},o=function(e,t){if(n)return;if(e)return a(e,t,"",s);// grap the new part of content that was just downloaded
let i=t.responseText.substring(s&&s.byteLength||0,t.responseText.length);// add that onto bytes
// or we need at least two bytes after an id3Offset
if(s=tn(s,ts(i,!0)),r=r||iD(s),s.length<10||r&&s.length<r+2)return lS(t,()=>a(e,t,"",s));let o=iG(s);// if this looks like a ts segment but we don't have enough data
return(// to see the second sync byte, wait until we have enough data
// before declaring it ts
"ts"===o&&s.length<188||!o&&s.length<376?lS(t,()=>a(e,t,"",s)):a(null,t,o,s))},l=t({uri:e,beforeSend(e){// this forces the browser to pass the bytes to us unprocessed
e.overrideMimeType("text/plain; charset=x-user-defined"),e.addEventListener("progress",function({total:t,loaded:i}){return lt(e,null,{statusCode:e.status},o)})}},function(e,t){return lt(l,e,t,o)});return l},{EventTarget:lw}=a9,lk=function(e,t){if(!o3(e,t)||e.sidx&&t.sidx&&(e.sidx.offset!==t.sidx.offset||e.sidx.length!==t.sidx.length)||!e.sidx&&t.sidx||e.sidx&&!t.sidx||e.segments&&!t.segments||!e.segments&&t.segments)return!1;// neither has segments nothing changed
if(!e.segments&&!t.segments)return!0;// check segments themselves
for(let i=0;i<e.segments.length;i++){let r=e.segments[i],s=t.segments[i];if(r.uri!==s.uri)return!1;// neither segment has a byterange, there will be no byterange change.
if(!r.byterange&&!s.byterange)continue;let n=r.byterange,a=s.byterange;if(n&&!a||!n&&a||n.offset!==a.offset||n.length!==a.length)return!1}// if everything was the same with segments, this is the same playlist.
return!0},lC=(e,t,i,r)=>{// If the manifest somehow does not have an ID (non-dash compliant), use the label.
let s=r.attributes.NAME||i;return`placeholder-uri-${e}-${t}-${s}`},lx=({mainXml:e,srcUrl:t,clientOffset:i,sidxMapping:r,previousManifest:s})=>{let n=iS(e,{manifestUri:t,clientOffset:i,sidxMapping:r,previousManifest:s});return oJ(n,t,lC),n},lD=(e,t)=>{oG(e,(i,r,s,n)=>{n in t.mediaGroups[r][s]||delete e.mediaGroups[r][s][n]})},lI=(e,t,i)=>{let r=!0,s=ol(e,{// These are top level properties that can be updated
duration:t.duration,minimumUpdatePeriod:t.minimumUpdatePeriod,timelineStarts:t.timelineStarts});for(let e=0;e<t.playlists.length;e++){let n=t.playlists[e];if(n.sidx){let e=tM(n.sidx);// add sidx segments to the playlist if we have all the sidx info already
i&&i[e]&&i[e].sidx&&tx(n,i[e].sidx,n.sidx.resolvedUri)}let a=o6(s,n,lk);a&&(s=a,r=!1)}// Then update media group playlists
return(oG(t,(e,t,i,n)=>{if(e.playlists&&e.playlists.length){let a=e.playlists[0].id,o=o6(s,e.playlists[0],lk);o&&(n in(s=o).mediaGroups[t][i]||(s.mediaGroups[t][i][n]=e),// update the playlist reference within media groups
s.mediaGroups[t][i][n].playlists[0]=s.playlists[a],r=!1)}}),lD(s,t),t.minimumUpdatePeriod!==e.minimumUpdatePeriod&&(r=!1),r)?null:s},lA=(e,t)=>{let i=!!(!e.map&&!t.map),r=i||!!(e.map&&t.map&&e.map.byterange.offset===t.map.byterange.offset&&e.map.byterange.length===t.map.byterange.length);return r&&e.uri===t.uri&&e.byterange.offset===t.byterange.offset&&e.byterange.length===t.byterange.length},lL=(e,t)=>{let i={};for(let r in e){let s=e[r],n=s.sidx;if(n){let e=tM(n);if(!t[e])break;let r=t[e].sidxInfo;lA(r,n)&&(i[e]=t[e])}}return i},lP=(e,t)=>{let i=lL(e.playlists,t),r=i;return oG(e,(e,i,s,n)=>{if(e.playlists&&e.playlists.length){let i=e.playlists;r=ol(r,lL(i,t))}}),r};class lO extends lw{// DashPlaylistLoader must accept either a src url or a playlist because subsequent
// playlist loader setups from media groups will expect to be able to pass a playlist
// (since there aren't external URLs to media playlists with DASH)
constructor(e,t,i={},r){super(),this.mainPlaylistLoader_=r||this,r||(this.isMain_=!0);let{withCredentials:s=!1}=i;if(this.vhs_=t,this.withCredentials=s,this.addMetadataToTextTrack=i.addMetadataToTextTrack,!e)throw Error("A non-empty playlist URL or object is required");// event naming?
this.on("minimumUpdatePeriod",()=>{this.refreshXml_()}),this.on("mediaupdatetimeout",()=>{// We handle live content steering in the playlist controller
this.media().attributes.serviceLocation||this.refreshMedia_(this.media().id)}),this.state="HAVE_NOTHING",this.loadedPlaylists_={},this.logger_=oo("DashPlaylistLoader"),this.isMain_?(this.mainPlaylistLoader_.srcUrl=e,// once multi-period is refactored
this.mainPlaylistLoader_.sidxMapping_={}):this.childPlaylist_=e}requestErrored_(e,t,i){return(// disposed
!this.request||((// pending request is cleared
this.request=null,e)?(// use the provided error object or create one
// based on the request/response
this.error="object"!=typeof e||e instanceof Error?{status:t.status,message:"DASH request error at URL: "+t.uri,response:t.response,// MEDIA_ERR_NETWORK
code:2}:e,i&&(this.state=i),this.trigger("error"),!0):void 0))}/**
   * Verify that the container of the sidx segment can be parsed
   * and if it can, get and parse that segment.
   */addSidxSegments_(e,t,i){let r=e.sidx&&tM(e.sidx);// playlist lacks sidx or sidx segments were added to this playlist already.
if(!e.sidx||!r||this.mainPlaylistLoader_.sidxMapping_[r]){// keep this function async
this.mediaRequest_=/*@__PURE__*/w(I).setTimeout(()=>i(!1),0);return}// resolve the segment URL relative to the playlist
let s=oa(e.sidx.resolvedUri),n=(s,n)=>{let a;if(this.requestErrored_(s,n,t))return;let o=this.mainPlaylistLoader_.sidxMapping_;try{a=/*@__PURE__*/w(iw)(e7(n.response).subarray(8))}catch(e){// sidx parsing failed.
this.requestErrored_(e,n,t);return}return o[r]={sidxInfo:e.sidx,sidx:a},tx(e,a,e.sidx.resolvedUri),i(!0)};this.request=lE(s,this.vhs_.xhr,(t,i,r,a)=>{if(t)return n(t,i);if(!r||"mp4"!==r)return n({status:i.status,message:`Unsupported ${r||"unknown"} container type for sidx segment at URL: ${s}`,// response is just bytes in this case
// but we really don't want to return that.
response:"",playlist:e,internal:!0,playlistExclusionDuration:1/0,// MEDIA_ERR_NETWORK
code:2},i);// if we already downloaded the sidx bytes in the container request, use them
let{offset:o,length:l}=e.sidx.byterange;if(a.length>=l+o)return n(t,{response:a.subarray(o,o+l),status:i.status,uri:i.uri});// otherwise request sidx bytes
this.request=this.vhs_.xhr({uri:s,responseType:"arraybuffer",headers:la({byterange:e.sidx.byterange})},n)})}dispose(){this.trigger("dispose"),this.stopRequest(),this.loadedPlaylists_={},/*@__PURE__*/w(I).clearTimeout(this.minimumUpdatePeriodTimeout_),/*@__PURE__*/w(I).clearTimeout(this.mediaRequest_),/*@__PURE__*/w(I).clearTimeout(this.mediaUpdateTimeout),this.mediaUpdateTimeout=null,this.mediaRequest_=null,this.minimumUpdatePeriodTimeout_=null,this.mainPlaylistLoader_.createMupOnMedia_&&(this.off("loadedmetadata",this.mainPlaylistLoader_.createMupOnMedia_),this.mainPlaylistLoader_.createMupOnMedia_=null),this.off()}hasPendingRequest(){return this.request||this.mediaRequest_}stopRequest(){if(this.request){let e=this.request;this.request=null,e.onreadystatechange=null,e.abort()}}media(e){// getter
if(!e)return this.media_;// setter
if("HAVE_NOTHING"===this.state)throw Error("Cannot switch media playlist from "+this.state);let t=this.state;// find the playlist object if the target playlist has been specified by URI
if("string"==typeof e){if(!this.mainPlaylistLoader_.main.playlists[e])throw Error("Unknown playlist URI: "+e);e=this.mainPlaylistLoader_.main.playlists[e]}let i=!this.media_||e.id!==this.media_.id;// switch to previously loaded playlists immediately
if(i&&this.loadedPlaylists_[e.id]&&this.loadedPlaylists_[e.id].endList){this.state="HAVE_METADATA",this.media_=e,i&&(this.trigger("mediachanging"),this.trigger("mediachange"));return}// switching to the active playlist is a no-op
i&&(this.media_&&this.trigger("mediachanging"),this.addSidxSegments_(e,t,i=>{// everything is ready just continue to haveMetadata
this.haveMetadata({startingState:t,playlist:e})}))}haveMetadata({startingState:e,playlist:t}){this.state="HAVE_METADATA",this.loadedPlaylists_[t.id]=t,this.mediaRequest_=null,this.refreshMedia_(t.id),"HAVE_MAIN_MANIFEST"===e?this.trigger("loadedmetadata"):this.trigger("mediachange")}pause(){this.mainPlaylistLoader_.createMupOnMedia_&&(this.off("loadedmetadata",this.mainPlaylistLoader_.createMupOnMedia_),this.mainPlaylistLoader_.createMupOnMedia_=null),this.stopRequest(),/*@__PURE__*/w(I).clearTimeout(this.mediaUpdateTimeout),this.mediaUpdateTimeout=null,this.isMain_&&(/*@__PURE__*/w(I).clearTimeout(this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_),this.mainPlaylistLoader_.minimumUpdatePeriodTimeout_=null),"HAVE_NOTHING"===this.state&&// started, so reset to an unstarted state.
(this.started=!1)}load(e){/*@__PURE__*/w(I).clearTimeout(this.mediaUpdateTimeout),this.mediaUpdateTimeout=null;let t=this.media();if(e){let e=t?t.targetDuration/2*1e3:5e3;this.mediaUpdateTimeout=/*@__PURE__*/w(I).setTimeout(()=>this.load(),e);return}// because the playlists are internal to the manifest, load should either load the
// main manifest, or do nothing but trigger an event
if(!this.started){this.start();return}t&&!t.endList?(this.isMain_&&!this.minimumUpdatePeriodTimeout_&&(// Trigger minimumUpdatePeriod to refresh the main manifest
this.trigger("minimumUpdatePeriod"),this.updateMinimumUpdatePeriodTimeout_()),this.trigger("mediaupdatetimeout")):this.trigger("loadedplaylist")}start(){// Call this asynchronously to match the xhr request behavior below
if(this.started=!0,!this.isMain_){this.mediaRequest_=/*@__PURE__*/w(I).setTimeout(()=>this.haveMain_(),0);return}this.requestMain_((e,t)=>{this.haveMain_(),this.hasPendingRequest()||this.media_||this.media(this.mainPlaylistLoader_.main.playlists[0])})}requestMain_(e){this.request=this.vhs_.xhr({uri:this.mainPlaylistLoader_.srcUrl,withCredentials:this.withCredentials},(t,i)=>{if(this.requestErrored_(t,i)){"HAVE_NOTHING"===this.state&&(this.started=!1);return}let r=i.responseText!==this.mainPlaylistLoader_.mainXml_;if(this.mainPlaylistLoader_.mainXml_=i.responseText,i.responseHeaders&&i.responseHeaders.date?this.mainLoaded_=Date.parse(i.responseHeaders.date):this.mainLoaded_=Date.now(),this.mainPlaylistLoader_.srcUrl=oa(this.mainPlaylistLoader_.srcUrl,i),r){this.handleMain_(),this.syncClientServerClock_(()=>e(i,r));return}return e(i,r)})}/**
   * Parses the main xml for UTCTiming node to sync the client clock to the server
   * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.
   *
   * @param {Function} done
   *        Function to call when clock sync has completed
   */syncClientServerClock_(e){let t=iE(this.mainPlaylistLoader_.mainXml_);// No UTCTiming element found in the mpd. Use Date header from mpd request as the
return(// server clock
null===t?(this.mainPlaylistLoader_.clientOffset_=this.mainLoaded_-Date.now(),e()):"DIRECT"===t.method?(this.mainPlaylistLoader_.clientOffset_=t.value-Date.now(),e()):void(this.request=this.vhs_.xhr({uri:on(this.mainPlaylistLoader_.srcUrl,t.value),method:t.method,withCredentials:this.withCredentials},(i,r)=>{let s;// disposed
if(this.request){if(i)return(// sync request failed, fall back to using date header from mpd
// TODO: log warning
this.mainPlaylistLoader_.clientOffset_=this.mainLoaded_-Date.now(),e());s="HEAD"===t.method?r.responseHeaders&&r.responseHeaders.date?Date.parse(r.responseHeaders.date):this.mainLoaded_:Date.parse(r.responseText),this.mainPlaylistLoader_.clientOffset_=s-Date.now(),e()}})))}haveMain_(){this.state="HAVE_MAIN_MANIFEST",this.isMain_?// trigger this to allow PlaylistController
// to make an initial playlist selection
this.trigger("loadedplaylist"):this.media_||// the one the child playlist loader was created with
this.media(this.childPlaylist_)}handleMain_(){// clear media request
this.mediaRequest_=null;let e=this.mainPlaylistLoader_.main,t=lx({mainXml:this.mainPlaylistLoader_.mainXml_,srcUrl:this.mainPlaylistLoader_.srcUrl,clientOffset:this.mainPlaylistLoader_.clientOffset_,sidxMapping:this.mainPlaylistLoader_.sidxMapping_,previousManifest:e});e&&(t=lI(e,t,this.mainPlaylistLoader_.sidxMapping_)),// only update main if we have a new main
this.mainPlaylistLoader_.main=t||e;let i=this.mainPlaylistLoader_.main.locations&&this.mainPlaylistLoader_.main.locations[0];return i&&i!==this.mainPlaylistLoader_.srcUrl&&(this.mainPlaylistLoader_.srcUrl=i),(!e||t&&t.minimumUpdatePeriod!==e.minimumUpdatePeriod)&&this.updateMinimumUpdatePeriodTimeout_(),this.addEventStreamToMetadataTrack_(t),!!t}updateMinimumUpdatePeriodTimeout_(){let e=this.mainPlaylistLoader_;// cancel any pending creation of mup on media
e.createMupOnMedia_&&(e.off("loadedmetadata",e.createMupOnMedia_),e.createMupOnMedia_=null),e.minimumUpdatePeriodTimeout_&&(/*@__PURE__*/w(I).clearTimeout(e.minimumUpdatePeriodTimeout_),e.minimumUpdatePeriodTimeout_=null);let t=e.main&&e.main.minimumUpdatePeriod;// If the minimumUpdatePeriod has a value of 0, that indicates that the current
// can happen when a live video becomes VOD. skip timeout
// creation.
if(0===t&&(e.media()?t=1e3*e.media().targetDuration:(e.createMupOnMedia_=e.updateMinimumUpdatePeriodTimeout_,e.one("loadedmetadata",e.createMupOnMedia_))),"number"!=typeof t||t<=0){t<0&&this.logger_(`found invalid minimumUpdatePeriod of ${t}, not setting a timeout`);return}this.createMUPTimeout_(t)}createMUPTimeout_(e){let t=this.mainPlaylistLoader_;t.minimumUpdatePeriodTimeout_=/*@__PURE__*/w(I).setTimeout(()=>{t.minimumUpdatePeriodTimeout_=null,t.trigger("minimumUpdatePeriod"),t.createMUPTimeout_(e)},e)}/**
   * Sends request to refresh the main xml and updates the parsed main manifest
   */refreshXml_(){this.requestMain_((e,t)=>{t&&(this.media_&&(this.media_=this.mainPlaylistLoader_.main.playlists[this.media_.id]),// This will filter out updated sidx info from the mapping
this.mainPlaylistLoader_.sidxMapping_=lP(this.mainPlaylistLoader_.main,this.mainPlaylistLoader_.sidxMapping_),this.addSidxSegments_(this.media(),this.state,e=>{// TODO: do we need to reload the current playlist?
this.refreshMedia_(this.media().id)}))})}/**
   * Refreshes the media playlist by re-parsing the main xml and updating playlist
   * references. If this is an alternate loader, the updated parsed manifest is retrieved
   * from the main loader.
   */refreshMedia_(e){if(!e)throw Error("refreshMedia_ must take a media id");this.media_&&this.isMain_&&this.handleMain_();let t=this.mainPlaylistLoader_.main.playlists,i=!this.media_||this.media_!==t[e];if(i?this.media_=t[e]:this.trigger("playlistunchanged"),!this.mediaUpdateTimeout){let e=()=>{this.media().endList||(this.mediaUpdateTimeout=/*@__PURE__*/w(I).setTimeout(()=>{this.trigger("mediaupdatetimeout"),e()},o7(this.media(),!!i)))};e()}this.trigger("loadedplaylist")}/**
   * Takes eventstream data from a parsed DASH manifest and adds it to the metadata text track.
   *
   * @param {manifest} newMain the newly parsed manifest
   */addEventStreamToMetadataTrack_(e){// Only add new event stream metadata if we have a new manifest.
if(e&&this.mainPlaylistLoader_.main.eventStream){// convert EventStream to ID3-like data.
let e=this.mainPlaylistLoader_.main.eventStream.map(e=>({cueTime:e.start,frames:[{data:e.messageData}]}));this.addMetadataToTextTrack("EventStream",e,this.mainPlaylistLoader_.main.duration)}}}var lR={GOAL_BUFFER_LENGTH:30,MAX_GOAL_BUFFER_LENGTH:60,BACK_BUFFER_LENGTH:30,GOAL_BUFFER_LENGTH_RATE:1,// 0.5 MB/s
INITIAL_BANDWIDTH:4194304,// A fudge factor to apply to advertised playlist bitrates to account for
// temporary flucations in client bandwidth
BANDWIDTH_VARIANCE:1.2,// How much of the buffer must be filled before we consider upswitching
BUFFER_LOW_WATER_LINE:0,MAX_BUFFER_LOW_WATER_LINE:30,// TODO: Remove this when experimentalBufferBasedABR is removed
EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE:16,BUFFER_LOW_WATER_LINE_RATE:1,// If the buffer is greater than the high water line, we won't switch down
BUFFER_HIGH_WATER_LINE:30};const lN=e=>{let t=new Uint8Array(new ArrayBuffer(e.length));for(let i=0;i<e.length;i++)t[i]=e.charCodeAt(i);return t.buffer},lM=function(e){return(// node only supports on/off
e.on=e.addEventListener,e.off=e.removeEventListener,e)},lU=function(e){try{return URL.createObjectURL(new Blob([e],{type:"application/javascript"}))}catch(i){let t=new BlobBuilder;return t.append(e),URL.createObjectURL(t.getBlob())}},lB=function(e){return function(){let t=lU(e),i=lM(new Worker(t));i.objURL=t;let r=i.terminate;return i.on=i.addEventListener,i.off=i.removeEventListener,i.terminate=function(){return URL.revokeObjectURL(t),r.call(this)},i}},lF=function(e){return`var browserWorkerPolyFill = ${lM.toString()};
browserWorkerPolyFill(self);
`+e},lj=function(e){return e.toString().replace(/^function.+?{/,"").slice(0,-1)},lq=lF(lj(function(){var e,t,i,r,s,n,a,o,l,u,h,d,c,p,m,f,g,y,_,b,v,T,E,w,k,C,x,D,I,A,L,P,O,R,N,M,U,B,F,j,q,$,H,V,z,W,G,X,K,Y,Q,J,Z="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==S?S:"undefined"!=typeof self?self:{},ee=function(){this.init=function(){var e={};/**
       * Add a listener for a specified event type.
       * @param type {string} the event name
       * @param listener {function} the callback to be invoked when an event of
       * the specified type occurs
       */this.on=function(t,i){e[t]||(e[t]=[]),e[t]=e[t].concat(i)},/**
       * Remove a listener for a specified event type.
       * @param type {string} the event name
       * @param listener {function} a function previously registered for this
       * type of event through `on`
       */this.off=function(t,i){var r;return!!e[t]&&(r=e[t].indexOf(i),e[t]=e[t].slice(),e[t].splice(r,1),r>-1)},/**
       * Trigger an event of the specified type on this stream. Any additional
       * arguments to this function are passed as parameters to event listeners.
       * @param type {string} the event name
       */this.trigger=function(t){var i,r,s,n;if(i=e[t]){// Slicing the arguments on every invocation of this method
// can add a significant amount of overhead. Avoid the
// intermediate object creation for the common case of a
// single callback argument
if(2==arguments.length)for(r=0,s=i.length;r<s;++r)i[r].call(this,arguments[1]);else{for(n=[],r=arguments.length,r=1;r<arguments.length;++r)n.push(arguments[r]);for(r=0,s=i.length;r<s;++r)i[r].apply(this,n)}}},/**
       * Destroys the stream and cleans up.
       */this.dispose=function(){e={}}}};/**
   * Forwards all `data` events on this stream to the destination stream. The
   * destination stream should provide a method `push` to receive the data
   * events as they arrive.
   * @param destination {stream} the stream that will receive all `data` events
   * @param autoFlush {boolean} if false, we will not call `flush` on the destination
   *                            when the current stream emits a 'done' event
   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
   */ee.prototype.pipe=function(e){return this.on("data",function(t){e.push(t)}),this.on("done",function(t){e.flush(t)}),this.on("partialdone",function(t){e.partialFlush(t)}),this.on("endedtimeline",function(t){e.endTimeline(t)}),this.on("reset",function(t){e.reset(t)}),e},// actual work. These are provided by the prototype as a sort of no-op
// implementation so that we don't have to check for their existence in the
// `pipe` function above.
ee.prototype.push=function(e){this.trigger("data",e)},ee.prototype.flush=function(e){this.trigger("done",e)},ee.prototype.partialFlush=function(e){this.trigger("partialdone",e)},ee.prototype.endTimeline=function(e){this.trigger("endedtimeline",e)},ee.prototype.reset=function(e){this.trigger("reset",e)};var et={getUint64:function(e){var t,i=new DataView(e.buffer,e.byteOffset,e.byteLength);return i.getBigUint64?(t=i.getBigUint64(0))<Number.MAX_SAFE_INTEGER?Number(t):t:4294967296*i.getUint32(0)+i.getUint32(4)},MAX_UINT32:4294967296},ei=et.MAX_UINT32;!function(){var e;// don't throw an error
if(T={avc1:[],// codingname
avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],// codingname
mvex:[],mvhd:[],pasp:[],sdtp:[],smhd:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],styp:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[]},"undefined"!=typeof Uint8Array){for(e in T)T.hasOwnProperty(e)&&(T[e]=[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]);E=new Uint8Array([105,115,111,109]),k=new Uint8Array([97,118,99,49]),w=new Uint8Array([0,0,0,1]),C={video:new Uint8Array([0,// version 0
0,0,0,// flags
0,0,0,0,// pre_defined
118,105,100,101,// handler_type: 'vide'
0,0,0,0,// reserved
0,0,0,0,// reserved
0,0,0,0,// reserved
86,105,100,101,111,72,97,110,100,108,101,114,0// name: 'VideoHandler'
]),audio:new Uint8Array([0,// version 0
0,0,0,// flags
0,0,0,0,// pre_defined
115,111,117,110,// handler_type: 'soun'
0,0,0,0,// reserved
0,0,0,0,// reserved
0,0,0,0,// reserved
83,111,117,110,100,72,97,110,100,108,101,114,0// name: 'SoundHandler'
])},I=new Uint8Array([0,// version 0
0,0,0,// flags
0,0,0,1,// entry_count
0,0,0,12,// entry_size
117,114,108,32,// 'url' type
0,// version 0
0,0,1// entry_flags
]),D=new Uint8Array([0,// version
0,0,0,// flags
0,0,// balance, 0 means centered
0,0// reserved
]),L=A=new Uint8Array([0,// version
0,0,0,// flags
0,0,0,0// entry_count
]),P=new Uint8Array([0,// version
0,0,0,// flags
0,0,0,0,// sample_size
0,0,0,0// sample_count
]),O=A,x=new Uint8Array([0,// version
0,0,1,// flags
0,0,// graphicsmode
0,0,0,0,0,0// opcolor
])}}(),n=function(e){var t,i,r=[],s=0;for(t=1;t<arguments.length;t++)r.push(arguments[t]);for(t=r.length;t--;)s+=r[t].byteLength;for(i=new Uint8Array(s+8),new DataView(i.buffer,i.byteOffset,i.byteLength).setUint32(0,i.byteLength),i.set(e,4),t=0,s=8;t<r.length;t++)i.set(r[t],s),s+=r[t].byteLength;return i},a=function(){return n(T.ftyp,E,w,E,k)},m=function(e){var t=new Uint8Array([0,// version 0
0,0,0,// flags
0,0,0,2,// creation_time
0,0,0,3,// modification_time
0,1,95,144,// timescale, 90,000 "ticks" per second
e.duration>>>24&255,e.duration>>>16&255,e.duration>>>8&255,255&e.duration,// duration
85,196,// 'und' language (undetermined)
0,0]);// Use the sample rate from the track metadata, when it is
return e.samplerate&&(t[12]=e.samplerate>>>24&255,t[13]=e.samplerate>>>16&255,t[14]=e.samplerate>>>8&255,t[15]=255&e.samplerate),n(T.mdhd,t)},p=function(e){var t;return n(T.mdia,m(e),(t=e.type,n(T.hdlr,C[t])),o(e))},o=function(e){return n(T.minf,"video"===e.type?n(T.vmhd,x):n(T.smhd,D),n(T.dinf,n(T.dref,I)),g(e))},/**
   * Returns a movie box.
   * @param tracks {array} the tracks associated with this movie
   * @see ISO/IEC 14496-12:2012(E), section 8.2.1
   */l=function(e){for(var t=e.length,i=[];t--;)i[t]=d(e[t]);return n.apply(null,[T.moov,h(4294967295)].concat(i).concat(u(e)))},u=function(e){for(var t=e.length,i=[];t--;)i[t]=b(e[t]);return n.apply(null,[T.mvex].concat(i))},h=function(e){var t=new Uint8Array([0,// version 0
0,0,0,// flags
0,0,0,1,// creation_time
0,0,0,2,// modification_time
0,1,95,144,// timescale, 90,000 "ticks" per second
(4278190080&e)>>24,(16711680&e)>>16,(65280&e)>>8,255&e,// duration
0,1,0,0,// 1.0 rate
1,0,// 1.0 volume
0,0,// reserved
0,0,0,0,// reserved
0,0,0,0,// reserved
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,// transformation: unity matrix
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,// pre_defined
255,255,255,255// next_track_ID
]);return n(T.mvhd,t)},f=function(e){var t,i,r=e.samples||[],s=new Uint8Array(4+r.length);// leave the full box header (4 bytes) all zero
// write the sample table
for(i=0;i<r.length;i++)t=r[i].flags,s[i+4]=t.dependsOn<<4|t.isDependedOn<<2|t.hasRedundancy;return n(T.sdtp,s)},g=function(e){return n(T.stbl,y(e),n(T.stts,O),n(T.stsc,L),n(T.stsz,P),n(T.stco,A))},y=function(i){return n(T.stsd,new Uint8Array([0,// version 0
0,0,0,// flags
0,0,0,1]),"video"===i.type?e(i):t(i))},e=function(e){var t,i,r=e.sps||[],s=e.pps||[],a=[],o=[];// assemble the SPSs
for(t=0;t<r.length;t++)a.push((65280&r[t].byteLength)>>>8),a.push(255&r[t].byteLength),a=a.concat(Array.prototype.slice.call(r[t]));// assemble the PPSs
for(t=0;t<s.length;t++)o.push((65280&s[t].byteLength)>>>8),o.push(255&s[t].byteLength),o=o.concat(Array.prototype.slice.call(s[t]));if(i=[T.avc1,new Uint8Array([0,0,0,0,0,0,// reserved
0,1,// data_reference_index
0,0,// pre_defined
0,0,// reserved
0,0,0,0,0,0,0,0,0,0,0,0,// pre_defined
(65280&e.width)>>8,255&e.width,// width
(65280&e.height)>>8,255&e.height,// height
0,72,0,0,// horizresolution
0,72,0,0,// vertresolution
0,0,0,0,// reserved
0,1,// frame_count
19,118,105,100,101,111,106,115,45,99,111,110,116,114,105,98,45,104,108,115,0,0,0,0,0,0,0,0,0,0,0,0,// compressorname
0,24,// depth = 24
17,17// pre_defined = -1
]),n(T.avcC,new Uint8Array([1,// configurationVersion
e.profileIdc,// AVCProfileIndication
e.profileCompatibility,// profile_compatibility
e.levelIdc,// AVCLevelIndication
255// lengthSizeMinusOne, hard-coded to 4 bytes
].concat([r.length],a,[s.length],o// "PPS"
))),n(T.btrt,new Uint8Array([0,28,156,128,// bufferSizeDB
0,45,198,192,// maxBitrate
0,45,198,192// avgBitrate
]))],e.sarRatio){var l=e.sarRatio[0],u=e.sarRatio[1];i.push(n(T.pasp,new Uint8Array([(4278190080&l)>>24,(16711680&l)>>16,(65280&l)>>8,255&l,(4278190080&u)>>24,(16711680&u)>>16,(65280&u)>>8,255&u])))}return n.apply(null,i)},t=function(e){return n(T.mp4a,new Uint8Array([// SampleEntry, ISO/IEC 14496-12
0,0,0,0,0,0,// reserved
0,1,// data_reference_index
// AudioSampleEntry, ISO/IEC 14496-12
0,0,0,0,// reserved
0,0,0,0,// reserved
(65280&e.channelcount)>>8,255&e.channelcount,// channelcount
(65280&e.samplesize)>>8,255&e.samplesize,// samplesize
0,0,// pre_defined
0,0,// reserved
(65280&e.samplerate)>>8,255&e.samplerate,0,0// samplerate, 16.16
]),n(T.esds,new Uint8Array([0,// version
0,0,0,// flags
// ES_Descriptor
3,// tag, ES_DescrTag
25,// length
0,0,// ES_ID
0,// streamDependenceFlag, URL_flag, reserved, streamPriority
// DecoderConfigDescriptor
4,// tag, DecoderConfigDescrTag
17,// length
64,// object type
21,// streamType
0,6,0,// bufferSizeDB
0,0,218,192,// maxBitrate
0,0,218,192,// avgBitrate
// DecoderSpecificInfo
5,// tag, DecoderSpecificInfoTag
2,// length
// ISO/IEC 14496-3, AudioSpecificConfig
// for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35
e.audioobjecttype<<3|e.samplingfrequencyindex>>>1,e.samplingfrequencyindex<<7|e.channelcount<<3,6,1,2// GASpecificConfig
])))},c=function(e){var t=new Uint8Array([0,// version 0
0,0,7,// flags
0,0,0,0,// creation_time
0,0,0,0,// modification_time
(4278190080&e.id)>>24,(16711680&e.id)>>16,(65280&e.id)>>8,255&e.id,// track_ID
0,0,0,0,// reserved
(4278190080&e.duration)>>24,(16711680&e.duration)>>16,(65280&e.duration)>>8,255&e.duration,// duration
0,0,0,0,0,0,0,0,// reserved
0,0,// layer
0,0,// alternate_group
1,0,// non-audio track volume
0,0,// reserved
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,// transformation: unity matrix
(65280&e.width)>>8,255&e.width,0,0,// width
(65280&e.height)>>8,255&e.height,0,0// height
]);return n(T.tkhd,t)},/**
   * Generate a track fragment (traf) box. A traf box collects metadata
   * about tracks in a movie fragment (moof) box.
   */_=function(e){var t,i,r,s,a,o;return(t=n(T.tfhd,new Uint8Array([0,// version 0
0,0,58,// flags
(4278190080&e.id)>>24,(16711680&e.id)>>16,(65280&e.id)>>8,255&e.id,// track_ID
0,0,0,1,// sample_description_index
0,0,0,0,// default_sample_duration
0,0,0,0,// default_sample_size
0,0,0,0// default_sample_flags
])),a=Math.floor(e.baseMediaDecodeTime/ei),o=Math.floor(e.baseMediaDecodeTime%ei),i=n(T.tfdt,new Uint8Array([1,// version 1
0,0,0,// flags
// baseMediaDecodeTime
a>>>24&255,a>>>16&255,a>>>8&255,255&a,o>>>24&255,o>>>16&255,o>>>8&255,255&o])),"audio"===e.type)?(r=v(e,92),n(T.traf,t,i,r)):(// box (sdtp)
// generate one and adjust offsets to match
s=f(e),r=v(e,s.length+92),n(T.traf,t,i,r,s))},/**
   * Generate a track box.
   * @param track {object} a track definition
   * @return {Uint8Array} the track box
   */d=function(e){return e.duration=e.duration||4294967295,n(T.trak,c(e),p(e))},b=function(e){var t=new Uint8Array([0,// version 0
0,0,0,// flags
(4278190080&e.id)>>24,(16711680&e.id)>>16,(65280&e.id)>>8,255&e.id,// track_ID
0,0,0,1,// default_sample_description_index
0,0,0,0,// default_sample_duration
0,0,0,0,// default_sample_size
0,1,0,1// default_sample_flags
]);// the last two bytes of default_sample_flags is the sample
return"video"!==e.type&&(t[t.length-1]=0),n(T.trex,t)},// duration is present for the first sample, it will be present for
// all subsequent samples.
// see ISO/IEC 14496-12:2012, Section 8.8.8.1
s=function(e,t){var i=0,r=0,s=0,n=0;// trun flag constants
return e.length&&(void 0!==e[0].duration&&(i=1),void 0!==e[0].size&&(r=2),void 0!==e[0].flags&&(s=4),void 0!==e[0].compositionTimeOffset&&(n=8)),[0,// version 0
0,i|r|s|n,1,// flags
(4278190080&e.length)>>>24,(16711680&e.length)>>>16,(65280&e.length)>>>8,255&e.length,// sample_count
(4278190080&t)>>>24,(16711680&t)>>>16,(65280&t)>>>8,255// data_offset
&t]},r=function(e,t){var i,r,a,o,l,u;for(t+=20+16*(o=e.samples||[]).length,a=s(o,t),(r=new Uint8Array(a.length+16*o.length)).set(a),i=a.length,u=0;u<o.length;u++)l=o[u],r[i++]=(4278190080&l.duration)>>>24,r[i++]=(16711680&l.duration)>>>16,r[i++]=(65280&l.duration)>>>8,r[i++]=255&l.duration,r[i++]=(4278190080&l.size)>>>24,r[i++]=(16711680&l.size)>>>16,r[i++]=(65280&l.size)>>>8,r[i++]=255&l.size,r[i++]=l.flags.isLeading<<2|l.flags.dependsOn,r[i++]=l.flags.isDependedOn<<6|l.flags.hasRedundancy<<4|l.flags.paddingValue<<1|l.flags.isNonSyncSample,r[i++]=61440&l.flags.degradationPriority,r[i++]=15&l.flags.degradationPriority,r[i++]=(4278190080&l.compositionTimeOffset)>>>24,r[i++]=(16711680&l.compositionTimeOffset)>>>16,r[i++]=(65280&l.compositionTimeOffset)>>>8,r[i++]=255&l.compositionTimeOffset;return n(T.trun,r)},i=function(e,t){var i,r,a,o,l,u;for(t+=20+8*(o=e.samples||[]).length,a=s(o,t),(i=new Uint8Array(a.length+8*o.length)).set(a),r=a.length,u=0;u<o.length;u++)l=o[u],i[r++]=(4278190080&l.duration)>>>24,i[r++]=(16711680&l.duration)>>>16,i[r++]=(65280&l.duration)>>>8,i[r++]=255&l.duration,i[r++]=(4278190080&l.size)>>>24,i[r++]=(16711680&l.size)>>>16,i[r++]=(65280&l.size)>>>8,i[r++]=255&l.size;return n(T.trun,i)},v=function(e,t){return"audio"===e.type?i(e,t):r(e,t)};/*
   * Collates information from a video frame into an object for eventual
   * entry into an MP4 sample table.
   *
   * @param {Object} frame the video frame
   * @param {Number} dataOffset the byte offset to position the sample
   * @return {Object} object containing sample table info for a frame
   */var er=function(e,t){var i={size:0,flags:{isLeading:0,dependsOn:1,isDependedOn:0,hasRedundancy:0,degradationPriority:0,isNonSyncSample:1}};return i.dataOffset=t,i.compositionTimeOffset=e.pts-e.dts,i.duration=e.duration,i.size=4*e.length,i.size+=e.byteLength,e.keyFrame&&(i.flags.dependsOn=2,i.flags.isNonSyncSample=0),i},es=[33,16,5,32,164,27],en=[33,65,108,84,1,2,4,8,168,2,4,8,17,191,252],ea=function(e){for(var t=[];e--;)t.push(0);return t};// generate the track's sample table from an array of gops
N=function(e){return 9e4*e},M=function(e,t){return e*t};var eo={ONE_SECOND_IN_TS:9e4,secondsToVideoTs:N,secondsToAudioTs:M,videoTsToSeconds:U=function(e){return e/9e4},audioTsToSeconds:B=function(e,t){return e/t},audioTsToVideoTs:function(e,t){return N(B(e,t))},videoTsToAudioTs:function(e,t){return M(U(e),t)},metadataTsToSeconds:function(e,t,i){return U(i?e:e-t)}},el=function(){if(!R){var e;R=Object.keys(e={96e3:[es,[227,64],ea(154),[56]],88200:[es,[231],ea(170),[56]],64e3:[es,[248,192],ea(240),[56]],48e3:[es,[255,192],ea(268),[55,148,128],ea(54),[112]],44100:[es,[255,192],ea(268),[55,163,128],ea(84),[112]],32e3:[es,[255,192],ea(268),[55,234],ea(226),[112]],24e3:[es,[255,192],ea(268),[55,255,128],ea(268),[111,112],ea(126),[224]],16e3:[es,[255,192],ea(268),[55,255,128],ea(268),[111,255],ea(269),[223,108],ea(195),[1,192]],12e3:[en,ea(268),[3,127,248],ea(268),[6,255,240],ea(268),[13,255,224],ea(268),[27,253,128],ea(259),[56]],11025:[en,ea(268),[3,127,248],ea(268),[6,255,240],ea(268),[13,255,224],ea(268),[27,255,192],ea(268),[55,175,128],ea(108),[112]],8e3:[en,ea(268),[3,121,16],ea(47),[7]]}).reduce(function(t,i){return t[i]=new Uint8Array(e[i].reduce(function(e,t){return e.concat(t)},[])),t},{})}return R},eu=function(e){var t,i=0;// sum the byteLength's all each nal unit in the frame
for(t=0;t<e.length;t++)i+=e[t].data.byteLength;return i},eh=eo.ONE_SECOND_IN_TS,ed={parseSei:function(e){for(var t=0,i={payloadType:-1,payloadSize:0},r=0,s=0;// stop once we have hit the end of the sei_rbsp
t<e.byteLength&&128!==e[t];){// Parse payload type
for(;255===e[t];)r+=255,t++;for(r+=e[t++];255===e[t];)s+=255,t++;// there can only ever be one caption message in a frame's sei
if(s+=e[t++],!i.payload&&4===r){if("GA94"===String.fromCharCode(e[t+3],e[t+4],e[t+5],e[t+6])){i.payloadType=r,i.payloadSize=s,i.payload=e.subarray(t,t+s);break}i.payload=void 0}// skip the payload and parse the next message
t+=s,r=0,s=0}return i},parseUserData:function(e){return(// itu_t_t35_contry_code must be 181 (United States) for
// captions
181!==e.payload[0]||(e.payload[1]<<8|e.payload[2])!=49||"GA94"!==String.fromCharCode(e.payload[3],e.payload[4],e.payload[5],e.payload[6])||3!==e.payload[7]?null:e.payload.subarray(8,e.payload.length-1))},parseCaptionPackets:function(e,t){var i,r,s,n,a=[];// if this is just filler, return immediately
if(!(64&t[0]))return a;for(i=0,// parse out the cc_data_1 and cc_data_2 fields
r=31&t[0];i<r;i++)n={type:3&t[(s=3*i)+2],pts:e},4&t[s+2]&&(n.ccData=t[s+3]<<8|t[s+4],a.push(n));return a},discardEmulationPreventionBytes:function(e){for(var t,i,r=e.byteLength,s=[],n=1;n<r-2;)0===e[n]&&0===e[n+1]&&3===e[n+2]?(s.push(n+2),n+=2):n++;// If no Emulation Prevention Bytes were found just return the original
// array
if(0===s.length)return e;// Create a new array to hold the NAL unit data
t=r-s.length,i=new Uint8Array(t);var a=0;for(n=0;n<t;a++,n++)a===s[0]&&(// Skip this byte
a++,s.shift()),i[n]=e[a];return i},USER_DATA_REGISTERED_ITU_T_T35:4},ec=function(e){e=e||{},ec.prototype.init.call(this),this.parse708captions_="boolean"!=typeof e.parse708captions||e.parse708captions,this.captionPackets_=[],this.ccStreams_=[new eE(0,0),// eslint-disable-line no-use-before-define
new eE(0,1),// eslint-disable-line no-use-before-define
new eE(1,0),// eslint-disable-line no-use-before-define
new eE(1,1)// eslint-disable-line no-use-before-define
],this.parse708captions_&&(this.cc708Stream_=new e_({captionServices:e.captionServices})),this.reset(),this.ccStreams_.forEach(function(e){e.on("data",this.trigger.bind(this,"data")),e.on("partialdone",this.trigger.bind(this,"partialdone")),e.on("done",this.trigger.bind(this,"done"))},this),this.parse708captions_&&(this.cc708Stream_.on("data",this.trigger.bind(this,"data")),this.cc708Stream_.on("partialdone",this.trigger.bind(this,"partialdone")),this.cc708Stream_.on("done",this.trigger.bind(this,"done")))};ec.prototype=new ee,ec.prototype.push=function(e){var t,i,r;// only examine SEI NALs
if("sei_rbsp"===e.nalUnitType&&// parse the sei
(t=ed.parseSei(e.escapedRBSP)).payload&&t.payloadType===ed.USER_DATA_REGISTERED_ITU_T_T35&&// parse out the user data payload
(i=ed.parseUserData(t))){// Sometimes, the same segment # will be downloaded twice. To stop the
// caption data from being processed twice, we track the latest dts we've
// received and ignore everything with a dts before that. However, since
// data for a specific dts can be split across packets on either side of
// a segment boundary, we need to make sure we *don't* ignore the packets
// from the *next* segment that have dts === this.latestDts_. By constantly
// tracking the number of packets received with dts === this.latestDts_, we
// know how many should be ignored once we start receiving duplicates.
if(e.dts<this.latestDts_){// We've started getting older data, so set the flag.
this.ignoreNextEqualDts_=!0;return}// parse out CC data packets and save them for later
if(e.dts===this.latestDts_&&this.ignoreNextEqualDts_){this.numSameDts_--,this.numSameDts_||(this.ignoreNextEqualDts_=!1);return}r=ed.parseCaptionPackets(e.pts,i),this.captionPackets_=this.captionPackets_.concat(r),this.latestDts_!==e.dts&&(this.numSameDts_=0),this.numSameDts_++,this.latestDts_=e.dts}},ec.prototype.flushCCStreams=function(e){this.ccStreams_.forEach(function(t){return"flush"===e?t.flush():t.partialFlush()},this)},ec.prototype.flushStream=function(e){// make sure we actually parsed captions before proceeding
if(!this.captionPackets_.length){this.flushCCStreams(e);return}// In Chrome, the Array#sort function is not stable so add a
// presortIndex that we can use to ensure we get a stable-sort
this.captionPackets_.forEach(function(e,t){e.presortIndex=t}),this.captionPackets_.sort(function(e,t){return e.pts===t.pts?e.presortIndex-t.presortIndex:e.pts-t.pts}),this.captionPackets_.forEach(function(e){e.type<2?this.dispatchCea608Packet(e):this.dispatchCea708Packet(e)},this),this.captionPackets_.length=0,this.flushCCStreams(e)},ec.prototype.flush=function(){return this.flushStream("flush")},ec.prototype.partialFlush=function(){return this.flushStream("partialFlush")},ec.prototype.reset=function(){this.latestDts_=null,this.ignoreNextEqualDts_=!1,this.numSameDts_=0,this.activeCea608Channel_=[null,null],this.ccStreams_.forEach(function(e){e.reset()})},/*
   * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed
   * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is
   * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair
   * and subsequent data should then be processed according to the FCC rules. It may be necessary for the
   * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)
   * to switch to captioning or Text.
  */// With that in mind, we ignore any data between an XDS control code and a
// subsequent closed-captioning control code.
ec.prototype.dispatchCea608Packet=function(e){this.setsTextOrXDSActive(e)?this.activeCea608Channel_[e.type]=null:this.setsChannel1Active(e)?this.activeCea608Channel_[e.type]=0:this.setsChannel2Active(e)&&(this.activeCea608Channel_[e.type]=1),null!==this.activeCea608Channel_[e.type]&&this.ccStreams_[(e.type<<1)+this.activeCea608Channel_[e.type]].push(e)},ec.prototype.setsChannel1Active=function(e){return(30720&e.ccData)==4096},ec.prototype.setsChannel2Active=function(e){return(30720&e.ccData)==6144},ec.prototype.setsTextOrXDSActive=function(e){return(28928&e.ccData)==256||(30974&e.ccData)==4138||(30974&e.ccData)==6186},ec.prototype.dispatchCea708Packet=function(e){this.parse708captions_&&this.cc708Stream_.push(e)};// Session to Application
// ----------------------
// This hash maps special and extended character codes to their
// proper Unicode equivalent. The first one-byte key is just a
// non-standard character code. The two-byte keys that follow are
// the extended CEA708 character codes, along with the preceding
// 0x10 extended character byte to distinguish these codes from
// non-extended character codes. Every CEA708 character code that
// is not in this object maps directly to a standard unicode
// character code.
// The transparent space and non-breaking transparent space are
// technically not fully supported since there is no code to
// make them transparent, so they have normal non-transparent
// stand-ins.
// The special closed caption (CC) character isn't a standard
// unicode character, so a fairly similar unicode character was
// chosen in it's place.
var ep={127:9834,// ♪
4128:32,// Transparent Space
4129:160,// Nob-breaking Transparent Space
4133:8230,// …
4138:352,// Š
4140:338,// Œ
4144:9608,// █
4145:8216,// ‘
4146:8217,// ’
4147:8220,// “
4148:8221,// ”
4149:8226,// •
4153:8482,// ™
4154:353,// š
4156:339,// œ
4157:8480,// ℠
4159:376,// Ÿ
4214:8539,// ⅛
4215:8540,// ⅜
4216:8541,// ⅝
4217:8542,// ⅞
4218:9168,// ⏐
4219:9124,// ⎤
4220:9123,// ⎣
4221:9135,// ⎯
4222:9126,// ⎦
4223:9121,// ⎡
4256:12600// ㄸ (CC char)
},em=function(e){var t=ep[e]||e;return 4096&e&&e===t?"":String.fromCharCode(t)},ef=function(e){return 32<=e&&e<=127||160<=e&&e<=255},eg=function(e){this.windowNum=e,this.reset()};eg.prototype.reset=function(){this.clearText(),this.pendingNewLine=!1,this.winAttr={},this.penAttr={},this.penLoc={},this.penColor={},// defineWindow will usually override them
this.visible=0,this.rowLock=0,this.columnLock=0,this.priority=0,this.relativePositioning=0,this.anchorVertical=0,this.anchorHorizontal=0,this.anchorPoint=0,this.rowCount=1,this.virtualRowCount=this.rowCount+1,this.columnCount=41,this.windowStyle=0,this.penStyle=0},eg.prototype.getText=function(){return this.rows.join("\n")},eg.prototype.clearText=function(){this.rows=[""],this.rowIdx=0},eg.prototype.newLine=function(e){for(this.rows.length>=this.virtualRowCount&&"function"==typeof this.beforeRowOverflow&&this.beforeRowOverflow(e),this.rows.length>0&&(this.rows.push(""),this.rowIdx++);this.rows.length>this.virtualRowCount;)this.rows.shift(),this.rowIdx--},eg.prototype.isEmpty=function(){return 0===this.rows.length||1===this.rows.length&&""===this.rows[0]},eg.prototype.addText=function(e){this.rows[this.rowIdx]+=e},eg.prototype.backspace=function(){if(!this.isEmpty()){var e=this.rows[this.rowIdx];this.rows[this.rowIdx]=e.substr(0,e.length-1)}};var ey=function(e,t,i){this.serviceNum=e,this.text="",this.currentWindow=new eg(-1),this.windows=[],this.stream=i,"string"==typeof t&&this.createTextDecoder(t)};/**
   * Initialize service windows
   * Must be run before service use
   *
   * @param  {Integer}  pts               PTS value
   * @param  {Function} beforeRowOverflow Function to execute before row overflow of a window
   */ey.prototype.init=function(e,t){this.startPts=e;for(var i=0;i<8;i++)this.windows[i]=new eg(i),"function"==typeof t&&(this.windows[i].beforeRowOverflow=t)},/**
   * Set current window of service to be affected by commands
   *
   * @param  {Integer} windowNum Window number
   */ey.prototype.setCurrentWindow=function(e){this.currentWindow=this.windows[e]},/**
   * Try to create a TextDecoder if it is natively supported
   */ey.prototype.createTextDecoder=function(e){if("undefined"==typeof TextDecoder)this.stream.trigger("log",{level:"warn",message:"The `encoding` option is unsupported without TextDecoder support"});else try{this.textDecoder_=new TextDecoder(e)}catch(t){this.stream.trigger("log",{level:"warn",message:"TextDecoder could not be created with "+e+" encoding. "+t})}};var e_=function(e){e=e||{},e_.prototype.init.call(this);var t,i=this,r=e.captionServices||{},s={};Object.keys(r).forEach(e=>{t=r[e],/^SERVICE/.test(e)&&(s[e]=t.encoding)}),this.serviceEncodings=s,this.current708Packet=null,this.services={},this.push=function(e){3===e.type?// 708 packet start
i.new708Packet():null===i.current708Packet&&i.new708Packet(),i.add708Bytes(e)}};e_.prototype=new ee,/**
   * Push current 708 packet, create new 708 packet.
   */e_.prototype.new708Packet=function(){null!==this.current708Packet&&this.push708Packet(),this.current708Packet={data:[],ptsVals:[]}},/**
   * Add pts and both bytes from packet into current 708 packet.
   */e_.prototype.add708Bytes=function(e){var t=e.ccData;// that service blocks will always line up with byte pairs.
this.current708Packet.ptsVals.push(e.pts),this.current708Packet.data.push(t>>>8),this.current708Packet.data.push(255&t)},/**
   * Parse completed 708 packet into service blocks and push each service block.
   */e_.prototype.push708Packet=function(){var e=this.current708Packet,t=e.data,i=null,r=null,s=0,n=t[s++];for(e.seq=n>>6,e.sizeCode=63&n;s<t.length;s++)i=(n=t[s++])>>5,r=31&n,7===i&&r>0&&(i=// Extended service num
n=t[s++]),this.pushServiceBlock(i,s,r),r>0&&(s+=r-1)},/**
   * Parse service block, execute commands, read text.
   *
   * Note: While many of these commands serve important purposes,
   * many others just parse out the parameters or attributes, but
   * nothing is done with them because this is not a full and complete
   * implementation of the entire 708 spec.
   *
   * @param  {Integer} serviceNum Service number
   * @param  {Integer} start      Start index of the 708 packet data
   * @param  {Integer} size       Block size
   */e_.prototype.pushServiceBlock=function(e,t,i){var r,s=t,n=this.current708Packet.data,a=this.services[e];for(a||(a=this.initService(e,s));s<t+i&&s<n.length;s++)ef(r=n[s])?s=this.handleText(s,a):24===r?s=this.multiByteCharacter(s,a):16===r?s=this.extendedCommands(s,a):128<=r&&r<=135?s=this.setCurrentWindow(s,a):152<=r&&r<=159?s=this.defineWindow(s,a):136===r?s=this.clearWindows(s,a):140===r?s=this.deleteWindows(s,a):137===r?s=this.displayWindows(s,a):138===r?s=this.hideWindows(s,a):139===r?s=this.toggleWindows(s,a):151===r?s=this.setWindowAttributes(s,a):144===r?s=this.setPenAttributes(s,a):145===r?s=this.setPenColor(s,a):146===r?s=this.setPenLocation(s,a):143===r?a=this.reset(s,a):8===r?a.currentWindow.backspace():12===r?a.currentWindow.clearText():13===r?a.currentWindow.pendingNewLine=!0:14===r?a.currentWindow.clearText():141===r&&s++},/**
   * Execute an extended command
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.extendedCommands=function(e,t){return ef(this.current708Packet.data[++e])&&(e=this.handleText(e,t,{isExtended:!0})),e},/**
   * Get PTS value of a given byte index
   *
   * @param  {Integer} byteIndex  Index of the byte
   * @return {Integer}            PTS
   */e_.prototype.getPts=function(e){// There's 1 pts value per 2 bytes
return this.current708Packet.ptsVals[Math.floor(e/2)]},/**
   * Initializes a service
   *
   * @param  {Integer} serviceNum Service number
   * @return {Service}            Initialized service object
   */e_.prototype.initService=function(e,t){var i,r="SERVICE"+e,s=this;return r in this.serviceEncodings&&(i=this.serviceEncodings[r]),this.services[e]=new ey(e,i,s),this.services[e].init(this.getPts(t),function(t){s.flushDisplayed(t,s.services[e])}),this.services[e]},/**
   * Execute text writing to current window
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.handleText=function(e,t,i){var r,s,n=i&&i.isExtended,a=i&&i.isMultiByte,o=this.current708Packet.data,l=o[e],u=o[e+1],h=t.currentWindow;// Use the TextDecoder if one was created for this service
if(a?(s=[l,u],e++):s=[l],t.textDecoder_&&!n)r=t.textDecoder_.decode(new Uint8Array(s));else if(a){let e=s.map(e=>("0"+(255&e).toString(16)).slice(-2)).join("");// Takes a unicode hex string and creates a single character.
r=String.fromCharCode(parseInt(e,16))}else r=em((n?4096:0)|l);return h.pendingNewLine&&!h.isEmpty()&&h.newLine(this.getPts(e)),h.pendingNewLine=!1,h.addText(r),e},/**
   * Handle decoding of multibyte character
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.multiByteCharacter=function(e,t){var i=this.current708Packet.data,r=i[e+1],s=i[e+2];return ef(r)&&ef(s)&&(e=this.handleText(++e,t,{isMultiByte:!0})),e},/**
   * Parse and execute the CW# command.
   *
   * Set the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.setCurrentWindow=function(e,t){var i=this.current708Packet.data[e];return t.setCurrentWindow(7&i),e},/**
   * Parse and execute the DF# command.
   *
   * Define a window and set it as the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.defineWindow=function(e,t){var i=this.current708Packet.data,r=i[e],s=7&r;t.setCurrentWindow(s);var n=t.currentWindow;return r=i[++e],n.visible=(32&r)>>5,n.rowLock=(16&r)>>4,n.columnLock=(8&r)>>3,n.priority=7&r,r=i[++e],n.relativePositioning=(128&r)>>7,n.anchorVertical=127&r,r=i[++e],n.anchorHorizontal=r,r=i[++e],n.anchorPoint=(240&r)>>4,n.rowCount=15&r,r=i[++e],n.columnCount=63&r,r=i[++e],n.windowStyle=(56&r)>>3,n.penStyle=7&r,// The spec says there are (rowCount+1) "virtual rows"
n.virtualRowCount=n.rowCount+1,e},/**
   * Parse and execute the SWA command.
   *
   * Set attributes of the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.setWindowAttributes=function(e,t){var i=this.current708Packet.data,r=i[e],s=t.currentWindow.winAttr;return r=i[++e],s.fillOpacity=(192&r)>>6,s.fillRed=(48&r)>>4,s.fillGreen=(12&r)>>2,s.fillBlue=3&r,r=i[++e],s.borderType=(192&r)>>6,s.borderRed=(48&r)>>4,s.borderGreen=(12&r)>>2,s.borderBlue=3&r,r=i[++e],s.borderType+=(128&r)>>5,s.wordWrap=(64&r)>>6,s.printDirection=(48&r)>>4,s.scrollDirection=(12&r)>>2,s.justify=3&r,r=i[++e],s.effectSpeed=(240&r)>>4,s.effectDirection=(12&r)>>2,s.displayEffect=3&r,e},/**
   * Gather text from all displayed windows and push a caption to output.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   */e_.prototype.flushDisplayed=function(e,t){// display text in the correct order, but sample files so far have not shown any issue.
for(var i=[],r=0;r<8;r++)t.windows[r].visible&&!t.windows[r].isEmpty()&&i.push(t.windows[r].getText());t.endPts=e,t.text=i.join("\n\n"),this.pushCaption(t),t.startPts=e},/**
   * Push a caption to output if the caption contains text.
   *
   * @param  {Service} service  The service object to be affected
   */e_.prototype.pushCaption=function(e){""!==e.text&&(this.trigger("data",{startPts:e.startPts,endPts:e.endPts,text:e.text,stream:"cc708_"+e.serviceNum}),e.text="",e.startPts=e.endPts)},/**
   * Parse and execute the DSW command.
   *
   * Set visible property of windows based on the parsed bitmask.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.displayWindows=function(e,t){var i=this.current708Packet.data[++e],r=this.getPts(e);this.flushDisplayed(r,t);for(var s=0;s<8;s++)i&1<<s&&(t.windows[s].visible=1);return e},/**
   * Parse and execute the HDW command.
   *
   * Set visible property of windows based on the parsed bitmask.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.hideWindows=function(e,t){var i=this.current708Packet.data[++e],r=this.getPts(e);this.flushDisplayed(r,t);for(var s=0;s<8;s++)i&1<<s&&(t.windows[s].visible=0);return e},/**
   * Parse and execute the TGW command.
   *
   * Set visible property of windows based on the parsed bitmask.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.toggleWindows=function(e,t){var i=this.current708Packet.data[++e],r=this.getPts(e);this.flushDisplayed(r,t);for(var s=0;s<8;s++)i&1<<s&&(t.windows[s].visible^=1);return e},/**
   * Parse and execute the CLW command.
   *
   * Clear text of windows based on the parsed bitmask.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.clearWindows=function(e,t){var i=this.current708Packet.data[++e],r=this.getPts(e);this.flushDisplayed(r,t);for(var s=0;s<8;s++)i&1<<s&&t.windows[s].clearText();return e},/**
   * Parse and execute the DLW command.
   *
   * Re-initialize windows based on the parsed bitmask.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.deleteWindows=function(e,t){var i=this.current708Packet.data[++e],r=this.getPts(e);this.flushDisplayed(r,t);for(var s=0;s<8;s++)i&1<<s&&t.windows[s].reset();return e},/**
   * Parse and execute the SPA command.
   *
   * Set pen attributes of the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.setPenAttributes=function(e,t){var i=this.current708Packet.data,r=i[e],s=t.currentWindow.penAttr;return r=i[++e],s.textTag=(240&r)>>4,s.offset=(12&r)>>2,s.penSize=3&r,r=i[++e],s.italics=(128&r)>>7,s.underline=(64&r)>>6,s.edgeType=(56&r)>>3,s.fontStyle=7&r,e},/**
   * Parse and execute the SPC command.
   *
   * Set pen color of the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.setPenColor=function(e,t){var i=this.current708Packet.data,r=i[e],s=t.currentWindow.penColor;return r=i[++e],s.fgOpacity=(192&r)>>6,s.fgRed=(48&r)>>4,s.fgGreen=(12&r)>>2,s.fgBlue=3&r,r=i[++e],s.bgOpacity=(192&r)>>6,s.bgRed=(48&r)>>4,s.bgGreen=(12&r)>>2,s.bgBlue=3&r,r=i[++e],s.edgeRed=(48&r)>>4,s.edgeGreen=(12&r)>>2,s.edgeBlue=3&r,e},/**
   * Parse and execute the SPL command.
   *
   * Set pen location of the current window.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Integer}          New index after parsing
   */e_.prototype.setPenLocation=function(e,t){var i=this.current708Packet.data,r=i[e],s=t.currentWindow.penLoc;return t.currentWindow.pendingNewLine=!0,r=i[++e],s.row=15&r,r=i[++e],s.column=63&r,e},/**
   * Execute the RST command.
   *
   * Reset service to a clean slate. Re-initialize.
   *
   * @param  {Integer} i        Current index in the 708 packet
   * @param  {Service} service  The service object to be affected
   * @return {Service}          Re-initialized service
   */e_.prototype.reset=function(e,t){var i=this.getPts(e);return this.flushDisplayed(i,t),this.initService(t.serviceNum,e)};// proper Unicode equivalent. The first keys that are only a single byte
// are the non-standard ASCII characters, which simply map the CEA608 byte
// to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608
// character codes, but have their MSB bitmasked with 0x03 so that a lookup
// can be performed regardless of the field and data channel on which the
// character code was received.
var eb={42:225,// á
92:233,// é
94:237,// í
95:243,// ó
96:250,// ú
123:231,// ç
124:247,// ÷
125:209,// Ñ
126:241,// ñ
127:9608,// █
304:174,// ®
305:176,// °
306:189,// ½
307:191,// ¿
308:8482,// ™
309:162,// ¢
310:163,// £
311:9834,// ♪
312:224,// à
313:160,//
314:232,// è
315:226,// â
316:234,// ê
317:238,// î
318:244,// ô
319:251,// û
544:193,// Á
545:201,// É
546:211,// Ó
547:218,// Ú
548:220,// Ü
549:252,// ü
550:8216,// ‘
551:161,// ¡
552:42,// *
553:39,// '
554:8212,// —
555:169,// ©
556:8480,// ℠
557:8226,// •
558:8220,// “
559:8221,// ”
560:192,// À
561:194,// Â
562:199,// Ç
563:200,// È
564:202,// Ê
565:203,// Ë
566:235,// ë
567:206,// Î
568:207,// Ï
569:239,// ï
570:212,// Ô
571:217,// Ù
572:249,// ù
573:219,// Û
574:171,// «
575:187,// »
800:195,// Ã
801:227,// ã
802:205,// Í
803:204,// Ì
804:236,// ì
805:210,// Ò
806:242,// ò
807:213,// Õ
808:245,// õ
809:123,// {
810:125,// }
811:92,// \
812:94,// ^
813:95,// _
814:124,// |
815:126,// ~
816:196,// Ä
817:228,// ä
818:214,// Ö
819:246,// ö
820:223,// ß
821:165,// ¥
822:164,// ¤
823:9474,// │
824:197,// Å
825:229,// å
826:216,// Ø
827:248,// ø
828:9484,// ┌
829:9488,// ┐
830:9492,// └
831:9496// ┘
},ev=function(e){return null===e?"":String.fromCharCode(e=eb[e]||e)},eT=[4352,4384,4608,4640,5376,5408,5632,5664,5888,5920,4096,4864,4896,5120,5152],eS=function(){for(var e=[],t=15;t--;)e.push({text:"",indent:0,offset:0});return e},eE=function(e,t){eE.prototype.init.call(this),this.field_=e||0,this.dataChannel_=t||0,this.name_="CC"+((this.field_<<1|this.dataChannel_)+1),this.setConstants(),this.reset(),this.push=function(e){var t,i,r,s,n;// remove the parity bits
if((t=32639&e.ccData)===this.lastControlCode_){this.lastControlCode_=null;return}// Store control codes
if((61440&t)==4096?this.lastControlCode_=t:t!==this.PADDING_&&(this.lastControlCode_=null),r=t>>>8,s=255&t,t!==this.PADDING_){if(t===this.RESUME_CAPTION_LOADING_)this.mode_="popOn";else if(t===this.END_OF_CAPTION_)// If an EOC is received while in paint-on mode, the displayed caption
// text should be swapped to non-displayed memory as if it was a pop-on
// caption. Because of that, we should explicitly switch back to pop-on
// mode
this.mode_="popOn",this.clearFormatting(e.pts),this.flushDisplayed(e.pts),i=this.displayed_,this.displayed_=this.nonDisplayed_,this.nonDisplayed_=i,this.startPts_=e.pts;else if(t===this.ROLL_UP_2_ROWS_)this.rollUpRows_=2,this.setRollUp(e.pts);else if(t===this.ROLL_UP_3_ROWS_)this.rollUpRows_=3,this.setRollUp(e.pts);else if(t===this.ROLL_UP_4_ROWS_)this.rollUpRows_=4,this.setRollUp(e.pts);else if(t===this.CARRIAGE_RETURN_)this.clearFormatting(e.pts),this.flushDisplayed(e.pts),this.shiftRowsUp_(),this.startPts_=e.pts;else if(t===this.BACKSPACE_)"popOn"===this.mode_?this.nonDisplayed_[this.row_].text=this.nonDisplayed_[this.row_].text.slice(0,-1):this.displayed_[this.row_].text=this.displayed_[this.row_].text.slice(0,-1);else if(t===this.ERASE_DISPLAYED_MEMORY_)this.flushDisplayed(e.pts),this.displayed_=eS();else if(t===this.ERASE_NON_DISPLAYED_MEMORY_)this.nonDisplayed_=eS();else if(t===this.RESUME_DIRECT_CAPTIONING_)"paintOn"!==this.mode_&&(// NOTE: This should be removed when proper caption positioning is
// implemented
this.flushDisplayed(e.pts),this.displayed_=eS()),this.mode_="paintOn",this.startPts_=e.pts;else if(this.isSpecialCharacter(r,s))n=ev(// Bitmask char0 so that we can apply character transformations
// regardless of field and data channel.
// Then byte-shift to the left and OR with char1 so we can pass the
// entire character code to `getCharFromCode`.
(r=(3&r)<<8)|s),this[this.mode_](e.pts,n),this.column_++;else if(this.isExtCharacter(r,s))"popOn"===this.mode_?this.nonDisplayed_[this.row_].text=this.nonDisplayed_[this.row_].text.slice(0,-1):this.displayed_[this.row_].text=this.displayed_[this.row_].text.slice(0,-1),n=ev(// Bitmask char0 so that we can apply character transformations
// regardless of field and data channel.
// Then byte-shift to the left and OR with char1 so we can pass the
// entire character code to `getCharFromCode`.
(r=(3&r)<<8)|s),this[this.mode_](e.pts,n),this.column_++;else if(this.isMidRowCode(r,s))// Attributes are not additive, so clear all formatting
this.clearFormatting(e.pts),// should be replaced with spaces, so add one now
this[this.mode_](e.pts," "),this.column_++,(14&s)==14&&this.addFormatting(e.pts,["i"]),(1&s)==1&&this.addFormatting(e.pts,["u"]);else if(this.isOffsetControlCode(r,s)){// Cursor position is set by indent PAC (see below) in 4-column
// increments, with an additional offset code of 1-3 to reach any
// of the 32 columns specified by CEA-608. So all we need to do
// here is increment the column cursor by the given offset.
let e=3&s;// For an offest value 1-3, set the offset for that caption
// in the non-displayed array.
this.nonDisplayed_[this.row_].offset=e,this.column_+=e}else if(this.isPAC(r,s)){// There's no logic for PAC -> row mapping, so we have to just
// find the row code in an array and use its index :(
var a=eT.indexOf(7968&t);// Configure the caption window if we're in roll-up mode
if("rollUp"===this.mode_&&(a-this.rollUpRows_+1<0&&(a=this.rollUpRows_-1),this.setRollUp(e.pts,a)),a!==this.row_&&(// formatting is only persistent for current row
this.clearFormatting(e.pts),this.row_=a),1&s&&-1===this.formatting_.indexOf("u")&&this.addFormatting(e.pts,["u"]),(16&t)==16){// We've got an indent level code. Each successive even number
// increments the column cursor by 4, so we can get the desired
// column position by bit-shifting to the right (to get n/2)
// and multiplying by 4.
let e=(14&t)>>1;this.column_=4*e,this.nonDisplayed_[this.row_].indent+=e}this.isColorPAC(s)&&(14&s)==14&&this.addFormatting(e.pts,["i"])}else this.isNormalChar(r)&&(0===s&&(s=null),n=ev(r)+ev(s),this[this.mode_](e.pts,n),this.column_+=n.length);// finish data processing
}}};eE.prototype=new ee,// display buffer
eE.prototype.flushDisplayed=function(e){let t=e=>{this.trigger("log",{level:"warn",message:"Skipping a malformed 608 caption at index "+e+"."})},i=[];this.displayed_.forEach((e,r)=>{if(e&&e.text&&e.text.length){try{// remove spaces from the start and end of the string
e.text=e.text.trim()}catch(e){// Ordinarily, this shouldn't happen. However, caption
// parsing errors should not throw exceptions and
// break playback.
t(r)}// See the below link for more details on the following fields:
// https://dvcs.w3.org/hg/text-tracks/raw-file/default/608toVTT/608toVTT.html#positioning-in-cea-608
e.text.length&&i.push({// The text to be displayed in the caption from this specific row, with whitespace removed.
text:e.text,// Value between 1 and 15 representing the PAC row used to calculate line height.
line:r+1,// A number representing the indent position by percentage (CEA-608 PAC indent code).
// The value will be a number between 10 and 80. Offset is used to add an aditional
// value to the position if necessary.
position:10+Math.min(70,10*e.indent)+2.5*e.offset})}else null==e&&t(r)}),i.length&&this.trigger("data",{startPts:this.startPts_,endPts:e,content:i,stream:this.name_})},/**
   * Zero out the data, used for startup and on seek
   */eE.prototype.reset=function(){this.mode_="popOn",// actually display captions. If a caption is shifted to a row
// with a lower index than this, it is cleared from the display
// buffer
this.topRow_=0,this.startPts_=0,this.displayed_=eS(),this.nonDisplayed_=eS(),this.lastControlCode_=null,this.column_=0,this.row_=14,this.rollUpRows_=2,this.formatting_=[]},/**
   * Sets up control code and related constants for this instance
   */eE.prototype.setConstants=function(){0===this.dataChannel_?(this.BASE_=16,this.EXT_=17,this.CONTROL_=(20|this.field_)<<8,this.OFFSET_=23):1===this.dataChannel_&&(this.BASE_=24,this.EXT_=25,this.CONTROL_=(28|this.field_)<<8,this.OFFSET_=31),// list is not exhaustive. For a more comprehensive listing and semantics see
// http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf
// Padding
this.PADDING_=0,this.RESUME_CAPTION_LOADING_=32|this.CONTROL_,this.END_OF_CAPTION_=47|this.CONTROL_,this.ROLL_UP_2_ROWS_=37|this.CONTROL_,this.ROLL_UP_3_ROWS_=38|this.CONTROL_,this.ROLL_UP_4_ROWS_=39|this.CONTROL_,this.CARRIAGE_RETURN_=45|this.CONTROL_,this.RESUME_DIRECT_CAPTIONING_=41|this.CONTROL_,this.BACKSPACE_=33|this.CONTROL_,this.ERASE_DISPLAYED_MEMORY_=44|this.CONTROL_,this.ERASE_NON_DISPLAYED_MEMORY_=46|this.CONTROL_},/**
   * Detects if the 2-byte packet data is a special character
   *
   * Special characters have a second byte in the range 0x30 to 0x3f,
   * with the first byte being 0x11 (for data channel 1) or 0x19 (for
   * data channel 2).
   *
   * @param  {Integer} char0 The first byte
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the 2 bytes are an special character
   */eE.prototype.isSpecialCharacter=function(e,t){return e===this.EXT_&&t>=48&&t<=63},/**
   * Detects if the 2-byte packet data is an extended character
   *
   * Extended characters have a second byte in the range 0x20 to 0x3f,
   * with the first byte being 0x12 or 0x13 (for data channel 1) or
   * 0x1a or 0x1b (for data channel 2).
   *
   * @param  {Integer} char0 The first byte
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the 2 bytes are an extended character
   */eE.prototype.isExtCharacter=function(e,t){return(e===this.EXT_+1||e===this.EXT_+2)&&t>=32&&t<=63},/**
   * Detects if the 2-byte packet is a mid-row code
   *
   * Mid-row codes have a second byte in the range 0x20 to 0x2f, with
   * the first byte being 0x11 (for data channel 1) or 0x19 (for data
   * channel 2).
   *
   * @param  {Integer} char0 The first byte
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the 2 bytes are a mid-row code
   */eE.prototype.isMidRowCode=function(e,t){return e===this.EXT_&&t>=32&&t<=47},/**
   * Detects if the 2-byte packet is an offset control code
   *
   * Offset control codes have a second byte in the range 0x21 to 0x23,
   * with the first byte being 0x17 (for data channel 1) or 0x1f (for
   * data channel 2).
   *
   * @param  {Integer} char0 The first byte
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the 2 bytes are an offset control code
   */eE.prototype.isOffsetControlCode=function(e,t){return e===this.OFFSET_&&t>=33&&t<=35},/**
   * Detects if the 2-byte packet is a Preamble Address Code
   *
   * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)
   * or 0x18 to 0x1f (for data channel 2), with the second byte in the
   * range 0x40 to 0x7f.
   *
   * @param  {Integer} char0 The first byte
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the 2 bytes are a PAC
   */eE.prototype.isPAC=function(e,t){return e>=this.BASE_&&e<this.BASE_+8&&t>=64&&t<=127},/**
   * Detects if a packet's second byte is in the range of a PAC color code
   *
   * PAC color codes have the second byte be in the range 0x40 to 0x4f, or
   * 0x60 to 0x6f.
   *
   * @param  {Integer} char1 The second byte
   * @return {Boolean}       Whether the byte is a color PAC
   */eE.prototype.isColorPAC=function(e){return e>=64&&e<=79||e>=96&&e<=127},/**
   * Detects if a single byte is in the range of a normal character
   *
   * Normal text bytes are in the range 0x20 to 0x7f.
   *
   * @param  {Integer} char  The byte
   * @return {Boolean}       Whether the byte is a normal character
   */eE.prototype.isNormalChar=function(e){return e>=32&&e<=127},/**
   * Configures roll-up
   *
   * @param  {Integer} pts         Current PTS
   * @param  {Integer} newBaseRow  Used by PACs to slide the current window to
   *                               a new position
   */eE.prototype.setRollUp=function(e,t){if("rollUp"!==this.mode_&&(this.row_=14,this.mode_="rollUp",this.flushDisplayed(e),this.nonDisplayed_=eS(),this.displayed_=eS()),void 0!==t&&t!==this.row_)for(var i=0;i<this.rollUpRows_;i++)this.displayed_[t-i]=this.displayed_[this.row_-i],this.displayed_[this.row_-i]={text:"",indent:0,offset:0};void 0===t&&(t=this.row_),this.topRow_=t-this.rollUpRows_+1},// and keeps track of it for later closing
eE.prototype.addFormatting=function(e,t){this.formatting_=this.formatting_.concat(t);var i=t.reduce(function(e,t){return e+"<"+t+">"},"");this[this.mode_](e,i)},// clears remembered formatting
eE.prototype.clearFormatting=function(e){if(this.formatting_.length){var t=this.formatting_.reverse().reduce(function(e,t){return e+"</"+t+">"},"");this.formatting_=[],this[this.mode_](e,t)}},eE.prototype.popOn=function(e,t){var i=this.nonDisplayed_[this.row_].text;// buffer characters
i+=t,this.nonDisplayed_[this.row_].text=i},eE.prototype.rollUp=function(e,t){var i=this.displayed_[this.row_].text;i+=t,this.displayed_[this.row_].text=i},eE.prototype.shiftRowsUp_=function(){var e;// clear out inactive rows
for(e=0;e<this.topRow_;e++)this.displayed_[e]={text:"",indent:0,offset:0};for(e=this.row_+1;e<15;e++)this.displayed_[e]={text:"",indent:0,offset:0};// shift displayed rows up
for(e=this.topRow_;e<this.row_;e++)this.displayed_[e]=this.displayed_[e+1];// clear out the bottom row
this.displayed_[this.row_]={text:"",indent:0,offset:0}},eE.prototype.paintOn=function(e,t){var i=this.displayed_[this.row_].text;i+=t,this.displayed_[this.row_].text=i};var ew={CaptionStream:ec,Cea608Stream:eE,Cea708Stream:e_},ek={H264_STREAM_TYPE:27,ADTS_STREAM_TYPE:15,METADATA_STREAM_TYPE:21},eC="shared",ex=function(e,t){var i=1;// Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will
// cause an incorrect adjustment.
for(e>t&&// timestamp rollover, this means the roll over is happening in the opposite direction.
// Example scenario: Enter a long stream/video just after a rollover occurred. The reference
// point will be set to a small number, e.g. 1. The user then seeks backwards over the
// rollover point. In loading this segment, the timestamp values will be very large,
// e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust
// the time stamp to be `value - 2^33`.
(i=-1);Math.abs(t-e)>4294967296;)e+=8589934592*i;return e},eD=function(e){var t,i;eD.prototype.init.call(this),// video and audio. We could use `undefined` here, but having a string
// makes debugging a little clearer.
this.type_=e||eC,this.push=function(e){// Any "shared" rollover streams will accept _all_ data. Otherwise,
// streams will only accept data that matches their type.
(this.type_===eC||e.type===this.type_)&&(void 0===i&&(i=e.dts),e.dts=ex(e.dts,i),e.pts=ex(e.pts,i),t=e.dts,this.trigger("data",e))},this.flush=function(){i=t,this.trigger("done")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline")},this.discontinuity=function(){i=void 0,t=void 0},this.reset=function(){this.discontinuity(),this.trigger("reset")}};eD.prototype=new ee;var eI={TimestampRolloverStream:eD,handleRollover:ex},eA=(e,t,i)=>{if(!e)return -1;for(var r=i;r<e.length;r++)if(e[r]===t)return r;return -1},// encoding description byte [ID3v2.4.0 section 4.]
eL={// UTF-16BE encoded Unicode, without BOM, terminated with \0\0
Utf8:3// UTF-8 encoded Unicode, terminated with \0
},// @see http://en.wikipedia.org/wiki/Percent-encoding 
eP=function(e,t,i){var r,s="";for(r=t;r<i;r++)s+="%"+("00"+e[r].toString(16)).slice(-2);return s},// interpreted as UTf-8.
eO=function(e,t,i){return decodeURIComponent(eP(e,t,i))},// interpreted as ISO-8859-1.
eR=function(e,t,i){return unescape(eP(e,t,i));// jshint ignore:line
},eN=function(e){return e[0]<<21|e[1]<<14|e[2]<<7|e[3]},eM={APIC:function(e){var t,i,r=1;!(e.data[0]!==eL.Utf8||// parsing fields [ID3v2.4.0 section 4.14.]
(t=eA(e.data,0,r))<0)&&(// parsing Mime type field (terminated with \0)
e.mimeType=eR(e.data,r,t),r=t+1,e.pictureType=e.data[r],r++,(i=eA(e.data,0,r))<0||(// parsing Description field (terminated with \0)
e.description=eO(e.data,r,i),r=i+1,"-->"===e.mimeType?e.url=eR(e.data,r,e.data.length):e.pictureData=e.data.subarray(r,e.data.length)))},"T*":function(e){e.data[0]===eL.Utf8&&(// parse text field, do not include null terminator in the frame value
// frames that allow different types of encoding contain terminated text [ID3v2.4.0 section 4.]
e.value=eO(e.data,1,e.data.length).replace(/\0*$/,""),e.values=e.value.split("\x00"))},TXXX:function(e){var t;e.data[0]===eL.Utf8&&-1!==(t=eA(e.data,0,1))&&(// parse the text fields
e.description=eO(e.data,1,t),// frames that allow different types of encoding contain terminated text
// [ID3v2.4.0 section 4.]
e.value=eO(e.data,t+1,e.data.length).replace(/\0*$/,""),e.data=e.value)},"W*":function(e){// parse URL field; URL fields are always represented as ISO-8859-1 [ID3v2.4.0 section 4.]
// if the value is followed by a string termination all the following information should be ignored [ID3v2.4.0 section 4.3]
e.url=eR(e.data,0,e.data.length).replace(/\0.*$/,"")},WXXX:function(e){var t;e.data[0]===eL.Utf8&&-1!==(t=eA(e.data,0,1))&&(// parse the description and URL fields
e.description=eO(e.data,1,t),// if the value is followed by a string termination all the following information
// should be ignored [ID3v2.4.0 section 4.3]
e.url=eR(e.data,t+1,e.data.length).replace(/\0.*$/,""))},PRIV:function(e){var t;for(t=0;t<e.data.length;t++)if(0===e.data[t]){// parse the description and URL fields
e.owner=eR(e.data,0,t);break}e.privateData=e.data.subarray(t+1),e.data=e.privateData}},eU={parseId3Frames:function(e){var t,i=10,r=0,s=[];// If we don't have enough data for a header, 10 bytes, 
// or 'ID3' in the first 3 bytes this is not a valid ID3 tag.
if(!(e.length<10)&&73===e[0]&&68===e[1]&&51===e[2]){// convenient for our comparisons to include it
r=eN(e.subarray(6,10))+10,64&e[5]&&(i+=4+eN(e.subarray(10,14)),r-=eN(e.subarray(16,20)));// http://id3.org/id3v2.3.0#ID3v2_frame_overview
do{if(// determine the number of bytes in this frame
(t=eN(e.subarray(i+4,i+8)))<1)break;var n={id:String.fromCharCode(e[i],e[i+1],e[i+2],e[i+3]),data:e.subarray(i+10,i+t+10)};n.key=n.id,eM[n.id]?eM[n.id](n):"T"===n.id[0]?eM["T*"](n):"W"===n.id[0]&&eM["W*"](n),s.push(n),i+=10+t}while(i<r)return s}},parseSyncSafeInteger:eN,frameParsers:eM};// Once IE11 support is dropped, this function should be removed.
(F=function(e){var t,i={// the bytes of the program-level descriptor field in MP2T
// see ISO/IEC 13818-1:2013 (E), section 2.6 "Program and
// program element descriptors"
descriptor:e&&e.descriptor},r=0,s=[],n=0;if(F.prototype.init.call(this),// https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track
this.dispatchType=ek.METADATA_STREAM_TYPE.toString(16),i.descriptor)for(t=0;t<i.descriptor.length;t++)this.dispatchType+=("00"+i.descriptor[t].toString(16)).slice(-2);this.push=function(e){var t,i,a,o,l;if("timed-metadata"===e.type){if(e.dataAlignmentIndicator&&(n=0,s.length=0),0===s.length&&(e.data.length<10||73!==e.data[0]||68!==e.data[1]||51!==e.data[2])){this.trigger("log",{level:"warn",message:"Skipping unrecognized metadata packet"});return}// add this chunk to the data we've collected so far
if(s.push(e),n+=e.data.byteLength,1===s.length&&// convenient for our comparisons to include it
(r=eU.parseSyncSafeInteger(e.data.subarray(6,10))+10),!(n<r)){for(l=0,// collect the entire frame so it can be parsed
t={data:new Uint8Array(r),frames:[],pts:s[0].pts,dts:s[0].dts};l<r;)t.data.set(s[0].data.subarray(0,r-l),l),l+=s[0].data.byteLength,n-=s[0].data.byteLength,s.shift();// find the start of the first frame and the end of the tag
i=10,64&t.data[5]&&(i+=4+eU.parseSyncSafeInteger(t.data.subarray(10,14)),r-=eU.parseSyncSafeInteger(t.data.subarray(16,20)));// http://id3.org/id3v2.3.0#ID3v2_frame_overview
do{if(// determine the number of bytes in this frame
(a=eU.parseSyncSafeInteger(t.data.subarray(i+4,i+8)))<1){this.trigger("log",{level:"warn",message:"Malformed ID3 frame encountered. Skipping remaining metadata parsing."});// If the frame is malformed, don't parse any further frames but allow previous valid parsed frames
break}// handle the special PRIV frame used to indicate the start
// time for raw AAC data
if((o={id:String.fromCharCode(t.data[i],t.data[i+1],t.data[i+2],t.data[i+3]),data:t.data.subarray(i+10,i+a+10)}).key=o.id,eU.frameParsers[o.id]?eU.frameParsers[o.id](o):"T"===o.id[0]?eU.frameParsers["T*"](o):"W"===o.id[0]&&eU.frameParsers["W*"](o),"com.apple.streaming.transportStreamTimestamp"===o.owner){var u=o.data,h=(1&u[3])<<30|u[4]<<22|u[5]<<14|u[6]<<6|u[7]>>>2;h*=4,h+=3&u[7],o.timeStamp=h,void 0===t.pts&&void 0===t.dts&&(t.pts=o.timeStamp,t.dts=o.timeStamp),this.trigger("timestamp",o)}t.frames.push(o),i+=10+a}while(i<r)this.trigger("data",t)}}}}).prototype=new ee;/**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * A stream-based mp2t to mp4 converter. This utility can be used to
   * deliver mp4s to a SourceBuffer on platforms that support native
   * Media Source Extensions.
   */var eB=eI.TimestampRolloverStream;// object types
/**
   * Splits an incoming stream of binary data into MPEG-2 Transport
   * Stream packets.
   */(j=function(){var e=new Uint8Array(188),t=0;j.prototype.init.call(this),/**
     * Split a stream of data into M2TS packets
    **/this.push=function(i){var r,s=0,n=188;// If there are bytes remaining from the last segment, prepend them to the
// While we have enough data for a packet
for(t?((r=new Uint8Array(i.byteLength+t)).set(e.subarray(0,t)),r.set(i,t),t=0):r=i;n<r.byteLength;){// Look for a pair of start and end sync bytes in the data..
if(71===r[s]&&71===r[n]){// We found a packet so emit it and jump one whole packet forward in
// the stream
this.trigger("data",r.subarray(s,n)),s+=188,n+=188;continue}// If we get here, we have somehow become de-synchronized and we need to step
// forward one byte at a time until we find a pair of sync bytes that denote
// a packet
s++,n++}// If there was some data left over at the end of the segment that couldn't
s<r.byteLength&&(e.set(r.subarray(s),0),t=r.byteLength-s)},/**
     * Passes identified M2TS packets to the TransportParseStream to be parsed
    **/this.flush=function(){188===t&&71===e[0]&&(this.trigger("data",e),t=0),this.trigger("done")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline")},this.reset=function(){t=0,this.trigger("reset")}}).prototype=new ee,/**
   * Accepts an MP2T TransportPacketStream and emits data events with parsed
   * forms of the individual transport stream packets.
   */(q=function(){var e,t,i,r;q.prototype.init.call(this),r=this,this.packetsWaitingForPmt=[],this.programMapTable=void 0,e=function(e,r){var s=0;// PSI packets may be split into multiple sections and those
r.payloadUnitStartIndicator&&(s+=e[s]+1),"pat"===r.type?t(e.subarray(s),r):i(e.subarray(s),r)},t=function(e,t){t.section_number=e[7],t.last_section_number=e[8],// skip the PSI header and parse the first PMT entry
r.pmtPid=(31&e[10])<<8|e[11],t.pmtPid=r.pmtPid},/**
     * Parse out the relevant fields of a Program Map Table (PMT).
     * @param payload {Uint8Array} the PMT-specific portion of an MP2T
     * packet. The first byte in this array should be the table_id
     * field.
     * @param pmt {object} the object that should be decorated with
     * fields parsed from the PMT.
     */i=function(e,t){var i,s;// PMTs can be sent ahead of the time when they should actually
// take effect. We don't believe this should ever be the case
// for HLS but we'll ignore "forward" PMT declarations if we see
// them. Future PMT declarations have the current_next_indicator
// set to zero.
if(1&e[5]){for(// overwrite any existing program map table
r.programMapTable={video:null,audio:null,"timed-metadata":{}},i=3+((15&e[1])<<8|e[2])-4,s=12+((15&e[10])<<8|e[11]);s<i;){var n=e[s],a=(31&e[s+1])<<8|e[s+2];n===ek.H264_STREAM_TYPE&&null===r.programMapTable.video?r.programMapTable.video=a:n===ek.ADTS_STREAM_TYPE&&null===r.programMapTable.audio?r.programMapTable.audio=a:n===ek.METADATA_STREAM_TYPE&&(r.programMapTable["timed-metadata"][a]=n),// move to the next table entry
// skip past the elementary stream descriptors, if present
s+=((15&e[s+3])<<8|e[s+4])+5}// record the map on the packet as well
t.programMapTable=r.programMapTable}},/**
     * Deliver a new MP2T packet to the next stream in the pipeline.
     */this.push=function(t){var i={},r=4;// parse the rest of the packet based on the type
if(i.payloadUnitStartIndicator=!!(64&t[1]),i.pid=31&t[1],i.pid<<=8,i.pid|=t[2],(48&t[3])>>>4>1&&(r+=t[r]+1),0===i.pid)i.type="pat",e(t.subarray(r),i),this.trigger("data",i);else if(i.pid===this.pmtPid)for(i.type="pmt",e(t.subarray(r),i),this.trigger("data",i);this.packetsWaitingForPmt.length;)this.processPes_.apply(this,this.packetsWaitingForPmt.shift());else void 0===this.programMapTable?// PES packets until one has been parsed
this.packetsWaitingForPmt.push([t,r,i]):this.processPes_(t,r,i)},this.processPes_=function(e,t,i){i.pid===this.programMapTable.video?i.streamType=ek.H264_STREAM_TYPE:i.pid===this.programMapTable.audio?i.streamType=ek.ADTS_STREAM_TYPE:// if unknown, streamType will be undefined
i.streamType=this.programMapTable["timed-metadata"][i.pid],i.type="pes",i.data=e.subarray(t),this.trigger("data",i)}}).prototype=new ee,q.STREAM_TYPES={h264:27,adts:15},/**
   * Reconsistutes program elementary stream (PES) packets from parsed
   * transport stream packets. That is, if you pipe an
   * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output
   * events will be events which capture the bytes for individual PES
   * packets plus relevant metadata that has been extracted from the
   * container.
   */($=function(){var e,t=this,i=!1,r={data:[],size:0},s={data:[],size:0},n={data:[],size:0},a=function(e,t){var i;let r=e[0]<<16|e[1]<<8|e[2];// default to an empty array
t.data=new Uint8Array,1===r&&(// get the packet length, this will be 0 for video
t.packetLength=6+(e[4]<<8|e[5]),t.dataAlignmentIndicator=(4&e[6])!=0,192&// and a DTS value. Determine what combination of values is
// available to work with.
(i=e[7])&&(// the PTS and DTS are not written out directly. For information
// on how they are encoded, see
// http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
t.pts=(14&e[9])<<27|(255&e[10])<<20|(254&e[11])<<12|(255&e[12])<<5|(254&e[13])>>>3,t.pts*=4,t.pts+=(6&e[13])>>>1,t.dts=t.pts,64&i&&(t.dts=(14&e[14])<<27|(255&e[15])<<20|(254&e[16])<<12|(255&e[17])<<5|(254&e[18])>>>3,t.dts*=4,t.dts+=(6&e[18])>>>1)),// pes_header_data_length specifies the number of header bytes
// that follow the last byte of the field.
t.data=e.subarray(9+e[8]))},/**
        * Pass completely parsed PES packets to the next stream in the pipeline
       **/o=function(e,i,r){var s,n=new Uint8Array(e.size),o={type:i},l=0,u=0,h=!1;// do nothing if there is not enough buffered data for a complete
// PES header
if(e.data.length&&!(e.size<9)){for(l=0,o.trackId=e.data[0].pid;l<e.data.length;l++)s=e.data[l],n.set(s.data,u),u+=s.data.byteLength;// parse assembled packet's PES header
a(n,o),// check that there is enough stream data to fill the packet
h="video"===i||o.packetLength<=e.size,(r||h)&&(e.size=0,e.data.length=0),h&&t.trigger("data",o)}};$.prototype.init.call(this),/**
     * Identifies M2TS packet types and parses PES packets using metadata
     * parsed from the PMT
     **/this.push=function(a){({pat:function(){// have any meaningful metadata
},pes:function(){var e,t;switch(a.streamType){case ek.H264_STREAM_TYPE:e=r,t="video";break;case ek.ADTS_STREAM_TYPE:e=s,t="audio";break;case ek.METADATA_STREAM_TYPE:e=n,t="timed-metadata";break;default:// ignore unknown stream types
return}// if a new packet is starting, we can flush the completed
a.payloadUnitStartIndicator&&o(e,t,!0),// buffer this fragment until we are sure we've received the
// complete payload
e.data.push(a),e.size+=a.data.byteLength},pmt:function(){var r={type:"metadata",tracks:[]};null!==(e=a.programMapTable).video&&r.tracks.push({timelineStartInfo:{baseMediaDecodeTime:0},id:+e.video,codec:"avc",type:"video"}),null!==e.audio&&r.tracks.push({timelineStartInfo:{baseMediaDecodeTime:0},id:+e.audio,codec:"adts",type:"audio"}),i=!0,t.trigger("data",r)}})[a.type]()},this.reset=function(){r.size=0,r.data.length=0,s.size=0,s.data.length=0,this.trigger("reset")},/**
     * Flush any remaining input. Video PES packets may be of variable
     * length. Normally, the start of a new video packet can trigger the
     * finalization of the previous packet. That is not possible if no
     * more video is forthcoming, however. In that case, some other
     * mechanism (like the end of the file) has to be employed. When it is
     * clear that no additional data is forthcoming, calling this method
     * will flush the buffered packets.
     */this.flushStreams_=function(){// !!THIS ORDER IS IMPORTANT!!
// video first then audio
o(r,"video"),o(s,"audio"),o(n,"timed-metadata")},this.flush=function(){// if on flush we haven't had a pmt emitted
// and we have a pmt to emit. emit the pmt
// so that we trigger a trackinfo downstream.
if(!i&&e){var r={type:"metadata",tracks:[]};// translate audio and video streams to tracks
null!==e.video&&r.tracks.push({timelineStartInfo:{baseMediaDecodeTime:0},id:+e.video,codec:"avc",type:"video"}),null!==e.audio&&r.tracks.push({timelineStartInfo:{baseMediaDecodeTime:0},id:+e.audio,codec:"adts",type:"audio"}),t.trigger("data",r)}i=!1,this.flushStreams_(),this.trigger("done")}}).prototype=new ee;var eF={PAT_PID:0,MP2T_PACKET_LENGTH:188,TransportPacketStream:j,TransportParseStream:q,ElementaryStream:$,TimestampRolloverStream:eB,CaptionStream:ew.CaptionStream,Cea608Stream:ew.Cea608Stream,Cea708Stream:ew.Cea708Stream,MetadataStream:F};for(var ej in ek)ek.hasOwnProperty(ej)&&(eF[ej]=ek[ej]);var eq=eo.ONE_SECOND_IN_TS,e$=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];/*
   * Accepts a ElementaryStream and emits data events with parsed
   * AAC Audio Frames of the individual packets. Input audio in ADTS
   * format is unpacked and re-emitted as AAC frames.
   *
   * @see http://wiki.multimedia.cx/index.php?title=ADTS
   * @see http://wiki.multimedia.cx/?title=Understanding_AAC
   */(H=function(e){var t,i=0;H.prototype.init.call(this),this.skipWarn_=function(e,t){this.trigger("log",{level:"warn",message:`adts skiping bytes ${e} to ${t} in frame ${i} outside syncword`})},this.push=function(r){var s,n,a,o,l,u,h=0;if(e||(i=0),"audio"===r.type){// If we don't have enough bytes to do that, then we definitely won't have a full frame.
for(t&&t.length?(o=t,(t=new Uint8Array(o.byteLength+r.data.byteLength)).set(o),t.set(r.data,o.byteLength)):t=r.data;h+7<t.length;){// Look for the start of an ADTS header..
if(255!==t[h]||(246&t[h+1])!=240){"number"!=typeof s&&(s=h),// If a valid header was not found,  jump one forward and attempt to
// find a valid ADTS header starting at the next byte
h++;continue}// then we have to wait for more data
if("number"==typeof s&&(this.skipWarn_(s,h),s=null),// end of the ADTS header
a=(1&~t[h+1])*2,// end of the sync sequence
// NOTE: frame length includes the size of the header
n=(3&t[h+3])<<11|t[h+4]<<3|(224&t[h+5])>>5,u=(l=((3&t[h+6])+1)*1024)*eq/e$[(60&t[h+2])>>>2],t.byteLength-h<n)break;// Otherwise, deliver the complete AAC frame
this.trigger("data",{pts:r.pts+i*u,dts:r.dts+i*u,sampleCount:l,audioobjecttype:(t[h+2]>>>6&3)+1,channelcount:(1&t[h+2])<<2|(192&t[h+3])>>>6,samplerate:e$[(60&t[h+2])>>>2],samplingfrequencyindex:(60&t[h+2])>>>2,// assume ISO/IEC 14496-12 AudioSampleEntry default of 16
samplesize:16,// data is the frame without it's header
data:t.subarray(h+7+a,h+n)}),i++,h+=n}"number"==typeof s&&(this.skipWarn_(s,h),s=null),t=t.subarray(h)}},this.flush=function(){i=0,this.trigger("done")},this.reset=function(){t=void 0,this.trigger("reset")},this.endTimeline=function(){t=void 0,this.trigger("endedtimeline")}}).prototype=new ee;var eH=function(e){var t=e.byteLength,i=0,// the number of bits left to examine in the current word
r=0;// :uint;
// ():uint
this.length=function(){return 8*t},this.bitsAvailable=function(){return 8*t+r},this.loadWord=function(){var s=e.byteLength-t,n=new Uint8Array(4),a=Math.min(4,t);if(0===a)throw Error("no bytes available");n.set(e.subarray(s,s+a)),i=new DataView(n.buffer).getUint32(0),r=8*a,t-=a},this.skipBits=function(e){var s;// :int
r>e||(e-=r,s=Math.floor(e/8),e-=8*s,t-=s,this.loadWord()),i<<=e,r-=e},this.readBits=function(e){var s=Math.min(r,e),n=i>>>32-s;// :uint
return(// if size > 31, handle error
(r-=s)>0?i<<=s:t>0&&this.loadWord(),(s=e-s)>0)?n<<s|this.readBits(s):n},this.skipLeadingZeros=function(){var e;// :uint
for(e=0;e<r;++e)if((i&2147483648>>>e)!=0)return(// the first bit of working word is 1
i<<=e,r-=e,e);return(// we exhausted workingWord and still have not found a 1
this.loadWord(),e+this.skipLeadingZeros())},this.skipUnsignedExpGolomb=function(){this.skipBits(1+this.skipLeadingZeros())},this.skipExpGolomb=function(){this.skipBits(1+this.skipLeadingZeros())},this.readUnsignedExpGolomb=function(){var e=this.skipLeadingZeros();// :uint
return this.readBits(e+1)-1},this.readExpGolomb=function(){var e=this.readUnsignedExpGolomb();// :int
return 1&e?1+e>>>1:-1*(e>>>1)// add 1 to make it even, and divide by 2
},// :Boolean
this.readBoolean=function(){return 1===this.readBits(1)},this.readUnsignedByte=function(){return this.readBits(8)},this.loadWord()};/**
   * Accepts a NAL unit byte stream and unpacks the embedded NAL units.
   */(z=function(){var e,t,i=0;z.prototype.init.call(this),/*
     * Scans a byte stream and triggers a data event with the NAL units found.
     * @param {Object} data Event received from H264Stream
     * @param {Uint8Array} data.data The h264 byte stream to be scanned
     *
     * @see H264Stream.push
     */this.push=function(r){t?((s=new Uint8Array(t.byteLength+r.data.byteLength)).set(t),s.set(r.data,t.byteLength),t=s):t=r.data;// scan for NAL unit boundaries
// a match looks like this:
// 0 0 1 .. NAL .. 0 0 1
// ^ sync point        ^ i
// or this:
// 0 0 1 .. NAL .. 0 0 0
// ^ sync point        ^ i
// advance the sync point to a NAL start, if necessary
for(var s,n=t.byteLength;i<n-3;i++)if(1===t[i+2]){// the sync point is properly aligned
e=i+5;break}for(;e<n;)// a NAL unit boundary
switch(t[e]){case 0:// skip past non-sync sequences
if(0!==t[e-1]){e+=2;break}// deliver the NAL unit if it isn't empty
if(0!==t[e-2]){e++;break}i+3!==e-2&&this.trigger("data",t.subarray(i+3,e-2));// drop trailing zeroes
do e++;while(1!==t[e]&&e<n)i=e-2,e+=3;break;case 1:// skip past non-sync sequences
if(0!==t[e-1]||0!==t[e-2]){e+=3;break}// deliver the NAL unit
this.trigger("data",t.subarray(i+3,e-2)),i=e-2,e+=3;break;default:// the current byte isn't a one or zero, so it cannot be part
// of a sync sequence
e+=3}// filter out the NAL units that were delivered
t=t.subarray(i),e-=i,i=0},this.reset=function(){t=null,i=0,this.trigger("reset")},this.flush=function(){t&&t.byteLength>3&&this.trigger("data",t.subarray(i+3)),// reset the stream state
t=null,i=0,this.trigger("done")},this.endTimeline=function(){this.flush(),this.trigger("endedtimeline")}}).prototype=new ee,// see Recommendation ITU-T H.264 (4/2013),
// 7.3.2.1.1 Sequence parameter set data syntax
W={100:!0,110:!0,122:!0,244:!0,44:!0,83:!0,86:!0,118:!0,128:!0,// TODO: the three profiles below don't
// appear to have sps data in the specificiation anymore?
138:!0,139:!0,134:!0},/**
   * Accepts input from a ElementaryStream and produces H.264 NAL unit data
   * events.
   */(V=function(){var e,t,i,r,s,n,a,o=new z;V.prototype.init.call(this),e=this,/*
     * Pushes a packet from a stream onto the NalByteStream
     *
     * @param {Object} packet - A packet received from a stream
     * @param {Uint8Array} packet.data - The raw bytes of the packet
     * @param {Number} packet.dts - Decode timestamp of the packet
     * @param {Number} packet.pts - Presentation timestamp of the packet
     * @param {Number} packet.trackId - The id of the h264 track this packet came from
     * @param {('video'|'audio')} packet.type - The type of packet
     *
     */this.push=function(e){"video"===e.type&&(t=e.trackId,i=e.pts,r=e.dts,o.push(e))},/*
     * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps
     * for the NALUs to the next stream component.
     * Also, preprocess caption and sequence parameter NALUs.
     *
     * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`
     * @see NalByteStream.push
     */o.on("data",function(a){var o={trackId:t,pts:i,dts:r,data:a,nalUnitTypeCode:31&a[0]};switch(o.nalUnitTypeCode){case 5:o.nalUnitType="slice_layer_without_partitioning_rbsp_idr";break;case 6:o.nalUnitType="sei_rbsp",o.escapedRBSP=s(a.subarray(1));break;case 7:o.nalUnitType="seq_parameter_set_rbsp",o.escapedRBSP=s(a.subarray(1)),o.config=n(o.escapedRBSP);break;case 8:o.nalUnitType="pic_parameter_set_rbsp";break;case 9:o.nalUnitType="access_unit_delimiter_rbsp"}// This triggers data on the H264Stream
e.trigger("data",o)}),o.on("done",function(){e.trigger("done")}),o.on("partialdone",function(){e.trigger("partialdone")}),o.on("reset",function(){e.trigger("reset")}),o.on("endedtimeline",function(){e.trigger("endedtimeline")}),this.flush=function(){o.flush()},this.partialFlush=function(){o.partialFlush()},this.reset=function(){o.reset()},this.endTimeline=function(){o.endTimeline()},/**
     * Advance the ExpGolomb decoder past a scaling list. The scaling
     * list is optionally transmitted as part of a sequence parameter
     * set and is not relevant to transmuxing.
     * @param count {number} the number of entries in this scaling list
     * @param expGolombDecoder {object} an ExpGolomb pointed to the
     * start of a scaling list
     * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
     */a=function(e,t){var i,r=8,s=8;for(i=0;i<e;i++)0!==s&&(s=(r+t.readExpGolomb()+256)%256),r=0===s?r:s},/**
     * Expunge any "Emulation Prevention" bytes from a "Raw Byte
     * Sequence Payload"
     * @param data {Uint8Array} the bytes of a RBSP from a NAL
     * unit
     * @return {Uint8Array} the RBSP without any Emulation
     * Prevention Bytes
     */s=function(e){for(var t,i,r=e.byteLength,s=[],n=1;n<r-2;)0===e[n]&&0===e[n+1]&&3===e[n+2]?(s.push(n+2),n+=2):n++;// If no Emulation Prevention Bytes were found just return the original
// array
if(0===s.length)return e;// Create a new array to hold the NAL unit data
t=r-s.length,i=new Uint8Array(t);var a=0;for(n=0;n<t;a++,n++)a===s[0]&&(// Skip this byte
a++,s.shift()),i[n]=e[a];return i},/**
     * Read a sequence parameter set and return some interesting video
     * properties. A sequence parameter set is the H264 metadata that
     * describes the properties of upcoming video frames.
     * @param data {Uint8Array} the bytes of a sequence parameter set
     * @return {object} an object with configuration parsed from the
     * sequence parameter set, including the dimensions of the
     * associated video frames.
     */n=function(e){var t,i,r,s,n,o,l,u,h,d,c,p,m=0,f=0,g=0,y=0,_=[1,1];// some profiles have more optional data we don't need
if(i=(t=new eH(e)).readUnsignedByte(),s=t.readUnsignedByte(),r=t.readUnsignedByte(),t.skipUnsignedExpGolomb(),W[i]&&(3===(n=t.readUnsignedExpGolomb())&&t.skipBits(1),t.skipUnsignedExpGolomb(),t.skipUnsignedExpGolomb(),t.skipBits(1),t.readBoolean()))for(p=0,// seq_scaling_matrix_present_flag
c=3!==n?8:12;p<c;p++)t.readBoolean()&&(p<6?a(16,t):a(64,t));if(t.skipUnsignedExpGolomb(),0===(o=t.readUnsignedExpGolomb()))t.readUnsignedExpGolomb();// log2_max_pic_order_cnt_lsb_minus4
else if(1===o)for(t.skipBits(1),t.skipExpGolomb(),t.skipExpGolomb(),l=t.readUnsignedExpGolomb(),p=0;p<l;p++)t.skipExpGolomb();// offset_for_ref_frame[ i ]
if(t.skipUnsignedExpGolomb(),t.skipBits(1),u=t.readUnsignedExpGolomb(),h=t.readUnsignedExpGolomb(),0===(d=t.readBits(1))&&t.skipBits(1),t.skipBits(1),t.readBoolean()&&(// frame_cropping_flag
m=t.readUnsignedExpGolomb(),f=t.readUnsignedExpGolomb(),g=t.readUnsignedExpGolomb(),y=t.readUnsignedExpGolomb()),t.readBoolean()&&t.readBoolean()){switch(t.readUnsignedByte()){case 1:_=[1,1];break;case 2:_=[12,11];break;case 3:_=[10,11];break;case 4:_=[16,11];break;case 5:_=[40,33];break;case 6:_=[24,11];break;case 7:_=[20,11];break;case 8:_=[32,11];break;case 9:_=[80,33];break;case 10:_=[18,11];break;case 11:_=[15,11];break;case 12:_=[64,33];break;case 13:_=[160,99];break;case 14:_=[4,3];break;case 15:_=[3,2];break;case 16:_=[2,1];break;case 255:_=[t.readUnsignedByte()<<8|t.readUnsignedByte(),t.readUnsignedByte()<<8|t.readUnsignedByte()]}_&&(_[0],_[1])}return{profileIdc:i,levelIdc:r,profileCompatibility:s,width:(u+1)*16-2*m-2*f,height:(2-d)*(h+1)*16-2*g-2*y,// sar is sample aspect ratio
sarRatio:_}}}).prototype=new ee;/**
   * mux.js
   *
   * Copyright (c) Brightcove
   * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
   *
   * Utilities to detect basic properties and metadata about Aac data.
   */var eV=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350],ez=function(e,t){var i=e[t+6]<<21|e[t+7]<<14|e[t+8]<<7|e[t+9];// if we get a negative returnSize clamp it to 0
return(i=i>=0?i:0,(16&e[t+5])>>4)?i+20:i+10},eW=function(e,t){return e.length-t<10||73!==e[t]||68!==e[t+1]||51!==e[t+2]?t:(t+=ez(e,t),eW(e,t))},eG=function(e){return e[0]<<21|e[1]<<14|e[2]<<7|e[3]},eX=function(e,t,i){var r,s="";for(r=t;r<i;r++)s+="%"+("00"+e[r].toString(16)).slice(-2);return s},eK={isLikelyAacData:function(e){var t=eW(e,0);return e.length>=t+2&&(255&e[t])==255&&(240&e[t+1])==240&&// verify that the 2 layer bits are 0, aka this
// is not mp3 data but aac data.
(22&e[t+1])==16},parseId3TagSize:ez,parseAdtsSize:function(e,t){var i=(224&e[t+5])>>5,r=e[t+4]<<3;return 6144&e[t+3]|r|i},parseType:function(e,t){return 73===e[t]&&68===e[t+1]&&51===e[t+2]?"timed-metadata":!0&e[t]&&(240&e[t+1])==240?"audio":null},parseSampleRate:function(e){for(var t=0;t+5<e.length;){if(255!==e[t]||(246&e[t+1])!=240){// If a valid header was not found,  jump one forward and attempt to
// find a valid ADTS header starting at the next byte
t++;continue}return eV[(60&e[t+2])>>>2]}return null},parseAacTimestamp:function(e){var t,i,r;// find the start of the first frame and the end of the tag
t=10,64&e[5]&&(t+=4+eG(e.subarray(10,14)));// http://id3.org/id3v2.3.0#ID3v2_frame_overview
do{if(// determine the number of bytes in this frame
(i=eG(e.subarray(t+4,t+8)))<1)break;if("PRIV"===String.fromCharCode(e[t],e[t+1],e[t+2],e[t+3])){r=e.subarray(t+10,t+i+10);for(var s=0;s<r.byteLength;s++)if(0===r[s]){if("com.apple.streaming.transportStreamTimestamp"===unescape(eX(r,0,s))){var n=r.subarray(s+1),a=(1&n[3])<<30|n[4]<<22|n[5]<<14|n[6]<<6|n[7]>>>2;return a*=4,a+=3&n[7]}break}}t+=10+i;// advance past the frame body
}while(t<e.byteLength)return null}};/**
   * Splits an incoming stream of binary data into ADTS and ID3 Frames.
   */(G=function(){var e=new Uint8Array,t=0;G.prototype.init.call(this),this.setTimestamp=function(e){t=e},this.push=function(i){var r,s,n,a=0,o=0;// If there are bytes remaining from the last segment, prepend them to the
for(e.length?(n=e.length,(e=new Uint8Array(i.byteLength+n)).set(e.subarray(0,n)),e.set(i,n)):e=i;e.length-o>=3;){if(73===e[o]&&68===e[o+1]&&51===e[o+2]){// Exit early because we don't have enough to parse
// the ID3 tag header
if(e.length-o<10||(// check framesize
a=eK.parseId3TagSize(e,o),o+a>e.length))break;r={type:"timed-metadata",data:e.subarray(o,o+a)},this.trigger("data",r),o+=a;continue}if((255&e[o])==255&&(240&e[o+1])==240){// Exit early because we don't have enough to parse
// the ADTS frame header
if(e.length-o<7||(a=eK.parseAdtsSize(e,o),o+a>e.length))break;s={type:"audio",data:e.subarray(o,o+a),pts:t,dts:t},this.trigger("data",s),o+=a;continue}o++}e=e.length-o>0?e.subarray(o):new Uint8Array},this.reset=function(){e=new Uint8Array,this.trigger("reset")},this.endTimeline=function(){e=new Uint8Array,this.trigger("endedtimeline")}}).prototype=new ee;var eY={ftyp:a,mdat:function(e){return n(T.mdat,e)},moof:function(e,t){for(var i=[],r=t.length;r--;)i[r]=_(t[r]);return n.apply(null,[T.moof,n(T.mfhd,new Uint8Array([0,0,0,0,// flags
(4278190080&e)>>24,(16711680&e)>>16,(65280&e)>>8,255// sequence_number
&e]))].concat(i))},moov:l,initSegment:function(e){var t,i=a(),r=l(e);return(t=new Uint8Array(i.byteLength+r.byteLength)).set(i),t.set(r,i.byteLength),t}},eQ={groupNalsIntoFrames:function(e){var t,i,r=[],s=[];// TODO added for LHLS, make sure this is OK
for(t=0,s.byteLength=0,s.nalCount=0,s.duration=0,r.byteLength=0;t<e.length;t++)"access_unit_delimiter_rbsp"===(i=e[t]).nalUnitType?(r.length&&(r.duration=i.dts-r.dts,s.byteLength+=r.byteLength,s.nalCount+=r.length,s.duration+=r.duration,s.push(r)),(r=[i]).byteLength=i.data.byteLength,r.pts=i.pts,r.dts=i.dts):("slice_layer_without_partitioning_rbsp_idr"===i.nalUnitType&&(r.keyFrame=!0),r.duration=i.dts-r.dts,r.byteLength+=i.data.byteLength,r.push(i));// For the last frame, use the duration of the previous frame if we
return s.length&&(!r.duration||r.duration<=0)&&(r.duration=s[s.length-1].duration),// Push the final frame
// TODO added for LHLS, make sure this is OK
s.byteLength+=r.byteLength,s.nalCount+=r.length,s.duration+=r.duration,s.push(r),s},groupFramesIntoGops:function(e){var t,i,r=[],s=[];// We must pre-set some of the values on the Gop since we
for(t=0,// keep running totals of these values
r.byteLength=0,r.nalCount=0,r.duration=0,r.pts=e[0].pts,r.dts=e[0].dts,s.byteLength=0,s.nalCount=0,s.duration=0,s.pts=e[0].pts,s.dts=e[0].dts;t<e.length;t++)(i=e[t]).keyFrame?(r.length&&(s.push(r),s.byteLength+=r.byteLength,s.nalCount+=r.nalCount,s.duration+=r.duration),(r=[i]).nalCount=i.length,r.byteLength=i.byteLength,r.pts=i.pts,r.dts=i.dts,r.duration=i.duration):(r.duration+=i.duration,r.nalCount+=i.length,r.byteLength+=i.byteLength,r.push(i));return s.length&&r.duration<=0&&(r.duration=s[s.length-1].duration),s.byteLength+=r.byteLength,s.nalCount+=r.nalCount,s.duration+=r.duration,s.push(r),s},extendFirstKeyFrame:function(e){var t;return!e[0][0].keyFrame&&e.length>1&&(// Remove the first GOP
t=e.shift(),e.byteLength-=t.byteLength,e.nalCount-=t.nalCount,// first gop to cover the time period of the
// frames we just removed
e[0][0].dts=t.dts,e[0][0].pts=t.pts,e[0][0].duration+=t.duration),e},generateSampleTable:function(e,t){var i,r,s,n,a=t||0,o=[];for(i=0;i<e.length;i++)for(r=0,n=e[i];r<n.length;r++)s=er(n[r],a),a+=s.size,o.push(s);return o},concatenateNalData:function(e){var t,i,r,s,n,a,o=0,l=e.byteLength,u=e.nalCount,h=new Uint8Array(l+4*u),d=new DataView(h.buffer);// For each Gop..
for(t=0;t<e.length;t++)for(i=0,s=e[t];i<s.length;i++)for(r=0,n=s[i];r<n.length;r++)a=n[r],d.setUint32(o,a.data.byteLength),o+=4,h.set(a.data,o),o+=a.data.byteLength;return h},generateSampleTableForFrame:function(e,t){var i=[];return i.push(er(e,t||0)),i},concatenateNalDataForFrame:function(e){var t,i,r=0,s=e.byteLength,n=e.length,a=new Uint8Array(s+4*n),o=new DataView(a.buffer);// For each NAL..
for(t=0;t<e.length;t++)i=e[t],o.setUint32(r,i.data.byteLength),r+=4,a.set(i.data,r),r+=i.data.byteLength;return a}},eJ={prefixWithSilence:function(e,t,i,r){var s,n,a,o,l=0,u=0,h=0;if(t.length&&(s=eo.audioTsToVideoTs(e.baseMediaDecodeTime,e.samplerate),l=Math.ceil(eo.ONE_SECOND_IN_TS/(e.samplerate/1024)),i&&r&&(h=(u=Math.floor((s-Math.max(i,r))/l))*l),!(u<1)&&!(h>eo.ONE_SECOND_IN_TS/2))){for((n=el()[e.samplerate])||// from the content instead
(n=t[0].data),a=0;a<u;a++)o=t[0],t.splice(0,0,{data:n,dts:o.dts-l,pts:o.pts-l});return e.baseMediaDecodeTime-=Math.floor(eo.videoTsToAudioTs(h,e.samplerate)),h}},trimAdtsFramesByEarliestDts:function(e,t,i){return t.minSegmentDts>=i?e:(// We will need to recalculate the earliest segment Dts
t.minSegmentDts=1/0,e.filter(function(e){return(// If this is an allowed frame, keep it and record it's Dts
e.dts>=i&&(t.minSegmentDts=Math.min(t.minSegmentDts,e.dts),t.minSegmentPts=t.minSegmentDts,!0)// Otherwise, discard it
)}))},generateSampleTable:function(e){var t,i=[];for(t=0;t<e.length;t++)i.push({size:e[t].data.byteLength,duration:1024// For AAC audio, all samples contain 1024 samples
});return i},concatenateFrameData:function(e){var t,i,r=0,s=new Uint8Array(eu(e));for(t=0;t<e.length;t++)i=e[t],s.set(i.data,r),r+=i.data.byteLength;return s}},eZ={clearDtsInfo:function(e){delete e.minSegmentDts,delete e.maxSegmentDts,delete e.minSegmentPts,delete e.maxSegmentPts},calculateTrackBaseMediaDecodeTime:function(e,t){var i,r=e.minSegmentDts;// Optionally adjust the time so the first segment starts at zero.
return t||(r-=e.timelineStartInfo.dts),i=Math.max(0,i=e.timelineStartInfo.baseMediaDecodeTime+r),"audio"===e.type&&(i*=e.samplerate/eh,i=Math.floor(i)),i},collectDtsInfo:function(e,t){"number"==typeof t.pts&&(void 0===e.timelineStartInfo.pts&&(e.timelineStartInfo.pts=t.pts),void 0===e.minSegmentPts?e.minSegmentPts=t.pts:e.minSegmentPts=Math.min(e.minSegmentPts,t.pts),void 0===e.maxSegmentPts?e.maxSegmentPts=t.pts:e.maxSegmentPts=Math.max(e.maxSegmentPts,t.pts)),"number"==typeof t.dts&&(void 0===e.timelineStartInfo.dts&&(e.timelineStartInfo.dts=t.dts),void 0===e.minSegmentDts?e.minSegmentDts=t.dts:e.minSegmentDts=Math.min(e.minSegmentDts,t.dts),void 0===e.maxSegmentDts?e.maxSegmentDts=t.dts:e.maxSegmentDts=Math.max(e.maxSegmentDts,t.dts))}},e0=eK.isLikelyAacData,e1=eo.ONE_SECOND_IN_TS,e2=["audioobjecttype","channelcount","samplerate","samplingfrequencyindex","samplesize"],e4=["width","height","profileIdc","levelIdc","profileCompatibility","sarRatio"],e8=function(e,t){t.stream=e,this.trigger("log",t)},e5=function(e,t){for(var i=Object.keys(t),r=0;r<i.length;r++){var s=i[r];// skip non-stream keys and headOfPipeline
// which is just a duplicate
"headOfPipeline"!==s&&t[s].on&&t[s].on("log",e8.bind(e,s))}},e3=function(e,t){var i;if(e.length!==t.length)return!1;// compare the value of each element in the array
for(i=0;i<e.length;i++)if(e[i]!==t[i])return!1;return!0},e6=function(e,t,i,r,s,n){// however, the player time values will reflect a start from the baseMediaDecodeTime.
// In order to provide relevant values for the player times, base timing info on the
// baseMediaDecodeTime and the DTS and PTS durations of the segment.
return{start:{dts:e,pts:e+(i-t)},end:{dts:e+(r-t),pts:e+(s-i)},prependedContentDuration:n,baseMediaDecodeTime:e}};/**
   * Constructs a single-track, ISO BMFF media segment from AAC data
   * events. The output of this stream can be fed to a SourceBuffer
   * configured with a suitable initialization segment.
   * @param track {object} track metadata configuration
   * @param options {object} transmuxer options object
   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
   *        in the source; false to adjust the first segment to start at 0.
   */(K=function(e,t){var i,r=[],s=0,n=0,a=1/0;i=(t=t||{}).firstSequenceNumber||0,K.prototype.init.call(this),this.push=function(t){eZ.collectDtsInfo(e,t),e&&e2.forEach(function(i){e[i]=t[i]}),// buffer audio data until end() is called
r.push(t)},this.setEarliestDts=function(e){s=e},this.setVideoBaseMediaDecodeTime=function(e){a=e},this.setAudioAppendStart=function(e){n=e},this.flush=function(){var o,l,u,h,d,c,p;// return early if no audio data has been observed
if(0===r.length){this.trigger("done","AudioSegmentStream");return}o=eJ.trimAdtsFramesByEarliestDts(r,e,s),e.baseMediaDecodeTime=eZ.calculateTrackBaseMediaDecodeTime(e,t.keepOriginalTimestamps),p=eJ.prefixWithSilence(e,o,n,a),// samples (that is, adts frames) in the audio data
e.samples=eJ.generateSampleTable(o),u=eY.mdat(eJ.concatenateFrameData(o)),r=[],l=eY.moof(i,[e]),h=new Uint8Array(l.byteLength+u.byteLength),i++,h.set(l),h.set(u,l.byteLength),eZ.clearDtsInfo(e),d=Math.ceil(1024*e1/e.samplerate),o.length&&(c=o.length*d,this.trigger("segmentTimingInfo",e6(// frame info is in video clock cycles. Convert to match expectation of
// listeners (that all timestamps will be based on video clock cycles).
eo.audioTsToVideoTs(e.baseMediaDecodeTime,e.samplerate),o[0].dts,o[0].pts,o[0].dts+c,o[0].pts+c,p||0)),this.trigger("timingInfo",{start:o[0].pts,end:o[0].pts+c})),this.trigger("data",{track:e,boxes:h}),this.trigger("done","AudioSegmentStream")},this.reset=function(){eZ.clearDtsInfo(e),r=[],this.trigger("reset")}}).prototype=new ee,/**
   * Constructs a single-track, ISO BMFF media segment from H264 data
   * events. The output of this stream can be fed to a SourceBuffer
   * configured with a suitable initialization segment.
   * @param track {object} track metadata configuration
   * @param options {object} transmuxer options object
   * @param options.alignGopsAtEnd {boolean} If true, start from the end of the
   *        gopsToAlignWith list when attempting to align gop pts
   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
   *        in the source; false to adjust the first segment to start at 0.
   */(X=function(e,t){var i,r,s,n=[],a=[];i=(t=t||{}).firstSequenceNumber||0,X.prototype.init.call(this),delete e.minPTS,this.gopCache_=[],/**
      * Constructs a ISO BMFF segment given H264 nalUnits
      * @param {Object} nalUnit A data event representing a nalUnit
      * @param {String} nalUnit.nalUnitType
      * @param {Object} nalUnit.config Properties for a mp4 track
      * @param {Uint8Array} nalUnit.data The nalUnit bytes
      * @see lib/codecs/h264.js
     **/this.push=function(t){eZ.collectDtsInfo(e,t),"seq_parameter_set_rbsp"!==t.nalUnitType||r||(r=t.config,e.sps=[t.data],e4.forEach(function(t){e[t]=r[t]},this)),"pic_parameter_set_rbsp"!==t.nalUnitType||s||(s=t.data,e.pps=[t.data]),n.push(t)},/**
      * Pass constructed ISO BMFF track and boxes on to the
      * next stream in the pipeline
     **/this.flush=function(){// we find the first AUD
for(var r,s,o,l,u,h,d,c,p,m=0;n.length&&"access_unit_delimiter_rbsp"!==n[0].nalUnitType;)n.shift();// Return early if no video data has been observed
if(0===n.length){this.resetStream_(),this.trigger("done","VideoSegmentStream");return}// Organize the raw nal-units into arrays that represent
if(// higher-level constructs such as frames and gops
// (group-of-pictures)
s=eQ.groupNalsIntoFrames(n),(l=eQ.groupFramesIntoGops(s))[0][0].keyFrame||(// Search for a gop for fusion from our gopCache
(o=this.getGopForFusion_(n[0],e))?(// in order to provide more accurate timing information about the segment, save
// the number of seconds prepended to the original segment due to GOP fusion
m=o.duration,l.unshift(o),// new gop at the beginning
l.byteLength+=o.byteLength,l.nalCount+=o.nalCount,l.pts=o.pts,l.dts=o.dts,l.duration+=o.duration):l=eQ.extendFirstKeyFrame(l)),a.length){if(!(r=t.alignGopsAtEnd?this.alignGopsAtEnd_(l):this.alignGopsAtStart_(l))){// save all the nals in the last GOP into the gop cache
this.gopCache_.unshift({gop:l.pop(),pps:e.pps,sps:e.sps}),this.gopCache_.length=Math.min(6,this.gopCache_.length),n=[],this.resetStream_(),this.trigger("done","VideoSegmentStream");return}// Some gops were trimmed. clear dts info so minSegmentDts and pts are correct
// when recalculated before sending off to CoalesceStream
eZ.clearDtsInfo(e),l=r}eZ.collectDtsInfo(e,l),// samples (that is, frames) in the video data
e.samples=eQ.generateSampleTable(l),h=eY.mdat(eQ.concatenateNalData(l)),e.baseMediaDecodeTime=eZ.calculateTrackBaseMediaDecodeTime(e,t.keepOriginalTimestamps),this.trigger("processedGopsInfo",l.map(function(e){return{pts:e.pts,dts:e.dts,byteLength:e.byteLength}})),c=l[0],p=l[l.length-1],this.trigger("segmentTimingInfo",e6(e.baseMediaDecodeTime,c.dts,c.pts,p.dts+p.duration,p.pts+p.duration,m)),this.trigger("timingInfo",{start:l[0].pts,end:l[l.length-1].pts+l[l.length-1].duration}),this.gopCache_.unshift({gop:l.pop(),pps:e.pps,sps:e.sps}),this.gopCache_.length=Math.min(6,this.gopCache_.length),n=[],this.trigger("baseMediaDecodeTime",e.baseMediaDecodeTime),this.trigger("timelineStartInfo",e.timelineStartInfo),u=eY.moof(i,[e]),// throwing away hundreds of media segment fragments
d=new Uint8Array(u.byteLength+h.byteLength),i++,d.set(u),d.set(h,u.byteLength),this.trigger("data",{track:e,boxes:d}),this.resetStream_(),this.trigger("done","VideoSegmentStream")},this.reset=function(){this.resetStream_(),n=[],this.gopCache_.length=0,a.length=0,this.trigger("reset")},this.resetStream_=function(){eZ.clearDtsInfo(e),// for instance, when we are rendition switching
r=void 0,s=void 0},// return it or return null if no good candidate was found
this.getGopForFusion_=function(t){var i,r,s,n,a,o=1/0;// Search for the GOP nearest to the beginning of this nal unit
for(a=0;a<this.gopCache_.length;a++)s=(n=this.gopCache_[a]).gop,e.pps&&e3(e.pps[0],n.pps[0])&&e.sps&&e3(e.sps[0],n.sps[0])&&!(s.dts<e.timelineStartInfo.dts)&&// The distance between the end of the gop and the start of the nalUnit
(i=t.dts-s.dts-s.duration)>=-1e4&&i<=45e3&&(!r||o>i)&&(r=n,o=i);return r?r.gop:null},// of gopsToAlignWith starting from the START of the list
this.alignGopsAtStart_=function(e){var t,i,r,s,n,o,l,u;for(n=e.byteLength,o=e.nalCount,l=e.duration,t=i=0;t<a.length&&i<e.length&&(r=a[t],s=e[i],r.pts!==s.pts);){if(s.pts>r.pts){// this current gop starts after the current gop we want to align on, so increment
// align index
t++;continue}// current gop starts before the current gop we want to align on. so increment gop
// index
i++,n-=s.byteLength,o-=s.nalCount,l-=s.duration}return 0===i?e:i===e.length?null:((u=e.slice(i)).byteLength=n,u.duration=l,u.nalCount=o,u.pts=u[0].pts,u.dts=u[0].dts,u)},// of gopsToAlignWith starting from the END of the list
this.alignGopsAtEnd_=function(e){for(t=a.length-1,i=e.length-1,n=null,o=!1;t>=0&&i>=0;){if(r=a[t],s=e[i],r.pts===s.pts){o=!0;break}if(r.pts>s.pts){t--;continue}t===a.length-1&&// by the end of this loop, we still want to append gops that come after this
// point
(n=i),i--}if(!o&&null===n)return null;if(0===(l=o?i:n))return e;var t,i,r,s,n,o,l,u=e.slice(l),h=u.reduce(function(e,t){return e.byteLength+=t.byteLength,e.duration+=t.duration,e.nalCount+=t.nalCount,e},{byteLength:0,duration:0,nalCount:0});return u.byteLength=h.byteLength,u.duration=h.duration,u.nalCount=h.nalCount,u.pts=u[0].pts,u.dts=u[0].dts,u},this.alignGopsWith=function(e){a=e}}).prototype=new ee,/**
   * A Stream that can combine multiple streams (ie. audio & video)
   * into a single output segment for MSE. Also supports audio-only
   * and video-only streams.
   * @param options {object} transmuxer options object
   * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
   *        in the source; false to adjust the first segment to start at media timeline start.
   */(Q=function(e,t){// Number of Tracks per output segment
// If greater than 1, we combine multiple
// tracks into a single segment
this.numberOfTracks=0,this.metadataStream=t,void 0!==(e=e||{}).remux?this.remuxTracks=!!e.remux:this.remuxTracks=!0,"boolean"==typeof e.keepOriginalTimestamps?this.keepOriginalTimestamps=e.keepOriginalTimestamps:this.keepOriginalTimestamps=!1,this.pendingTracks=[],this.videoTrack=null,this.pendingBoxes=[],this.pendingCaptions=[],this.pendingMetadata=[],this.pendingBytes=0,this.emittedTracks=0,Q.prototype.init.call(this),this.push=function(e){return(// buffer incoming captions until the associated video segment
// finishes
e.content||e.text?this.pendingCaptions.push(e):e.frames?this.pendingMetadata.push(e):void(// Add this track to the list of pending tracks and store
// important information required for the construction of
// the final segment
this.pendingTracks.push(e.track),this.pendingBytes+=e.boxes.byteLength,"video"===e.track.type&&(this.videoTrack=e.track,this.pendingBoxes.push(e.boxes)),"audio"===e.track.type&&(this.audioTrack=e.track,this.pendingBoxes.unshift(e.boxes))))}}).prototype=new ee,Q.prototype.flush=function(e){var t,i,r,s,n=0,a={captions:[],captionStreams:{},metadata:[],info:{}},o=0;if(this.pendingTracks.length<this.numberOfTracks){if("VideoSegmentStream"!==e&&"AudioSegmentStream"!==e||this.remuxTracks)// portion of the segment (meaning that we have only recieved meta-data
// or captions.)
return;if(0===this.pendingTracks.length){// In the case where we receive a flush without any data having been
// received we consider it an emitted track for the purposes of coalescing
// `done` events.
// We do this for the case where there is an audio and video track in the
// segment but no audio data. (seen in several playlists with alternate
// audio tracks and no audio present in the main TS segments.)
this.emittedTracks++,this.emittedTracks>=this.numberOfTracks&&(this.trigger("done"),this.emittedTracks=0);return}}if(this.videoTrack?(o=this.videoTrack.timelineStartInfo.pts,e4.forEach(function(e){a.info[e]=this.videoTrack[e]},this)):this.audioTrack&&(o=this.audioTrack.timelineStartInfo.pts,e2.forEach(function(e){a.info[e]=this.audioTrack[e]},this)),this.videoTrack||this.audioTrack){for(1===this.pendingTracks.length?a.type=this.pendingTracks[0].type:a.type="combined",this.emittedTracks+=this.pendingTracks.length,r=eY.initSegment(this.pendingTracks),a.initSegment=new Uint8Array(r.byteLength),// and track definitions
a.initSegment.set(r),a.data=new Uint8Array(this.pendingBytes),s=0;s<this.pendingBoxes.length;s++)a.data.set(this.pendingBoxes[s],n),n+=this.pendingBoxes[s].byteLength;// Translate caption PTS times into second offsets to match the
// video timeline for the segment, and add track info
for(s=0;s<this.pendingCaptions.length;s++)(t=this.pendingCaptions[s]).startTime=eo.metadataTsToSeconds(t.startPts,o,this.keepOriginalTimestamps),t.endTime=eo.metadataTsToSeconds(t.endPts,o,this.keepOriginalTimestamps),a.captionStreams[t.stream]=!0,a.captions.push(t);// Translate ID3 frame PTS times into second offsets to match the
// video timeline for the segment
for(s=0;s<this.pendingMetadata.length;s++)(i=this.pendingMetadata[s]).cueTime=eo.metadataTsToSeconds(i.pts,o,this.keepOriginalTimestamps),a.metadata.push(i);// We add this to every single emitted segment even though we only need
// Ideally, this would happen immediately on parsing captions,
// but we need to ensure that video data is sent back first
// so that caption timing can be adjusted to match video timing
for(// it for the first
a.metadata.dispatchType=this.metadataStream.dispatchType,this.pendingTracks.length=0,this.videoTrack=null,this.pendingBoxes.length=0,this.pendingCaptions.length=0,this.pendingBytes=0,this.pendingMetadata.length=0,// We include captions and ID3 tags for backwards compatibility,
// ideally we should send only video and audio in the data event
this.trigger("data",a),s=0;s<a.captions.length;s++)t=a.captions[s],this.trigger("caption",t);// Emit each id3 tag to the outside world
// Ideally, this would happen immediately on parsing the tag,
// but we need to ensure that video data is sent back first
// so that ID3 frame timing can be adjusted to match video timing
for(s=0;s<a.metadata.length;s++)i=a.metadata[s],this.trigger("id3Frame",i)}// Only emit `done` if all tracks have been flushed and emitted
this.emittedTracks>=this.numberOfTracks&&(this.trigger("done"),this.emittedTracks=0)},Q.prototype.setRemux=function(e){this.remuxTracks=e},/**
   * A Stream that expects MP2T binary data as input and produces
   * corresponding media segments, suitable for use with Media Source
   * Extension (MSE) implementations that support the ISO BMFF byte
   * stream format, like Chrome.
   */(Y=function(e){var t,i,r=this,s=!0;Y.prototype.init.call(this),e=e||{},this.baseMediaDecodeTime=e.baseMediaDecodeTime||0,this.transmuxPipeline_={},this.setupAacPipeline=function(){var s={};this.transmuxPipeline_=s,s.type="aac",s.metadataStream=new eF.MetadataStream,s.aacStream=new G,s.audioTimestampRolloverStream=new eF.TimestampRolloverStream("audio"),s.timedMetadataTimestampRolloverStream=new eF.TimestampRolloverStream("timed-metadata"),s.adtsStream=new H,s.coalesceStream=new Q(e,s.metadataStream),s.headOfPipeline=s.aacStream,s.aacStream.pipe(s.audioTimestampRolloverStream).pipe(s.adtsStream),s.aacStream.pipe(s.timedMetadataTimestampRolloverStream).pipe(s.metadataStream).pipe(s.coalesceStream),s.metadataStream.on("timestamp",function(e){s.aacStream.setTimestamp(e.timeStamp)}),s.aacStream.on("data",function(n){"timed-metadata"!==n.type&&"audio"!==n.type||s.audioSegmentStream||(i=i||{timelineStartInfo:{baseMediaDecodeTime:r.baseMediaDecodeTime},codec:"adts",type:"audio"},s.coalesceStream.numberOfTracks++,s.audioSegmentStream=new K(i,e),s.audioSegmentStream.on("log",r.getLogTrigger_("audioSegmentStream")),s.audioSegmentStream.on("timingInfo",r.trigger.bind(r,"audioTimingInfo")),s.adtsStream.pipe(s.audioSegmentStream).pipe(s.coalesceStream),r.trigger("trackinfo",{hasAudio:!!i,hasVideo:!!t}))}),s.coalesceStream.on("data",this.trigger.bind(this,"data")),s.coalesceStream.on("done",this.trigger.bind(this,"done")),e5(this,s)},this.setupTsPipeline=function(){var s={};this.transmuxPipeline_=s,s.type="ts",s.metadataStream=new eF.MetadataStream,s.packetStream=new eF.TransportPacketStream,s.parseStream=new eF.TransportParseStream,s.elementaryStream=new eF.ElementaryStream,s.timestampRolloverStream=new eF.TimestampRolloverStream,s.adtsStream=new H,s.h264Stream=new V,s.captionStream=new eF.CaptionStream(e),s.coalesceStream=new Q(e,s.metadataStream),s.headOfPipeline=s.packetStream,s.packetStream.pipe(s.parseStream).pipe(s.elementaryStream).pipe(s.timestampRolloverStream),// demux the streams
s.timestampRolloverStream.pipe(s.h264Stream),s.timestampRolloverStream.pipe(s.adtsStream),s.timestampRolloverStream.pipe(s.metadataStream).pipe(s.coalesceStream),s.h264Stream.pipe(s.captionStream).pipe(s.coalesceStream),s.elementaryStream.on("data",function(n){var a;if("metadata"===n.type){for(a=n.tracks.length;a--;)t||"video"!==n.tracks[a].type?i||"audio"!==n.tracks[a].type||((i=n.tracks[a]).timelineStartInfo.baseMediaDecodeTime=r.baseMediaDecodeTime):(t=n.tracks[a]).timelineStartInfo.baseMediaDecodeTime=r.baseMediaDecodeTime;// hook up the video segment stream to the first track with h264 data
t&&!s.videoSegmentStream&&(s.coalesceStream.numberOfTracks++,s.videoSegmentStream=new X(t,e),s.videoSegmentStream.on("log",r.getLogTrigger_("videoSegmentStream")),s.videoSegmentStream.on("timelineStartInfo",function(t){// When video emits timelineStartInfo data after a flush, we forward that
// info to the AudioSegmentStream, if it exists, because video timeline
// data takes precedence.  Do not do this if keepOriginalTimestamps is set,
// because this is a particularly subtle form of timestamp alteration.
i&&!e.keepOriginalTimestamps&&(i.timelineStartInfo=t,// very earliest DTS we have seen in video because Chrome will
// interpret any video track with a baseMediaDecodeTime that is
// non-zero as a gap.
s.audioSegmentStream.setEarliestDts(t.dts-r.baseMediaDecodeTime))}),s.videoSegmentStream.on("processedGopsInfo",r.trigger.bind(r,"gopInfo")),s.videoSegmentStream.on("segmentTimingInfo",r.trigger.bind(r,"videoSegmentTimingInfo")),s.videoSegmentStream.on("baseMediaDecodeTime",function(e){i&&s.audioSegmentStream.setVideoBaseMediaDecodeTime(e)}),s.videoSegmentStream.on("timingInfo",r.trigger.bind(r,"videoTimingInfo")),s.h264Stream.pipe(s.videoSegmentStream).pipe(s.coalesceStream)),i&&!s.audioSegmentStream&&(// hook up the audio segment stream to the first track with aac data
s.coalesceStream.numberOfTracks++,s.audioSegmentStream=new K(i,e),s.audioSegmentStream.on("log",r.getLogTrigger_("audioSegmentStream")),s.audioSegmentStream.on("timingInfo",r.trigger.bind(r,"audioTimingInfo")),s.audioSegmentStream.on("segmentTimingInfo",r.trigger.bind(r,"audioSegmentTimingInfo")),s.adtsStream.pipe(s.audioSegmentStream).pipe(s.coalesceStream)),r.trigger("trackinfo",{hasAudio:!!i,hasVideo:!!t})}}),s.coalesceStream.on("data",this.trigger.bind(this,"data")),s.coalesceStream.on("id3Frame",function(e){e.dispatchType=s.metadataStream.dispatchType,r.trigger("id3Frame",e)}),s.coalesceStream.on("caption",this.trigger.bind(this,"caption")),s.coalesceStream.on("done",this.trigger.bind(this,"done")),e5(this,s)},this.setBaseMediaDecodeTime=function(r){var s=this.transmuxPipeline_;e.keepOriginalTimestamps||(this.baseMediaDecodeTime=r),i&&(i.timelineStartInfo.dts=void 0,i.timelineStartInfo.pts=void 0,eZ.clearDtsInfo(i),s.audioTimestampRolloverStream&&s.audioTimestampRolloverStream.discontinuity()),t&&(s.videoSegmentStream&&(s.videoSegmentStream.gopCache_=[]),t.timelineStartInfo.dts=void 0,t.timelineStartInfo.pts=void 0,eZ.clearDtsInfo(t),s.captionStream.reset()),s.timestampRolloverStream&&s.timestampRolloverStream.discontinuity()},this.setAudioAppendStart=function(e){i&&this.transmuxPipeline_.audioSegmentStream.setAudioAppendStart(e)},this.setRemux=function(t){var i=this.transmuxPipeline_;e.remux=t,i&&i.coalesceStream&&i.coalesceStream.setRemux(t)},this.alignGopsWith=function(e){t&&this.transmuxPipeline_.videoSegmentStream&&this.transmuxPipeline_.videoSegmentStream.alignGopsWith(e)},this.getLogTrigger_=function(e){var t=this;return function(i){i.stream=e,t.trigger("log",i)}},this.push=function(e){if(s){var t=e0(e);t&&"aac"!==this.transmuxPipeline_.type?this.setupAacPipeline():t||"ts"===this.transmuxPipeline_.type||this.setupTsPipeline(),s=!1}this.transmuxPipeline_.headOfPipeline.push(e)},this.flush=function(){s=!0,this.transmuxPipeline_.headOfPipeline.flush()},this.endTimeline=function(){this.transmuxPipeline_.headOfPipeline.endTimeline()},this.reset=function(){this.transmuxPipeline_.headOfPipeline&&this.transmuxPipeline_.headOfPipeline.reset()},this.resetCaptions=function(){this.transmuxPipeline_.captionStream&&this.transmuxPipeline_.captionStream.reset()}}).prototype=new ee;var e7={Transmuxer:Y},e9={toUnsigned:function(e){return e>>>0},toHexString:function(e){return("00"+e.toString(16)).slice(-2)}},te=function(e){return""+(String.fromCharCode(e[0])+String.fromCharCode(e[1])+String.fromCharCode(e[2])+String.fromCharCode(e[3]))},tt=e9.toUnsigned,ti=function(e,t){var i,r,s,n,a,o=[];if(!t.length)return null;for(i=0;i<e.byteLength;)r=tt(e[i]<<24|e[i+1]<<16|e[i+2]<<8|e[i+3]),s=te(e.subarray(i+4,i+8)),n=r>1?i+r:e.byteLength,s===t[0]&&(1===t.length?// looking for
o.push(e.subarray(i+8,n)):// recursively search for the next box along the path
(a=ti(e.subarray(i+8,n),t.slice(1))).length&&(o=o.concat(a))),i=n;// we've finished searching all of data
return o},tr=e9.toUnsigned,ts=et.getUint64,tn=function(e){var t={version:e[0],flags:new Uint8Array(e.subarray(1,4))};return 1===t.version?t.baseMediaDecodeTime=ts(e.subarray(4)):t.baseMediaDecodeTime=tr(e[4]<<24|e[5]<<16|e[6]<<8|e[7]),t},ta=function(e){return{isLeading:(12&e[0])>>>2,dependsOn:3&e[0],isDependedOn:(192&e[1])>>>6,hasRedundancy:(48&e[1])>>>4,paddingValue:(14&e[1])>>>1,isNonSyncSample:1&e[1],degradationPriority:e[2]<<8|e[3]}},to=function(e){var t,i={version:e[0],flags:new Uint8Array(e.subarray(1,4)),samples:[]},r=new DataView(e.buffer,e.byteOffset,e.byteLength),s=1&i.flags[2],n=4&i.flags[2],a=1&i.flags[1],o=2&i.flags[1],l=4&i.flags[1],u=8&i.flags[1],h=r.getUint32(4),d=8;for(s&&(// 32 bit signed integer
i.dataOffset=r.getInt32(d),d+=4),n&&h&&(t={flags:ta(e.subarray(d,d+4))},d+=4,a&&(t.duration=r.getUint32(d),d+=4),o&&(t.size=r.getUint32(d),d+=4),u&&(1===i.version?t.compositionTimeOffset=r.getInt32(d):t.compositionTimeOffset=r.getUint32(d),d+=4),i.samples.push(t),h--);h--;)t={},a&&(t.duration=r.getUint32(d),d+=4),o&&(t.size=r.getUint32(d),d+=4),l&&(t.flags=ta(e.subarray(d,d+4)),d+=4),u&&(1===i.version?t.compositionTimeOffset=r.getInt32(d):t.compositionTimeOffset=r.getUint32(d),d+=4),i.samples.push(t);return i},tl=function(e){var t,i=new DataView(e.buffer,e.byteOffset,e.byteLength),r={version:e[0],flags:new Uint8Array(e.subarray(1,4)),trackId:i.getUint32(4)},s=1&r.flags[2],n=2&r.flags[2],a=8&r.flags[2],o=16&r.flags[2],l=32&r.flags[2],u=65536&r.flags[0],h=131072&r.flags[0];return t=8,s&&(t+=4,// FIXME: should we read the full 64 bits?
r.baseDataOffset=i.getUint32(12),t+=4),n&&(r.sampleDescriptionIndex=i.getUint32(t),t+=4),a&&(r.defaultSampleDuration=i.getUint32(t),t+=4),o&&(r.defaultSampleSize=i.getUint32(t),t+=4),l&&(r.defaultSampleFlags=i.getUint32(t)),u&&(r.durationIsEmpty=!0),!s&&h&&(r.baseDataOffsetIsMoof=!0),r},tu="undefined"!=typeof window?window:void 0!==Z?Z:"undefined"!=typeof self?self:{},th=ed.discardEmulationPreventionBytes,td=ew.CaptionStream,tc=function(e,t){for(var i=e,r=0;r<t.length;r++){var s=t[r];if(i<s.size)return s;i-=s.size}return null},tp=function(e,t,i){var r,s,n,a,o=new DataView(e.buffer,e.byteOffset,e.byteLength),l={logs:[],seiNals:[]};for(s=0;s+4<e.length;s+=n)if(n=o.getUint32(s),s+=4,!(n<=0))switch(31&e[s]){case 6:var u=e.subarray(s+1,s+1+n),h=tc(s,t);if(r={nalUnitType:"sei_rbsp",size:n,data:u,escapedRBSP:th(u),trackId:i},h)r.pts=h.pts,r.dts=h.dts,a=h;else if(a)// If a matching sample cannot be found, use the last
// sample's values as they should be as close as possible
r.pts=a.pts,r.dts=a.dts;else{l.logs.push({level:"warn",message:"We've encountered a nal unit without data at "+s+" for trackId "+i+". See mux.js#223."});break}l.seiNals.push(r)}return l},tm=function(e,t,i){var r=t,s=i.defaultSampleDuration||0,n=i.defaultSampleSize||0,a=i.trackId,o=[];return e.forEach(function(e){var t=to(e).samples;t.forEach(function(e){void 0===e.duration&&(e.duration=s),void 0===e.size&&(e.size=n),e.trackId=a,e.dts=r,void 0===e.compositionTimeOffset&&(e.compositionTimeOffset=0),"bigint"==typeof r?(e.pts=r+tu.BigInt(e.compositionTimeOffset),r+=tu.BigInt(e.duration)):(e.pts=r+e.compositionTimeOffset,r+=e.duration)}),o=o.concat(t)}),o},tf=function(e,t){// To get the samples
var i=ti(e,["moof","traf"]),r=ti(e,["mdat"]),s={},n=[];// To get SEI NAL units
return r.forEach(function(e,t){var r=i[t];n.push({mdat:e,traf:r})}),n.forEach(function(e){var i,r=e.mdat,n=e.traf,a=tl(ti(n,["tfhd"])[0]),o=a.trackId,l=ti(n,["tfdt"]),u=l.length>0?tn(l[0]).baseMediaDecodeTime:0,h=ti(n,["trun"]);t===o&&h.length>0&&(i=tp(r,tm(h,u,a),o),s[o]||(s[o]={seiNals:[],logs:[]}),s[o].seiNals=s[o].seiNals.concat(i.seiNals),s[o].logs=s[o].logs.concat(i.logs))}),s},tg=function(e,t,i){if(null===t)return null;var r=tf(e,t)[t]||{};return{seiNals:r.seiNals,logs:r.logs,timescale:i}},ty=function(){var e,t,i,r,s,n,a=!1;/**
      * A method to indicate whether a CaptionParser has been initalized
      * @returns {Boolean}
     **/this.isInitialized=function(){return a},/**
      * Initializes the underlying CaptionStream, SEI NAL parsing
      * and management, and caption collection
     **/this.init=function(t){e=new td,a=!0,n=!!t&&t.isPartial,e.on("data",function(e){// Convert to seconds in the source's timescale
e.startTime=e.startPts/r,e.endTime=e.endPts/r,s.captions.push(e),s.captionStreams[e.stream]=!0}),e.on("log",function(e){s.logs.push(e)})},/**
      * Determines if a new video track will be selected
      * or if the timescale changed
      * @return {Boolean}
     **/this.isNewInit=function(e,t){return(!e||0!==e.length)&&(!t||"object"!=typeof t||0!==Object.keys(t).length)&&(i!==e[0]||r!==t[i])},/**
      * Parses out SEI captions and interacts with underlying
      * CaptionStream to return dispatched captions
      *
      * @param {Uint8Array} segment - The fmp4 segment containing embedded captions
      * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment
      * @param {Object.<Number, Number>} timescales - The timescales found in the init segment
      * @see parseEmbeddedCaptions
      * @see m2ts/caption-stream.js
     **/this.parse=function(e,n,a){var o;if(!this.isInitialized()||!n||!a)return null;// This is not likely to be a video segment
// Now that a timescale and trackId is set, parse cached segments
if(this.isNewInit(n,a))r=a[// Use the first video track only as there is no
// mechanism to switch to other video tracks
i=n[0]];// If an init segment has not been seen yet, hold onto segment
else if(null===i||!r)return t.push(e),null;for(;t.length>0;){var l=t.shift();this.parse(l,n,a)}return((o=tg(e,i,r))&&o.logs&&(s.logs=s.logs.concat(o.logs)),null!==o&&o.seiNals)?(this.pushNals(o.seiNals),this.flushStream(),s):s.logs.length?{logs:s.logs,captions:[],captionStreams:[]}:null},/**
      * Pushes SEI NALUs onto CaptionStream
      * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`
      * Assumes that `parseCaptionNals` has been called first
      * @see m2ts/caption-stream.js
      **/this.pushNals=function(t){if(!this.isInitialized()||!t||0===t.length)return null;t.forEach(function(t){e.push(t)})},/**
      * Flushes underlying CaptionStream to dispatch processed, displayable captions
      * @see m2ts/caption-stream.js
     **/this.flushStream=function(){if(!this.isInitialized())return null;n?e.partialFlush():e.flush()},/**
      * Reset caption buckets for new data
     **/this.clearParsedCaptions=function(){s.captions=[],s.captionStreams={},s.logs=[]},/**
      * Resets underlying CaptionStream
      * @see m2ts/caption-stream.js
     **/this.resetCaptionStream=function(){if(!this.isInitialized())return null;e.reset()},/**
      * Convenience method to clear all captions flushed from the
      * CaptionStream and still being parsed
      * @see m2ts/caption-stream.js
     **/this.clearAllCaptions=function(){this.clearParsedCaptions(),this.resetCaptionStream()},/**
      * Reset caption parser
     **/this.reset=function(){t=[],i=null,r=null,s?this.clearParsedCaptions():s={captions:[],// CC1, CC2, CC3, CC4
captionStreams:{},logs:[]},this.resetCaptionStream()},this.reset()},t_=function(e){for(var t=0,i=String.fromCharCode(e[0]),r="";"\x00"!==i;)r+=i,i=String.fromCharCode(e[++t]);// Add nullChar
return r+i},tb=et.getUint64,tv=function(e,t){var i="\x00"!==t.scheme_id_uri,r=0===e&&tT(t.presentation_time_delta)&&i,s=1===e&&tT(t.presentation_time)&&i;return!(e>1)&&r||s},tT=function(e){return void 0!==e||null!==e},tS=e9.toUnsigned,tE=e9.toHexString,tw={parseEmsgBox:function(e){// version + flags
var t,i,r,s,n,a,o,l=4,u=e[0];if(0===u){t=t_(e.subarray(l)),l+=t.length,i=t_(e.subarray(l)),l+=i.length;var h=new DataView(e.buffer);r=h.getUint32(l),l+=4,n=h.getUint32(l),l+=4,a=h.getUint32(l),l+=4,o=h.getUint32(l),l+=4}else if(1===u){var h=new DataView(e.buffer);r=h.getUint32(l),l+=4,s=tb(e.subarray(l)),l+=8,a=h.getUint32(l),l+=4,o=h.getUint32(l),l+=4,t=t_(e.subarray(l)),l+=t.length,i=t_(e.subarray(l)),l+=i.length}var d={scheme_id_uri:t,value:i,// if timescale is undefined or 0 set to 1 
timescale:r||1,presentation_time:s,presentation_time_delta:n,event_duration:a,id:o,message_data:new Uint8Array(e.subarray(l,e.byteLength))};return tv(u,d)?d:void 0},scaleTime:function(e,t,i,r){return e||0===e?e/t:r+i/t}},tk=et.getUint64,tC=eU.parseId3Frames,tx={// export mp4 inspector's findBox and parseType for backwards compatibility
findBox:ti,parseType:te,timescale:function(e){return ti(e,["moov","trak"]).reduce(function(e,t){var i,r,s,n;return(i=ti(t,["tkhd"])[0])&&(r=0===i[0]?12:20,s=tS(i[r]<<24|i[r+1]<<16|i[r+2]<<8|i[r+3]),n=ti(t,["mdia","mdhd"])[0])?(r=0===n[0]?12:20,e[s]=tS(n[r]<<24|n[r+1]<<16|n[r+2]<<8|n[r+3]),e):null},{})},startTime:function(e,t){var i=ti(t,["moof","traf"]).reduce(function(t,i){let r;var s,n=ti(i,["tfhd"])[0],a=e[tS(n[4]<<24|n[5]<<16|n[6]<<8|n[7])]||9e4,o=ti(i,["tfdt"])[0],l=new DataView(o.buffer,o.byteOffset,o.byteLength);// get the track id from the tfhd
return"bigint"==typeof(s=1===o[0]?tk(o.subarray(4,12)):l.getUint32(4))?r=s/tu.BigInt(a):"number"!=typeof s||isNaN(s)||(r=s/a),r<Number.MAX_SAFE_INTEGER&&(r=Number(r)),r<t&&(t=r),t},1/0);return"bigint"==typeof i||isFinite(i)?i:0},compositionStartTime:function(e,t){var i,r=ti(t,["moof","traf"]),s=0,n=0;if(r&&r.length){// The spec states that track run samples contained within a `traf` box are contiguous, but
// it does not explicitly state whether the `traf` boxes themselves are contiguous.
// We will assume that they are, so we only need the first to calculate start time.
var a=ti(r[0],["tfhd"])[0],o=ti(r[0],["trun"])[0],l=ti(r[0],["tfdt"])[0];if(a&&(i=tl(a).trackId),l&&(s=tn(l).baseMediaDecodeTime),o){var u=to(o);u.samples&&u.samples.length&&(n=u.samples[0].compositionTimeOffset||0)}}// Get timescale for this specific track. Assume a 90kHz clock if no timescale was
// specified.
var h=e[i]||9e4;// return the composition start time, in seconds
"bigint"==typeof s&&(n=tu.BigInt(n),h=tu.BigInt(h));var d=(s+n)/h;return"bigint"==typeof d&&d<Number.MAX_SAFE_INTEGER&&(d=Number(d)),d},videoTrackIds:function(e){var t=ti(e,["moov","trak"]),i=[];return t.forEach(function(e){var t=ti(e,["mdia","hdlr"]),r=ti(e,["tkhd"]);t.forEach(function(e,t){var s,n,a=te(e.subarray(8,12)),o=r[t];"vide"===a&&(n=0===(s=new DataView(o.buffer,o.byteOffset,o.byteLength)).getUint8(0)?s.getUint32(12):s.getUint32(20),i.push(n))})}),i},tracks:function(e){var t=ti(e,["moov","trak"]),i=[];return t.forEach(function(e){var t={},r=ti(e,["tkhd"])[0];r&&(l=(o=new DataView(r.buffer,r.byteOffset,r.byteLength)).getUint8(0),t.id=0===l?o.getUint32(12):o.getUint32(20));var s=ti(e,["mdia","hdlr"])[0];// type
if(s){var n=te(s.subarray(8,12));"vide"===n?t.type="video":"soun"===n?t.type="audio":t.type=n}// codec
var a=ti(e,["mdia","minf","stbl","stsd"])[0];if(a){var o,l,u,h=a.subarray(8);// gives the codec type string
t.codec=te(h.subarray(4,8));var d=ti(h,[t.codec])[0];d&&(/^[asm]vc[1-9]$/i.test(t.codec)?"avcC"===te(// we don't need anything but the "config" parameter of the
// avc1 codecBox
(u=d.subarray(78)).subarray(4,8))&&u.length>11?(t.codec+=".",// profile idc
t.codec+=tE(u[9]),t.codec+=tE(u[10]),t.codec+=tE(u[11])):// and are using the default
t.codec="avc1.4d400d":/^mp4[a,v]$/i.test(t.codec)?"esds"===te(// we do not need anything but the streamDescriptor of the mp4a codecBox
(u=d.subarray(28)).subarray(4,8))&&u.length>20&&0!==u[19]?(t.codec+="."+tE(u[19]),t.codec+="."+tE(u[20]>>>2&63).replace(/^0/,"")):// and are using the default
t.codec="mp4a.40.2":t.codec=t.codec.toLowerCase())}var c=ti(e,["mdia","mdhd"])[0];c&&(t.timescale=J(c)),i.push(t)}),i},getTimescaleFromMediaHeader:J=function(e){var t=0===e[0]?12:20;return tS(e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3])},getEmsgID3:function(e,t=0){return ti(e,["emsg"]).map(e=>{var i=tw.parseEmsgBox(new Uint8Array(e)),r=tC(i.message_data);return{cueTime:tw.scaleTime(i.presentation_time,i.timescale,i.presentation_time_delta,t),duration:tw.scaleTime(i.event_duration,i.timescale),frames:r}})}},tD=function(e){var t=31&e[1];return t<<=8,t|=e[2]},tI=function(e){return!!(64&e[1])},tA=function(e){var t=0;// if an adaption field is present, its length is specified by the
return(48&e[3])>>>4>1&&(t+=e[4]+1),t},tL=function(e){switch(e){case 5:return"slice_layer_without_partitioning_rbsp_idr";case 6:return"sei_rbsp";case 7:return"seq_parameter_set_rbsp";case 8:return"pic_parameter_set_rbsp";case 9:return"access_unit_delimiter_rbsp";default:return null}},tP=eI.handleRollover,tO={};tO.ts={parseType:function(e,t){var i=tD(e);return 0===i?"pat":i===t?"pmt":t?"pes":null},parsePat:function(e){var t=tI(e),i=4+tA(e);return t&&(i+=e[i]+1),(31&e[i+10])<<8|e[i+11]},parsePmt:function(e){var t,i={},r=tI(e),s=4+tA(e);// PMTs can be sent ahead of the time when they should actually
// take effect. We don't believe this should ever be the case
// for HLS but we'll ignore "forward" PMT declarations if we see
// them. Future PMT declarations have the current_next_indicator
// set to zero.
if(r&&(s+=e[s]+1),1&e[s+5]){t=3+((15&e[s+1])<<8|e[s+2])-4;// to determine where the table is, we have to figure out how
for(var n=12+((15&e[s+10])<<8|e[s+11]);n<t;){var a=s+n;// add an entry that maps the elementary_pid to the stream_type
i[(31&e[a+1])<<8|e[a+2]]=e[a],// skip past the elementary stream descriptors, if present
n+=((15&e[a+3])<<8|e[a+4])+5}return i}},parsePayloadUnitStartIndicator:tI,parsePesType:function(e,t){switch(t[tD(e)]){case ek.H264_STREAM_TYPE:return"video";case ek.ADTS_STREAM_TYPE:return"audio";case ek.METADATA_STREAM_TYPE:return"timed-metadata";default:return null}},parsePesTime:function(e){if(!tI(e))return null;var t,i=4+tA(e);if(i>=e.byteLength)// "For transport stream packets carrying PES packets, stuffing is needed when there
//  is insufficient PES packet data to completely fill the transport stream packet
//  payload bytes. Stuffing is accomplished by defining an adaptation field longer than
//  the sum of the lengths of the data elements in it, so that the payload bytes
//  remaining after the adaptation field exactly accommodates the available PES packet
//  data."
//
// If the offset is >= the length of the packet, then the packet contains no data
// and instead is just adaption field stuffing bytes
return null;var r=null;return 192&// and a DTS value. Determine what combination of values is
// available to work with.
(t=e[i+7])&&(// on how they are encoded, see
// http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
(r={}).pts=(14&e[i+9])<<27|(255&e[i+10])<<20|(254&e[i+11])<<12|(255&e[i+12])<<5|(254&e[i+13])>>>3,r.pts*=4,r.pts+=(6&e[i+13])>>>1,r.dts=r.pts,64&t&&(r.dts=(14&e[i+14])<<27|(255&e[i+15])<<20|(254&e[i+16])<<12|(255&e[i+17])<<5|(254&e[i+18])>>>3,r.dts*=4,r.dts+=(6&e[i+18])>>>1)),r},videoPacketContainsKeyFrame:function(e){for(var t=4+tA(e),i=e.subarray(t),r=0,s=0,n=!1;s<i.byteLength-3;s++)if(1===i[s+2]){// the sync point is properly aligned
r=s+5;break}for(;r<i.byteLength;)// a NAL unit boundary
switch(i[r]){case 0:// skip past non-sync sequences
if(0!==i[r-1]){r+=2;break}if(0!==i[r-2]){r++;break}s+3!==r-2&&"slice_layer_without_partitioning_rbsp_idr"===tL(31&i[s+3])&&(n=!0);do r++;while(1!==i[r]&&r<i.length)s=r-2,r+=3;break;case 1:// skip past non-sync sequences
if(0!==i[r-1]||0!==i[r-2]){r+=3;break}"slice_layer_without_partitioning_rbsp_idr"===tL(31&i[s+3])&&(n=!0),s=r-2,r+=3;break;default:// the current byte isn't a one or zero, so it cannot be part
// of a sync sequence
r+=3}return i=i.subarray(s),r-=s,s=0,i&&i.byteLength>3&&"slice_layer_without_partitioning_rbsp_idr"===tL(31&i[s+3])&&(n=!0),n}},tO.aac=eK;var tR=eo.ONE_SECOND_IN_TS,tN=function(e,t){for(var i,r=0,s=188;s<e.byteLength;){// Look for a pair of start and end sync bytes in the data..
if(71===e[r]&&71===e[s]){switch(// We found a packet
i=e.subarray(r,s),tO.ts.parseType(i,t.pid)){case"pat":t.pid=tO.ts.parsePat(i);break;case"pmt":var n=tO.ts.parsePmt(i);t.table=t.table||{},Object.keys(n).forEach(function(e){t.table[e]=n[e]})}r+=188,s+=188;continue}// If we get here, we have somehow become de-synchronized and we need to step
// forward one byte at a time until we find a pair of sync bytes that denote
// a packet
r++,s++}},tM=function(e,t,i){for(var r,s,n,a,o=0,l=188,u=!1;l<=e.byteLength;){// Look for a pair of start and end sync bytes in the data..
if(71===e[o]&&(71===e[l]||l===e.byteLength)){if(// We found a packet
r=e.subarray(o,l),"pes"===tO.ts.parseType(r,t.pid)&&(s=tO.ts.parsePesType(r,t.table),n=tO.ts.parsePayloadUnitStartIndicator(r),"audio"===s&&n&&(a=tO.ts.parsePesTime(r))&&(a.type="audio",i.audio.push(a),u=!0)),u)break;o+=188,l+=188;continue}// If we get here, we have somehow become de-synchronized and we need to step
// forward one byte at a time until we find a pair of sync bytes that denote
// a packet
o++,l++}// Start walking from end of segment to get last audio packet
for(o=(l=e.byteLength)-188,u=!1;o>=0;){// Look for a pair of start and end sync bytes in the data..
if(71===e[o]&&(71===e[l]||l===e.byteLength)){if(// We found a packet
r=e.subarray(o,l),"pes"===tO.ts.parseType(r,t.pid)&&(s=tO.ts.parsePesType(r,t.table),n=tO.ts.parsePayloadUnitStartIndicator(r),"audio"===s&&n&&(a=tO.ts.parsePesTime(r))&&(a.type="audio",i.audio.push(a),u=!0)),u)break;o-=188,l-=188;continue}// If we get here, we have somehow become de-synchronized and we need to step
// forward one byte at a time until we find a pair of sync bytes that denote
// a packet
o--,l--}},tU=function(e,t,i){for(var r,s,n,a,o,l,u,h=0,d=188,c=!1,p={data:[],size:0};d<e.byteLength;){// Look for a pair of start and end sync bytes in the data..
if(71===e[h]&&71===e[d]){if(// We found a packet
r=e.subarray(h,d),"pes"===tO.ts.parseType(r,t.pid)&&(s=tO.ts.parsePesType(r,t.table),n=tO.ts.parsePayloadUnitStartIndicator(r),"video"===s&&(n&&!c&&(a=tO.ts.parsePesTime(r))&&(a.type="video",i.video.push(a),c=!0),!i.firstKeyFrame))){if(n&&0!==p.size){for(o=new Uint8Array(p.size),l=0;p.data.length;)u=p.data.shift(),o.set(u,l),l+=u.byteLength;if(tO.ts.videoPacketContainsKeyFrame(o)){var m=tO.ts.parsePesTime(o);// PTS/DTS may not be available. Simply *not* setting
// the keyframe seems to work fine with HLS playback
// and definitely preferable to a crash with TypeError...
m?(i.firstKeyFrame=m,i.firstKeyFrame.type="video"):console.warn("Failed to extract PTS/DTS from PES at first keyframe. This could be an unusual TS segment, or else mux.js did not parse your TS segment correctly. If you know your TS segments do contain PTS/DTS on keyframes please file a bug report! You can try ffprobe to double check for yourself.")}p.size=0}p.data.push(r),p.size+=r.byteLength}if(c&&i.firstKeyFrame)break;h+=188,d+=188;continue}// If we get here, we have somehow become de-synchronized and we need to step
// forward one byte at a time until we find a pair of sync bytes that denote
// a packet
h++,d++}// Start walking from end of segment to get last video packet
for(h=(d=e.byteLength)-188,c=!1;h>=0;){// Look for a pair of start and end sync bytes in the data..
if(71===e[h]&&71===e[d]){if(// We found a packet
r=e.subarray(h,d),"pes"===tO.ts.parseType(r,t.pid)&&(s=tO.ts.parsePesType(r,t.table),n=tO.ts.parsePayloadUnitStartIndicator(r),"video"===s&&n&&(a=tO.ts.parsePesTime(r))&&(a.type="video",i.video.push(a),c=!0)),c)break;h-=188,d-=188;continue}// If we get here, we have somehow become de-synchronized and we need to step
// forward one byte at a time until we find a pair of sync bytes that denote
// a packet
h--,d--}},tB=function(e,t){if(e.audio&&e.audio.length){var i=t;(void 0===i||isNaN(i))&&(i=e.audio[0].dts),e.audio.forEach(function(e){e.dts=tP(e.dts,i),e.pts=tP(e.pts,i),e.dtsTime=e.dts/tR,e.ptsTime=e.pts/tR})}if(e.video&&e.video.length){var r=t;if((void 0===r||isNaN(r))&&(r=e.video[0].dts),e.video.forEach(function(e){e.dts=tP(e.dts,r),e.pts=tP(e.pts,r),e.dtsTime=e.dts/tR,e.ptsTime=e.pts/tR}),e.firstKeyFrame){var s=e.firstKeyFrame;s.dts=tP(s.dts,r),s.pts=tP(s.pts,r),s.dtsTime=s.dts/tR,s.ptsTime=s.pts/tR}}},tF=function(e){for(var t,i=!1,r=0,s=null,n=null,a=0,o=0;e.length-o>=3;){switch(tO.aac.parseType(e,o)){case"timed-metadata":// Exit early because we don't have enough to parse
// the ID3 tag header
if(e.length-o<10||(a=tO.aac.parseId3TagSize(e,o))>e.length){i=!0;break}null===n&&(t=e.subarray(o,o+a),n=tO.aac.parseAacTimestamp(t)),o+=a;break;case"audio":// Exit early because we don't have enough to parse
// the ADTS frame header
if(e.length-o<7||(a=tO.aac.parseAdtsSize(e,o))>e.length){i=!0;break}null===s&&(t=e.subarray(o,o+a),s=tO.aac.parseSampleRate(t)),r++,o+=a;break;default:o++}if(i)return null}if(null===s||null===n)return null;var l=tR/s;return{audio:[{type:"audio",dts:n,pts:n},{type:"audio",dts:n+1024*r*l,pts:n+1024*r*l}]}},tj=function(e){var t={pid:null,table:null},i={};for(var r in tN(e,t),t.table)if(t.table.hasOwnProperty(r))switch(t.table[r]){case ek.H264_STREAM_TYPE:i.video=[],tU(e,t,i),0===i.video.length&&delete i.video;break;case ek.ADTS_STREAM_TYPE:i.audio=[],tM(e,t,i),0===i.audio.length&&delete i.audio}return i},tq={inspect:function(e,t){var i;return(i=tO.aac.isLikelyAacData(e)?tF(e):tj(e))&&(i.audio||i.video)?(tB(i,t),i):null},parseAudioPes_:tM};/* global self *//**
   * Re-emits transmuxer events by converting them into messages to the
   * world outside the worker.
   *
   * @param {Object} transmuxer the transmuxer to wire events on
   * @private
   */let t$=function(e,t){t.on("data",function(t){// transfer ownership of the underlying ArrayBuffer
// instead of doing a copy to save memory
// ArrayBuffers are transferable but generic TypedArrays are not
// @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)
let i=t.initSegment;t.initSegment={data:i.buffer,byteOffset:i.byteOffset,byteLength:i.byteLength};let r=t.data;t.data=r.buffer,e.postMessage({action:"data",segment:t,byteOffset:r.byteOffset,byteLength:r.byteLength},[t.data])}),t.on("done",function(t){e.postMessage({action:"done"})}),t.on("gopInfo",function(t){e.postMessage({action:"gopInfo",gopInfo:t})}),t.on("videoSegmentTimingInfo",function(t){let i={start:{decode:eo.videoTsToSeconds(t.start.dts),presentation:eo.videoTsToSeconds(t.start.pts)},end:{decode:eo.videoTsToSeconds(t.end.dts),presentation:eo.videoTsToSeconds(t.end.pts)},baseMediaDecodeTime:eo.videoTsToSeconds(t.baseMediaDecodeTime)};t.prependedContentDuration&&(i.prependedContentDuration=eo.videoTsToSeconds(t.prependedContentDuration)),e.postMessage({action:"videoSegmentTimingInfo",videoSegmentTimingInfo:i})}),t.on("audioSegmentTimingInfo",function(t){// Note that all times for [audio/video]SegmentTimingInfo events are in video clock
let i={start:{decode:eo.videoTsToSeconds(t.start.dts),presentation:eo.videoTsToSeconds(t.start.pts)},end:{decode:eo.videoTsToSeconds(t.end.dts),presentation:eo.videoTsToSeconds(t.end.pts)},baseMediaDecodeTime:eo.videoTsToSeconds(t.baseMediaDecodeTime)};t.prependedContentDuration&&(i.prependedContentDuration=eo.videoTsToSeconds(t.prependedContentDuration)),e.postMessage({action:"audioSegmentTimingInfo",audioSegmentTimingInfo:i})}),t.on("id3Frame",function(t){e.postMessage({action:"id3Frame",id3Frame:t})}),t.on("caption",function(t){e.postMessage({action:"caption",caption:t})}),t.on("trackinfo",function(t){e.postMessage({action:"trackinfo",trackInfo:t})}),t.on("audioTimingInfo",function(t){// convert to video TS since we prioritize video time over audio
e.postMessage({action:"audioTimingInfo",audioTimingInfo:{start:eo.videoTsToSeconds(t.start),end:eo.videoTsToSeconds(t.end)}})}),t.on("videoTimingInfo",function(t){e.postMessage({action:"videoTimingInfo",videoTimingInfo:{start:eo.videoTsToSeconds(t.start),end:eo.videoTsToSeconds(t.end)}})}),t.on("log",function(t){e.postMessage({action:"log",log:t})})};/**
   * All incoming messages route through this hash. If no function exists
   * to handle an incoming message, then we ignore the message.
   *
   * @class MessageHandlers
   * @param {Object} options the options to initialize with
   */class tH{constructor(e,t){this.options=t||{},this.self=e,this.init()}/**
     * initialize our web worker and wire all the events.
     */init(){this.transmuxer&&this.transmuxer.dispose(),this.transmuxer=new e7.Transmuxer(this.options),t$(this.self,this.transmuxer)}pushMp4Captions(e){this.captionParser||(this.captionParser=new ty,this.captionParser.init());let t=new Uint8Array(e.data,e.byteOffset,e.byteLength),i=this.captionParser.parse(t,e.trackIds,e.timescales);this.self.postMessage({action:"mp4Captions",captions:i&&i.captions||[],logs:i&&i.logs||[],data:t.buffer},[t.buffer])}probeMp4StartTime({timescales:e,data:t}){let i=tx.startTime(e,t);this.self.postMessage({action:"probeMp4StartTime",startTime:i,data:t},[t.buffer])}probeMp4Tracks({data:e}){let t=tx.tracks(e);this.self.postMessage({action:"probeMp4Tracks",tracks:t,data:e},[e.buffer])}/**
     * Probes an mp4 segment for EMSG boxes containing ID3 data.
     * https://aomediacodec.github.io/id3-emsg/
     *
     * @param {Uint8Array} data segment data
     * @param {number} offset segment start time
     * @return {Object[]} an array of ID3 frames
     */probeEmsgID3({data:e,offset:t}){let i=tx.getEmsgID3(e,t);this.self.postMessage({action:"probeEmsgID3",id3Frames:i,emsgData:e},[e.buffer])}/**
     * Probe an mpeg2-ts segment to determine the start time of the segment in it's
     * internal "media time," as well as whether it contains video and/or audio.
     *
     * @private
     * @param {Uint8Array} bytes - segment bytes
     * @param {number} baseStartTime
     *        Relative reference timestamp used when adjusting frame timestamps for rollover.
     *        This value should be in seconds, as it's converted to a 90khz clock within the
     *        function body.
     * @return {Object} The start time of the current segment in "media time" as well as
     *                  whether it contains video and/or audio
     */probeTs({data:e,baseStartTime:t}){let i="number"!=typeof t||isNaN(t)?void 0:t*eo.ONE_SECOND_IN_TS,r=tq.inspect(e,i),s=null;r&&((s={// each type's time info comes back as an array of 2 times, start and end
hasVideo:r.video&&2===r.video.length||!1,hasAudio:r.audio&&2===r.audio.length||!1}).hasVideo&&(s.videoStart=r.video[0].ptsTime),s.hasAudio&&(s.audioStart=r.audio[0].ptsTime)),this.self.postMessage({action:"probeTs",result:s,data:e},[e.buffer])}clearAllMp4Captions(){this.captionParser&&this.captionParser.clearAllCaptions()}clearParsedMp4Captions(){this.captionParser&&this.captionParser.clearParsedCaptions()}/**
     * Adds data (a ts segment) to the start of the transmuxer pipeline for
     * processing.
     *
     * @param {ArrayBuffer} data data to push into the muxer
     */push(e){// Cast array buffer to correct type for transmuxer
let t=new Uint8Array(e.data,e.byteOffset,e.byteLength);this.transmuxer.push(t)}/**
     * Recreate the transmuxer so that the next segment added via `push`
     * start with a fresh transmuxer.
     */reset(){this.transmuxer.reset()}/**
     * Set the value that will be used as the `baseMediaDecodeTime` time for the
     * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`
     * set relative to the first based on the PTS values.
     *
     * @param {Object} data used to set the timestamp offset in the muxer
     */setTimestampOffset(e){let t=e.timestampOffset||0;this.transmuxer.setBaseMediaDecodeTime(Math.round(eo.secondsToVideoTs(t)))}setAudioAppendStart(e){this.transmuxer.setAudioAppendStart(Math.ceil(eo.secondsToVideoTs(e.appendStart)))}setRemux(e){this.transmuxer.setRemux(e.remux)}/**
     * Forces the pipeline to finish processing the last segment and emit it's
     * results.
     *
     * @param {Object} data event data, not really used
     */flush(e){this.transmuxer.flush(),self.postMessage({action:"done",type:"transmuxed"})}endTimeline(){this.transmuxer.endTimeline(),// timelines
self.postMessage({action:"endedtimeline",type:"transmuxed"})}alignGopsWith(e){this.transmuxer.alignGopsWith(e.gopsToAlignWith.slice())}}/**
   * Our web worker interface so that things can talk to mux.js
   * that will be running in a web worker. the scope is passed to this by
   * webworkify.
   *
   * @param {Object} self the scope for the web worker
   */self.onmessage=function(e){if("init"===e.data.action&&e.data.options){this.messageHandlers=new tH(self,e.data.options);return}this.messageHandlers||(this.messageHandlers=new tH(self)),e.data&&e.data.action&&"init"!==e.data.action&&this.messageHandlers[e.data.action]&&this.messageHandlers[e.data.action](e.data)}}));var l$=lB(lq);/* rollup-plugin-worker-factory end for worker!/home/runner/work/http-streaming/http-streaming/src/transmuxer-worker.js */const lH=(e,t,i)=>{let{type:r,initSegment:s,captions:n,captionStreams:a,metadata:o,videoFrameDtsTime:l,videoFramePtsTime:u}=e.data.segment;t.buffer.push({captions:n,captionStreams:a,metadata:o});let h=e.data.segment.boxes||{data:e.data.segment.data},d={type:r,// cast ArrayBuffer to TypedArray
data:new Uint8Array(h.data,h.data.byteOffset,h.data.byteLength),initSegment:new Uint8Array(s.data,s.byteOffset,s.byteLength)};void 0!==l&&(d.videoFrameDtsTime=l),void 0!==u&&(d.videoFramePtsTime=u),i(d)},lV=({transmuxedData:e,callback:t})=>{// Previously we only returned data on data events,
// not on done events. Clear out the buffer to keep that consistent.
e.buffer=[],// have received
t(e)},lz=(e,t)=>{t.gopInfo=e.data.gopInfo},lW=e=>{let{transmuxer:t,bytes:i,audioAppendStart:r,gopsToAlignWith:s,remux:n,onData:a,onTrackInfo:o,onAudioTimingInfo:l,onVideoTimingInfo:u,onVideoSegmentTimingInfo:h,onAudioSegmentTimingInfo:d,onId3:c,onCaptions:p,onDone:m,onEndedTimeline:f,onTransmuxerLog:g,isEndOfTimeline:y}=e,_={buffer:[]},b=y;if(t.onmessage=i=>{t.currentTransmux===e&&("data"===i.data.action&&lH(i,_,a),"trackinfo"===i.data.action&&o(i.data.trackInfo),"gopInfo"===i.data.action&&lz(i,_),"audioTimingInfo"===i.data.action&&l(i.data.audioTimingInfo),"videoTimingInfo"===i.data.action&&u(i.data.videoTimingInfo),"videoSegmentTimingInfo"===i.data.action&&h(i.data.videoSegmentTimingInfo),"audioSegmentTimingInfo"===i.data.action&&d(i.data.audioSegmentTimingInfo),"id3Frame"===i.data.action&&c([i.data.id3Frame],i.data.id3Frame.dispatchType),"caption"===i.data.action&&p(i.data.caption),"endedtimeline"===i.data.action&&(b=!1,f()),"log"===i.data.action&&g(i.data.log),"transmuxed"===i.data.type&&(b||(t.onmessage=null,lV({transmuxedData:_,callback:m}),/* eslint-disable no-use-before-define */lG(t))));/* eslint-enable */},r&&t.postMessage({action:"setAudioAppendStart",appendStart:r}),Array.isArray(s)&&t.postMessage({action:"alignGopsWith",gopsToAlignWith:s}),void 0!==n&&t.postMessage({action:"setRemux",remux:n}),i.byteLength){let e=i instanceof ArrayBuffer?i:i.buffer,r=i instanceof ArrayBuffer?0:i.byteOffset;t.postMessage({action:"push",// Send the typed-array of data as an ArrayBuffer so that
// it can be sent as a "Transferable" and avoid the costly
// memory copy
data:e,byteOffset:// about what portion of the ArrayBuffer it was a view into
r,byteLength:i.byteLength},[e])}y&&t.postMessage({action:"endTimeline"}),// even if we didn't push any bytes, we have to make sure we flush in case we reached
// the end of the segment
t.postMessage({action:"flush"})},lG=e=>{e.currentTransmux=null,e.transmuxQueue.length&&(e.currentTransmux=e.transmuxQueue.shift(),"function"==typeof e.currentTransmux?e.currentTransmux():lW(e.currentTransmux))},lX=(e,t)=>{e.postMessage({action:t}),lG(e)},lK=(e,t)=>{if(!t.currentTransmux){t.currentTransmux=e,lX(t,e);return}t.transmuxQueue.push(lX.bind(null,t,e))},lY=e=>{if(!e.transmuxer.currentTransmux){e.transmuxer.currentTransmux=e,lW(e);return}e.transmuxer.transmuxQueue.push(e)};var lQ={reset:e=>{lK("reset",e)},endTimeline:e=>{lK("endTimeline",e)},transmux:lY,createTransmuxer:e=>{let t=new l$;t.currentTransmux=null,t.transmuxQueue=[];let i=t.terminate;return t.terminate=()=>(t.currentTransmux=null,t.transmuxQueue.length=0,i.call(t)),t.postMessage({action:"init",options:e}),t}};const lJ=function(e){let t=e.transmuxer,i=e.endAction||e.action,r=e.callback,s=/*@__PURE__*/w(R)({},e,{endAction:null,transmuxer:null,callback:null}),n=s=>{s.data.action===i&&(t.removeEventListener("message",n),s.data.data&&(s.data.data=new Uint8Array(s.data.data,e.byteOffset||0,e.byteLength||s.data.data.byteLength),e.data&&(e.data=s.data.data)),r(s.data))};if(t.addEventListener("message",n),e.data){let i=e.data instanceof ArrayBuffer;s.byteOffset=i?0:e.data.byteOffset,s.byteLength=e.data.byteLength;let r=[i?e.data:e.data.buffer];t.postMessage(s,r)}else t.postMessage(s)},lZ={FAILURE:2,TIMEOUT:-101,ABORTED:-102},l0=e=>{e.forEach(e=>{e.abort()})},l1=e=>({bandwidth:e.bandwidth,bytesReceived:e.bytesReceived||0,roundTripTime:e.roundTripTime||0}),l2=e=>{let t=e.target,i=Date.now()-t.requestTime,r={bandwidth:1/0,bytesReceived:0,roundTripTime:i||0};return r.bytesReceived=e.loaded,// because we should only use bandwidth stats on progress to determine when
// abort a request early due to insufficient bandwidth
r.bandwidth=Math.floor(r.bytesReceived/r.roundTripTime*8e3),r},l4=(e,t)=>t.timedout?{status:t.status,message:"HLS request timed-out at URL: "+t.uri,code:lZ.TIMEOUT,xhr:t}:t.aborted?{status:t.status,message:"HLS request aborted at URL: "+t.uri,code:lZ.ABORTED,xhr:t}:e?{status:t.status,message:"HLS request errored at URL: "+t.uri,code:lZ.FAILURE,xhr:t}:"arraybuffer"===t.responseType&&0===t.response.byteLength?{status:t.status,message:"Empty HLS response at URL: "+t.uri,code:lZ.FAILURE,xhr:t}:null,l8=(e,t,i)=>(r,s)=>{let n=s.response,a=l4(r,s);if(a)return i(a,e);if(16!==n.byteLength)return i({status:s.status,message:"Invalid HLS key at URL: "+s.uri,code:lZ.FAILURE,xhr:s},e);let o=new DataView(n),l=new Uint32Array([o.getUint32(0),o.getUint32(4),o.getUint32(8),o.getUint32(12)]);for(let e=0;e<t.length;e++)t[e].bytes=l;return i(null,e)},l5=(e,t)=>{let i=iG(e.map.bytes);// TODO: We should also handle ts init segments here, but we
// only know how to parse mp4 init segments at the moment
if("mp4"!==i){let r=e.map.resolvedUri||e.map.uri;return t({internal:!0,message:`Found unsupported ${i||"unknown"} container for initialization segment at URL: ${r}`,code:lZ.FAILURE})}lJ({action:"probeMp4Tracks",data:e.map.bytes,transmuxer:e.transmuxer,callback:({tracks:i,data:r})=>(// transfer bytes back to us
    e.map.bytes=r,i.forEach(function(t){e.map.tracks=e.map.tracks||{},!e.map.tracks[t.type]&&(e.map.tracks[t.type]=t,"number"==typeof t.id&&t.timescale&&(e.map.timescales=e.map.timescales||{},e.map.timescales[t.id]=t.timescale))}),t(null))})},l3=({segment:e,finishProcessingFn:t})=>(i,r)=>{let s=l4(i,r);if(s)return t(s,e);let n=new Uint8Array(r.response);// init segment is encypted, we will have to wait
    // until the key request is done to decrypt.
    if(e.map.key)return e.map.encryptedBytes=n,t(null,e);e.map.bytes=n,l5(e,function(i){if(i)return i.xhr=r,i.status=r.status,t(i,e);t(null,e)})},l6=({segment:e,finishProcessingFn:t,responseType:i})=>(r,s)=>{let n=l4(r,s);if(n)return t(n,e);let a=// thrown for two primary cases:
    // 1. the mime type override stops working, or is not implemented for a specific
    //    browser
    // 2. when using mock XHR libraries like sinon that do not allow the override behavior
    "arraybuffer"!==i&&s.responseText?lN(s.responseText.substring(e.lastReachedChar||0)):s.response;return e.stats=l1(s),e.key?e.encryptedBytes=new Uint8Array(a):e.bytes=new Uint8Array(a),t(null,e)},l7=({segment:e,bytes:t,trackInfoFn:i,timingInfoFn:r,videoSegmentTimingInfoFn:s,audioSegmentTimingInfoFn:n,id3Fn:a,captionsFn:o,isEndOfTimeline:l,endedTimelineFn:u,dataFn:h,doneFn:d,onTransmuxerLog:c})=>{let p=e.map&&e.map.tracks||{},m=!!(p.audio&&p.video),f=r.bind(null,e,"audio","start"),g=r.bind(null,e,"audio","end"),y=r.bind(null,e,"video","start"),_=r.bind(null,e,"video","end"),b=()=>lY({bytes:t,transmuxer:e.transmuxer,audioAppendStart:e.audioAppendStart,gopsToAlignWith:e.gopsToAlignWith,remux:m,onData:t=>{t.type="combined"===t.type?"video":t.type,h(e,t)},onTrackInfo:t=>{i&&(m&&(t.isMuxed=!0),i(e,t))},onAudioTimingInfo:e=>{f&&void 0!==e.start&&(f(e.start),f=null),g&&void 0!==e.end&&g(e.end)},onVideoTimingInfo:e=>{y&&void 0!==e.start&&(y(e.start),y=null),_&&void 0!==e.end&&_(e.end)},onVideoSegmentTimingInfo:e=>{s(e)},onAudioSegmentTimingInfo:e=>{n(e)},onId3:(t,i)=>{a(e,t,i)},onCaptions:t=>{o(e,[t])},isEndOfTimeline:l,onEndedTimeline:()=>{u()},onTransmuxerLog:c,onDone:t=>{d&&(t.type="combined"===t.type?"video":t.type,d(null,e,t))}});// Meaning cached frame data may corrupt our notion of where this segment
// really starts. To get around this, probe for the info needed.
lJ({action:"probeTs",transmuxer:e.transmuxer,data:t,baseStartTime:e.baseStartTime,callback:r=>{e.bytes=t=r.data;let s=r.result;s&&(i(e,{hasAudio:s.hasAudio,hasVideo:s.hasVideo,isMuxed:m}),i=null),b()}})},l9=({segment:e,bytes:t,trackInfoFn:i,timingInfoFn:r,videoSegmentTimingInfoFn:s,audioSegmentTimingInfoFn:n,id3Fn:a,captionsFn:o,isEndOfTimeline:l,endedTimelineFn:u,dataFn:h,doneFn:d,onTransmuxerLog:c})=>{let p=new Uint8Array(t);// TODO:
// We should have a handler that fetches the number of bytes required
// to check if something is fmp4. This will allow us to save bandwidth
// because we can only exclude a playlist and abort requests
// by codec after trackinfo triggers.
if(iL(p,["moof"]).length>0){e.isFmp4=!0;let{tracks:s}=e.map,n={isFmp4:!0,hasVideo:!!s.video,hasAudio:!!s.audio};s.audio&&s.audio.codec&&"enca"!==s.audio.codec&&(n.audioCodec=s.audio.codec),s.video&&s.video.codec&&"encv"!==s.video.codec&&(n.videoCodec=s.video.codec),s.video&&s.audio&&(n.isMuxed=!0),// since we don't support appending fmp4 data on progress, we know we have the full
// segment here
i(e,n);// time. The end time can be roughly calculated by the receiver using the duration.
//
// Note that the start time returned by the probe reflects the baseMediaDecodeTime, as
// that is the true start of the segment (where the playback engine should begin
// decoding).
let l=(t,i)=>{// if the track still has audio at this point it is only possible
// for it to be audio only. See `tracks.video && tracks.audio` if statement
// above.
// we make sure to use segment.bytes here as that
h(e,{data:p,type:n.hasAudio&&!n.isMuxed?"audio":"video"}),i&&i.length&&a(e,i),t&&t.length&&o(e,t),d(null,e,{})};lJ({action:"probeMp4StartTime",timescales:e.map.timescales,data:p,transmuxer:e.transmuxer,callback:({data:i,startTime:a})=>{// transfer bytes back to us
t=i.buffer,e.bytes=p=i,n.hasAudio&&!n.isMuxed&&r(e,"audio","start",a),n.hasVideo&&r(e,"video","start",a),lJ({action:"probeEmsgID3",data:p,transmuxer:e.transmuxer,offset:a,callback:({emsgData:i,id3Frames:r})=>{// Initialize CaptionParser if it hasn't been yet
if(// transfer bytes back to us
t=i.buffer,e.bytes=p=i,!s.video||!i.byteLength||!e.transmuxer){l(void 0,r);return}lJ({action:"pushMp4Captions",endAction:"mp4Captions",transmuxer:e.transmuxer,data:p,timescales:e.map.timescales,trackIds:[s.video.id],callback:i=>{// transfer bytes back to us
t=i.data.buffer,e.bytes=p=i.data,i.logs.forEach(function(e){c(ol(e,{stream:"mp4CaptionParser"}))}),l(i.captions,r)}})}})}});return}// VTT or other segments that don't need processing
if(!e.transmuxer){d(null,e,{});return}if(void 0===e.container&&(e.container=iG(p)),"ts"!==e.container&&"aac"!==e.container){i(e,{hasAudio:!1,hasVideo:!1}),d(null,e,{});return}// ts or aac
l7({segment:e,bytes:t,trackInfoFn:i,timingInfoFn:r,videoSegmentTimingInfoFn:s,audioSegmentTimingInfoFn:n,id3Fn:a,captionsFn:o,isEndOfTimeline:l,endedTimelineFn:u,dataFn:h,doneFn:d,onTransmuxerLog:c})},ue=function({id:e,key:t,encryptedBytes:i,decryptionWorker:r},s){let n;let a=t=>{if(t.data.source===e){r.removeEventListener("message",a);let e=t.data.decrypted;s(new Uint8Array(e.bytes,e.byteOffset,e.byteLength))}};r.addEventListener("message",a),n=t.bytes.slice?t.bytes.slice():new Uint32Array(Array.prototype.slice.call(t.bytes)),// incrementally decrypt the bytes
r.postMessage(lu({source:e,encrypted:i,key:n,iv:t.iv}),[i.buffer,n.buffer])},ut=({decryptionWorker:e,segment:t,trackInfoFn:i,timingInfoFn:r,videoSegmentTimingInfoFn:s,audioSegmentTimingInfoFn:n,id3Fn:a,captionsFn:o,isEndOfTimeline:l,endedTimelineFn:u,dataFn:h,doneFn:d,onTransmuxerLog:c})=>{ue({id:t.requestId,key:t.key,encryptedBytes:t.encryptedBytes,decryptionWorker:e},e=>{t.bytes=e,l9({segment:t,bytes:t.bytes,trackInfoFn:i,timingInfoFn:r,videoSegmentTimingInfoFn:s,audioSegmentTimingInfoFn:n,id3Fn:a,captionsFn:o,isEndOfTimeline:l,endedTimelineFn:u,dataFn:h,doneFn:d,onTransmuxerLog:c})})},ui=({activeXhrs:e,decryptionWorker:t,trackInfoFn:i,timingInfoFn:r,videoSegmentTimingInfoFn:s,audioSegmentTimingInfoFn:n,id3Fn:a,captionsFn:o,isEndOfTimeline:l,endedTimelineFn:u,dataFn:h,doneFn:d,onTransmuxerLog:c})=>{let p=0,m=!1;return(f,g)=>{if(!m){if(f)// handle the aborted events from those requests, there are some cases where we may
// never get an aborted event. For instance, if the network connection is lost and
// there were two requests, the first may have triggered an error immediately, while
// the second request remains unsent. In that case, the aborted algorithm will not
// trigger an abort: see https://xhr.spec.whatwg.org/#the-abort()-method
//
// We also can't rely on the ready state of the XHR, since the request that
// triggered the connection error may also show as a ready state of 0 (unsent).
// Therefore, we have to finish this group of requests immediately after the first
// seen error.
return m=!0,l0(e),d(f,g);if((p+=1)===e.length){let p=function(){if(g.encryptedBytes)return ut({decryptionWorker:t,segment:g,trackInfoFn:i,timingInfoFn:r,videoSegmentTimingInfoFn:s,audioSegmentTimingInfoFn:n,id3Fn:a,captionsFn:o,isEndOfTimeline:l,endedTimelineFn:u,dataFn:h,doneFn:d,onTransmuxerLog:c});// Otherwise, everything is ready just continue
l9({segment:g,bytes:g.bytes,trackInfoFn:i,timingInfoFn:r,videoSegmentTimingInfoFn:s,audioSegmentTimingInfoFn:n,id3Fn:a,captionsFn:o,isEndOfTimeline:l,endedTimelineFn:u,dataFn:h,doneFn:d,onTransmuxerLog:c})};// Keep track of when *all* of the requests have completed
if(g.endOfAllRequests=Date.now(),g.map&&g.map.encryptedBytes&&!g.map.bytes)return ue({decryptionWorker:t,// add -init to the "id" to differentiate between segment
// and init segment decryption, just in case they happen
// at the same time at some point in the future.
id:g.requestId+"-init",encryptedBytes:g.map.encryptedBytes,key:g.map.key},t=>{g.map.bytes=t,l5(g,t=>{if(t)return l0(e),d(t,g);p()})});p()}}}},ur=({loadendState:e,abortFn:t})=>i=>{let r=i.target;r.aborted&&t&&!e.calledAbortFn&&(t(),e.calledAbortFn=!0)},us=({segment:e,progressFn:t,trackInfoFn:i,timingInfoFn:r,videoSegmentTimingInfoFn:s,audioSegmentTimingInfoFn:n,id3Fn:a,captionsFn:o,isEndOfTimeline:l,endedTimelineFn:u,dataFn:h})=>i=>{let r=i.target;if(!r.aborted)return e.stats=ol(e.stats,l2(i)),!e.stats.firstBytesReceivedAt&&e.stats.bytesReceived&&(e.stats.firstBytesReceivedAt=Date.now()),t(i,e)},un=({xhr:e,xhrOptions:t,decryptionWorker:i,segment:r,abortFn:s,progressFn:n,trackInfoFn:a,timingInfoFn:o,videoSegmentTimingInfoFn:l,audioSegmentTimingInfoFn:u,id3Fn:h,captionsFn:d,isEndOfTimeline:c,endedTimelineFn:p,dataFn:m,doneFn:f,onTransmuxerLog:g})=>{let y=[],_=ui({activeXhrs:y,decryptionWorker:i,trackInfoFn:a,timingInfoFn:o,videoSegmentTimingInfoFn:l,audioSegmentTimingInfoFn:u,id3Fn:h,captionsFn:d,isEndOfTimeline:c,endedTimelineFn:p,dataFn:m,doneFn:f,onTransmuxerLog:g});if(r.key&&!r.key.bytes){let i=[r.key];r.map&&!r.map.bytes&&r.map.key&&r.map.key.resolvedUri===r.key.resolvedUri&&i.push(r.map.key);let s=ol(t,{uri:r.key.resolvedUri,responseType:"arraybuffer"}),n=l8(r,i,_),a=e(s,n);y.push(a)}// optionally, request the associated media init segment
if(r.map&&!r.map.bytes){let i=r.map.key&&(!r.key||r.key.resolvedUri!==r.map.key.resolvedUri);if(i){let i=ol(t,{uri:r.map.key.resolvedUri,responseType:"arraybuffer"}),s=l8(r,[r.map.key],_),n=e(i,s);y.push(n)}let s=ol(t,{uri:r.map.resolvedUri,responseType:"arraybuffer",headers:la(r.map)}),n=l3({segment:r,finishProcessingFn:_}),a=e(s,n);y.push(a)}let b=ol(t,{uri:r.part&&r.part.resolvedUri||r.resolvedUri,responseType:"arraybuffer",headers:la(r)}),v=l6({segment:r,finishProcessingFn:_,responseType:b.responseType}),T=e(b,v);T.addEventListener("progress",us({segment:r,progressFn:n,trackInfoFn:a,timingInfoFn:o,videoSegmentTimingInfoFn:l,audioSegmentTimingInfoFn:u,id3Fn:h,captionsFn:d,isEndOfTimeline:c,endedTimelineFn:p,dataFn:m})),y.push(T);// multiple times, provide a shared state object
let S={};return y.forEach(e=>{e.addEventListener("loadend",ur({loadendState:S,abortFn:s}))}),()=>l0(y)},ua=oo("CodecUtils"),uo=function(e){// if the codecs were explicitly specified, use them instead of the
// defaults
let t=e.attributes||{};if(t.CODECS)return eQ(t.CODECS)},ul=(e,t)=>{let i=t.attributes||{};return e&&e.mediaGroups&&e.mediaGroups.AUDIO&&i.AUDIO&&e.mediaGroups.AUDIO[i.AUDIO]},uu=(e,t)=>{if(!ul(e,t))return!0;let i=t.attributes||{},r=e.mediaGroups.AUDIO[i.AUDIO];for(let e in r)// If an audio group has a URI (the case for HLS, as HLS will use external playlists),
// or there are listed playlists (the case for DASH, as the manifest will have already
// provided all of the details necessary to generate the audio playlist, as opposed to
// HLS' externally requested playlists), then the content is demuxed.
if(!r[e].uri&&!r[e].playlists)return!0;return!1},uh=function(e){let t={};return e.forEach(({mediaType:e,type:i,details:r})=>{t[e]=t[e]||[],t[e].push(eY(`${i}${r}`))}),Object.keys(t).forEach(function(e){if(t[e].length>1){ua(`multiple ${e} codecs found as attributes: ${t[e].join(", ")}. Setting playlist codecs to null so that we wait for mux.js to probe segments for real codecs.`),t[e]=null;return}t[e]=t[e][0]}),t},ud=function(e){let t=0;return e.audio&&t++,e.video&&t++,t},uc=function(e,t){let i=t.attributes||{},r=uh(uo(t)||[]);// Put another way, there is no way to have a video-only multiple-audio HLS!
if(ul(e,t)&&!r.audio&&!uu(e,t)){// It is possible for codecs to be specified on the audio media group playlist but
// not on the rendition playlist. This is mostly the case for DASH, where audio and
// video are always separate (and separately specified).
let t=uh(eJ(e,i.AUDIO)||[]);t.audio&&(r.audio=t.audio)}return r},up=oo("PlaylistSelector"),um=function(e){if(!e||!e.playlist)return;let t=e.playlist;return JSON.stringify({id:t.id,bandwidth:e.bandwidth,width:e.width,height:e.height,codecs:t.attributes&&t.attributes.CODECS||""})},uf=function(e,t){if(!e)return"";let i=/*@__PURE__*/w(I).getComputedStyle(e);return i?i[t]:""},ug=function(e,t){let i=e.slice();e.sort(function(e,r){let s=t(e,r);return 0===s?i.indexOf(e)-i.indexOf(r):s})},uy=function(e,t){let i,r;return e.attributes.BANDWIDTH&&(i=e.attributes.BANDWIDTH),i=i||/*@__PURE__*/w(I).Number.MAX_VALUE,t.attributes.BANDWIDTH&&(r=t.attributes.BANDWIDTH),i-(r=r||/*@__PURE__*/w(I).Number.MAX_VALUE)};/**
 * Chooses the appropriate media playlist based on bandwidth and player size
 *
 * @param {Object} main
 *        Object representation of the main manifest
 * @param {number} playerBandwidth
 *        Current calculated bandwidth of the player
 * @param {number} playerWidth
 *        Current width of the player element (should account for the device pixel ratio)
 * @param {number} playerHeight
 *        Current height of the player element (should account for the device pixel ratio)
 * @param {boolean} limitRenditionByPlayerDimensions
 *        True if the player width and height should be used during the selection, false otherwise
 * @param {Object} playlistController
 *        the current playlistController object
 * @return {Playlist} the highest bitrate playlist less than the
 * currently detected bandwidth, accounting for some amount of
 * bandwidth variance
 */let u_=function(e,t,i,r,s,n){let a,o,l,u;// If we end up getting called before `main` is available, exit early
if(!e)return;let h={bandwidth:t,width:i,height:r,limitRenditionByPlayerDimensions:s},d=e.playlists;o$.isAudioOnly(e)&&(d=n.getAudioTrackPlaylists_(),// at the buttom of this function for debugging.
h.audioOnly=!0);let c=d.map(e=>{let t=e.attributes&&e.attributes.RESOLUTION&&e.attributes.RESOLUTION.width,i=e.attributes&&e.attributes.RESOLUTION&&e.attributes.RESOLUTION.height;return{bandwidth:e.attributes&&e.attributes.BANDWIDTH||/*@__PURE__*/w(I).Number.MAX_VALUE,width:t,height:i,playlist:e}});ug(c,(e,t)=>e.bandwidth-t.bandwidth);// api or excluded temporarily due to playback errors.
let p=// incompatible configurations
(c=c.filter(e=>!o$.isIncompatible(e.playlist))).filter(e=>o$.isEnabled(e.playlist));p.length||// by the user through the representations api. In this case, ignore exclusion and
// fallback to what the user wants by using playlists the user has not disabled.
(p=c.filter(e=>!o$.isDisabled(e.playlist)));// filter out any variant that has greater effective bitrate
// than the current estimated bandwidth
let m=p.filter(e=>e.bandwidth*lR.BANDWIDTH_VARIANCE<t),f=m[m.length-1],g=m.filter(e=>e.bandwidth===f.bandwidth)[0];if(!1===s){let e=g||p[0]||c[0];if(e&&e.playlist){let t="sortedPlaylistReps";return g&&(t="bandwidthBestRep"),p[0]&&(t="enabledPlaylistReps"),up(`choosing ${um(e)} using ${t} with options`,h),e.playlist}return up("could not choose a playlist with options",h),null}// filter out playlists without resolution information
let y=m.filter(e=>e.width&&e.height);// sort variants by resolution
ug(y,(e,t)=>e.width-t.width);let _=y.filter(e=>e.width===i&&e.height===r);f=_[_.length-1];let b=_.filter(e=>e.bandwidth===f.bandwidth)[0];// resolutionPlusOneRep and resolutionBestRep and all
// the code involving them should be removed.
if(b||(// is just-larger-than the video player
f=(o=(a=y.filter(e=>e.width>i||e.height>r)).filter(e=>e.width===a[0].width&&e.height===a[0].height))[o.length-1],l=o.filter(e=>e.bandwidth===f.bandwidth)[0]),n.leastPixelDiffSelector){// find the variant that is closest to the player's pixel size
let e=y.map(e=>(e.pixelDiff=Math.abs(e.width-i)+Math.abs(e.height-r),e));// get the highest bandwidth, closest resolution playlist
ug(e,(e,t)=>// sort by highest bandwidth if pixelDiff is the same
    e.pixelDiff===t.pixelDiff?t.bandwidth-e.bandwidth:e.pixelDiff-t.pixelDiff),u=e[0]}// fallback chain of variants
let v=u||l||b||g||p[0]||c[0];if(v&&v.playlist){let e="sortedPlaylistReps";return u?e="leastPixelDiffRep":l?e="resolutionPlusOneRep":b?e="resolutionBestRep":g?e="bandwidthBestRep":p[0]&&(e="enabledPlaylistReps"),up(`choosing ${um(v)} using ${e} with options`,h),v.playlist}return up("could not choose a playlist with options",h),null};/**
 * Chooses the appropriate media playlist based on the most recent
 * bandwidth estimate and the player size.
 *
 * Expects to be called within the context of an instance of VhsHandler
 *
 * @return {Playlist} the highest bitrate playlist less than the
 * currently detected bandwidth, accounting for some amount of
 * bandwidth variance
 */const ub=function(){let e=this.useDevicePixelRatio&&/*@__PURE__*/w(I).devicePixelRatio||1;return u_(this.playlists.main,this.systemBandwidth,parseInt(uf(this.tech_.el(),"width"),10)*e,parseInt(uf(this.tech_.el(),"height"),10)*e,this.limitRenditionByPlayerDimensions,this.playlistController_)},uv=function(e){let{main:t,currentTime:i,bandwidth:r,duration:s,segmentDuration:n,timeUntilRebuffer:a,currentTimeline:o,syncController:l}=e,u=t.playlists.filter(e=>!o$.isIncompatible(e)),h=u.filter(o$.isEnabled);// filter out any playlists that have been excluded due to
h.length||// by the user through the representations api. In this case, ignore exclusion and
// fallback to what the user wants by using playlists the user has not disabled.
(h=u.filter(e=>!o$.isDisabled(e)));let d=h.filter(o$.hasAttribute.bind(null,"BANDWIDTH")),c=d.map(e=>{let t=l.getSyncPoint(e,s,o,i),u=o$.estimateSegmentRequestTime(n,r,e);// If there is no sync point for this playlist, switching to it will require a
return{playlist:e,rebufferingImpact:u*(t?1:2)-a}}),p=c.filter(e=>e.rebufferingImpact<=0);return(ug(p,(e,t)=>uy(t.playlist,e.playlist)),p.length)?p[0]:(ug(c,(e,t)=>e.rebufferingImpact-t.rebufferingImpact),c[0]||null)},uT=e=>{let t,i=0;return e.bytes&&(t=new Uint8Array(e.bytes),e.segments.forEach(e=>{t.set(e,i),i+=e.byteLength})),t},uS=function(e,t,i){if(!e[i]){t.trigger({type:"usage",name:"vhs-608"});let r=i;// we need to translate SERVICEn for 708 to how mux.js currently labels them
/^cc708_/.test(i)&&(r="SERVICE"+i.split("_")[1]);let s=t.textTracks().getTrackById(r);if(s)// very likely created by videojs-contrib-hls from information
// in the m3u8 for us to use
e[i]=s;else{// This section gets called when we have caption services that aren't specified in the manifest.
// Manifest level caption services are handled in media-groups.js under CLOSED-CAPTIONS.
let s=t.options_.vhs&&t.options_.vhs.captionServices||{},n=i,a=i,o=!1,l=s[r];l&&(n=l.label,a=l.language,o=l.default),// without a language
e[i]=t.addRemoteTextTrack({kind:"captions",id:r,// TODO: investigate why this doesn't seem to turn the caption on by default
default:o,label:n,language:a},!1).track}}},uE=function({inbandTextTracks:e,captionArray:t,timestampOffset:i}){if(!t)return;let r=/*@__PURE__*/w(I).WebKitDataCue||/*@__PURE__*/w(I).VTTCue;t.forEach(t=>{let s=t.stream;// in CEA 608 captions, video.js/mux.js sends a content array
// with positioning data
t.content?t.content.forEach(n=>{let a=new r(t.startTime+i,t.endTime+i,n.text);a.line=n.line,a.align="left",a.position=n.position,a.positionAlign="line-left",e[s].addCue(a)}):e[s].addCue(new r(t.startTime+i,t.endTime+i,t.text))})},uw=function(e){Object.defineProperties(e.frame,{id:{get:()=>(a9.log.warn("cue.frame.id is deprecated. Use cue.value.key instead."),e.value.key)},value:{get:()=>(a9.log.warn("cue.frame.value is deprecated. Use cue.value.data instead."),e.value.data)},privateData:{get:()=>(a9.log.warn("cue.frame.privateData is deprecated. Use cue.value.data instead."),e.value.data)}})},uk=({inbandTextTracks:e,metadataArray:t,timestampOffset:i,videoDuration:r})=>{if(!t)return;let s=/*@__PURE__*/w(I).WebKitDataCue||/*@__PURE__*/w(I).VTTCue,n=e.metadataTrack_;if(!n||(t.forEach(e=>{let t=e.cueTime+i;// if time isn't a finite number between 0 and Infinity, like NaN,
// ignore this bit of metadata.
// This likely occurs when you have an non-timed ID3 tag like TIT2,
// which is the "Title/Songname/Content description" frame
!("number"!=typeof t||/*@__PURE__*/w(I).isNaN(t))&&!(t<0)&&t<1/0&&e.frames&&e.frames.length&&e.frames.forEach(e=>{let i=new s(t,t,e.value||e.url||e.data||"");i.frame=e,i.value=e,uw(i),n.addCue(i)})}),!n.cues||!n.cues.length))return;// Updating the metadeta cues so that
// the endTime of each cue is the startTime of the next cue
// the endTime of last cue is the duration of the video
let a=n.cues,o=[];// ...disregarding cues with a falsey value
for(let e=0;e<a.length;e++)a[e]&&o.push(a[e]);// Group cues by their startTime value
let l=o.reduce((e,t)=>{let i=e[t.startTime]||[];return i.push(t),e[t.startTime]=i,e},{}),u=Object.keys(l).sort((e,t)=>Number(e)-Number(t));// Sort startTimes by ascending order
u.forEach((e,t)=>{let i=l[e],s=isFinite(r)?r:0,n=Number(u[t+1])||s;i.forEach(e=>{e.endTime=n})})},uC={id:"ID",class:"CLASS",startDate:"START-DATE",duration:"DURATION",endDate:"END-DATE",endOnNext:"END-ON-NEXT",plannedDuration:"PLANNED-DURATION",scte35Out:"SCTE35-OUT",scte35In:"SCTE35-IN"},ux=new Set(["id","class","startDate","duration","endDate","endOnNext","startTime","endTime","processDateRange"]),uD=({inbandTextTracks:e,dateRanges:t})=>{let i=e.metadataTrack_;if(!i)return;let r=/*@__PURE__*/w(I).WebKitDataCue||/*@__PURE__*/w(I).VTTCue;t.forEach(e=>{// we generate multiple cues for each date range with different attributes
for(let t of Object.keys(e)){if(ux.has(t))continue;let s=new r(e.startTime,e.endTime,"");s.id=e.id,s.type="com.apple.quicktime.HLS",s.value={key:uC[t],data:e[t]},("scte35Out"===t||"scte35In"===t)&&(s.value.data=new Uint8Array(s.value.data.match(/[\da-f]{2}/gi)).buffer),i.addCue(s)}e.processDateRange()})},uI=(e,t,i)=>{e.metadataTrack_||(e.metadataTrack_=i.addRemoteTextTrack({kind:"metadata",label:"Timed Metadata"},!1).track,a9.browser.IS_ANY_SAFARI||(e.metadataTrack_.inBandMetadataTrackDispatchType=t))},uA=function(e,t,i){let r,s;if(i&&i.cues)for(r=i.cues.length;r--;)(s=i.cues[r]).startTime>=e&&s.endTime<=t&&i.removeCue(s)},uL=function(e){let t=e.cues;if(!t)return;let i={};for(let r=t.length-1;r>=0;r--){let s=t[r],n=`${s.startTime}-${s.endTime}-${s.text}`;i[n]?e.removeCue(s):i[n]=s}},uP=(e,t,i)=>{let r;if(null==t||!e.length)return[];// pts value for current time + 3 seconds to give a bit more wiggle room
let s=Math.ceil((t-i+3)*iX.ONE_SECOND_IN_TS);for(r=0;r<e.length&&!(e[r].pts>s);r++);return e.slice(r)},uO=(e,t,i)=>{if(!t.length)return e;if(i)// with the most recent appeneded data. This will make sure that when appending
// future segments, we only try to align with gops that are both ahead of current
// time and in the last segment appended.
return t.slice();let r=t[0].pts,s=0;for(;s<e.length&&!(e[s].pts>=r);s++);return e.slice(0,s).concat(t)},uR=(e,t,i,r)=>{let s=Math.ceil((t-r)*iX.ONE_SECOND_IN_TS),n=Math.ceil((i-r)*iX.ONE_SECOND_IN_TS),a=e.slice(),o=e.length;for(;o--&&!(e[o].pts<=n););if(-1===o)return a;let l=o+1;for(;l--&&!(e[l].pts<=s););// clamp remove range start to 0 index
return l=Math.max(l,0),a.splice(l,o-l+1),a},uN=function(e,t){// if both are undefined
// or one or the other is undefined
// they are not equal
if(!e&&!t||!e&&t||e&&!t)return!1;// they are the same object and thus, equal
if(e===t)return!0;// sort keys so we can make sure they have
// all the same keys later.
let i=Object.keys(e).sort(),r=Object.keys(t).sort();if(i.length!==r.length)return!1;for(let s=0;s<i.length;s++){let n=i[s];// different sorted keys, not equal
if(n!==r[s]||e[n]!==t[n])return!1}return!0},uM=function(e,t,i){t=t||[];let r=[],s=0;for(let n=0;n<t.length;n++){let a=t[n];if(e===a.timeline&&(r.push(n),(s+=a.duration)>i))return n}return 0===r.length?0:r[r.length-1]},uU=e=>"number"==typeof e&&isFinite(e),uB=1/60,uF=(e,t,i)=>// Although these checks should most likely cover non 'main' types, for now it narrows
    // the scope of our checks.
    "main"===e&&t&&i?i.hasAudio||i.hasVideo?t.hasVideo&&!i.hasVideo?"Only audio found in segment when we expected video. We can't switch to audio only from a stream that had video. To get rid of this message, please add codec information to the manifest.":!t.hasVideo&&i.hasVideo?"Video found in segment when we expected only audio. We can't switch to a stream with video from an audio only stream. To get rid of this message, please add codec information to the manifest.":null:"Neither audio nor video found in segment.":null,uj=(e,t,i)=>{// 30 seconds before the playhead provides a safe default for trimming.
//
// Choosing a reasonable default is particularly important for high bitrate content and
// VOD videos/live streams with large windows, as the buffer may end up overfilled and
// throw an APPEND_BUFFER_ERR.
let r=t-lR.BACK_BUFFER_LENGTH;return e.length&&// buffer. For these playlists, don't save content that's no longer within the window.
(r=Math.max(r,e.start(0))),Math.min(t-i,r)},uq=e=>{let{startOfSegment:t,duration:i,segment:r,part:s,playlist:{mediaSequence:n,id:a,segments:o=[]},mediaIndex:l,partIndex:u,timeline:h}=e,d=o.length-1,c="mediaIndex/partIndex increment";e.getMediaInfoForTime?c=`getMediaInfoForTime (${e.getMediaInfoForTime})`:e.isSyncRequest&&(c="getSyncSegmentCandidate (isSyncRequest)"),e.independent&&(c+=` with independent ${e.independent}`);let p="number"==typeof u,m=e.segment.uri?"segment":"pre-segment",f=p?oC({preloadSegment:r})-1:0;return`${m} [${n+l}/${n+d}]`+(p?` part [${u}/${f}]`:"")+` segment start/end [${r.start} => ${r.end}]`+(p?` part start/end [${s.start} => ${s.end}]`:"")+` startOfSegment [${t}]`+` duration [${i}]`+` timeline [${h}]`+` selected by [${c}]`+` playlist [${a}]`},u$=e=>`${e}TimingInfo`,uH=(e,t)=>e.length?e.end(e.length-1):t,uV=({segmentTimeline:e,currentTimeline:t,startOfSegment:i,buffered:r,calculateTimestampOffsetForEachSegment:s,overrideCheck:n})=>s?uH(r,i):n||e!==t?e<t?i:uH(r,i):null,uz=({timelineChangeController:e,currentTimeline:t,segmentTimeline:i,loaderType:r,audioDisabled:s})=>{if(t===i)return!1;if("audio"===r){let t=e.lastTimelineChange({type:"main"});// Audio loader should wait if:
//
// * main hasn't had a timeline change yet (thus has not loaded its first segment)
// * main hasn't yet changed to the timeline audio is looking to load
return!t||t.to!==i}// The main loader only needs to wait for timeline changes if there's demuxed audio.
// Otherwise, there's nothing to wait for, since audio would be muxed into the main
// loader's segments (or the content is audio/video only and handled by the main
// loader).
if("main"===r&&s){let t=e.pendingTimelineChange({type:"audio"});// Main loader should wait for the audio loader if audio is not pending a timeline
return!t||t.to!==i}return!1},uW=e=>{let t=0;return["video","audio"].forEach(function(i){let r;let s=e[`${i}TimingInfo`];if(!s)return;let{start:n,end:a}=s;"bigint"==typeof n||"bigint"==typeof a?r=/*@__PURE__*/w(I).BigInt(a)-/*@__PURE__*/w(I).BigInt(n):"number"==typeof n&&"number"==typeof a&&(r=a-n),void 0!==r&&r>t&&(t=r)}),"bigint"==typeof t&&t<Number.MAX_SAFE_INTEGER&&(t=Number(t)),t},uG=({segmentDuration:e,maxDuration:t})=>// 0 duration segments are most likely due to metadata only segments or a lack of
    // information.
    !!e&&Math.round(e)>t+oh,uX=(e,t)=>{// Right now we aren't following DASH's timing model exactly, so only perform
// this check for HLS content.
if("hls"!==t)return null;let i=uW({audioTimingInfo:e.audioTimingInfo,videoTimingInfo:e.videoTimingInfo});// Don't report if we lack information.
//
// If the segment has a duration of 0 it is either a lack of information or a
// metadata only segment and shouldn't be reported here.
if(!i)return null;let r=e.playlist.targetDuration,s=uG({segmentDuration:i,maxDuration:2*r}),n=uG({segmentDuration:i,maxDuration:r}),a=`Segment with index ${e.mediaIndex} from playlist ${e.playlist.id} has a duration of ${i} when the reported duration is ${e.duration} and the target duration is ${r}. For HLS content, a duration in excess of the target duration may result in playback issues. See the HLS specification section on EXT-X-TARGETDURATION for more details: https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.3.1`;return s||n?{severity:s?"warn":"info",message:a}:null};/**
 * An object that manages segment loading and appending.
 *
 * @class SegmentLoader
 * @param {Object} options required and optional options
 * @extends videojs.EventTarget
 */class uK extends a9.EventTarget{constructor(e,t={}){if(super(),!e)throw TypeError("Initialization settings are required");if("function"!=typeof e.currentTime)throw TypeError("No currentTime getter specified");if(!e.mediaSource)throw TypeError("No MediaSource specified");// public properties
this.bandwidth=e.bandwidth,this.throughput={rate:0,count:0},this.roundTrip=NaN,this.resetStats_(),this.mediaIndex=null,this.partIndex=null,this.hasPlayed_=e.hasPlayed,this.currentTime_=e.currentTime,this.seekable_=e.seekable,this.seeking_=e.seeking,this.duration_=e.duration,this.mediaSource_=e.mediaSource,this.vhs_=e.vhs,this.loaderType_=e.loaderType,this.currentMediaInfo_=void 0,this.startingMediaInfo_=void 0,this.segmentMetadataTrack_=e.segmentMetadataTrack,this.goalBufferLength_=e.goalBufferLength,this.sourceType_=e.sourceType,this.sourceUpdater_=e.sourceUpdater,this.inbandTextTracks_=e.inbandTextTracks,this.state_="INIT",this.timelineChangeController_=e.timelineChangeController,this.shouldSaveSegmentTimingInfo_=!0,this.parse708captions_=e.parse708captions,this.useDtsForTimestampOffset_=e.useDtsForTimestampOffset,this.calculateTimestampOffsetForEachSegment_=e.calculateTimestampOffsetForEachSegment,this.captionServices_=e.captionServices,this.exactManifestTimings=e.exactManifestTimings,this.addMetadataToTextTrack=e.addMetadataToTextTrack,this.checkBufferTimeout_=null,this.error_=void 0,this.currentTimeline_=-1,this.pendingSegment_=null,this.xhrOptions_=null,this.pendingSegments_=[],this.audioDisabled_=!1,this.isPendingTimestampOffset_=!1,this.gopBuffer_=[],this.timeMapping_=0,this.safeAppend_=!1,this.appendInitSegment_={audio:!0,video:!0},this.playlistOfLastInitSegment_={audio:null,video:null},this.callQueue_=[],// information yet to start the loading process (e.g., if the audio loader wants to
// load a segment from the next timeline but the main loader hasn't yet crossed that
// timeline), then the load call will be added to the queue until it is ready to be
// processed.
this.loadQueue_=[],this.metadataQueue_={id3:[],caption:[]},this.waitingOnRemove_=!1,this.quotaExceededErrorRetryTimeout_=null,this.activeInitSegmentId_=null,this.initSegments_={},this.cacheEncryptionKeys_=e.cacheEncryptionKeys,this.keyCache_={},this.decrypter_=e.decrypter,// between a time in the display time and a segment index within
// a playlist
this.syncController_=e.syncController,this.syncPoint_={segmentIndex:0,time:0},this.transmuxer_=this.createTransmuxer_(),this.triggerSyncInfoUpdate_=()=>this.trigger("syncinfoupdate"),this.syncController_.on("syncinfoupdate",this.triggerSyncInfoUpdate_),this.mediaSource_.addEventListener("sourceopen",()=>{this.isEndOfStream_()||(this.ended_=!1)}),this.fetchAtBuffer_=!1,this.replaceSegmentsUntil_=-1,this.logger_=oo(`SegmentLoader[${this.loaderType_}]`),Object.defineProperty(this,"state",{get(){return this.state_},set(e){e!==this.state_&&(this.logger_(`${this.state_} -> ${e}`),this.state_=e,this.trigger("statechange"))}}),this.sourceUpdater_.on("ready",()=>{this.hasEnoughInfoToAppend_()&&this.processCallQueue_()}),"main"===this.loaderType_&&this.timelineChangeController_.on("pendingtimelinechange",()=>{this.hasEnoughInfoToAppend_()&&this.processCallQueue_()}),"audio"===this.loaderType_&&this.timelineChangeController_.on("timelinechange",()=>{this.hasEnoughInfoToLoad_()&&this.processLoadQueue_(),this.hasEnoughInfoToAppend_()&&this.processCallQueue_()})}createTransmuxer_(){return lQ.createTransmuxer({remux:!1,alignGopsAtEnd:this.safeAppend_,keepOriginalTimestamps:!0,parse708captions:this.parse708captions_,captionServices:this.captionServices_})}/**
   * reset all of our media stats
   *
   * @private
   */resetStats_(){this.mediaBytesTransferred=0,this.mediaRequests=0,this.mediaRequestsAborted=0,this.mediaRequestsTimedout=0,this.mediaRequestsErrored=0,this.mediaTransferDuration=0,this.mediaSecondsLoaded=0,this.mediaAppends=0}/**
   * dispose of the SegmentLoader and reset to the default state
   */dispose(){this.trigger("dispose"),this.state="DISPOSED",this.pause(),this.abort_(),this.transmuxer_&&this.transmuxer_.terminate(),this.resetStats_(),this.checkBufferTimeout_&&/*@__PURE__*/w(I).clearTimeout(this.checkBufferTimeout_),this.syncController_&&this.triggerSyncInfoUpdate_&&this.syncController_.off("syncinfoupdate",this.triggerSyncInfoUpdate_),this.off()}setAudio(e){this.audioDisabled_=!e,e?this.appendInitSegment_.audio=!0:this.sourceUpdater_.removeAudio(0,this.duration_())}/**
   * abort anything that is currently doing on with the SegmentLoader
   * and reset to a default state
   */abort(){if("WAITING"!==this.state){this.pendingSegment_&&(this.pendingSegment_=null);return}this.abort_(),// since we are no longer "waiting" on any requests. XHR callback is not always run
// when the request is aborted. This will prevent the loader from being stuck in the
// WAITING state indefinitely.
this.state="READY",this.paused()||this.monitorBuffer_()}/**
   * abort all pending xhr requests and null any pending segements
   *
   * @private
   */abort_(){this.pendingSegment_&&this.pendingSegment_.abortRequests&&this.pendingSegment_.abortRequests(),// clear out the segment being processed
this.pendingSegment_=null,this.callQueue_=[],this.loadQueue_=[],this.metadataQueue_.id3=[],this.metadataQueue_.caption=[],this.timelineChangeController_.clearPendingTimelineChange(this.loaderType_),this.waitingOnRemove_=!1,/*@__PURE__*/w(I).clearTimeout(this.quotaExceededErrorRetryTimeout_),this.quotaExceededErrorRetryTimeout_=null}checkForAbort_(e){return(// If the state is APPENDING, then aborts will not modify the state, meaning the first
// callback that happens should reset the state to READY so that loading can continue.
"APPENDING"!==this.state||this.pendingSegment_?!this.pendingSegment_||this.pendingSegment_.requestId!==e:(this.state="READY",!0))}/**
   * set an error on the segment loader and null out any pending segements
   *
   * @param {Error} error the error to set on the SegmentLoader
   * @return {Error} the error that was set or that is currently set
   */error(e){return void 0!==e&&(this.logger_("error occurred:",e),this.error_=e),this.pendingSegment_=null,this.error_}endOfStream(){this.ended_=!0,this.transmuxer_&&lQ.reset(this.transmuxer_),this.gopBuffer_.length=0,this.pause(),this.trigger("ended")}/**
   * Indicates which time ranges are buffered
   *
   * @return {TimeRange}
   *         TimeRange object representing the current buffered ranges
   */buffered_(){let e=this.getMediaInfo_();if(!this.sourceUpdater_||!e)return ou();if("main"===this.loaderType_){let{hasAudio:t,hasVideo:i,isMuxed:r}=e;if(i&&t&&!this.audioDisabled_&&!r)return this.sourceUpdater_.buffered();if(i)return this.sourceUpdater_.videoBuffered()}// One case that can be ignored for now is audio only with alt audio,
// as we don't yet have proper support for that.
return this.sourceUpdater_.audioBuffered()}/**
   * Gets and sets init segment for the provided map
   *
   * @param {Object} map
   *        The map object representing the init segment to get or set
   * @param {boolean=} set
   *        If true, the init segment for the provided map should be saved
   * @return {Object}
   *         map object for desired init segment
   */initSegmentForMap(e,t=!1){if(!e)return null;let i=lh(e),r=this.initSegments_[i];return t&&!r&&e.bytes&&(this.initSegments_[i]=r={resolvedUri:e.resolvedUri,byterange:e.byterange,bytes:e.bytes,tracks:e.tracks,timescales:e.timescales}),r||e}/**
   * Gets and sets key for the provided key
   *
   * @param {Object} key
   *        The key object representing the key to get or set
   * @param {boolean=} set
   *        If true, the key for the provided key should be saved
   * @return {Object}
   *         Key object for desired key
   */segmentKey(e,t=!1){if(!e)return null;let i=ld(e),r=this.keyCache_[i];this.cacheEncryptionKeys_&&t&&!r&&e.bytes&&(this.keyCache_[i]=r={resolvedUri:e.resolvedUri,bytes:e.bytes});let s={resolvedUri:(r||e).resolvedUri};return r&&(s.bytes=r.bytes),s}/**
   * Returns true if all configuration required for loading is present, otherwise false.
   *
   * @return {boolean} True if the all configuration is ready for loading
   * @private
   */couldBeginLoading_(){return this.playlist_&&!this.paused()}/**
   * load a playlist and start to fill the buffer
   */load(){// specified
if(// un-pause
this.monitorBuffer_(),this.playlist_){// if all the configuration is ready, initialize and begin loading
if("INIT"===this.state&&this.couldBeginLoading_())return this.init_();this.couldBeginLoading_()&&("READY"===this.state||"INIT"===this.state)&&(this.state="READY")}}/**
   * Once all the starting parameters have been specified, begin
   * operation. This method should only be invoked from the INIT
   * state.
   *
   * @private
   */init_(){return this.state="READY",// audio data from the muxed content should be removed
this.resetEverything(),this.monitorBuffer_()}/**
   * set a playlist on the segment loader
   *
   * @param {PlaylistLoader} media the playlist to set on the segment loader
   */playlist(e,t={}){if(!e)return;let i=this.playlist_,r=this.pendingSegment_;this.playlist_=e,this.xhrOptions_=t,"INIT"===this.state&&(e.syncInfo={mediaSequence:e.mediaSequence,time:0},"main"===this.loaderType_&&this.syncController_.setDateTimeMappingForStart(e));let s=null;// buffering now
if(i&&(i.id?s=i.id:i.uri&&(s=i.uri)),this.logger_(`playlist update [${s} => ${e.id||e.uri}]`),// in LIVE, we always want to update with new playlists (including refreshes)
this.trigger("syncinfoupdate"),"INIT"===this.state&&this.couldBeginLoading_())return this.init_();if(!i||i.uri!==e.uri){if(null!==this.mediaIndex){// we must reset/resync the segment loader when we switch renditions and
// the segment loader is already synced to the previous rendition
// We only want to reset the loader here for LLHLS playback, as resetLoader sets fetchAtBuffer_
// to false, resulting in fetching segments at currentTime and causing repeated
// same-segment requests on playlist change. This erroneously drives up the playback watcher
// stalled segment count, as re-requesting segments at the currentTime or browser cached segments
// will not change the buffer.
// Reference for LLHLS fixes: https://github.com/videojs/http-streaming/pull/1201
let t=!e.endList&&"number"==typeof e.partTargetDuration;t?this.resetLoader():this.resyncLoader()}this.currentMediaInfo_=void 0,this.trigger("playlistupdate");return}// we reloaded the same playlist so we are in a live scenario
// and we will likely need to adjust the mediaIndex
let n=e.mediaSequence-i.mediaSequence;// this is important because we can abort a request and this value must be
// equal to the last appended mediaIndex
if(this.logger_(`live window shift [${n}]`),null!==this.mediaIndex){// update during that. mediaIndex would go from 0 to -1 if mediaSequence in the
// new playlist was incremented by 1.
if(this.mediaIndex-=n,this.mediaIndex<0)this.mediaIndex=null,this.partIndex=null;else{let e=this.playlist_.segments[this.mediaIndex];// partIndex should remain the same for the same segment
// unless parts fell off of the playlist for this segment.
// In that case we need to reset partIndex and resync
if(this.partIndex&&(!e.parts||!e.parts.length||!e.parts[this.partIndex])){let e=this.mediaIndex;this.logger_(`currently processing part (index ${this.partIndex}) no longer exists.`),this.resetLoader(),// as the part was dropped from our current playlists segment.
// The mediaIndex will still be valid so keep that around.
this.mediaIndex=e}}}// update the mediaIndex on the SegmentInfo object
r&&(r.mediaIndex-=n,r.mediaIndex<0?(r.mediaIndex=null,r.partIndex=null):(r.mediaIndex>=0&&(r.segment=e.segments[r.mediaIndex]),r.partIndex>=0&&r.segment.parts&&(r.part=r.segment.parts[r.partIndex]))),this.syncController_.saveExpiredSegmentInfo(i,e)}/**
   * Prevent the loader from fetching additional segments. If there
   * is a segment request outstanding, it will finish processing
   * before the loader halts. A segment loader can be unpaused by
   * calling load().
   */pause(){this.checkBufferTimeout_&&(/*@__PURE__*/w(I).clearTimeout(this.checkBufferTimeout_),this.checkBufferTimeout_=null)}/**
   * Returns whether the segment loader is fetching additional
   * segments when given the opportunity. This property can be
   * modified through calls to pause() and load().
   */paused(){return null===this.checkBufferTimeout_}/**
   * Resets the segment loader ended and init properties.
   */resetLoaderProperties(){this.ended_=!1,this.activeInitSegmentId_=null,this.appendInitSegment_={audio:!0,video:!0}}/**
   * Delete all the buffered data and reset the SegmentLoader
   *
   * @param {Function} [done] an optional callback to be executed when the remove
   * operation is complete
   */resetEverything(e){this.resetLoaderProperties(),this.resetLoader(),// VTT Segment Loader doesn't need to do anything but in the regular SegmentLoader,
// we then clamp the value to duration if necessary.
this.remove(0,1/0,e),this.transmuxer_&&(this.transmuxer_.postMessage({action:"clearAllMp4Captions"}),this.transmuxer_.postMessage({action:"reset"}))}/**
   * Force the SegmentLoader to resync and start loading around the currentTime instead
   * of starting at the end of the buffer
   *
   * Useful for fast quality changes
   */resetLoader(){this.fetchAtBuffer_=!1,this.resyncLoader()}/**
   * Force the SegmentLoader to restart synchronization and make a conservative guess
   * before returning to the simple walk-forward method
   */resyncLoader(){this.transmuxer_&&lQ.reset(this.transmuxer_),this.mediaIndex=null,this.partIndex=null,this.syncPoint_=null,this.isPendingTimestampOffset_=!1,this.callQueue_=[],this.loadQueue_=[],this.metadataQueue_.id3=[],this.metadataQueue_.caption=[],this.abort(),this.transmuxer_&&this.transmuxer_.postMessage({action:"clearParsedMp4Captions"})}/**
   * Remove any data in the source buffer between start and end times
   *
   * @param {number} start - the start time of the region to remove from the buffer
   * @param {number} end - the end time of the region to remove from the buffer
   * @param {Function} [done] - an optional callback to be executed when the remove
   * @param {boolean} force - force all remove operations to happen
   * operation is complete
   */remove(e,t,i=()=>{},r=!1){// skip removes that would throw an error
// commonly happens during a rendition switch at the start of a video
// from start 0 to end 0
if(t===1/0&&(t=this.duration_()),t<=e){this.logger_("skipping remove because end ${end} is <= start ${start}");return}if(!this.sourceUpdater_||!this.getMediaInfo_()){this.logger_("skipping remove because no source updater or starting media info");// nothing to remove if we haven't processed any media
return}// set it to one to complete this function's removes
let s=1,n=()=>{0==--s&&i()};for(let i in(r||!this.audioDisabled_)&&(s++,this.sourceUpdater_.removeAudio(e,t,n)),(r||"main"===this.loaderType_)&&(this.gopBuffer_=uR(this.gopBuffer_,e,t,this.timeMapping_),s++,this.sourceUpdater_.removeVideo(e,t,n)),this.inbandTextTracks_)uA(e,t,this.inbandTextTracks_[i]);uA(e,t,this.segmentMetadataTrack_),n()}/**
   * (re-)schedule monitorBufferTick_ to run as soon as possible
   *
   * @private
   */monitorBuffer_(){this.checkBufferTimeout_&&/*@__PURE__*/w(I).clearTimeout(this.checkBufferTimeout_),this.checkBufferTimeout_=/*@__PURE__*/w(I).setTimeout(this.monitorBufferTick_.bind(this),1)}/**
   * As long as the SegmentLoader is in the READY state, periodically
   * invoke fillBuffer_().
   *
   * @private
   */monitorBufferTick_(){"READY"===this.state&&this.fillBuffer_(),this.checkBufferTimeout_&&/*@__PURE__*/w(I).clearTimeout(this.checkBufferTimeout_),this.checkBufferTimeout_=/*@__PURE__*/w(I).setTimeout(this.monitorBufferTick_.bind(this),500)}/**
   * fill the buffer with segements unless the sourceBuffers are
   * currently updating
   *
   * Note: this function should only ever be called by monitorBuffer_
   * and never directly
   *
   * @private
   */fillBuffer_(){// TODO since the source buffer maintains a queue, and we shouldn't call this function
// except when we're ready for the next segment, this check can most likely be removed
if(this.sourceUpdater_.updating())return;// see if we need to begin loading immediately
let e=this.chooseNextRequest_();e&&("number"==typeof e.timestampOffset&&(this.isPendingTimestampOffset_=!1,this.timelineChangeController_.pendingTimelineChange({type:this.loaderType_,from:this.currentTimeline_,to:e.timeline})),this.loadSegment_(e))}/**
   * Determines if we should call endOfStream on the media source based
   * on the state of the buffer or if appened segment was the final
   * segment in the playlist.
   *
   * @param {number} [mediaIndex] the media index of segment we last appended
   * @param {Object} [playlist] a media playlist object
   * @return {boolean} do we need to call endOfStream on the MediaSource
   */isEndOfStream_(e=this.mediaIndex,t=this.playlist_,i=this.partIndex){if(!t||!this.mediaSource_)return!1;let r="number"==typeof e&&t.segments[e],s=e+1===t.segments.length,n=!r||!r.parts||i+1===r.parts.length;// mediaIndex is zero based but length is 1 based
// so that MediaSources can trigger the `ended` event when it runs out of
// buffered data instead of waiting for me
return t.endList&&"open"===this.mediaSource_.readyState&&s&&n}/**
   * Determines what request should be made given current segment loader state.
   *
   * @return {Object} a request object that describes the segment/part to load
   */chooseNextRequest_(){let e=this.buffered_(),t=oT(e)||0,i=oS(e,this.currentTime_()),r=!this.hasPlayed_()&&i>=1,s=i>=this.goalBufferLength_(),n=this.playlist_.segments;// 1. we don't have segments
// 2. The video has not yet played and we already downloaded a segment
// 3. we already have enough buffered time
if(!n.length||r||s)return null;this.syncPoint_=this.syncPoint_||this.syncController_.getSyncPoint(this.playlist_,this.duration_(),this.currentTimeline_,this.currentTime_());let a={partIndex:null,mediaIndex:null,startOfSegment:null,playlist:this.playlist_,isSyncRequest:!this.syncPoint_};if(a.isSyncRequest)a.mediaIndex=uM(this.currentTimeline_,n,t);else if(null!==this.mediaIndex){let e=n[this.mediaIndex],i="number"==typeof this.partIndex?this.partIndex:-1;a.startOfSegment=e.end?e.end:t,e.parts&&e.parts[i+1]?(a.mediaIndex=this.mediaIndex,a.partIndex=i+1):a.mediaIndex=this.mediaIndex+1}else{// Find the segment containing the end of the buffer or current time.
let{segmentIndex:e,startTime:i,partIndex:r}=o$.getMediaInfoForTime({exactManifestTimings:this.exactManifestTimings,playlist:this.playlist_,currentTime:this.fetchAtBuffer_?t:this.currentTime_(),startingPartIndex:this.syncPoint_.partIndex,startingSegmentIndex:this.syncPoint_.segmentIndex,startTime:this.syncPoint_.time});a.getMediaInfoForTime=this.fetchAtBuffer_?`bufferedEnd ${t}`:`currentTime ${this.currentTime_()}`,a.mediaIndex=e,a.startOfSegment=i,a.partIndex=r}let o=n[a.mediaIndex],l=o&&"number"==typeof a.partIndex&&o.parts&&o.parts[a.partIndex];// the next partIndex is invalid do not choose a next segment.
if(!o||"number"==typeof a.partIndex&&!l)return null;// if the next segment has parts, and we don't have a partIndex.
// Set partIndex to 0
"number"!=typeof a.partIndex&&o.parts&&(a.partIndex=0,l=o.parts[0]);// independentSegments applies to every segment in a playlist. If independentSegments appears in a main playlist,
// it applies to each segment in each media playlist.
// https://datatracker.ietf.org/doc/html/draft-pantos-http-live-streaming-23#section-4.3.5.1
let u=this.vhs_.playlists&&this.vhs_.playlists.main&&this.vhs_.playlists.main.independentSegments||this.playlist_.independentSegments;// if we have no buffered data then we need to make sure
// that the next part we append is "independent" if possible.
// So we check if the previous part is independent, and request
// it if it is.
if(!i&&l&&!u&&!l.independent){if(0===a.partIndex){let e=n[a.mediaIndex-1],t=e.parts&&e.parts.length&&e.parts[e.parts.length-1];t&&t.independent&&(a.mediaIndex-=1,a.partIndex=e.parts.length-1,a.independent="previous segment")}else o.parts[a.partIndex-1].independent&&(a.partIndex-=1,a.independent="previous part")}let h=this.mediaSource_&&"ended"===this.mediaSource_.readyState;// do not choose a next segment if all of the following:
return(// 1. this is the last segment in the playlist
// 2. end of stream has been called on the media source already
// 3. the player is not seeking
a.mediaIndex>=n.length-1&&h&&!this.seeking_()?null:this.generateSegmentInfo_(a))}generateSegmentInfo_(e){let{independent:t,playlist:i,mediaIndex:r,startOfSegment:s,isSyncRequest:n,partIndex:a,forceTimestampOffset:o,getMediaInfoForTime:l}=e,u=i.segments[r],h="number"==typeof a&&u.parts[a],d={requestId:"segment-loader-"+Math.random(),// resolve the segment URL relative to the playlist
uri:h&&h.resolvedUri||u.resolvedUri,mediaIndex:r,partIndex:h?a:null,isSyncRequest:// segment's mediaIndex
n,startOfSegment:s,playlist:i,// unencrypted bytes of the segment
bytes:null,// when a key is defined for this segment, the encrypted bytes
encryptedBytes:null,// The target timestampOffset for this segment when we append it
// to the source buffer
timestampOffset:null,// The timeline that the segment is in
timeline:u.timeline,// The expected duration of the segment in seconds
duration:h&&h.duration||u.duration,segment:u,part:h,byteLength:0,transmuxer:this.transmuxer_,getMediaInfoForTime:l,independent:t},c=void 0!==o?o:this.isPendingTimestampOffset_;d.timestampOffset=this.timestampOffsetForSegment_({segmentTimeline:u.timeline,currentTimeline:this.currentTimeline_,startOfSegment:s,buffered:this.buffered_(),calculateTimestampOffsetForEachSegment:this.calculateTimestampOffsetForEachSegment_,overrideCheck:c});let p=oT(this.sourceUpdater_.audioBuffered());return"number"==typeof p&&// adjusted by the timestamp offset, we must adjust the value here
(d.audioAppendStart=p-this.sourceUpdater_.audioTimestampOffset()),this.sourceUpdater_.videoBuffered().length&&(d.gopsToAlignWith=uP(this.gopBuffer_,// adjusted by the timestmap offset, we must adjust the value here
this.currentTime_()-this.sourceUpdater_.videoTimestampOffset(),this.timeMapping_)),d}// added so that vtt segment loader can override and prevent
// adding timestamp offsets.
timestampOffsetForSegment_(e){return uV(e)}/**
   * Determines if the network has enough bandwidth to complete the current segment
   * request in a timely manner. If not, the request will be aborted early and bandwidth
   * updated to trigger a playlist switch.
   *
   * @param {Object} stats
   *        Object containing stats about the request timing and size
   * @private
   */earlyAbortWhenNeeded_(e){if(this.vhs_.tech_.paused()||// Don't abort if the current playlist is on the lowestEnabledRendition
// TODO: Replace using timeout with a boolean indicating whether this playlist is
//       the lowestEnabledRendition.
!this.xhrOptions_.timeout||// Don't abort if we have no bandwidth information to estimate segment sizes
!this.playlist_.attributes.BANDWIDTH||Date.now()-(e.firstBytesReceivedAt||Date.now())<1e3)return;let t=this.currentTime_(),i=e.bandwidth,r=this.pendingSegment_.duration,s=o$.estimateSegmentRequestTime(r,i,this.playlist_,e.bytesReceived),n=o_(this.buffered_(),t,this.vhs_.tech_.playbackRate())-1;// is larger than the estimated time until the player runs out of forward buffer
if(s<=n)return;let a=uv({main:this.vhs_.playlists.main,currentTime:t,bandwidth:i,duration:this.duration_(),segmentDuration:r,timeUntilRebuffer:n,currentTimeline:this.currentTimeline_,syncController:this.syncController_});if(!a)return;let o=s-n-a.rebufferingImpact,l=.5;n<=oh&&(l=1),a.playlist&&a.playlist.uri!==this.playlist_.uri&&!(o<l)&&(// set the bandwidth to that of the desired playlist being sure to scale by
// BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it
// don't trigger a bandwidthupdate as the bandwidth is artifial
this.bandwidth=a.playlist.attributes.BANDWIDTH*lR.BANDWIDTH_VARIANCE+1,this.trigger("earlyabort"))}handleAbort_(e){this.logger_(`Aborting ${uq(e)}`),this.mediaRequestsAborted+=1}/**
   * XHR `progress` event handler
   *
   * @param {Event}
   *        The XHR `progress` event
   * @param {Object} simpleSegment
   *        A simplified segment object copy
   * @private
   */handleProgress_(e,t){this.earlyAbortWhenNeeded_(t.stats),this.checkForAbort_(t.requestId)||this.trigger("progress")}handleTrackInfo_(e,t){this.earlyAbortWhenNeeded_(e.stats),this.checkForAbort_(e.requestId)||this.checkForIllegalMediaSwitch(t)||(t=t||{},uN(this.currentMediaInfo_,t)||(this.appendInitSegment_={audio:!0,video:!0},this.startingMediaInfo_=t,this.currentMediaInfo_=t,this.logger_("trackinfo update",t),this.trigger("trackinfo")),!this.checkForAbort_(e.requestId)&&(// set trackinfo on the pending segment so that
// it can append.
this.pendingSegment_.trackInfo=t,this.hasEnoughInfoToAppend_()&&this.processCallQueue_()))}handleTimingInfo_(e,t,i,r){if(this.earlyAbortWhenNeeded_(e.stats),this.checkForAbort_(e.requestId))return;let s=this.pendingSegment_,n=u$(t);s[n]=s[n]||{},s[n][i]=r,this.logger_(`timinginfo: ${t} - ${i} - ${r}`),this.hasEnoughInfoToAppend_()&&this.processCallQueue_()}handleCaptions_(e,t){if(this.earlyAbortWhenNeeded_(e.stats),this.checkForAbort_(e.requestId))return;// This could only happen with fmp4 segments, but
// should still not happen in general
if(0===t.length){this.logger_("SegmentLoader received no captions from a caption event");return}let i=this.pendingSegment_;// Wait until we have some video data so that caption timing
// can be adjusted by the timestamp offset
if(!i.hasAppendedData_){this.metadataQueue_.caption.push(this.handleCaptions_.bind(this,e,t));return}let r=null===this.sourceUpdater_.videoTimestampOffset()?this.sourceUpdater_.audioTimestampOffset():this.sourceUpdater_.videoTimestampOffset(),s={};t.forEach(e=>{// caption.stream is actually a track name...
// set to the existing values in tracks or default values
s[e.stream]=s[e.stream]||{// Infinity, as any other value will be less than this
startTime:1/0,captions:[],// 0 as an other value will be more than this
endTime:0};let t=s[e.stream];t.startTime=Math.min(t.startTime,e.startTime+r),t.endTime=Math.max(t.endTime,e.endTime+r),t.captions.push(e)}),Object.keys(s).forEach(e=>{let{startTime:t,endTime:i,captions:n}=s[e],a=this.inbandTextTracks_;this.logger_(`adding cues from ${t} -> ${i} for ${e}`),uS(a,this.vhs_.tech_,e),// We do this because a rendition change that also changes the timescale for captions
// will result in captions being re-parsed for certain segments. If we add them again
// without clearing we will have two of the same captions visible.
uA(t,i,a[e]),uE({captionArray:n,inbandTextTracks:a,timestampOffset:r})}),this.transmuxer_&&this.transmuxer_.postMessage({action:"clearParsedMp4Captions"})}handleId3_(e,t,i){if(this.earlyAbortWhenNeeded_(e.stats),this.checkForAbort_(e.requestId))return;let r=this.pendingSegment_;// we need to have appended data in order for the timestamp offset to be set
if(!r.hasAppendedData_){this.metadataQueue_.id3.push(this.handleId3_.bind(this,e,t,i));return}this.addMetadataToTextTrack(i,t,this.duration_())}processMetadataQueue_(){this.metadataQueue_.id3.forEach(e=>e()),this.metadataQueue_.caption.forEach(e=>e()),this.metadataQueue_.id3=[],this.metadataQueue_.caption=[]}processCallQueue_(){let e=this.callQueue_;// Clear out the queue before the queued functions are run, since some of the
// functions may check the length of the load queue and default to pushing themselves
// back onto the queue.
this.callQueue_=[],e.forEach(e=>e())}processLoadQueue_(){let e=this.loadQueue_;// Clear out the queue before the queued functions are run, since some of the
// functions may check the length of the load queue and default to pushing themselves
// back onto the queue.
this.loadQueue_=[],e.forEach(e=>e())}/**
   * Determines whether the loader has enough info to load the next segment.
   *
   * @return {boolean}
   *         Whether or not the loader has enough info to load the next segment
   */hasEnoughInfoToLoad_(){// Since primary timing goes by video, only the audio loader potentially needs to wait
// to load.
if("audio"!==this.loaderType_)return!0;let e=this.pendingSegment_;// A fill buffer must have already run to establish a pending segment before there's
return(// enough info to load.
!!e&&(!this.getCurrentMediaInfo_()||!// can be requested and downloaded and only wait before it is transmuxed or parsed.
// But in practice, there are a few reasons why it is better to wait until a loader
// is ready to append that segment before requesting and downloading:
//
// 1. Because audio and main loaders cross discontinuities together, if this loader
//    is waiting for the other to catch up, then instead of requesting another
//    segment and using up more bandwidth, by not yet loading, more bandwidth is
//    allotted to the loader currently behind.
// 2. media-segment-request doesn't have to have logic to consider whether a segment
// is ready to be processed or not, isolating the queueing behavior to the loader.
// 3. The audio loader bases some of its segment properties on timing information
//    provided by the main loader, meaning that, if the logic for waiting on
//    processing was in media-segment-request, then it would also need to know how
//    to re-generate the segment information after the main loader caught up.
uz({timelineChangeController:this.timelineChangeController_,currentTimeline:this.currentTimeline_,segmentTimeline:e.timeline,loaderType:this.loaderType_,audioDisabled:this.audioDisabled_})))}getCurrentMediaInfo_(e=this.pendingSegment_){return e&&e.trackInfo||this.currentMediaInfo_}getMediaInfo_(e=this.pendingSegment_){return this.getCurrentMediaInfo_(e)||this.startingMediaInfo_}getPendingSegmentPlaylist(){return this.pendingSegment_?this.pendingSegment_.playlist:null}hasEnoughInfoToAppend_(){if(!this.sourceUpdater_.ready()||this.waitingOnRemove_||this.quotaExceededErrorRetryTimeout_)return!1;let e=this.pendingSegment_,t=this.getCurrentMediaInfo_();// we do not have information on this specific
// segment yet
if(!e||!t)return!1;let{hasAudio:i,hasVideo:r,isMuxed:s}=t;return!(r&&!e.videoTimingInfo||i&&!this.audioDisabled_&&!s&&!e.audioTimingInfo||uz({timelineChangeController:this.timelineChangeController_,currentTimeline:this.currentTimeline_,segmentTimeline:e.timeline,loaderType:this.loaderType_,audioDisabled:this.audioDisabled_}))}handleData_(e,t){if(this.earlyAbortWhenNeeded_(e.stats),this.checkForAbort_(e.requestId))return;// If there's anything in the call queue, then this data came later and should be
// executed after the calls currently queued.
if(this.callQueue_.length||!this.hasEnoughInfoToAppend_()){this.callQueue_.push(this.handleData_.bind(this,e,t));return}let i=this.pendingSegment_;// update the time mapping so we can translate from display time to media time
// logic may change behavior depending on the state, and changing state too early may
// inflate our estimates of bandwidth. In the future this should be re-examined to
// note more granular states.
// don't process and append data if the mediaSource is closed
if(this.setTimeMapping_(i.timeline),this.updateMediaSecondsLoaded_(i.part||i.segment),"closed"!==this.mediaSource_.readyState){if(e.map&&(e.map=this.initSegmentForMap(e.map,!0),i.segment.map=e.map),e.key&&this.segmentKey(e.key,!0),i.isFmp4=e.isFmp4,i.timingInfo=i.timingInfo||{},i.isFmp4)this.trigger("fmp4"),i.timingInfo.start=i[u$(t.type)].start;else{let e;let t=this.getCurrentMediaInfo_(),r="main"===this.loaderType_&&t&&t.hasVideo;r&&(e=i.videoTimingInfo.start),// Segment loader knows more about segment timing than the transmuxer (in certain
// aspects), so make any changes required for a more accurate start time.
// Don't set the end time yet, as the segment may not be finished processing.
i.timingInfo.start=this.trueSegmentStart_({currentStart:i.timingInfo.start,playlist:i.playlist,mediaIndex:i.mediaIndex,currentVideoTimestampOffset:this.sourceUpdater_.videoTimestampOffset(),useVideoTimingInfo:r,firstVideoFrameTimeForData:e,videoTimingInfo:i.videoTimingInfo,audioTimingInfo:i.audioTimingInfo})}// Init segments for audio and video only need to be appended in certain cases. Now
// be appended or not.
if(// that data is about to be appended, we can check the final cases to determine
// whether we should append an init segment.
this.updateAppendInitSegmentStatus(i,t.type),// as we use the start of the segment to offset the best guess (playlist provided)
// timestamp offset.
this.updateSourceBufferTimestampOffset_(i),i.isSyncRequest){// first save/update our timing info for this segment.
// this is what allows us to choose an accurate segment
// and the main reason we make a sync request.
this.updateTimingInfoEnd_(i),this.syncController_.saveSegmentTimingInfo({segmentInfo:i,shouldSaveTimelineMapping:"main"===this.loaderType_});let e=this.chooseNextRequest_();// If the sync request isn't the segment that would be requested next
// after taking into account its timing info, do not append it.
if(e.mediaIndex!==i.mediaIndex||e.partIndex!==i.partIndex){this.logger_("sync segment was incorrect, not appending");return}// otherwise append it like any other segment as our guess was correct.
this.logger_("sync segment was correct, appending")}// Save some state so that in the future anything waiting on first append (and/or
// timestamp offset(s)) can process immediately. While the extra state isn't optimal,
// we need some notion of whether the timestamp offset or other relevant information
// has had a chance to be set.
i.hasAppendedData_=!0,this.processMetadataQueue_(),this.appendData_(i,t)}}updateAppendInitSegmentStatus(e,t){"main"!==this.loaderType_||"number"!=typeof e.timestampOffset||e.changedTimestampOffset||// append init segments
(this.appendInitSegment_={audio:!0,video:!0}),this.playlistOfLastInitSegment_[t]!==e.playlist&&// changed
(this.appendInitSegment_[t]=!0)}getInitSegmentAndUpdateState_({type:e,initSegment:t,map:i,playlist:r}){// "The EXT-X-MAP tag specifies how to obtain the Media Initialization Section
// (Section 3) required to parse the applicable Media Segments.  It applies to every
// Media Segment that appears after it in the Playlist until the next EXT-X-MAP tag
// or until the end of the playlist."
// https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.5
if(i){let e=lh(i);if(this.activeInitSegmentId_===e)return null;// a map-specified init segment takes priority over any transmuxed (or otherwise
// obtained) init segment
//
// this also caches the init segment for later use
t=this.initSegmentForMap(i,!0).bytes,this.activeInitSegmentId_=e}// We used to always prepend init segments for video, however, that shouldn't be
return(// necessary. Instead, we should only append on changes, similar to what we've always
// done for audio. This is more important (though may not be that important) for
// frame-by-frame appending for LHLS, simply because of the increased quantity of
// appends.
t&&this.appendInitSegment_[e]?(// Make sure we track the playlist that we last used for the init segment, so that
// we can re-append the init segment in the event that we get data from a new
// playlist. Discontinuities and track changes are handled in other sections.
this.playlistOfLastInitSegment_[e]=r,this.appendInitSegment_[e]=!1,// we are appending the muxer init segment
this.activeInitSegmentId_=null,t):null)}handleQuotaExceededError_({segmentInfo:e,type:t,bytes:i},r){let s=this.sourceUpdater_.audioBuffered(),n=this.sourceUpdater_.videoBuffered();s.length>1&&this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the audio buffer: "+ob(s).join(", ")),n.length>1&&this.logger_("On QUOTA_EXCEEDED_ERR, found gaps in the video buffer: "+ob(n).join(", "));let a=s.length?s.start(0):0,o=s.length?s.end(s.length-1):0,l=n.length?n.start(0):0,u=n.length?n.end(n.length-1):0;if(o-a<=1&&u-l<=1){// Can't remove enough buffer to make room for new segment (or the browser doesn't
// allow for appends of segments this size). In the future, it may be possible to
// split up the segment and append in pieces, but for now, error out this playlist
// in an attempt to switch to a more manageable rendition.
this.logger_(`On QUOTA_EXCEEDED_ERR, single segment too large to append to buffer, triggering an error. Appended byte length: ${i.byteLength}, audio buffer: ${ob(s).join(", ")}, video buffer: ${ob(n).join(", ")}, `),this.error({message:"Quota exceeded error with append of a single segment of content",excludeUntil:1/0}),this.trigger("error");return}// To try to resolve the quota exceeded error, clear back buffer and retry. This means
// that the segment-loader should block on future events until this one is handled, so
// that it doesn't keep moving onto further segments. Adding the call to the call
// queue will prevent further appends until waitingOnRemove_ and
// quotaExceededErrorRetryTimeout_ are cleared.
//
// Note that this will only block the current loader. In the case of demuxed content,
// the other load may keep filling as fast as possible. In practice, this should be
// OK, as it is a rare case when either audio has a high enough bitrate to fill up a
// source buffer, or video fills without enough room for audio to append (and without
// the availability of clearing out seconds of back buffer to make room for audio).
// But it might still be good to handle this case in the future as a TODO.
this.waitingOnRemove_=!0,this.callQueue_.push(this.appendToSourceBuffer_.bind(this,{segmentInfo:e,type:t,bytes:i}));let h=this.currentTime_(),d=h-1;// Try to remove as much audio and video as possible to make room for new content
this.logger_(`On QUOTA_EXCEEDED_ERR, removing audio/video from 0 to ${d}`),this.remove(0,d,()=>{this.logger_("On QUOTA_EXCEEDED_ERR, retrying append in 1s"),this.waitingOnRemove_=!1,// attempts (since we can't clear less than the minimum)
this.quotaExceededErrorRetryTimeout_=/*@__PURE__*/w(I).setTimeout(()=>{this.logger_("On QUOTA_EXCEEDED_ERR, re-processing call queue"),this.quotaExceededErrorRetryTimeout_=null,this.processCallQueue_()},1e3)},!0)}handleAppendError_({segmentInfo:e,type:t,bytes:i},r){// if there's no error, nothing to do
if(r){if(22===r.code){this.handleQuotaExceededError_({segmentInfo:e,type:t,bytes:i});// A quota exceeded error should be recoverable with a future re-append, so no need
// to trigger an append error.
return}this.logger_("Received non QUOTA_EXCEEDED_ERR on append",r),this.error(`${t} append of ${i.length}b failed for segment #${e.mediaIndex} in playlist ${e.playlist.id}`),// (see https://w3c.github.io/media-source/#sourcebuffer-append-error).
//
// Trigger a special error so that it can be handled separately from normal,
// recoverable errors.
this.trigger("appenderror")}}appendToSourceBuffer_({segmentInfo:e,type:t,initSegment:i,data:r,bytes:s}){// If this is a re-append, bytes were already created and don't need to be recreated
if(!s){let e=[r],t=r.byteLength;i&&(// if the media initialization segment is changing, append it before the content
// segment
e.unshift(i),t+=i.byteLength),// haven't yet tested that, and prepending is how we have always done things.
s=uT({bytes:t,segments:e})}this.sourceUpdater_.appendBuffer({segmentInfo:e,type:t,bytes:s},this.handleAppendError_.bind(this,{segmentInfo:e,type:t,bytes:s}))}handleSegmentTimingInfo_(e,t,i){if(!this.pendingSegment_||t!==this.pendingSegment_.requestId)return;let r=this.pendingSegment_.segment,s=`${e}TimingInfo`;r[s]||(r[s]={}),r[s].transmuxerPrependedSeconds=i.prependedContentDuration||0,r[s].transmuxedPresentationStart=i.start.presentation,r[s].transmuxedDecodeStart=i.start.decode,r[s].transmuxedPresentationEnd=i.end.presentation,r[s].transmuxedDecodeEnd=i.end.decode,r[s].baseMediaDecodeTime=i.baseMediaDecodeTime}appendData_(e,t){let{type:i,data:r}=t;if(!r||!r.byteLength||"audio"===i&&this.audioDisabled_)return;let s=this.getInitSegmentAndUpdateState_({type:i,initSegment:t.initSegment,playlist:e.playlist,map:e.isFmp4?e.segment.map:null});this.appendToSourceBuffer_({segmentInfo:e,type:i,initSegment:s,data:r})}/**
   * load a specific segment from a request into the buffer
   *
   * @private
   */loadSegment_(e){if(this.state="WAITING",this.pendingSegment_=e,this.trimBackBuffer_(e),"number"==typeof e.timestampOffset&&this.transmuxer_&&this.transmuxer_.postMessage({action:"clearAllMp4Captions"}),!this.hasEnoughInfoToLoad_()){this.loadQueue_.push(()=>{// regenerate the audioAppendStart, timestampOffset, etc as they
// may have changed since this function was added to the queue.
let t=/*@__PURE__*/w(R)({},e,{forceTimestampOffset:!0});/*@__PURE__*/w(R)(e,this.generateSegmentInfo_(t)),this.isPendingTimestampOffset_=!1,this.updateTransmuxerAndRequestSegment_(e)});return}this.updateTransmuxerAndRequestSegment_(e)}updateTransmuxerAndRequestSegment_(e){this.shouldUpdateTransmuxerTimestampOffset_(e.timestampOffset)&&(this.gopBuffer_.length=0,e.gopsToAlignWith=[],this.timeMapping_=0,this.transmuxer_.postMessage({action:"reset"}),this.transmuxer_.postMessage({action:"setTimestampOffset",timestampOffset:e.timestampOffset}));let t=this.createSimplifiedSegmentObj_(e),i=this.isEndOfStream_(e.mediaIndex,e.playlist,e.partIndex),r=null!==this.mediaIndex,s=e.timeline!==this.currentTimeline_&&// currentTimeline starts at -1, so we shouldn't end the timeline switching to 0,
// the first timeline
e.timeline>0;this.logger_(`Requesting ${uq(e)}`),t.map&&!t.map.bytes&&(this.logger_("going to request init segment."),this.appendInitSegment_={video:!0,audio:!0}),e.abortRequests=un({xhr:this.vhs_.xhr,xhrOptions:this.xhrOptions_,decryptionWorker:this.decrypter_,segment:t,abortFn:this.handleAbort_.bind(this,e),progressFn:this.handleProgress_.bind(this),trackInfoFn:this.handleTrackInfo_.bind(this),timingInfoFn:this.handleTimingInfo_.bind(this),videoSegmentTimingInfoFn:this.handleSegmentTimingInfo_.bind(this,"video",e.requestId),audioSegmentTimingInfoFn:this.handleSegmentTimingInfo_.bind(this,"audio",e.requestId),captionsFn:this.handleCaptions_.bind(this),isEndOfTimeline:i||r&&s,endedTimelineFn:()=>{this.logger_("received endedtimeline callback")},id3Fn:this.handleId3_.bind(this),dataFn:this.handleData_.bind(this),doneFn:this.segmentRequestFinished_.bind(this),onTransmuxerLog:({message:t,level:i,stream:r})=>{this.logger_(`${uq(e)} logged from transmuxer stream ${r} as a ${i}: ${t}`)}})}/**
   * trim the back buffer so that we don't have too much data
   * in the source buffer
   *
   * @private
   *
   * @param {Object} segmentInfo - the current segment
   */trimBackBuffer_(e){let t=uj(this.seekable_(),this.currentTime_(),this.playlist_.targetDuration||10);// Chrome has a hard limit of 150MB of
// buffer and a very conservative "garbage collector"
// We manually clear out the old buffer to ensure
// we don't trigger the QuotaExceeded error
// on the source buffer during subsequent appends
t>0&&this.remove(0,t)}/**
   * created a simplified copy of the segment object with just the
   * information necessary to perform the XHR and decryption
   *
   * @private
   *
   * @param {Object} segmentInfo - the current segment
   * @return {Object} a simplified segment object copy
   */createSimplifiedSegmentObj_(e){let t=e.segment,i=e.part,r={resolvedUri:i?i.resolvedUri:t.resolvedUri,byterange:i?i.byterange:t.byterange,requestId:e.requestId,transmuxer:e.transmuxer,audioAppendStart:e.audioAppendStart,gopsToAlignWith:e.gopsToAlignWith,part:e.part},s=e.playlist.segments[e.mediaIndex-1];if(s&&s.timeline===t.timeline&&(s.videoTimingInfo?r.baseStartTime=s.videoTimingInfo.transmuxedDecodeEnd:s.audioTimingInfo&&(r.baseStartTime=s.audioTimingInfo.transmuxedDecodeEnd)),t.key){// if the media sequence is greater than 2^32, the IV will be incorrect
// assuming 10s segments, that would be about 1300 years
let i=t.key.iv||new Uint32Array([0,0,0,e.mediaIndex+e.playlist.mediaSequence]);r.key=this.segmentKey(t.key),r.key.iv=i}return t.map&&(r.map=this.initSegmentForMap(t.map)),r}saveTransferStats_(e){// every request counts as a media request even if it has been aborted
// or canceled due to a timeout
this.mediaRequests+=1,e&&(this.mediaBytesTransferred+=e.bytesReceived,this.mediaTransferDuration+=e.roundTripTime)}saveBandwidthRelatedStats_(e,t){if(// byteLength will be used for throughput, and should be based on bytes receieved,
// which we only know at the end of the request and should reflect total bytes
// downloaded rather than just bytes processed from components of the segment
this.pendingSegment_.byteLength=t.bytesReceived,e<uB){this.logger_(`Ignoring segment's bandwidth because its duration of ${e} is less than the min to record ${uB}`);return}this.bandwidth=t.bandwidth,this.roundTrip=t.roundTripTime}handleTimeout_(){// although the VTT segment loader bandwidth isn't really used, it's good to
// maintain functinality between segment loaders
this.mediaRequestsTimedout+=1,this.bandwidth=1,this.roundTrip=NaN,this.trigger("bandwidthupdate"),this.trigger("timeout")}/**
   * Handle the callback from the segmentRequest function and set the
   * associated SegmentLoader state and errors if necessary
   *
   * @private
   */segmentRequestFinished_(e,t,i){// TODO handle special cases, e.g., muxed audio/video but only audio in the segment
// check the call queue directly since this function doesn't need to deal with any
// data, and can continue even if the source buffers are not set up and we didn't get
// any data from the segment
if(this.callQueue_.length){this.callQueue_.push(this.segmentRequestFinished_.bind(this,e,t,i));return}if(this.saveTransferStats_(t.stats),!this.pendingSegment_||t.requestId!==this.pendingSegment_.requestId)return;// an error occurred from the active pendingSegment_ so reset everything
if(e){if(this.pendingSegment_=null,this.state="READY",e.code===lZ.ABORTED)return;// set the bandwidth to a very low value and trigger an ABR switch to
// take emergency action
if(this.pause(),e.code===lZ.TIMEOUT){this.handleTimeout_();return}// if control-flow has arrived here, then the error is real
// emit an error event to exclude the current playlist
this.mediaRequestsErrored+=1,this.error(e),this.trigger("error");return}let r=this.pendingSegment_;// the response was a success so set any bandwidth stats the request
// generated for ABR purposes
this.saveBandwidthRelatedStats_(r.duration,t.stats),r.endOfAllRequests=t.endOfAllRequests,i.gopInfo&&(this.gopBuffer_=uO(this.gopBuffer_,i.gopInfo,this.safeAppend_)),// Although we may have already started appending on progress, we shouldn't switch the
// state away from loading until we are officially done loading the segment data.
this.state="APPENDING",this.trigger("appending"),this.waitForAppendsToComplete_(r)}setTimeMapping_(e){let t=this.syncController_.mappingForTimeline(e);null!==t&&(this.timeMapping_=t)}updateMediaSecondsLoaded_(e){"number"==typeof e.start&&"number"==typeof e.end?this.mediaSecondsLoaded+=e.end-e.start:this.mediaSecondsLoaded+=e.duration}shouldUpdateTransmuxerTimestampOffset_(e){return null!==e&&("main"===this.loaderType_&&e!==this.sourceUpdater_.videoTimestampOffset()||!this.audioDisabled_&&e!==this.sourceUpdater_.audioTimestampOffset())}trueSegmentStart_({currentStart:e,playlist:t,mediaIndex:i,firstVideoFrameTimeForData:r,currentVideoTimestampOffset:s,useVideoTimingInfo:n,videoTimingInfo:a,audioTimingInfo:o}){if(void 0!==e)return e;if(!n)return o.start;let l=t.segments[i-1];// The start of a segment should be the start of the first full frame contained
return(// within that segment. Since the transmuxer maintains a cache of incomplete data
// from and/or the last frame seen, the start time may reflect a frame that starts
// in the previous segment. Check for that case and ensure the start time is
// accurate for the segment.
0!==i&&l&&void 0!==l.start&&l.end===r+s?a.start:r)}waitForAppendsToComplete_(e){let t=this.getCurrentMediaInfo_(e);if(!t){this.error({message:"No starting media returned, likely due to an unsupported media format.",playlistExclusionDuration:1/0}),this.trigger("error");return}// Although transmuxing is done, appends may not yet be finished. Throw a marker
// on each queue this loader is responsible for to ensure that the appends are
// complete.
let{hasAudio:i,hasVideo:r,isMuxed:s}=t,n="main"===this.loaderType_&&r,a=!this.audioDisabled_&&i&&!s;if(e.waitingOnAppends=0,!e.hasAppendedData_){e.timingInfo||"number"!=typeof e.timestampOffset||// timing information.
//
// If there's no audio or video timing information, then the timestamp offset
// can't be adjusted to the appropriate value for the transmuxer and source
// buffers.
//
// Therefore, the next segment should be used to set the timestamp offset.
(this.isPendingTimestampOffset_=!0),// override settings for metadata only segments
e.timingInfo={start:0},e.waitingOnAppends++,this.isPendingTimestampOffset_||(// update the timestampoffset
this.updateSourceBufferTimestampOffset_(e),// no video/audio data.
this.processMetadataQueue_()),this.checkAppendsDone_(e);return}// Since source updater could call back synchronously, do the increments first.
n&&e.waitingOnAppends++,a&&e.waitingOnAppends++,n&&this.sourceUpdater_.videoQueueCallback(this.checkAppendsDone_.bind(this,e)),a&&this.sourceUpdater_.audioQueueCallback(this.checkAppendsDone_.bind(this,e))}checkAppendsDone_(e){this.checkForAbort_(e.requestId)||(e.waitingOnAppends--,0===e.waitingOnAppends&&this.handleAppendsDone_())}checkForIllegalMediaSwitch(e){let t=uF(this.loaderType_,this.getCurrentMediaInfo_(),e);return!!t&&(this.error({message:t,playlistExclusionDuration:1/0}),this.trigger("error"),!0)}updateSourceBufferTimestampOffset_(e){if(null===e.timestampOffset||// we don't yet have the start for whatever media type (video or audio) has
// priority, timing-wise, so we must wait
"number"!=typeof e.timingInfo.start||// already updated the timestamp offset for this segment
e.changedTimestampOffset||// the alt audio loader should not be responsible for setting the timestamp offset
"main"!==this.loaderType_)return;let t=!1;// Primary timing goes by video, and audio is trimmed in the transmuxer, meaning that
// the timing info here comes from video. In the event that the audio is longer than
// the video, this will trim the start of the audio.
// This also trims any offset from 0 at the beginning of the media
e.timestampOffset-=this.getSegmentStartTimeForTimestampOffsetCalculation_({videoTimingInfo:e.segment.videoTimingInfo,audioTimingInfo:e.segment.audioTimingInfo,timingInfo:e.timingInfo}),// timestamp offset. Retaining this bit of state prevents us from updating in the
// future (within the same segment), however, there may be a better way to handle it.
e.changedTimestampOffset=!0,e.timestampOffset!==this.sourceUpdater_.videoTimestampOffset()&&(this.sourceUpdater_.videoTimestampOffset(e.timestampOffset),t=!0),e.timestampOffset!==this.sourceUpdater_.audioTimestampOffset()&&(this.sourceUpdater_.audioTimestampOffset(e.timestampOffset),t=!0),t&&this.trigger("timestampoffset")}getSegmentStartTimeForTimestampOffsetCalculation_({videoTimingInfo:e,audioTimingInfo:t,timingInfo:i}){return this.useDtsForTimestampOffset_?e&&"number"==typeof e.transmuxedDecodeStart?e.transmuxedDecodeStart:t&&"number"==typeof t.transmuxedDecodeStart?t.transmuxedDecodeStart:i.start:i.start}updateTimingInfoEnd_(e){e.timingInfo=e.timingInfo||{};let t=this.getMediaInfo_(),i="main"===this.loaderType_&&t&&t.hasVideo,r=i&&e.videoTimingInfo?e.videoTimingInfo:e.audioTimingInfo;r&&(e.timingInfo.end="number"==typeof r.end?// current example is the case of fmp4), so use the rough duration to calculate an
// end time.
r.end:r.start+e.duration)}/**
   * callback to run when appendBuffer is finished. detects if we are
   * in a good state to do things with the data we got, or if we need
   * to wait for more
   *
   * @private
   */handleAppendsDone_(){if(this.pendingSegment_&&this.trigger("appendsdone"),!this.pendingSegment_){this.state="READY",this.paused()||this.monitorBuffer_();return}let e=this.pendingSegment_;// Now that the end of the segment has been reached, we can set the end time. It's
// best to wait until all appends are done so we're sure that the primary media is
// finished (and we have its end time).
this.updateTimingInfoEnd_(e),this.shouldSaveSegmentTimingInfo_&&// reasons:
//
// 1) Only one mapping is saved per timeline, meaning that if both the audio loader
//    and the main loader try to save the timeline mapping, whichever comes later
//    will overwrite the first. In theory this is OK, as the mappings should be the
//    same, however, it breaks for (2)
// 2) In the event of a live stream, the initial live point will make for a somewhat
//    arbitrary mapping. If audio and video streams are not perfectly in-sync, then
//    the mapping will be off for one of the streams, dependent on which one was
//    first saved (see (1)).
// 3) Primary timing goes by video in VHS, so the mapping should be video.
//
// Since the audio loader will wait for the main loader to load the first segment,
// the main loader will save the first timeline mapping, and ensure that there won't
// be a case where audio loads two segments without saving a mapping (thus leading
// to missing segment timing info).
this.syncController_.saveSegmentTimingInfo({segmentInfo:e,shouldSaveTimelineMapping:"main"===this.loaderType_});let t=uX(e,this.sourceType_);if(t&&("warn"===t.severity?a9.log.warn(t.message):this.logger_(t.message)),this.recordThroughput_(e),this.pendingSegment_=null,this.state="READY",e.isSyncRequest&&(this.trigger("syncinfoupdate"),!e.hasAppendedData_)){this.logger_(`Throwing away un-appended sync request ${uq(e)}`);return}this.logger_(`Appended ${uq(e)}`),this.addSegmentMetadataCue_(e),this.currentTime_()>=this.replaceSegmentsUntil_&&(this.replaceSegmentsUntil_=-1,this.fetchAtBuffer_=!0),this.currentTimeline_===e.timeline||(this.timelineChangeController_.lastTimelineChange({type:this.loaderType_,from:this.currentTimeline_,to:e.timeline}),"main"!==this.loaderType_||this.audioDisabled_||this.timelineChangeController_.lastTimelineChange({type:"audio",from:this.currentTimeline_,to:e.timeline})),this.currentTimeline_=e.timeline,// the following conditional otherwise it may consider this a bad "guess"
// and attempt to resync when the post-update seekable window and live
// point would mean that this was the perfect segment to fetch
this.trigger("syncinfoupdate");let i=e.segment,r=e.part,s=i.end&&this.currentTime_()-i.end>3*e.playlist.targetDuration,n=r&&r.end&&this.currentTime_()-r.end>3*e.playlist.partTargetDuration;// the currentTime_ that means that our conservative guess was too conservative.
// In that case, reset the loader state so that we try to use any information gained
// from the previous request to create a new, more accurate, sync-point.
if(s||n){this.logger_(`bad ${s?"segment":"part"} ${uq(e)}`),this.resetEverything();return}let a=null!==this.mediaIndex;// Don't do a rendition switch unless we have enough time to get a sync segment
a&&this.trigger("bandwidthupdate"),this.trigger("progress"),this.mediaIndex=e.mediaIndex,this.partIndex=e.partIndex,this.isEndOfStream_(e.mediaIndex,e.playlist,e.partIndex)&&this.endOfStream(),// used for testing
this.trigger("appended"),e.hasAppendedData_&&this.mediaAppends++,this.paused()||this.monitorBuffer_()}/**
   * Records the current throughput of the decrypt, transmux, and append
   * portion of the semgment pipeline. `throughput.rate` is a the cumulative
   * moving average of the throughput. `throughput.count` is the number of
   * data points in the average.
   *
   * @private
   * @param {Object} segmentInfo the object returned by loadSegment
   */recordThroughput_(e){if(e.duration<uB){this.logger_(`Ignoring segment's throughput because its duration of ${e.duration} is less than the min to record ${uB}`);return}let t=this.throughput.rate,i=Date.now()-e.endOfAllRequests+1,r=Math.floor(e.byteLength/i*8e3);// Add one to the time to ensure that we don't accidentally attempt to divide
//   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)
this.throughput.rate+=(r-t)/++this.throughput.count}/**
   * Adds a cue to the segment-metadata track with some metadata information about the
   * segment
   *
   * @private
   * @param {Object} segmentInfo
   *        the object returned by loadSegment
   * @method addSegmentMetadataCue_
   */addSegmentMetadataCue_(e){if(!this.segmentMetadataTrack_)return;let t=e.segment,i=t.start,r=t.end;if(!uU(i)||!uU(r))return;uA(i,r,this.segmentMetadataTrack_);let s=/*@__PURE__*/w(I).WebKitDataCue||/*@__PURE__*/w(I).VTTCue,n={custom:t.custom,dateTimeObject:t.dateTimeObject,dateTimeString:t.dateTimeString,programDateTime:t.programDateTime,bandwidth:e.playlist.attributes.BANDWIDTH,resolution:e.playlist.attributes.RESOLUTION,codecs:e.playlist.attributes.CODECS,byteLength:e.byteLength,uri:e.uri,timeline:e.timeline,playlist:e.playlist.id,start:i,end:r},a=JSON.stringify(n),o=new s(i,r,a);// the differences of WebKitDataCue in safari and VTTCue in other browsers
o.value=n,this.segmentMetadataTrack_.addCue(o)}/**
   * Public setter for defining the private replaceSegmentsUntil_ property, which
   * determines when we can return fetchAtBuffer to true if overwriting the buffer.
   *
   * @param {number} bufferedEnd the end of the buffered range to replace segments
   * until currentTime reaches this time.
   */set replaceSegmentsUntil(e){this.logger_(`Replacing currently buffered segments until ${e}`),this.replaceSegmentsUntil_=e}}function uY(){}const uQ=function(e){return"string"!=typeof e?e:e.replace(/./,e=>e.toUpperCase())},uJ=["video","audio"],uZ=(e,t)=>{let i=t[`${e}Buffer`];return i&&i.updating||t.queuePending[e]},u0=(e,t)=>{for(let i=0;i<t.length;i++){let r=t[i];if("mediaSource"===r.type)break;if(r.type===e)return i}return null},u1=(e,t)=>{if(0===t.queue.length)return;let i=0,r=t.queue[i];if("mediaSource"===r.type){t.updating()||"closed"===t.mediaSource.readyState||(t.queue.shift(),r.action(t),r.doneFn&&r.doneFn(),// Only specific source buffer actions must wait for async updateend events. Media
// Source actions process synchronously. Therefore, both audio and video source
// buffers are now clear to process the next queue entries.
u1("audio",t),u1("video",t));// Media Source actions require both source buffers, so if the media source action
// couldn't process yet (because one or both source buffers are busy), block other
// queue actions until both are available and the media source action can process.
return}if("mediaSource"!==e&&!(!t.ready()||"closed"===t.mediaSource.readyState||uZ(e,t))){if(r.type!==e){if(null===(i=u0(e,t.queue)))// there's a media source queue entry before the next entry of this type, in which
// case wait for that action to process first.
return;r=t.queue[i]}if(t.queue.splice(i,1),//
// The queue pending operation must be set before the action is performed in the event
// that the action results in a synchronous event that is acted upon. For instance, if
// an exception is thrown that can be handled, it's possible that new actions will be
// appended to an empty queue and immediately executed, but would not have the correct
// pending information if this property was set after the action was performed.
t.queuePending[e]=r,r.action(e,t),!r.doneFn){// synchronous operation, process next entry
t.queuePending[e]=null,u1(e,t);return}}},u2=(e,t)=>{let i=t[`${e}Buffer`],r=uQ(e);i&&(i.removeEventListener("updateend",t[`on${r}UpdateEnd_`]),i.removeEventListener("error",t[`on${r}Error_`]),t.codecs[e]=null,t[`${e}Buffer`]=null)},u4=(e,t)=>e&&t&&-1!==Array.prototype.indexOf.call(e.sourceBuffers,t),u8={appendBuffer:(e,t,i)=>(r,s)=>{let n=s[`${r}Buffer`];// can't do anything if the media source / source buffer is null
    // or the media source does not contain this source buffer.
    if(u4(s.mediaSource,n)){s.logger_(`Appending segment ${t.mediaIndex}'s ${e.length} bytes to ${r}Buffer`);try{n.appendBuffer(e)}catch(e){s.logger_(`Error with code ${e.code} `+(22===e.code?"(QUOTA_EXCEEDED_ERR) ":"")+`when appending segment ${t.mediaIndex} to ${r}Buffer`),s.queuePending[r]=null,i(e)}}},remove:(e,t)=>(i,r)=>{let s=r[`${i}Buffer`];// can't do anything if the media source / source buffer is null
    // or the media source does not contain this source buffer.
    if(u4(r.mediaSource,s)){r.logger_(`Removing ${e} to ${t} from ${i}Buffer`);try{s.remove(e,t)}catch(s){r.logger_(`Remove ${e} to ${t} from ${i}Buffer failed`)}}},timestampOffset:e=>(t,i)=>{let r=i[`${t}Buffer`];// can't do anything if the media source / source buffer is null
    // or the media source does not contain this source buffer.
    u4(i.mediaSource,r)&&(i.logger_(`Setting ${t}timestampOffset to ${e}`),r.timestampOffset=e)},callback:e=>(t,i)=>{e()},endOfStream:e=>t=>{if("open"===t.mediaSource.readyState){t.logger_(`Calling mediaSource endOfStream(${e||""})`);try{t.mediaSource.endOfStream(e)}catch(e){a9.log.warn("Failed to call media source endOfStream",e)}}},duration:e=>t=>{t.logger_(`Setting mediaSource duration to ${e}`);try{t.mediaSource.duration=e}catch(e){a9.log.warn("Failed to set media source duration",e)}},abort:()=>(e,t)=>{if("open"!==t.mediaSource.readyState)return;let i=t[`${e}Buffer`];// can't do anything if the media source / source buffer is null
    // or the media source does not contain this source buffer.
    if(u4(t.mediaSource,i)){t.logger_(`calling abort on ${e}Buffer`);try{i.abort()}catch(t){a9.log.warn(`Failed to abort on ${e}Buffer`,t)}}},addSourceBuffer:(e,t)=>i=>{let r=uQ(e),s=e0(t);i.logger_(`Adding ${e}Buffer with codec ${t} to mediaSource`);let n=i.mediaSource.addSourceBuffer(s);n.addEventListener("updateend",i[`on${r}UpdateEnd_`]),n.addEventListener("error",i[`on${r}Error_`]),i.codecs[e]=t,i[`${e}Buffer`]=n},removeSourceBuffer:e=>t=>{let i=t[`${e}Buffer`];// or the media source does not contain this source buffer.
    if(u2(e,t),u4(t.mediaSource,i)){t.logger_(`Removing ${e}Buffer with codec ${t.codecs[e]} from mediaSource`);try{t.mediaSource.removeSourceBuffer(i)}catch(t){a9.log.warn(`Failed to removeSourceBuffer ${e}Buffer`,t)}}},changeType:e=>(t,i)=>{let r=i[`${t}Buffer`],s=e0(e);// or the media source does not contain this source buffer.
    u4(i.mediaSource,r)&&i.codecs[t]!==e&&(i.logger_(`changing ${t}Buffer codec from ${i.codecs[t]} to ${e}`),r.changeType(s),i.codecs[t]=e)}},u5=({type:e,sourceUpdater:t,action:i,doneFn:r,name:s})=>{t.queue.push({type:e,action:i,doneFn:r,name:s}),u1(e,t)},u3=(e,t)=>i=>{let r=t[`${e}Buffered`](),s=/**
 * Converts any buffered time range to a descriptive string
 *
 * @param {TimeRanges} buffered - time ranges
 * @return {string} - descriptive string
 */function(e){let t="";for(let i=0;i<e.length;i++){let r=e.start(i),s=e.end(i),n=s-r;t.length&&(t+="\n"),t+=`[${n}](${r} -> ${s})`}return t||"empty"}(r);// there are some actions that may trigger updateend events without set definitions in
    // the w3c spec. For instance, setting the duration on the media source may trigger
    // updateend events on source buffers. This does not appear to be in the spec. As such,
    // if we encounter an updateend without a corresponding pending action from our queue
    // for that source buffer type, process the next action.
    if(t.logger_(`${e} source buffer update end. Buffered: 
`,s),t.queuePending[e]){let i=t.queuePending[e].doneFn;t.queuePending[e]=null,i&&i(t[`${e}Error_`])}u1(e,t)};/**
 * A queue of callbacks to be serialized and applied when a
 * MediaSource and its associated SourceBuffers are not in the
 * updating state. It is used by the segment loader to update the
 * underlying SourceBuffers when new data is loaded, for instance.
 *
 * @class SourceUpdater
 * @param {MediaSource} mediaSource the MediaSource to create the SourceBuffer from
 * @param {string} mimeType the desired MIME type of the underlying SourceBuffer
 */class u6 extends a9.EventTarget{constructor(e){super(),this.mediaSource=e,this.sourceopenListener_=()=>u1("mediaSource",this),this.mediaSource.addEventListener("sourceopen",this.sourceopenListener_),this.logger_=oo("SourceUpdater"),this.audioTimestampOffset_=0,this.videoTimestampOffset_=0,this.queue=[],this.queuePending={audio:null,video:null},this.delayedAudioAppendQueue_=[],this.videoAppendQueued_=!1,this.codecs={},this.onVideoUpdateEnd_=u3("video",this),this.onAudioUpdateEnd_=u3("audio",this),this.onVideoError_=e=>{// used for debugging
this.videoError_=e},this.onAudioError_=e=>{// used for debugging
this.audioError_=e},this.createdSourceBuffers_=!1,this.initializedEme_=!1,this.triggeredReady_=!1}initializedEme(){this.initializedEme_=!0,this.triggerReady()}hasCreatedSourceBuffers(){// if false, likely waiting on one of the segment loaders to get enough data to create
// source buffers
return this.createdSourceBuffers_}hasInitializedAnyEme(){return this.initializedEme_}ready(){return this.hasCreatedSourceBuffers()&&this.hasInitializedAnyEme()}createSourceBuffers(e){this.hasCreatedSourceBuffers()||(// the intial addOrChangeSourceBuffers will always be
// two add buffers.
this.addOrChangeSourceBuffers(e),this.createdSourceBuffers_=!0,this.trigger("createdsourcebuffers"),this.triggerReady())}triggerReady(){// only allow ready to be triggered once, this prevents the case
// where:
// 1. we trigger createdsourcebuffers
// 2. ie 11 synchronously initializates eme
// 3. the synchronous initialization causes us to trigger ready
// 4. We go back to the ready check in createSourceBuffers and ready is triggered again.
this.ready()&&!this.triggeredReady_&&(this.triggeredReady_=!0,this.trigger("ready"))}/**
   * Add a type of source buffer to the media source.
   *
   * @param {string} type
   *        The type of source buffer to add.
   *
   * @param {string} codec
   *        The codec to add the source buffer with.
   */addSourceBuffer(e,t){u5({type:"mediaSource",sourceUpdater:this,action:u8.addSourceBuffer(e,t),name:"addSourceBuffer"})}/**
   * call abort on a source buffer.
   *
   * @param {string} type
   *        The type of source buffer to call abort on.
   */abort(e){u5({type:e,sourceUpdater:this,action:u8.abort(e),name:"abort"})}/**
   * Call removeSourceBuffer and remove a specific type
   * of source buffer on the mediaSource.
   *
   * @param {string} type
   *        The type of source buffer to remove.
   */removeSourceBuffer(e){if(!this.canRemoveSourceBuffer()){a9.log.error("removeSourceBuffer is not supported!");return}u5({type:"mediaSource",sourceUpdater:this,action:u8.removeSourceBuffer(e),name:"removeSourceBuffer"})}/**
   * Whether or not the removeSourceBuffer function is supported
   * on the mediaSource.
   *
   * @return {boolean}
   *          if removeSourceBuffer can be called.
   */canRemoveSourceBuffer(){// As of Firefox 83 removeSourceBuffer
// throws errors, so we report that it does not support this.
return!a9.browser.IS_FIREFOX&&/*@__PURE__*/w(I).MediaSource&&/*@__PURE__*/w(I).MediaSource.prototype&&"function"==typeof /*@__PURE__*/w(I).MediaSource.prototype.removeSourceBuffer}/**
   * Whether or not the changeType function is supported
   * on our SourceBuffers.
   *
   * @return {boolean}
   *         if changeType can be called.
   */static canChangeType(){return /*@__PURE__*/w(I).SourceBuffer&&/*@__PURE__*/w(I).SourceBuffer.prototype&&"function"==typeof /*@__PURE__*/w(I).SourceBuffer.prototype.changeType}/**
   * Whether or not the changeType function is supported
   * on our SourceBuffers.
   *
   * @return {boolean}
   *         if changeType can be called.
   */canChangeType(){return this.constructor.canChangeType()}/**
   * Call the changeType function on a source buffer, given the code and type.
   *
   * @param {string} type
   *        The type of source buffer to call changeType on.
   *
   * @param {string} codec
   *        The codec string to change type with on the source buffer.
   */changeType(e,t){if(!this.canChangeType()){a9.log.error("changeType is not supported!");return}u5({type:e,sourceUpdater:this,action:u8.changeType(t),name:"changeType"})}/**
   * Add source buffers with a codec or, if they are already created,
   * call changeType on source buffers using changeType.
   *
   * @param {Object} codecs
   *        Codecs to switch to
   */addOrChangeSourceBuffers(e){if(!e||"object"!=typeof e||0===Object.keys(e).length)throw Error("Cannot addOrChangeSourceBuffers to undefined codecs");Object.keys(e).forEach(t=>{let i=e[t];if(!this.hasCreatedSourceBuffers())return this.addSourceBuffer(t,i);this.canChangeType()&&this.changeType(t,i)})}/**
   * Queue an update to append an ArrayBuffer.
   *
   * @param {MediaObject} object containing audioBytes and/or videoBytes
   * @param {Function} done the function to call when done
   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data
   */appendBuffer(e,t){let{segmentInfo:i,type:r,bytes:s}=e;if(this.processedAppend_=!0,"audio"===r&&this.videoBuffer&&!this.videoAppendQueued_){this.delayedAudioAppendQueue_.push([e,t]),this.logger_(`delayed audio append of ${s.length} until video append`);return}// In the case of certain errors, for instance, QUOTA_EXCEEDED_ERR, updateend will
if(u5({type:r,sourceUpdater:this,action:u8.appendBuffer(s,i||{mediaIndex:-1},t),doneFn:t,name:"appendBuffer"}),"video"===r){if(this.videoAppendQueued_=!0,!this.delayedAudioAppendQueue_.length)return;let e=this.delayedAudioAppendQueue_.slice();this.logger_(`queuing delayed audio ${e.length} appendBuffers`),this.delayedAudioAppendQueue_.length=0,e.forEach(e=>{this.appendBuffer.apply(this,e)})}}/**
   * Get the audio buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         The audio buffer's buffered time range
   */audioBuffered(){return u4(this.mediaSource,this.audioBuffer)&&this.audioBuffer.buffered?this.audioBuffer.buffered:ou()}/**
   * Get the video buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         The video buffer's buffered time range
   */videoBuffered(){return u4(this.mediaSource,this.videoBuffer)&&this.videoBuffer.buffered?this.videoBuffer.buffered:ou()}/**
   * Get a combined video/audio buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         the combined time range
   */buffered(){let e=u4(this.mediaSource,this.videoBuffer)?this.videoBuffer:null,t=u4(this.mediaSource,this.audioBuffer)?this.audioBuffer:null;return t&&!e?this.audioBuffered():e&&!t?this.videoBuffered():og(this.audioBuffered(),this.videoBuffered())}/**
   * Add a callback to the queue that will set duration on the mediaSource.
   *
   * @param {number} duration
   *        The duration to set
   *
   * @param {Function} [doneFn]
   *        function to run after duration has been set.
   */setDuration(e,t=uY){// In order to set the duration on the media source, it's necessary to wait for all
// source buffers to no longer be updating. "If the updating attribute equals true on
// any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and
// abort these steps." (source: https://www.w3.org/TR/media-source/#attributes).
u5({type:"mediaSource",sourceUpdater:this,action:u8.duration(e),name:"duration",doneFn:t})}/**
   * Add a mediaSource endOfStream call to the queue
   *
   * @param {Error} [error]
   *        Call endOfStream with an error
   *
   * @param {Function} [doneFn]
   *        A function that should be called when the
   *        endOfStream call has finished.
   */endOfStream(e=null,t=uY){"string"!=typeof e&&(e=void 0),// In order to set the duration on the media source, it's necessary to wait for all
// source buffers to no longer be updating. "If the updating attribute equals true on
// any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and
// abort these steps." (source: https://www.w3.org/TR/media-source/#attributes).
u5({type:"mediaSource",sourceUpdater:this,action:u8.endOfStream(e),name:"endOfStream",doneFn:t})}/**
   * Queue an update to remove a time range from the buffer.
   *
   * @param {number} start where to start the removal
   * @param {number} end where to end the removal
   * @param {Function} [done=noop] optional callback to be executed when the remove
   * operation is complete
   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end
   */removeAudio(e,t,i=uY){if(!this.audioBuffered().length||0===this.audioBuffered().end(0)){i();return}u5({type:"audio",sourceUpdater:this,action:u8.remove(e,t),doneFn:i,name:"remove"})}/**
   * Queue an update to remove a time range from the buffer.
   *
   * @param {number} start where to start the removal
   * @param {number} end where to end the removal
   * @param {Function} [done=noop] optional callback to be executed when the remove
   * operation is complete
   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end
   */removeVideo(e,t,i=uY){if(!this.videoBuffered().length||0===this.videoBuffered().end(0)){i();return}u5({type:"video",sourceUpdater:this,action:u8.remove(e,t),doneFn:i,name:"remove"})}/**
   * Whether the underlying sourceBuffer is updating or not
   *
   * @return {boolean} the updating status of the SourceBuffer
   */updating(){return!!(uZ("audio",this)||uZ("video",this))}/**
   * Set/get the timestampoffset on the audio SourceBuffer
   *
   * @return {number} the timestamp offset
   */audioTimestampOffset(e){return void 0!==e&&this.audioBuffer&&// no point in updating if it's the same
this.audioTimestampOffset_!==e&&(u5({type:"audio",sourceUpdater:this,action:u8.timestampOffset(e),name:"timestampOffset"}),this.audioTimestampOffset_=e),this.audioTimestampOffset_}/**
   * Set/get the timestampoffset on the video SourceBuffer
   *
   * @return {number} the timestamp offset
   */videoTimestampOffset(e){return void 0!==e&&this.videoBuffer&&// no point in updating if it's the same
this.videoTimestampOffset!==e&&(u5({type:"video",sourceUpdater:this,action:u8.timestampOffset(e),name:"timestampOffset"}),this.videoTimestampOffset_=e),this.videoTimestampOffset_}/**
   * Add a function to the queue that will be called
   * when it is its turn to run in the audio queue.
   *
   * @param {Function} callback
   *        The callback to queue.
   */audioQueueCallback(e){this.audioBuffer&&u5({type:"audio",sourceUpdater:this,action:u8.callback(e),name:"callback"})}/**
   * Add a function to the queue that will be called
   * when it is its turn to run in the video queue.
   *
   * @param {Function} callback
   *        The callback to queue.
   */videoQueueCallback(e){this.videoBuffer&&u5({type:"video",sourceUpdater:this,action:u8.callback(e),name:"callback"})}/**
   * dispose of the source updater and the underlying sourceBuffer
   */dispose(){this.trigger("dispose"),uJ.forEach(e=>{this.abort(e),this.canRemoveSourceBuffer()?this.removeSourceBuffer(e):this[`${e}QueueCallback`](()=>u2(e,this))}),this.videoAppendQueued_=!1,this.delayedAudioAppendQueue_.length=0,this.sourceopenListener_&&this.mediaSource.removeEventListener("sourceopen",this.sourceopenListener_),this.off()}}const u7=e=>decodeURIComponent(escape(String.fromCharCode.apply(null,e))),u9=new Uint8Array("\n\n".split("").map(e=>e.charCodeAt(0)));class he extends Error{constructor(){super("Trying to parse received VTT cues, but there is no WebVTT. Make sure vtt.js is loaded.")}}/**
 * An object that manages segment loading and appending.
 *
 * @class VTTSegmentLoader
 * @param {Object} options required and optional options
 * @extends videojs.EventTarget
 */class ht extends uK{constructor(e,t={}){super(e,t),// however, VTTSegmentLoader has no need of a media source, so delete the reference
this.mediaSource_=null,this.subtitlesTrack_=null,this.loaderType_="subtitle",this.featuresNativeTextTracks_=e.featuresNativeTextTracks,this.loadVttJs=e.loadVttJs,// the sync controller leads to improper behavior.
this.shouldSaveSegmentTimingInfo_=!1}createTransmuxer_(){// don't need to transmux any subtitles
return null}/**
   * Indicates which time ranges are buffered
   *
   * @return {TimeRange}
   *         TimeRange object representing the current buffered ranges
   */buffered_(){if(!this.subtitlesTrack_||!this.subtitlesTrack_.cues||!this.subtitlesTrack_.cues.length)return ou();let e=this.subtitlesTrack_.cues,t=e[0].startTime,i=e[e.length-1].startTime;return ou([[t,i]])}/**
   * Gets and sets init segment for the provided map
   *
   * @param {Object} map
   *        The map object representing the init segment to get or set
   * @param {boolean=} set
   *        If true, the init segment for the provided map should be saved
   * @return {Object}
   *         map object for desired init segment
   */initSegmentForMap(e,t=!1){if(!e)return null;let i=lh(e),r=this.initSegments_[i];if(t&&!r&&e.bytes){// append WebVTT line terminators to the media initialization segment if it exists
// to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that
// requires two or more WebVTT line terminators between the WebVTT header and the
// rest of the file
let t=u9.byteLength+e.bytes.byteLength,s=new Uint8Array(t);s.set(e.bytes),s.set(u9,e.bytes.byteLength),this.initSegments_[i]=r={resolvedUri:e.resolvedUri,byterange:e.byterange,bytes:s}}return r||e}/**
   * Returns true if all configuration required for loading is present, otherwise false.
   *
   * @return {boolean} True if the all configuration is ready for loading
   * @private
   */couldBeginLoading_(){return this.playlist_&&this.subtitlesTrack_&&!this.paused()}/**
   * Once all the starting parameters have been specified, begin
   * operation. This method should only be invoked from the INIT
   * state.
   *
   * @private
   */init_(){return this.state="READY",this.resetEverything(),this.monitorBuffer_()}/**
   * Set a subtitle track on the segment loader to add subtitles to
   *
   * @param {TextTrack=} track
   *        The text track to add loaded subtitles to
   * @return {TextTrack}
   *        Returns the subtitles track
   */track(e){return void 0===e||(this.subtitlesTrack_=e,"INIT"===this.state&&this.couldBeginLoading_()&&this.init_()),this.subtitlesTrack_}/**
   * Remove any data in the source buffer between start and end times
   *
   * @param {number} start - the start time of the region to remove from the buffer
   * @param {number} end - the end time of the region to remove from the buffer
   */remove(e,t){uA(e,t,this.subtitlesTrack_)}/**
   * fill the buffer with segements unless the sourceBuffers are
   * currently updating
   *
   * Note: this function should only ever be called by monitorBuffer_
   * and never directly
   *
   * @private
   */fillBuffer_(){// see if we need to begin loading immediately
let e=this.chooseNextRequest_();if(e){if(null===this.syncController_.timestampOffsetForTimeline(e.timeline)){this.syncController_.one("timestampoffset",()=>{this.state="READY",this.paused()||this.monitorBuffer_()}),this.state="WAITING_ON_TIMELINE";return}this.loadSegment_(e)}}timestampOffsetForSegment_(){return null}chooseNextRequest_(){return this.skipEmptySegments_(super.chooseNextRequest_())}/**
   * Prevents the segment loader from requesting segments we know contain no subtitles
   * by walking forward until we find the next segment that we don't know whether it is
   * empty or not.
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @return {Object}
   *         a segment info object that describes the current segment
   */skipEmptySegments_(e){for(;e&&e.segment.empty;){// stop at the last possible segmentInfo
if(e.mediaIndex+1>=e.playlist.segments.length){e=null;break}e=this.generateSegmentInfo_({playlist:e.playlist,mediaIndex:e.mediaIndex+1,startOfSegment:e.startOfSegment+e.duration,isSyncRequest:e.isSyncRequest})}return e}stopForError(e){this.error(e),this.state="READY",this.pause(),this.trigger("error")}/**
   * append a decrypted segement to the SourceBuffer through a SourceUpdater
   *
   * @private
   */segmentRequestFinished_(e,t,i){if(!this.subtitlesTrack_){this.state="READY";return}if(this.saveTransferStats_(t.stats),!this.pendingSegment_){this.state="READY",this.mediaRequestsAborted+=1;return}if(e){e.code===lZ.TIMEOUT&&this.handleTimeout_(),e.code===lZ.ABORTED?this.mediaRequestsAborted+=1:this.mediaRequestsErrored+=1,this.stopForError(e);return}let r=this.pendingSegment_;// although the VTT segment loader bandwidth isn't really used, it's good to
// maintain functionality between segment loaders
this.saveBandwidthRelatedStats_(r.duration,t.stats),t.key&&this.segmentKey(t.key,!0),this.state="APPENDING",this.trigger("appending");let s=r.segment;if(s.map&&(s.map.bytes=t.map.bytes),r.bytes=t.bytes,"function"!=typeof /*@__PURE__*/w(I).WebVTT&&"function"==typeof this.loadVttJs){this.state="WAITING_ON_VTTJS",// script will be loaded once but multiple listeners will be added to the queue, which is expected.
this.loadVttJs().then(()=>this.segmentRequestFinished_(e,t,i),()=>this.stopForError({message:"Error loading vtt.js"}));return}s.requested=!0;try{this.parseVTTCues_(r)}catch(e){this.stopForError({message:e.message});return}if(this.updateTimeMapping_(r,this.syncController_.timelines[r.timeline],this.playlist_),r.cues.length?r.timingInfo={start:r.cues[0].startTime,end:r.cues[r.cues.length-1].endTime}:r.timingInfo={start:r.startOfSegment,end:r.startOfSegment+r.duration},r.isSyncRequest){this.trigger("syncinfoupdate"),this.pendingSegment_=null,this.state="READY";return}r.byteLength=r.bytes.byteLength,this.mediaSecondsLoaded+=s.duration,// the subtitle track
r.cues.forEach(e=>{this.subtitlesTrack_.addCue(this.featuresNativeTextTracks_?new/*@__PURE__*/(w(I)).VTTCue(e.startTime,e.endTime,e.text):e)}),// cues to have identical time-intervals, but if the text is also identical
// we can safely assume it is a duplicate that can be removed (ex. when a cue
// "overlaps" VTT segments)
uL(this.subtitlesTrack_),this.handleAppendsDone_()}handleData_(){// that we do not support here.
}updateTimingInfoEnd_(){}/**
   * Uses the WebVTT parser to parse the segment response
   *
   * @throws NoVttJsError
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @private
   */parseVTTCues_(e){let t;let i=!1;if("function"!=typeof /*@__PURE__*/w(I).WebVTT)throw new he;"function"==typeof /*@__PURE__*/w(I).TextDecoder?t=new/*@__PURE__*/(w(I)).TextDecoder("utf8"):(t=/*@__PURE__*/w(I).WebVTT.StringDecoder(),i=!0);let r=new/*@__PURE__*/(w(I)).WebVTT.Parser(/*@__PURE__*/w(I),/*@__PURE__*/w(I).vttjs,t);if(e.cues=[],e.timestampmap={MPEGTS:0,LOCAL:0},r.oncue=e.cues.push.bind(e.cues),r.ontimestampmap=t=>{e.timestampmap=t},r.onparsingerror=e=>{a9.log.warn("Error encountered when parsing cues: "+e.message)},e.segment.map){let t=e.segment.map.bytes;i&&(t=u7(t)),r.parse(t)}let s=e.bytes;i&&(s=u7(s)),r.parse(s),r.flush()}/**
   * Updates the start and end times of any cues parsed by the WebVTT parser using
   * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping
   * from the SyncController
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @param {Object} mappingObj
   *        object containing a mapping from TS to media time
   * @param {Object} playlist
   *        the playlist object containing the segment
   * @private
   */updateTimeMapping_(e,t,i){let r=e.segment;if(!t)// timeline, then we don't have enough information to update the cue
// start/end times
return;if(!e.cues.length){// If there are no cues, we also do not have enough information to figure out
// segment timing. Mark that the segment contains no cues so we don't re-request
// an empty segment.
r.empty=!0;return}let s=e.timestampmap,n=s.MPEGTS/iX.ONE_SECOND_IN_TS-s.LOCAL+t.mapping;if(e.cues.forEach(e=>{// First convert cue time to TS time using the timestamp-map provided within the vtt
e.startTime+=n,e.endTime+=n}),!i.syncInfo){let t=e.cues[0].startTime,s=e.cues[e.cues.length-1].startTime;i.syncInfo={mediaSequence:i.mediaSequence+e.mediaIndex,time:Math.min(t,s-r.duration)}}}}/**
 * @file ad-cue-tags.js
 *//**
 * Searches for an ad cue that overlaps with the given mediaTime
 *
 * @param {Object} track
 *        the track to find the cue for
 *
 * @param {number} mediaTime
 *        the time to find the cue at
 *
 * @return {Object|null}
 *         the found cue or null
 */const hi=function(e,t){let i=e.cues;for(let e=0;e<i.length;e++){let r=i[e];if(t>=r.adStartTime&&t<=r.adEndTime)return r}return null},hr=function(e,t,i=0){let r;if(!e.segments)return;let s=i;for(let i=0;i<e.segments.length;i++){let n=e.segments[i];if(r||// factor of half segment duration will prevent duplicate cues from being
// created when timing info is not exact (e.g. cue start time initialized
// at 10.006677, but next call mediaTime is 10.003332 )
(r=hi(t,s+n.duration/2)),r){if("cueIn"in n){// Found a CUE-IN so end the cue
r.endTime=s,r.adEndTime=s,s+=n.duration,r=null;continue}if(s<r.endTime){// Already processed this mediaTime for this cue
s+=n.duration;continue}// otherwise extend cue until a CUE-IN is found
r.endTime+=n.duration}else if("cueOut"in n&&((r=new/*@__PURE__*/(w(I)).VTTCue(s,s+n.duration,n.cueOut)).adStartTime=s,// #EXT-X-CUE-OUT:30
r.adEndTime=s+parseFloat(n.cueOut),t.addCue(r)),"cueOutCont"in n){// Entered into the middle of an ad cue
// Assumes tag formate to be
// #EXT-X-CUE-OUT-CONT:10/30
let[e,i]=n.cueOutCont.split("/").map(parseFloat);(r=new/*@__PURE__*/(w(I)).VTTCue(s,s+n.duration,"")).adStartTime=s-e,r.adEndTime=r.adStartTime+i,t.addCue(r)}s+=n.duration}},hs=[// Stategy "VOD": Handle the VOD-case where the sync-point is *always*
//                the equivalence display-time 0 === segment-index 0
{name:"VOD",run:(e,t,i,r,s)=>i!==1/0?{time:0,segmentIndex:0,partIndex:null}:null},// Stategy "ProgramDateTime": We have a program-date-time tag in this playlist
{name:"ProgramDateTime",run:(e,t,i,r,s)=>{if(!Object.keys(e.timelineToDatetimeMappings).length)return null;let n=null,a=null,o=ow(t);s=s||0;for(let i=0;i<o.length;i++){// start from the end and loop backwards for live
// or start from the front and loop forwards for non-live
let r=t.endList||0===s?i:o.length-(i+1),l=o[r],u=l.segment,h=e.timelineToDatetimeMappings[u.timeline];if(!h||!u.dateTimeObject)continue;let d=u.dateTimeObject.getTime()/1e3,c=d+h;if(u.parts&&"number"==typeof l.partIndex)for(let e=0;e<l.partIndex;e++)c+=u.parts[e].duration;let p=Math.abs(s-c);// Once the distance begins to increase, or if distance is 0, we have passed
// currentTime and can stop looking for better candidates
if(null!==a&&(0===p||a<p))break;a=p,n={time:c,segmentIndex:l.segmentIndex,partIndex:l.partIndex}}return n}},// Stategy "Segment": We have a known time mapping for a timeline and a
//                    segment in the current timeline with timing data
{name:"Segment",run:(e,t,i,r,s)=>{let n=null,a=null;s=s||0;let o=ow(t);for(let e=0;e<o.length;e++){// start from the end and loop backwards for live
// or start from the front and loop forwards for non-live
let i=t.endList||0===s?e:o.length-(e+1),l=o[i],u=l.segment,h=l.part&&l.part.start||u&&u.start;if(u.timeline===r&&void 0!==h){let e=Math.abs(s-h);// Once the distance begins to increase, we have passed
// currentTime and can stop looking for better candidates
if(null!==a&&a<e)break;(!n||null===a||a>=e)&&(a=e,n={time:h,segmentIndex:l.segmentIndex,partIndex:l.partIndex})}}return n}},// Stategy "Discontinuity": We have a discontinuity with a known
//                          display-time
{name:"Discontinuity",run:(e,t,i,r,s)=>{let n=null;if(s=s||0,t.discontinuityStarts&&t.discontinuityStarts.length){let i=null;for(let r=0;r<t.discontinuityStarts.length;r++){let a=t.discontinuityStarts[r],o=t.discontinuitySequence+r+1,l=e.discontinuities[o];if(l){let e=Math.abs(s-l.time);// Once the distance begins to increase, we have passed
// currentTime and can stop looking for better candidates
if(null!==i&&i<e)break;(!n||null===i||i>=e)&&(i=e,n={time:l.time,segmentIndex:a,partIndex:null})}}}return n}},// Stategy "Playlist": We have a playlist with a known mapping of
//                     segment index to display time
{name:"Playlist",run:(e,t,i,r,s)=>{if(t.syncInfo){let e={time:t.syncInfo.time,segmentIndex:t.syncInfo.mediaSequence-t.mediaSequence,partIndex:null};return e}return null}}];class hn extends a9.EventTarget{constructor(e={}){super(),this.timelines=[],this.discontinuities=[],this.timelineToDatetimeMappings={},this.logger_=oo("SyncController")}/**
   * Find a sync-point for the playlist specified
   *
   * A sync-point is defined as a known mapping from display-time to
   * a segment-index in the current playlist.
   *
   * @param {Playlist} playlist
   *        The playlist that needs a sync-point
   * @param {number} duration
   *        Duration of the MediaSource (Infinite if playing a live source)
   * @param {number} currentTimeline
   *        The last timeline from which a segment was loaded
   * @return {Object}
   *          A sync-point object
   */getSyncPoint(e,t,i,r){let s=this.runStrategies_(e,t,i,r);return s.length?this.selectSyncPoint_(s,{key:"time",value:r}):null}/**
   * Calculate the amount of time that has expired off the playlist during playback
   *
   * @param {Playlist} playlist
   *        Playlist object to calculate expired from
   * @param {number} duration
   *        Duration of the MediaSource (Infinity if playling a live source)
   * @return {number|null}
   *          The amount of time that has expired off the playlist during playback. Null
   *          if no sync-points for the playlist can be found.
   */getExpiredTime(e,t){if(!e||!e.segments)return null;let i=this.runStrategies_(e,t,e.discontinuitySequence,0);// Without sync-points, there is not enough information to determine the expired time
if(!i.length)return null;let r=this.selectSyncPoint_(i,{key:"segmentIndex",value:0});// If the sync-point is beyond the start of the playlist, we want to subtract the
return r.segmentIndex>0&&(r.time*=-1),Math.abs(r.time+oP({defaultDuration:e.targetDuration,durationList:e.segments,startIndex:r.segmentIndex,endIndex:0}))}/**
   * Runs each sync-point strategy and returns a list of sync-points returned by the
   * strategies
   *
   * @private
   * @param {Playlist} playlist
   *        The playlist that needs a sync-point
   * @param {number} duration
   *        Duration of the MediaSource (Infinity if playing a live source)
   * @param {number} currentTimeline
   *        The last timeline from which a segment was loaded
   * @return {Array}
   *          A list of sync-point objects
   */runStrategies_(e,t,i,r){let s=[];// Try to find a sync-point in by utilizing various strategies...
for(let n=0;n<hs.length;n++){let a=hs[n],o=a.run(this,e,t,i,r);o&&(o.strategy=a.name,s.push({strategy:a.name,syncPoint:o}))}return s}/**
   * Selects the sync-point nearest the specified target
   *
   * @private
   * @param {Array} syncPoints
   *        List of sync-points to select from
   * @param {Object} target
   *        Object specifying the property and value we are targeting
   * @param {string} target.key
   *        Specifies the property to target. Must be either 'time' or 'segmentIndex'
   * @param {number} target.value
   *        The value to target for the specified key.
   * @return {Object}
   *          The sync-point nearest the target
   */selectSyncPoint_(e,t){let i=e[0].syncPoint,r=Math.abs(e[0].syncPoint[t.key]-t.value),s=e[0].strategy;for(let n=1;n<e.length;n++){let a=Math.abs(e[n].syncPoint[t.key]-t.value);a<r&&(r=a,i=e[n].syncPoint,s=e[n].strategy)}return this.logger_(`syncPoint for [${t.key}: ${t.value}] chosen with strategy [${s}]: [time:${i.time}, segmentIndex:${i.segmentIndex}`+("number"==typeof i.partIndex?`,partIndex:${i.partIndex}`:"")+"]"),i}/**
   * Save any meta-data present on the segments when segments leave
   * the live window to the playlist to allow for synchronization at the
   * playlist level later.
   *
   * @param {Playlist} oldPlaylist - The previous active playlist
   * @param {Playlist} newPlaylist - The updated and most current playlist
   */saveExpiredSegmentInfo(e,t){let i=t.mediaSequence-e.mediaSequence;// Ignore large media sequence gaps
if(i>86400){a9.log.warn(`Not saving expired segment info. Media sequence gap ${i} is too large.`);return}// When a segment expires from the playlist and it has a start time
// save that information as a possible sync-point reference in future
for(let r=i-1;r>=0;r--){let i=e.segments[r];if(i&&void 0!==i.start){t.syncInfo={mediaSequence:e.mediaSequence+r,time:i.start},this.logger_(`playlist refresh sync: [time:${t.syncInfo.time}, mediaSequence: ${t.syncInfo.mediaSequence}]`),this.trigger("syncinfoupdate");break}}}/**
   * Save the mapping from playlist's ProgramDateTime to display. This should only happen
   * before segments start to load.
   *
   * @param {Playlist} playlist - The currently active playlist
   */setDateTimeMappingForStart(e){if(// It's possible for the playlist to be updated before playback starts, meaning time
// zero is not yet set. If, during these playlist refreshes, a discontinuity is
// crossed, then the old time zero mapping (for the prior timeline) would be retained
// unless the mappings are cleared.
this.timelineToDatetimeMappings={},e.segments&&e.segments.length&&e.segments[0].dateTimeObject){let t=e.segments[0],i=t.dateTimeObject.getTime()/1e3;this.timelineToDatetimeMappings[t.timeline]=-i}}/**
   * Calculates and saves timeline mappings, playlist sync info, and segment timing values
   * based on the latest timing information.
   *
   * @param {Object} options
   *        Options object
   * @param {SegmentInfo} options.segmentInfo
   *        The current active request information
   * @param {boolean} options.shouldSaveTimelineMapping
   *        If there's a timeline change, determines if the timeline mapping should be
   *        saved for timeline mapping and program date time mappings.
   */saveSegmentTimingInfo({segmentInfo:e,shouldSaveTimelineMapping:t}){let i=this.calculateSegmentTimeMapping_(e,e.timingInfo,t),r=e.segment;i&&(this.saveDiscontinuitySyncInfo_(e),e.playlist.syncInfo||(e.playlist.syncInfo={mediaSequence:e.playlist.mediaSequence+e.mediaIndex,time:r.start}));let s=r.dateTimeObject;r.discontinuity&&t&&s&&(this.timelineToDatetimeMappings[r.timeline]=-(s.getTime()/1e3))}timestampOffsetForTimeline(e){return void 0===this.timelines[e]?null:this.timelines[e].time}mappingForTimeline(e){return void 0===this.timelines[e]?null:this.timelines[e].mapping}/**
   * Use the "media time" for a segment to generate a mapping to "display time" and
   * save that display time to the segment.
   *
   * @private
   * @param {SegmentInfo} segmentInfo
   *        The current active request information
   * @param {Object} timingInfo
   *        The start and end time of the current segment in "media time"
   * @param {boolean} shouldSaveTimelineMapping
   *        If there's a timeline change, determines if the timeline mapping should be
   *        saved in timelines.
   * @return {boolean}
   *          Returns false if segment time mapping could not be calculated
   */calculateSegmentTimeMapping_(e,t,i){let r,s;// TODO: remove side effects
let n=e.segment,a=e.part,o=this.timelines[e.timeline];if("number"==typeof e.timestampOffset)o={time:e.startOfSegment,mapping:e.startOfSegment-t.start},i&&(this.timelines[e.timeline]=o,this.trigger("timestampoffset"),this.logger_(`time mapping for timeline ${e.timeline}: [time: ${o.time}] [mapping: ${o.mapping}]`)),r=e.startOfSegment,s=t.end+o.mapping;else{if(!o)return!1;r=t.start+o.mapping,s=t.end+o.mapping}return a&&(a.start=r,a.end=s),(!n.start||r<n.start)&&(n.start=r),n.end=s,!0}/**
   * Each time we have discontinuity in the playlist, attempt to calculate the location
   * in display of the start of the discontinuity and save that. We also save an accuracy
   * value so that we save values with the most accuracy (closest to 0.)
   *
   * @private
   * @param {SegmentInfo} segmentInfo - The current active request information
   */saveDiscontinuitySyncInfo_(e){let t=e.playlist,i=e.segment;// the start of the range and it's accuracy is 0 (greater accuracy values
// mean more approximation)
if(i.discontinuity)this.discontinuities[i.timeline]={time:i.start,accuracy:0};else if(t.discontinuityStarts&&t.discontinuityStarts.length)// information for and save that information for sync purposes
for(let r=0;r<t.discontinuityStarts.length;r++){let s=t.discontinuityStarts[r],n=t.discontinuitySequence+r+1,a=s-e.mediaIndex,o=Math.abs(a);if(!this.discontinuities[n]||this.discontinuities[n].accuracy>o){let r;r=a<0?i.start-oP({defaultDuration:t.targetDuration,durationList:t.segments,startIndex:e.mediaIndex,endIndex:s}):i.end+oP({defaultDuration:t.targetDuration,durationList:t.segments,startIndex:e.mediaIndex+1,endIndex:s}),this.discontinuities[n]={time:r,accuracy:o}}}}dispose(){this.trigger("dispose"),this.off()}}/**
 * The TimelineChangeController acts as a source for segment loaders to listen for and
 * keep track of latest and pending timeline changes. This is useful to ensure proper
 * sync, as each loader may need to make a consideration for what timeline the other
 * loader is on before making changes which could impact the other loader's media.
 *
 * @class TimelineChangeController
 * @extends videojs.EventTarget
 */class ha extends a9.EventTarget{constructor(){super(),this.pendingTimelineChanges_={},this.lastTimelineChanges_={}}clearPendingTimelineChange(e){this.pendingTimelineChanges_[e]=null,this.trigger("pendingtimelinechange")}pendingTimelineChange({type:e,from:t,to:i}){return"number"==typeof t&&"number"==typeof i&&(this.pendingTimelineChanges_[e]={type:e,from:t,to:i},this.trigger("pendingtimelinechange")),this.pendingTimelineChanges_[e]}lastTimelineChange({type:e,from:t,to:i}){return"number"==typeof t&&"number"==typeof i&&(this.lastTimelineChanges_[e]={type:e,from:t,to:i},delete this.pendingTimelineChanges_[e],this.trigger("timelinechange")),this.lastTimelineChanges_[e]}dispose(){this.trigger("dispose"),this.pendingTimelineChanges_={},this.lastTimelineChanges_={},this.off()}}/* rollup-plugin-worker-factory start for worker!/home/runner/work/http-streaming/http-streaming/src/decrypter-worker.js */const ho=lF(lj(function(){/**
   * @file stream.js
   *//**
   * A lightweight readable stream implemention that handles event dispatching.
   *
   * @class Stream
   */var e,t,i=/*#__PURE__*/function(){function e(){this.listeners={}}/**
     * Add a listener for a specified event type.
     *
     * @param {string} type the event name
     * @param {Function} listener the callback to be invoked when an event of
     * the specified type occurs
     */var t=e.prototype;return t.on=function(e,t){this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push(t)}/**
     * Remove a listener for a specified event type.
     *
     * @param {string} type the event name
     * @param {Function} listener  a function previously registered for this
     * type of event through `on`
     * @return {boolean} if we could turn it off or not
     */,t.off=function(e,t){if(!this.listeners[e])return!1;var i=this.listeners[e].indexOf(t);// TODO: which is better?
return(// In Video.js we slice listener functions
// on trigger so that it does not mess up the order
// while we loop through.
//
// Here we slice on off so that the loop in trigger
// can continue using it's old reference to loop without
// messing up the order.
this.listeners[e]=this.listeners[e].slice(0),this.listeners[e].splice(i,1),i>-1)}/**
     * Trigger an event of the specified type on this stream. Any additional
     * arguments to this function are passed as parameters to event listeners.
     *
     * @param {string} type the event name
     */,t.trigger=function(e){var t=this.listeners[e];if(t){// Slicing the arguments on every invocation of this method
// can add a significant amount of overhead. Avoid the
// intermediate object creation for the common case of a
// single callback argument
if(2==arguments.length)for(var i=t.length,r=0;r<i;++r)t[r].call(this,arguments[1]);else for(var s=Array.prototype.slice.call(arguments,1),n=t.length,a=0;a<n;++a)t[a].apply(this,s)}}/**
     * Destroys the stream and cleans up.
     */,t.dispose=function(){this.listeners={}}/**
     * Forwards all `data` events on this stream to the destination stream. The
     * destination stream should provide a method `push` to receive the data
     * events as they arrive.
     *
     * @param {Stream} destination the stream that will receive all `data` events
     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
     */,t.pipe=function(e){this.on("data",function(t){e.push(t)})},e}();/*! @name aes-decrypter @version 4.0.1 @license Apache-2.0 *//**
   * @file aes.js
   *
   * This file contains an adaptation of the AES decryption algorithm
   * from the Standford Javascript Cryptography Library. That work is
   * covered by the following copyright and permissions notice:
   *
   * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are
   * met:
   *
   * 1. Redistributions of source code must retain the above copyright
   *    notice, this list of conditions and the following disclaimer.
   *
   * 2. Redistributions in binary form must reproduce the above
   *    copyright notice, this list of conditions and the following
   *    disclaimer in the documentation and/or other materials provided
   *    with the distribution.
   *
   * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
   * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
   * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
   * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE
   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
   * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
   * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
   * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
   * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   *
   * The views and conclusions contained in the software and documentation
   * are those of the authors and should not be interpreted as representing
   * official policies, either expressed or implied, of the authors.
   *//**
   * Expand the S-box tables.
   *
   * @private
   */let r=function(){let e,t,i,r,s,n,a,o;let l=[[[],[],[],[],[]],[[],[],[],[],[]]],u=l[0],h=l[1],d=u[4],c=h[4],p=[],m=[];for(e=0;e<256;e++)m[(p[e]=e<<1^(e>>7)*283)^e]=e;for(t=i=0;!d[t];t^=r||1,i=m[i]||1)for(e=0,n=// Compute sbox
(n=i^i<<1^i<<2^i<<3^i<<4)>>8^255&n^99,d[t]=n,c[n]=t,o=16843009*p[s=p[r=p[t]]]^65537*s^257*r^16843008*t,a=257*p[n]^16843008*n;e<4;e++)u[e][t]=a=a<<24^a>>>8,h[e][n]=o=o<<24^o>>>8;// Compactify. Considerable speedup on Firefox.
for(e=0;e<5;e++)u[e]=u[e].slice(0),h[e]=h[e].slice(0);return l},s=null;/**
   * Schedule out an AES key for both encryption and decryption. This
   * is a low-level class. Use a cipher mode to do bulk encryption.
   *
   * @class AES
   * @param key {Array} The key as an array of 4, 6 or 8 words.
   */class n{constructor(e){let t,i,n;s||(s=r()),// then make a copy of that object for use
this._tables=[[s[0][0].slice(),s[0][1].slice(),s[0][2].slice(),s[0][3].slice(),s[0][4].slice()],[s[1][0].slice(),s[1][1].slice(),s[1][2].slice(),s[1][3].slice(),s[1][4].slice()]];let a=this._tables[0][4],o=this._tables[1],l=e.length,u=1;if(4!==l&&6!==l&&8!==l)throw Error("Invalid aes key size");let h=e.slice(0),d=[];for(this._key=[h,d],t=l;t<4*l+28;t++)n=h[t-1],(t%l==0||8===l&&t%l==4)&&(n=a[n>>>24]<<24^a[n>>16&255]<<16^a[n>>8&255]<<8^a[255&n],t%l==0&&(n=n<<8^n>>>24^u<<24,u=u<<1^(u>>7)*283)),h[t]=h[t-l]^n;// schedule decryption keys
for(i=0;t;i++,t--)n=h[3&i?t:t-4],t<=4||i<4?d[i]=n:d[i]=o[0][a[n>>>24]]^o[1][a[n>>16&255]]^o[2][a[n>>8&255]]^o[3][a[255&n]]}/**
     * Decrypt 16 bytes, specified as four 32-bit words.
     *
     * @param {number} encrypted0 the first word to decrypt
     * @param {number} encrypted1 the second word to decrypt
     * @param {number} encrypted2 the third word to decrypt
     * @param {number} encrypted3 the fourth word to decrypt
     * @param {Int32Array} out the array to write the decrypted words
     * into
     * @param {number} offset the offset into the output array to start
     * writing results
     * @return {Array} The plaintext.
     */decrypt(e,t,i,r,s,n){let a,o,l,u;let h=this._key[1],d=e^h[0],c=r^h[1],p=i^h[2],m=t^h[3],f=h.length/4-2,g=4,y=this._tables[1],_=y[0],b=y[1],v=y[2],T=y[3],S=y[4];// state variables a,b,c,d are loaded with pre-whitened data
for(u=0;u<f;u++)a=_[d>>>24]^b[c>>16&255]^v[p>>8&255]^T[255&m]^h[g],o=_[c>>>24]^b[p>>16&255]^v[m>>8&255]^T[255&d]^h[g+1],l=_[p>>>24]^b[m>>16&255]^v[d>>8&255]^T[255&c]^h[g+2],m=_[m>>>24]^b[d>>16&255]^v[c>>8&255]^T[255&p]^h[g+3],g+=4,d=a,c=o,p=l;// Last round.
for(u=0;u<4;u++)s[(3&-u)+n]=S[d>>>24]<<24^S[c>>16&255]<<16^S[p>>8&255]<<8^S[255&m]^h[g++],a=d,d=c,c=p,p=m,m=a}}/**
   * @file async-stream.js
   *//**
   * A wrapper around the Stream class to use setTimeout
   * and run stream "jobs" Asynchronously
   *
   * @class AsyncStream
   * @extends Stream
   */class a extends i{constructor(){super(i),this.jobs=[],this.delay=1,this.timeout_=null}/**
     * process an async job
     *
     * @private
     */processJob_(){this.jobs.shift()(),this.jobs.length?this.timeout_=setTimeout(this.processJob_.bind(this),this.delay):this.timeout_=null}/**
     * push a job into the stream
     *
     * @param {Function} job the job to push into the stream
     */push(e){this.jobs.push(e),this.timeout_||(this.timeout_=setTimeout(this.processJob_.bind(this),this.delay))}}/**
   * @file decrypter.js
   *
   * An asynchronous implementation of AES-128 CBC decryption with
   * PKCS#7 padding.
   *//**
   * Convert network-order (big-endian) bytes into their little-endian
   * representation.
   */let o=function(e){return e<<24|(65280&e)<<8|(16711680&e)>>8|e>>>24},l=function(e,t,i){let r,s,a,l,u,h,d,c,p;// word-level access to the encrypted bytes
let m=new Int32Array(e.buffer,e.byteOffset,e.byteLength>>2),f=new n(Array.prototype.slice.call(t)),g=new Uint8Array(e.byteLength),y=new Int32Array(g.buffer);// to each decrypted block
for(p=0,// passed-in reference and easier access
r=i[0],s=i[1],a=i[2],l=i[3];p<m.length;p+=4)// convert big-endian (network order) words into little-endian
// (javascript order)
u=o(m[p]),h=o(m[p+1]),d=o(m[p+2]),c=o(m[p+3]),f.decrypt(u,h,d,c,y,p),// plaintext
y[p]=o(y[p]^r),y[p+1]=o(y[p+1]^s),y[p+2]=o(y[p+2]^a),y[p+3]=o(y[p+3]^l),r=u,s=h,a=d,l=c;return g};/**
   * The `Decrypter` class that manages decryption of AES
   * data through `AsyncStream` objects and the `decrypt`
   * function
   *
   * @param {Uint8Array} encrypted the encrypted bytes
   * @param {Uint32Array} key the bytes of the decryption key
   * @param {Uint32Array} initVector the initialization vector (IV) to
   * @param {Function} done the function to run when done
   * @class Decrypter
   */class u{constructor(e,t,i,r){let s=u.STEP,n=new Int32Array(e.buffer),l=new Uint8Array(e.byteLength),h=0;for(this.asyncStream_=new a,this.asyncStream_.push(this.decryptChunk_(n.subarray(h,h+s),t,i,l)),h=s;h<n.length;h+=s)i=new Uint32Array([o(n[h-4]),o(n[h-3]),o(n[h-2]),o(n[h-1])]),this.asyncStream_.push(this.decryptChunk_(n.subarray(h,h+s),t,i,l));// invoke the done() callback when everything is finished
this.asyncStream_.push(function(){// remove pkcs#7 padding from the decrypted bytes
r(null,l.subarray(0,l.byteLength-l[l.byteLength-1]))})}/**
     * a getter for step the maximum number of bytes to process at one time
     *
     * @return {number} the value of step 32000
     */static get STEP(){// 4 * 8000;
return 32e3}/**
     * @private
     */decryptChunk_(e,t,i,r){return function(){let s=l(e,t,i);r.set(s,e.byteOffset)}}}var h="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==S?S:"undefined"!=typeof self?self:{},d=("undefined"!=typeof window?window:void 0!==h?h:"undefined"!=typeof self?self:{}).BigInt||Number;d("0x1"),d("0x100"),d("0x10000"),d("0x1000000"),d("0x100000000"),d("0x10000000000"),d("0x1000000000000"),d("0x100000000000000"),d("0x10000000000000000"),e=new Uint16Array([65484]),255===(t=new Uint8Array(e.buffer,e.byteOffset,e.byteLength))[0]||t[0];/**
   * Creates an object for sending to a web worker modifying properties that are TypedArrays
   * into a new object with seperated properties for the buffer, byteOffset, and byteLength.
   *
   * @param {Object} message
   *        Object of properties and values to send to the web worker
   * @return {Object}
   *         Modified message with TypedArray values expanded
   * @function createTransferableMessage
   */let c=function(e){let t={};return Object.keys(e).forEach(i=>{let r=e[i];("function"===ArrayBuffer.isView?ArrayBuffer.isView(r):r&&r.buffer instanceof ArrayBuffer)?t[i]={bytes:r.buffer,byteOffset:r.byteOffset,byteLength:r.byteLength}:t[i]=r}),t};/* global self *//**
   * Our web worker interface so that things can talk to aes-decrypter
   * that will be running in a web worker. the scope is passed to this by
   * webworkify.
   */self.onmessage=function(e){let t=e.data,i=new Uint8Array(t.encrypted.bytes,t.encrypted.byteOffset,t.encrypted.byteLength),r=new Uint32Array(t.key.bytes,t.key.byteOffset,t.key.byteLength/4),s=new Uint32Array(t.iv.bytes,t.iv.byteOffset,t.iv.byteLength/4);/* eslint-disable no-new, handle-callback-err */new u(i,r,s,function(e,i){self.postMessage(c({source:t.source,decrypted:i}),[i.buffer])});/* eslint-enable */}}));var hl=lB(ho);/* rollup-plugin-worker-factory end for worker!/home/runner/work/http-streaming/http-streaming/src/decrypter-worker.js *//**
 * Convert the properties of an HLS track into an audioTrackKind.
 *
 * @private
 */const hu=e=>{let t=e.default?"main":"alternative";return e.characteristics&&e.characteristics.indexOf("public.accessibility.describes-video")>=0&&(t="main-desc"),t},hh=(e,t)=>{e.abort(),e.pause(),t&&t.activePlaylistLoader&&(t.activePlaylistLoader.pause(),t.activePlaylistLoader=null)},hd=(e,t)=>{// Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the
// playlist loader
t.activePlaylistLoader=e,e.load()},hc=(e,t)=>()=>{let{segmentLoaders:{[e]:i,main:r},mediaTypes:{[e]:s}}=t,n=s.activeTrack(),a=s.getActiveGroup(),o=s.activePlaylistLoader,l=s.lastGroup_;if((!a||!l||a.id!==l.id)&&(s.lastGroup_=a,s.lastTrack_=n,hh(i,s),a&&!a.isMainPlaylist)){if(!a.playlistLoader){o&&// this means we are switching from demuxed to muxed audio. In this case we want to
    // do a destructive reset of the main segment loader and not restart the audio
    // loaders.
    r.resetEverything();return}// Non-destructive resync
    i.resyncLoader(),hd(a.playlistLoader,s)}},hp=(e,t)=>()=>{let{segmentLoaders:{[e]:i},mediaTypes:{[e]:r}}=t;r.lastGroup_=null,i.abort(),i.pause()},hm=(e,t)=>()=>{let{mainPlaylistLoader:i,segmentLoaders:{[e]:r,main:s},mediaTypes:{[e]:n}}=t,a=n.activeTrack(),o=n.getActiveGroup(),l=n.activePlaylistLoader,u=n.lastTrack_;if((!u||!a||u.id!==a.id)&&(n.lastGroup_=o,n.lastTrack_=a,hh(r,n),o)){if(o.isMainPlaylist){// track did not change, do nothing
    if(!a||!u||a.id===u.id)return;let e=t.vhs.playlistController_,r=e.selectPlaylist();if(e.media()===r)return;n.logger_(`track change. Switching main audio from ${u.id} to ${a.id}`),i.pause(),s.resetEverything(),e.fastQualityChange_(r);return}if("AUDIO"===e){if(!o.playlistLoader){// when switching from demuxed audio/video to muxed audio/video (noted by no
    // playlist loader for the audio group), we want to do a destructive reset of the
    // main segment loader and not restart the audio loaders
    s.setAudio(!0),// it should be stopped
    s.resetEverything();return}// although the segment loader is an audio segment loader, call the setAudio
    // function to ensure it is prepared to re-append the init segment (or handle other
    // config changes)
    r.setAudio(!0),s.setAudio(!1)}if(l===o.playlistLoader){// Nothing has actually changed. This can happen because track change events can fire
    // multiple times for a "single" change. One for enabling the new active track, and
    // one for disabling the track that was active
    hd(o.playlistLoader,n);return}r.track&&r.track(a),// destructive reset
    r.resetEverything(),hd(o.playlistLoader,n)}},hf={/**
   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
   * an error.
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Error handler. Logs warning (or error if the playlist is excluded) to
   *         console and switches back to default audio track.
   * @function onError.AUDIO
   */AUDIO:(e,t)=>()=>{let{mediaTypes:{[e]:i},excludePlaylist:r}=t,s=i.activeTrack(),n=i.activeGroup(),a=(n.filter(e=>e.default)[0]||n[0]).id,o=i.tracks[a];// switch back to default audio track
    if(s===o){// Default track encountered an error. All we can do now is exclude the current
    // rendition and hope another will switch audio groups
    r({error:{message:"Problem encountered loading the default audio track."}});return}for(let e in a9.log.warn("Problem encountered loading the alternate audio track.Switching back to default."),i.tracks)i.tracks[e].enabled=i.tracks[e]===o;i.onTrackChanged()},/**
   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
   * an error.
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Error handler. Logs warning to console and disables the active subtitle track
   * @function onError.SUBTITLES
   */SUBTITLES:(e,t)=>()=>{let{mediaTypes:{[e]:i}}=t;a9.log.warn("Problem encountered loading the subtitle track.Disabling subtitle track.");let r=i.activeTrack();r&&(r.mode="disabled"),i.onTrackChanged()}},hg={/**
   * Setup event listeners for audio playlist loader
   *
   * @param {string} type
   *        MediaGroup type
   * @param {PlaylistLoader|null} playlistLoader
   *        PlaylistLoader to register listeners on
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function setupListeners.AUDIO
   */AUDIO:(e,t,i)=>{if(!t)return;let{tech:r,requestOptions:s,segmentLoaders:{[e]:n}}=i;t.on("loadedmetadata",()=>{let e=t.media();n.playlist(e,s),(!r.paused()||e.endList&&"none"!==r.preload())&&n.load()}),t.on("loadedplaylist",()=>{n.playlist(t.media(),s),r.paused()||n.load()}),t.on("error",hf[e](e,i))},/**
   * Setup event listeners for subtitle playlist loader
   *
   * @param {string} type
   *        MediaGroup type
   * @param {PlaylistLoader|null} playlistLoader
   *        PlaylistLoader to register listeners on
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function setupListeners.SUBTITLES
   */SUBTITLES:(e,t,i)=>{let{tech:r,requestOptions:s,segmentLoaders:{[e]:n},mediaTypes:{[e]:a}}=i;t.on("loadedmetadata",()=>{let e=t.media();n.playlist(e,s),n.track(a.activeTrack()),(!r.paused()||e.endList&&"none"!==r.preload())&&n.load()}),t.on("loadedplaylist",()=>{n.playlist(t.media(),s),r.paused()||n.load()}),t.on("error",hf[e](e,i))}},hy={/**
   * Setup PlaylistLoaders and AudioTracks for the audio groups
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize.AUDIO
   */AUDIO:(e,t)=>{let{vhs:i,sourceType:r,segmentLoaders:{[e]:s},requestOptions:n,main:{mediaGroups:a},mediaTypes:{[e]:{groups:o,tracks:l,logger_:u}},mainPlaylistLoader:h}=t,d=oq(h.main);for(let s in(!a[e]||0===Object.keys(a[e]).length)&&(a[e]={main:{default:{default:!0}}},d&&(a[e].main.default.playlists=h.main.playlists)),a[e])for(let c in o[s]||(o[s]=[]),a[e][s]){let p,m=a[e][s][c];if(d?(u(`AUDIO group '${s}' label '${c}' is a main playlist`),m.isMainPlaylist=!0,p=null):p="vhs-json"===r&&m.playlists?new o9(m.playlists[0],i,n):m.resolvedUri?new o9(m.resolvedUri,i,n):m.playlists&&"dash"===r?new lO(m.playlists[0],i,n,h):null,m=ol({id:c,playlistLoader:p},m),hg[e](e,m.playlistLoader,t),o[s].push(m),void 0===l[c]){let e=new a9.AudioTrack({id:c,kind:hu(m),enabled:!1,language:m.language,default:m.default,label:c});l[c]=e}}// setup single error event handler for the segment loader
s.on("error",hf[e](e,t))},/**
   * Setup PlaylistLoaders and TextTracks for the subtitle groups
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize.SUBTITLES
   */SUBTITLES:(e,t)=>{let{tech:i,vhs:r,sourceType:s,segmentLoaders:{[e]:n},requestOptions:a,main:{mediaGroups:o},mediaTypes:{[e]:{groups:l,tracks:u}},mainPlaylistLoader:h}=t;for(let n in o[e])for(let d in l[n]||(l[n]=[]),o[e][n]){let c;if(!r.options_.useForcedSubtitles&&o[e][n][d].forced)continue;let p=o[e][n][d];if("hls"===s)c=new o9(p.resolvedUri,r,a);else if("dash"===s){let e=p.playlists.filter(e=>e.excludeUntil!==1/0);if(!e.length)return;c=new lO(p.playlists[0],r,a,h)}else"vhs-json"===s&&(c=new o9(// as provided, otherwise use the resolved URI to load the playlist
p.playlists?p.playlists[0]:p.resolvedUri,r,a));if(p=ol({id:d,playlistLoader:c},p),hg[e](e,p.playlistLoader,t),l[n].push(p),void 0===u[d]){let e=i.addRemoteTextTrack({id:d,kind:"subtitles",default:p.default&&p.autoselect,language:p.language,label:d},!1).track;u[d]=e}}// setup single error event handler for the segment loader
n.on("error",hf[e](e,t))},/**
   * Setup TextTracks for the closed-caption groups
   *
   * @param {String} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize['CLOSED-CAPTIONS']
   */"CLOSED-CAPTIONS":(e,t)=>{let{tech:i,main:{mediaGroups:r},mediaTypes:{[e]:{groups:s,tracks:n}}}=t;for(let t in r[e])for(let a in s[t]||(s[t]=[]),r[e][t]){let o=r[e][t][a];// Look for either 608 (CCn) or 708 (SERVICEn) caption services
if(!/^(?:CC|SERVICE)/.test(o.instreamId))continue;let l=i.options_.vhs&&i.options_.vhs.captionServices||{},u={label:a,language:o.language,instreamId:o.instreamId,default:o.default&&o.autoselect};if(l[u.instreamId]&&(u=ol(u,l[u.instreamId])),void 0===u.default&&delete u.default,// No PlaylistLoader is required for Closed-Captions because the captions are
// embedded within the video stream
s[t].push(ol({id:a},o)),void 0===n[a]){let e=i.addRemoteTextTrack({id:u.instreamId,kind:"captions",default:u.default,language:u.language,label:u.label},!1).track;n[a]=e}}}},h_=(e,t)=>{for(let i=0;i<e.length;i++)if(oF(t,e[i])||e[i].playlists&&h_(e[i].playlists,t))return!0;return!1},hb=(e,t)=>i=>{let{mainPlaylistLoader:r,mediaTypes:{[e]:{groups:s}}}=t,n=r.media();if(!n)return null;let a=null;// set to variants to main media active group
    n.attributes[e]&&(a=s[n.attributes[e]]);let o=Object.keys(s);if(!a){// find the mainPlaylistLoader media
    // that is in a media group if we are dealing
    // with audio only
    if("AUDIO"===e&&o.length>1&&oq(t.main))for(let e=0;e<o.length;e++){let t=s[o[e]];if(h_(t,n)){a=t;break}}// use the main group if it exists
    else s.main?a=s.main:1===o.length&&(a=s[o[0]])}return void 0===i?a:null!==i&&a&&a.filter(e=>e.id===i.id)[0]||null},hv={/**
   * Returns a function used to get the active track of type provided
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Function that returns the active media track for the provided type. Returns
   *         null if no track is active
   * @function activeTrack.AUDIO
   */AUDIO:(e,t)=>()=>{let{mediaTypes:{[e]:{tracks:i}}}=t;for(let e in i)if(i[e].enabled)return i[e];return null},/**
   * Returns a function used to get the active track of type provided
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Function that returns the active media track for the provided type. Returns
   *         null if no track is active
   * @function activeTrack.SUBTITLES
   */SUBTITLES:(e,t)=>()=>{let{mediaTypes:{[e]:{tracks:i}}}=t;for(let e in i)if("showing"===i[e].mode||"hidden"===i[e].mode)return i[e];return null}},hT=(e,{mediaTypes:t})=>()=>{let i=t[e].activeTrack();return i?t[e].activeGroup(i):null},hS=e=>{["AUDIO","SUBTITLES","CLOSED-CAPTIONS"].forEach(t=>{hy[t](t,e)});let{mediaTypes:t,mainPlaylistLoader:i,tech:r,vhs:s,segmentLoaders:{AUDIO:n,main:a}}=e;// setup active group and track getters and change event handlers
["AUDIO","SUBTITLES"].forEach(i=>{t[i].activeGroup=hb(i,e),t[i].activeTrack=hv[i](i,e),t[i].onGroupChanged=hc(i,e),t[i].onGroupChanging=hp(i,e),t[i].onTrackChanged=hm(i,e),t[i].getActiveGroup=hT(i,e)});// DO enable the default audio track
let o=t.AUDIO.activeGroup();if(o){let e=(o.filter(e=>e.default)[0]||o[0]).id;t.AUDIO.tracks[e].enabled=!0,t.AUDIO.onGroupChanged(),t.AUDIO.onTrackChanged();let i=t.AUDIO.getActiveGroup();// a similar check for handling setAudio on each loader is run again each time the
i.playlistLoader?(// audio is demuxed
a.setAudio(!1),n.setAudio(!0)):a.setAudio(!0)}i.on("mediachange",()=>{["AUDIO","SUBTITLES"].forEach(e=>t[e].onGroupChanged())}),i.on("mediachanging",()=>{["AUDIO","SUBTITLES"].forEach(e=>t[e].onGroupChanging())});let l=()=>{t.AUDIO.onTrackChanged(),r.trigger({type:"usage",name:"vhs-audio-change"})};for(let e in r.audioTracks().addEventListener("change",l),r.remoteTextTracks().addEventListener("change",t.SUBTITLES.onTrackChanged),s.on("dispose",()=>{r.audioTracks().removeEventListener("change",l),r.remoteTextTracks().removeEventListener("change",t.SUBTITLES.onTrackChanged)}),r.clearTracks("audio"),t.AUDIO.tracks)r.audioTracks().addTrack(t.AUDIO.tracks[e])},hE=()=>{let e={};return["AUDIO","SUBTITLES","CLOSED-CAPTIONS"].forEach(t=>{e[t]={groups:{},tracks:{},activePlaylistLoader:null,activeGroup:uY,activeTrack:uY,getActiveGroup:uY,onGroupChanged:uY,onTrackChanged:uY,lastTrack_:null,logger_:oo(`MediaGroups[${t}]`)}}),e};/**
 * A utility class for setting properties and maintaining the state of the content steering manifest.
 *
 * Content Steering manifest format:
 * VERSION: number (required) currently only version 1 is supported.
 * TTL: number in seconds (optional) until the next content steering manifest reload.
 * RELOAD-URI: string (optional) uri to fetch the next content steering manifest.
 * SERVICE-LOCATION-PRIORITY or PATHWAY-PRIORITY a non empty array of unique string values.
 */class hw{constructor(){this.priority_=[]}set version(e){// Only version 1 is currently supported for both DASH and HLS.
1===e&&(this.version_=e)}set ttl(e){// TTL = time-to-live, default = 300 seconds.
this.ttl_=e||300}set reloadUri(e){e&&(this.reloadUri_=on(this.reloadUri_,e))}set priority(e){// priority must be non-empty and unique values.
e&&e.length&&(this.priority_=e)}get version(){return this.version_}get ttl(){return this.ttl_}get reloadUri(){return this.reloadUri_}get priority(){return this.priority_}}/**
 * This class represents a content steering manifest and associated state. See both HLS and DASH specifications.
 * HLS: https://developer.apple.com/streaming/HLSContentSteeringSpecification.pdf and
 * https://datatracker.ietf.org/doc/draft-pantos-hls-rfc8216bis/ section 4.4.6.6.
 * DASH: https://dashif.org/docs/DASH-IF-CTS-00XX-Content-Steering-Community-Review.pdf
 *
 * @param {function} xhr for making a network request from the browser.
 * @param {function} bandwidth for fetching the current bandwidth from the main segment loader.
 */class hk extends a9.EventTarget{constructor(e,t){super(),this.currentPathway=null,this.defaultPathway=null,this.queryBeforeStart=null,this.availablePathways_=new Set,this.excludedPathways_=new Set,this.steeringManifest=new hw,this.proxyServerUrl_=null,this.manifestType_=null,this.ttlTimeout_=null,this.request_=null,this.excludedSteeringManifestURLs=new Set,this.logger_=oo("Content Steering"),this.xhr_=e,this.getBandwidth_=t}/**
   * Assigns the content steering tag properties to the steering controller
   *
   * @param {string} baseUrl the baseURL from the manifest for resolving the steering manifest url
   * @param {Object} steeringTag the content steering tag from the main manifest
   */assignTagProperties(e,t){this.manifestType_=t.serverUri?"HLS":"DASH";let i=t.serverUri||t.serverURL;if(!i){this.logger_(`steering manifest URL is ${i}, cannot request steering manifest.`),this.trigger("error");return}// Content steering manifests can be encoded as a data URI. We can decode, parse and return early if that's the case.
if(i.startsWith("data:")){this.decodeDataUriManifest_(i.substring(i.indexOf(",")+1));return}// With DASH queryBeforeStart, we want to use the steeringUri as soon as possible for the request.
this.steeringManifest.reloadUri=this.queryBeforeStart?i:on(e,i),this.defaultPathway=t.pathwayId||t.defaultServiceLocation,this.queryBeforeStart=t.queryBeforeStart||!1,this.proxyServerUrl_=t.proxyServerURL||null,this.defaultPathway&&!this.queryBeforeStart&&this.trigger("content-steering"),this.queryBeforeStart&&this.requestSteeringManifest(this.steeringManifest.reloadUri)}/**
   * Requests the content steering manifest and parse the response. This should only be called after
   * assignTagProperties was called with a content steering tag.
   *
   * @param {string} initialUri The optional uri to make the request with.
   *    If set, the request should be made with exactly what is passed in this variable.
   *    This scenario is specific to DASH when the queryBeforeStart parameter is true.
   *    This scenario should only happen once on initalization.
   */requestSteeringManifest(e){let t=this.steeringManifest.reloadUri;if(!e&&!t)return;// We currently don't support passing MPD query parameters directly to the content steering URL as this requires
// ExtUrlQueryInfo tag support. See the DASH content steering spec section 8.1.
// This request URI accounts for manifest URIs that have been excluded.
let i=e||this.getRequestURI(t);// If there are no valid manifest URIs, we should stop content steering.
if(!i){this.logger_("No valid content steering manifest URIs. Stopping content steering."),this.trigger("error"),this.dispose();return}this.request_=this.xhr_({uri:i},(e,t)=>{if(e){// If the client receives HTTP 410 Gone in response to a manifest request,
// it MUST NOT issue another request for that URI for the remainder of the
// playback session. It MAY continue to use the most-recently obtained set
// of Pathways.
if(410===t.status){this.logger_(`manifest request 410 ${e}.`),this.logger_(`There will be no more content steering requests to ${i} this session.`),this.excludedSteeringManifestURLs.add(i);return}// If the client receives HTTP 429 Too Many Requests with a Retry-After
// header in response to a manifest request, it SHOULD wait until the time
// specified by the Retry-After header to reissue the request.
if(429===t.status){let i=t.responseHeaders["retry-after"];this.logger_(`manifest request 429 ${e}.`),this.logger_(`content steering will retry in ${i} seconds.`),this.startTTLTimeout_(parseInt(i,10));return}// If the Steering Manifest cannot be loaded and parsed correctly, the
// client SHOULD continue to use the previous values and attempt to reload
// it after waiting for the previously-specified TTL (or 5 minutes if
// none).
this.logger_(`manifest failed to load ${e}.`),this.startTTLTimeout_();return}let r=JSON.parse(this.request_.responseText);this.startTTLTimeout_(),this.assignSteeringProperties_(r)})}/**
   * Set the proxy server URL and add the steering manifest url as a URI encoded parameter.
   *
   * @param {string} steeringUrl the steering manifest url
   * @return the steering manifest url to a proxy server with all parameters set
   */setProxyServerUrl_(e){let t=new/*@__PURE__*/(w(I)).URL(e),i=new/*@__PURE__*/(w(I)).URL(this.proxyServerUrl_);return i.searchParams.set("url",encodeURI(t.toString())),this.setSteeringParams_(i.toString())}/**
   * Decodes and parses the data uri encoded steering manifest
   *
   * @param {string} dataUri the data uri to be decoded and parsed.
   */decodeDataUriManifest_(e){let t=JSON.parse(/*@__PURE__*/w(I).atob(e));this.assignSteeringProperties_(t)}/**
   * Set the HLS or DASH content steering manifest request query parameters. For example:
   * _HLS_pathway="<CURRENT-PATHWAY-ID>" and _HLS_throughput=<THROUGHPUT>
   * _DASH_pathway and _DASH_throughput
   *
   * @param {string} uri to add content steering server parameters to.
   * @return a new uri as a string with the added steering query parameters.
   */setSteeringParams_(e){let t=new/*@__PURE__*/(w(I)).URL(e),i=this.getPathway(),r=this.getBandwidth_();if(i){let e=`_${this.manifestType_}_pathway`;t.searchParams.set(e,i)}if(r){let e=`_${this.manifestType_}_throughput`;t.searchParams.set(e,r)}return t.toString()}/**
   * Assigns the current steering manifest properties and to the SteeringManifest object
   *
   * @param {Object} steeringJson the raw JSON steering manifest
   */assignSteeringProperties_(e){if(this.steeringManifest.version=e.VERSION,!this.steeringManifest.version){this.logger_(`manifest version is ${e.VERSION}, which is not supported.`),this.trigger("error");return}this.steeringManifest.ttl=e.TTL,this.steeringManifest.reloadUri=e["RELOAD-URI"],this.steeringManifest.priority=e["PATHWAY-PRIORITY"]||e["SERVICE-LOCATION-PRIORITY"],this.availablePathways_.size||(this.logger_("There are no available pathways for content steering. Ending content steering."),this.trigger("error"),this.dispose());let t=(e=>{for(let t of e)if(this.availablePathways_.has(t))return t;// If no pathway matches, ignore the manifest and choose the first available.
return[...this.availablePathways_][0]})(this.steeringManifest.priority);this.currentPathway!==t&&(this.currentPathway=t,this.trigger("content-steering"))}/**
   * Returns the pathway to use for steering decisions
   *
   * @return {string} returns the current pathway or the default
   */getPathway(){return this.currentPathway||this.defaultPathway}/**
   * Chooses the manifest request URI based on proxy URIs and server URLs.
   * Also accounts for exclusion on certain manifest URIs.
   *
   * @param {string} reloadUri the base uri before parameters
   *
   * @return {string} the final URI for the request to the manifest server.
   */getRequestURI(e){if(!e)return null;let t=e=>this.excludedSteeringManifestURLs.has(e);if(this.proxyServerUrl_){let i=this.setProxyServerUrl_(e);if(!t(i))return i}let i=this.setSteeringParams_(e);return t(i)?null:i}/**
   * Start the timeout for re-requesting the steering manifest at the TTL interval.
   *
   * @param {number} ttl time in seconds of the timeout. Defaults to the
   *        ttl interval in the steering manifest
   */startTTLTimeout_(e=this.steeringManifest.ttl){this.ttlTimeout_=/*@__PURE__*/w(I).setTimeout(()=>{this.requestSteeringManifest()},1e3*e)}/**
   * Clear the TTL timeout if necessary.
   */clearTTLTimeout_(){/*@__PURE__*/w(I).clearTimeout(this.ttlTimeout_),this.ttlTimeout_=null}/**
   * aborts any current steering xhr and sets the current request object to null
   */abort(){this.request_&&this.request_.abort(),this.request_=null}/**
   * aborts steering requests clears the ttl timeout and resets all properties.
   */dispose(){this.off("content-steering"),this.off("error"),this.abort(),this.clearTTLTimeout_(),this.currentPathway=null,this.defaultPathway=null,this.queryBeforeStart=null,this.proxyServerUrl_=null,this.manifestType_=null,this.ttlTimeout_=null,this.request_=null,this.excludedSteeringManifestURLs=new Set,this.availablePathways_=new Set,this.excludedPathways_=new Set,this.steeringManifest=new hw}/**
   * adds a pathway to the available pathways set
   *
   * @param {string} pathway the pathway string to add
   */addAvailablePathway(e){e&&this.availablePathways_.add(e)}/**
   * clears all pathways from the available pathways set
   */clearAvailablePathways(){this.availablePathways_.clear()}excludePathway(e){return this.availablePathways_.delete(e)}}// values summed to calculate the final value
const hC=["mediaRequests","mediaRequestsAborted","mediaRequestsTimedout","mediaRequestsErrored","mediaTransferDuration","mediaBytesTransferred","mediaAppends"],hx=function(e){return this.audioSegmentLoader_[e]+this.mainSegmentLoader_[e]},hD=function({currentPlaylist:e,buffered:t,currentTime:i,nextPlaylist:r,bufferLowWaterLine:s,bufferHighWaterLine:n,duration:a,bufferBasedABR:o,log:l}){// we have no other playlist to switch to
if(!r)return a9.log.warn("We received no playlist to switch to. Please check your stream."),!1;let u=`allowing switch ${e&&e.id||"null"} -> ${r.id}`;if(!e)return l(`${u} as current playlist is not set`),!0;// no need to switch if playlist is the same
if(r.id===e.id)return!1;// determine if current time is in a buffered range.
let h=!!op(t,i).length;// If the playlist is live, then we want to not take low water line into account.
// This is because in LIVE, the player plays 3 segments from the end of the
// playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble
// in those segments, a viewer will never experience a rendition upswitch.
if(!e.endList)return(// For LLHLS live streams, don't switch renditions before playback has started, as it almost
// doubles the time to first playback.
h||"number"!=typeof e.partTargetDuration?(l(`${u} as current playlist is live`),!0):(l(`not ${u} as current playlist is live llhls, but currentTime isn't in buffered.`),!1));let d=oS(t,i),c=o?lR.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE:lR.MAX_BUFFER_LOW_WATER_LINE;// duration is below the max potential low water line
if(a<c)return l(`${u} as duration < max low water line (${a} < ${c})`),!0;let p=r.attributes.BANDWIDTH,m=e.attributes.BANDWIDTH;// we can switch down
if(p<m&&(!o||d<n)){let e=`${u} as next bandwidth < current bandwidth (${p} < ${m})`;return o&&(e+=` and forwardBuffer < bufferHighWaterLine (${d} < ${n})`),l(e),!0}// and if our buffer is higher than the low water line,
// we can switch up
if((!o||p>m)&&d>=s){let e=`${u} as forwardBuffer >= bufferLowWaterLine (${d} >= ${s})`;return o&&(e+=` and next bandwidth > current bandwidth (${p} > ${m})`),l(e),!0}return l(`not ${u} as no switching criteria met`),!1};/**
 * the main playlist controller controller all interactons
 * between playlists and segmentloaders. At this time this mainly
 * involves a main playlist and a series of audio playlists
 * if they are available
 *
 * @class PlaylistController
 * @extends videojs.EventTarget
 */class hI extends a9.EventTarget{constructor(e){super();let{src:t,withCredentials:i,tech:r,bandwidth:s,externVhs:a,useCueTags:o,playlistExclusionDuration:l,enableLowInitialPlaylist:u,sourceType:h,cacheEncryptionKeys:d,bufferBasedABR:c,leastPixelDiffSelector:p,captionServices:m}=e;if(!t)throw Error("A non-empty playlist URL or JSON manifest string is required");let{maxPlaylistRetries:f}=e;null==f&&(f=1/0),n=a,this.bufferBasedABR=!!c,this.leastPixelDiffSelector=!!p,this.withCredentials=i,this.tech_=r,this.vhs_=r.vhs,this.sourceType_=h,this.useCueTags_=o,this.playlistExclusionDuration=l,this.maxPlaylistRetries=f,this.enableLowInitialPlaylist=u,this.useCueTags_&&(this.cueTagsTrack_=this.tech_.addTextTrack("metadata","ad-cues"),this.cueTagsTrack_.inBandMetadataTrackDispatchType=""),this.requestOptions_={withCredentials:i,maxPlaylistRetries:f,timeout:null},this.on("error",this.pauseLoading),this.mediaTypes_=hE(),this.mediaSource=new/*@__PURE__*/(w(I)).MediaSource,this.handleDurationChange_=this.handleDurationChange_.bind(this),this.handleSourceOpen_=this.handleSourceOpen_.bind(this),this.handleSourceEnded_=this.handleSourceEnded_.bind(this),this.mediaSource.addEventListener("durationchange",this.handleDurationChange_),this.mediaSource.addEventListener("sourceopen",this.handleSourceOpen_),this.mediaSource.addEventListener("sourceended",this.handleSourceEnded_),// everything, and the MediaSource should not be detached without a proper disposal
this.seekable_=ou(),this.hasPlayed_=!1,this.syncController_=new hn(e),this.segmentMetadataTrack_=r.addRemoteTextTrack({kind:"metadata",label:"segment-metadata"},!1).track,this.decrypter_=new hl,this.sourceUpdater_=new u6(this.mediaSource),this.inbandTextTracks_={},this.timelineChangeController_=new ha;let g={vhs:this.vhs_,parse708captions:e.parse708captions,useDtsForTimestampOffset:e.useDtsForTimestampOffset,calculateTimestampOffsetForEachSegment:e.calculateTimestampOffsetForEachSegment,captionServices:m,mediaSource:this.mediaSource,currentTime:this.tech_.currentTime.bind(this.tech_),seekable:()=>this.seekable(),seeking:()=>this.tech_.seeking(),duration:()=>this.duration(),hasPlayed:()=>this.hasPlayed_,goalBufferLength:()=>this.goalBufferLength(),bandwidth:s,syncController:this.syncController_,decrypter:this.decrypter_,sourceType:this.sourceType_,inbandTextTracks:this.inbandTextTracks_,cacheEncryptionKeys:d,sourceUpdater:this.sourceUpdater_,timelineChangeController:this.timelineChangeController_,exactManifestTimings:e.exactManifestTimings,addMetadataToTextTrack:this.addMetadataToTextTrack.bind(this)};// The source type check not only determines whether a special DASH playlist loader
// should be used, but also covers the case where the provided src is a vhs-json
// manifest object (instead of a URL). In the case of vhs-json, the default
// PlaylistLoader should be used.
this.mainPlaylistLoader_="dash"===this.sourceType_?new lO(t,this.vhs_,ol(this.requestOptions_,{addMetadataToTextTrack:this.addMetadataToTextTrack.bind(this)})):new o9(t,this.vhs_,ol(this.requestOptions_,{addDateRangesToTextTrack:this.addDateRangesToTextTrack_.bind(this)})),this.setupMainPlaylistLoaderListeners_(),// combined audio/video or just video when alternate audio track is selected
this.mainSegmentLoader_=new uK(ol(g,{segmentMetadataTrack:this.segmentMetadataTrack_,loaderType:"main"}),e),this.audioSegmentLoader_=new uK(ol(g,{loaderType:"audio"}),e),this.subtitleSegmentLoader_=new ht(ol(g,{loaderType:"vtt",featuresNativeTextTracks:this.tech_.featuresNativeTextTracks,loadVttJs:()=>new Promise((e,t)=>{function i(){r.off("vttjserror",s),e()}function s(){r.off("vttjsloaded",i),t()}r.one("vttjsloaded",i),r.one("vttjserror",s),r.addWebVttScript_()})}),e),this.contentSteeringController_=new hk(this.vhs_.xhr,()=>this.mainSegmentLoader_.bandwidth),this.setupSegmentLoaderListeners_(),this.bufferBasedABR&&(this.mainPlaylistLoader_.one("loadedplaylist",()=>this.startABRTimer_()),this.tech_.on("pause",()=>this.stopABRTimer_()),this.tech_.on("play",()=>this.startABRTimer_())),// mediaRequests_
// mediaRequestsAborted_
// mediaRequestsTimedout_
// mediaRequestsErrored_
// mediaTransferDuration_
// mediaBytesTransferred_
// mediaAppends_
hC.forEach(e=>{this[e+"_"]=hx.bind(this,e)}),this.logger_=oo("pc"),this.triggeredFmp4Usage=!1,"none"===this.tech_.preload()?(this.loadOnPlay_=()=>{this.loadOnPlay_=null,this.mainPlaylistLoader_.load()},this.tech_.one("play",this.loadOnPlay_)):this.mainPlaylistLoader_.load(),this.timeToLoadedData__=-1,this.mainAppendsToLoadedData__=-1,this.audioAppendsToLoadedData__=-1;let y="none"===this.tech_.preload()?"play":"loadstart";// start the first frame timer on loadstart or play (for preload none)
this.tech_.one(y,()=>{let e=Date.now();this.tech_.one("loadeddata",()=>{this.timeToLoadedData__=Date.now()-e,this.mainAppendsToLoadedData__=this.mainSegmentLoader_.mediaAppends,this.audioAppendsToLoadedData__=this.audioSegmentLoader_.mediaAppends})})}mainAppendsToLoadedData_(){return this.mainAppendsToLoadedData__}audioAppendsToLoadedData_(){return this.audioAppendsToLoadedData__}appendsToLoadedData_(){let e=this.mainAppendsToLoadedData_(),t=this.audioAppendsToLoadedData_();return -1===e||-1===t?-1:e+t}timeToLoadedData_(){return this.timeToLoadedData__}/**
   * Run selectPlaylist and switch to the new playlist if we should
   *
   * @param {string} [reason=abr] a reason for why the ABR check is made
   * @private
   */checkABR_(e="abr"){let t=this.selectPlaylist();t&&this.shouldSwitchToMedia_(t)&&this.switchMedia_(t,e)}switchMedia_(e,t,i){let r=this.media(),s=r&&(r.id||r.uri),n=e.id||e.uri;s&&s!==n&&(this.logger_(`switch media ${s} -> ${n} from ${t}`),this.tech_.trigger({type:"usage",name:`vhs-rendition-change-${t}`})),this.mainPlaylistLoader_.media(e,i)}/**
   * A function that ensures we switch our playlists inside of `mediaTypes`
   * to match the current `serviceLocation` provided by the contentSteering controller.
   * We want to check media types of `AUDIO`, `SUBTITLES`, and `CLOSED-CAPTIONS`.
   *
   * This should only be called on a DASH playback scenario while using content steering.
   * This is necessary due to differences in how media in HLS manifests are generally tied to
   * a video playlist, where in DASH that is not always the case.
   */switchMediaForDASHContentSteering_(){["AUDIO","SUBTITLES","CLOSED-CAPTIONS"].forEach(e=>{let t=this.mediaTypes_[e],i=t?t.activeGroup():null,r=this.contentSteeringController_.getPathway();if(i&&r){// activeGroup can be an array or a single group
let t=i.length?i[0].playlists:i.playlists,s=t.filter(e=>e.attributes.serviceLocation===r);s.length&&this.mediaTypes_[e].activePlaylistLoader.media(s[0])}})}/**
   * Start a timer that periodically calls checkABR_
   *
   * @private
   */startABRTimer_(){this.stopABRTimer_(),this.abrTimer_=/*@__PURE__*/w(I).setInterval(()=>this.checkABR_(),250)}/**
   * Stop the timer that periodically calls checkABR_
   *
   * @private
   */stopABRTimer_(){// if we're scrubbing, we don't need to pause.
// This getter will be added to Video.js in version 7.11.
this.tech_.scrubbing&&this.tech_.scrubbing()||(/*@__PURE__*/w(I).clearInterval(this.abrTimer_),this.abrTimer_=null)}/**
   * Get a list of playlists for the currently selected audio playlist
   *
   * @return {Array} the array of audio playlists
   */getAudioTrackPlaylists_(){let e;let t=this.main(),i=t&&t.playlists||[];// assume that the audio tracks are contained in main
// playlist array, use that or an empty array.
if(!t||!t.mediaGroups||!t.mediaGroups.AUDIO)return i;let r=t.mediaGroups.AUDIO,s=Object.keys(r);if(Object.keys(this.mediaTypes_.AUDIO.groups).length)e=this.mediaTypes_.AUDIO.activeTrack();// or get the default track from main if mediaTypes_ isn't setup yet
else{// default group is `main` or just the first group.
let t=r.main||s.length&&r[s[0]];for(let i in t)if(t[i].default){e={label:i};break}}// no active track no playlists.
if(!e)return i;let n=[];// get all of the playlists that are possible for the
// active track.
for(let i in r)if(r[i][e.label]){let s=r[i][e.label];if(s.playlists&&s.playlists.length)n.push.apply(n,s.playlists);else if(s.uri)n.push(s);else if(t.playlists.length)// see if we have main playlists that use it as a group.
// if we do then add those to the playlists list.
for(let e=0;e<t.playlists.length;e++){let r=t.playlists[e];r.attributes&&r.attributes.AUDIO&&r.attributes.AUDIO===i&&n.push(r)}}return n.length?n:i}/**
   * Register event handlers on the main playlist loader. A helper
   * function for construction time.
   *
   * @private
   */setupMainPlaylistLoaderListeners_(){this.mainPlaylistLoader_.on("loadedmetadata",()=>{let e=this.mainPlaylistLoader_.media(),t=1500*e.targetDuration;oB(this.mainPlaylistLoader_.main,this.mainPlaylistLoader_.media())?this.requestOptions_.timeout=0:this.requestOptions_.timeout=t,e.endList&&"none"!==this.tech_.preload()&&(this.mainSegmentLoader_.playlist(e,this.requestOptions_),this.mainSegmentLoader_.load()),hS({sourceType:this.sourceType_,segmentLoaders:{AUDIO:this.audioSegmentLoader_,SUBTITLES:this.subtitleSegmentLoader_,main:this.mainSegmentLoader_},tech:this.tech_,requestOptions:this.requestOptions_,mainPlaylistLoader:this.mainPlaylistLoader_,vhs:this.vhs_,main:this.main(),mediaTypes:this.mediaTypes_,excludePlaylist:this.excludePlaylist.bind(this)}),this.triggerPresenceUsage_(this.main(),e),this.setupFirstPlay(),!this.mediaTypes_.AUDIO.activePlaylistLoader||this.mediaTypes_.AUDIO.activePlaylistLoader.media()?this.trigger("selectedinitialmedia"):// finish setting up before triggering this event so the
// representations API and EME setup is correct
this.mediaTypes_.AUDIO.activePlaylistLoader.one("loadedmetadata",()=>{this.trigger("selectedinitialmedia")})}),this.mainPlaylistLoader_.on("loadedplaylist",()=>{this.loadOnPlay_&&this.tech_.off("play",this.loadOnPlay_);let e=this.mainPlaylistLoader_.media();if(!e){let t;if(this.initContentSteeringController_(),// an initial media as the playlist selectors do not consider browser support
this.excludeUnsupportedVariants_(),this.enableLowInitialPlaylist&&(t=this.selectInitialPlaylist()),t||(t=this.selectPlaylist()),!t||!this.shouldSwitchToMedia_(t))return;this.initialMedia_=t,this.switchMedia_(this.initialMedia_,"initial");// fire again since the playlist will be requested. In the case of vhs-json
// (where the manifest object is provided as the source), when the media
// playlist's `segments` list is already available, a media playlist won't be
// requested, and loadedplaylist won't fire again, so the playlist handler must be
// called on its own here.
let i="vhs-json"===this.sourceType_&&this.initialMedia_.segments;if(!i)return;e=this.initialMedia_}this.handleUpdatedMediaPlaylist(e)}),this.mainPlaylistLoader_.on("error",()=>{let e=this.mainPlaylistLoader_.error;this.excludePlaylist({playlistToExclude:e.playlist,error:e})}),this.mainPlaylistLoader_.on("mediachanging",()=>{this.mainSegmentLoader_.abort(),this.mainSegmentLoader_.pause()}),this.mainPlaylistLoader_.on("mediachange",()=>{let e=this.mainPlaylistLoader_.media(),t=1500*e.targetDuration;oB(this.mainPlaylistLoader_.main,this.mainPlaylistLoader_.media())?this.requestOptions_.timeout=0:this.requestOptions_.timeout=t,this.mainPlaylistLoader_.load(),// that the segments have changed in some way and use that to
// update the SegmentLoader instead of doing it twice here and
// on `loadedplaylist`
this.mainSegmentLoader_.playlist(e,this.requestOptions_),this.mainSegmentLoader_.load(),this.tech_.trigger({type:"mediachange",bubbles:!0})}),this.mainPlaylistLoader_.on("playlistunchanged",()=>{let e=this.mainPlaylistLoader_.media();// ignore unchanged playlists that have already been
// excluded for not-changing. We likely just have a really slowly updating
// playlist.
if("playlist-unchanged"===e.lastExcludeReason_)return;let t=this.stuckAtPlaylistEnd_(e);t&&(// Playlist has stopped updating and we're stuck at its end. Try to
// exclude it and switch to another playlist in the hope that that
// one is updating (and give the player a chance to re-adjust to the
// safe live point).
this.excludePlaylist({error:{message:"Playlist no longer updating.",reason:"playlist-unchanged"}}),this.tech_.trigger("playliststuck"))}),this.mainPlaylistLoader_.on("renditiondisabled",()=>{this.tech_.trigger({type:"usage",name:"vhs-rendition-disabled"})}),this.mainPlaylistLoader_.on("renditionenabled",()=>{this.tech_.trigger({type:"usage",name:"vhs-rendition-enabled"})})}/**
   * Given an updated media playlist (whether it was loaded for the first time, or
   * refreshed for live playlists), update any relevant properties and state to reflect
   * changes in the media that should be accounted for (e.g., cues and duration).
   *
   * @param {Object} updatedPlaylist the updated media playlist object
   *
   * @private
   */handleUpdatedMediaPlaylist(e){this.useCueTags_&&this.updateAdCues_(e),// TODO: Create a new event on the PlaylistLoader that signals
// that the segments have changed in some way and use that to
// update the SegmentLoader instead of doing it twice here and
// on `mediachange`
this.mainSegmentLoader_.playlist(e,this.requestOptions_),this.updateDuration(!e.endList),!this.tech_.paused()&&(this.mainSegmentLoader_.load(),this.audioSegmentLoader_&&this.audioSegmentLoader_.load())}/**
   * A helper function for triggerring presence usage events once per source
   *
   * @private
   */triggerPresenceUsage_(e,t){let i=e.mediaGroups||{},r=!0,s=Object.keys(i.AUDIO);for(let e in i.AUDIO)for(let t in i.AUDIO[e]){let s=i.AUDIO[e][t];s.uri||(r=!1)}r&&this.tech_.trigger({type:"usage",name:"vhs-demuxed"}),Object.keys(i.SUBTITLES).length&&this.tech_.trigger({type:"usage",name:"vhs-webvtt"}),n.Playlist.isAes(t)&&this.tech_.trigger({type:"usage",name:"vhs-aes"}),s.length&&Object.keys(i.AUDIO[s[0]]).length>1&&this.tech_.trigger({type:"usage",name:"vhs-alternate-audio"}),this.useCueTags_&&this.tech_.trigger({type:"usage",name:"vhs-playlist-cue-tags"})}shouldSwitchToMedia_(e){let t=this.mainPlaylistLoader_.media()||this.mainPlaylistLoader_.pendingMedia_,i=this.tech_.currentTime(),r=this.bufferLowWaterLine(),s=this.bufferHighWaterLine(),n=this.tech_.buffered();return hD({buffered:n,currentTime:i,currentPlaylist:t,nextPlaylist:e,bufferLowWaterLine:r,bufferHighWaterLine:s,duration:this.duration(),bufferBasedABR:this.bufferBasedABR,log:this.logger_})}/**
   * Register event handlers on the segment loaders. A helper function
   * for construction time.
   *
   * @private
   */setupSegmentLoaderListeners_(){this.mainSegmentLoader_.on("bandwidthupdate",()=>{// Whether or not buffer based ABR or another ABR is used, on a bandwidth change it's
// useful to check to see if a rendition switch should be made.
this.checkABR_("bandwidthupdate"),this.tech_.trigger("bandwidthupdate")}),this.mainSegmentLoader_.on("timeout",()=>{this.bufferBasedABR&&// Here the only consideration is that for buffer based ABR there's no guarantee
// of an immediate switch (since the bandwidth is averaged with a timeout
// bandwidth value of 1), so force a load on the segment loader to keep it going.
this.mainSegmentLoader_.load()}),this.bufferBasedABR||this.mainSegmentLoader_.on("progress",()=>{this.trigger("progress")}),this.mainSegmentLoader_.on("error",()=>{let e=this.mainSegmentLoader_.error();this.excludePlaylist({playlistToExclude:e.playlist,error:e})}),this.mainSegmentLoader_.on("appenderror",()=>{this.error=this.mainSegmentLoader_.error_,this.trigger("error")}),this.mainSegmentLoader_.on("syncinfoupdate",()=>{this.onSyncInfoUpdate_()}),this.mainSegmentLoader_.on("timestampoffset",()=>{this.tech_.trigger({type:"usage",name:"vhs-timestamp-offset"})}),this.audioSegmentLoader_.on("syncinfoupdate",()=>{this.onSyncInfoUpdate_()}),this.audioSegmentLoader_.on("appenderror",()=>{this.error=this.audioSegmentLoader_.error_,this.trigger("error")}),this.mainSegmentLoader_.on("ended",()=>{this.logger_("main segment loader ended"),this.onEndOfStream()}),this.mainSegmentLoader_.on("earlyabort",e=>{// never try to early abort with the new ABR algorithm
this.bufferBasedABR||(this.delegateLoaders_("all",["abort"]),this.excludePlaylist({error:{message:"Aborted early because there isn't enough bandwidth to complete the request without rebuffering."},playlistExclusionDuration:10}))});let e=()=>{if(!this.sourceUpdater_.hasCreatedSourceBuffers())return this.tryToCreateSourceBuffers_();let e=this.getCodecsOrExclude_();// no codecs means that the playlist was excluded
e&&this.sourceUpdater_.addOrChangeSourceBuffers(e)};this.mainSegmentLoader_.on("trackinfo",e),this.audioSegmentLoader_.on("trackinfo",e),this.mainSegmentLoader_.on("fmp4",()=>{this.triggeredFmp4Usage||(this.tech_.trigger({type:"usage",name:"vhs-fmp4"}),this.triggeredFmp4Usage=!0)}),this.audioSegmentLoader_.on("fmp4",()=>{this.triggeredFmp4Usage||(this.tech_.trigger({type:"usage",name:"vhs-fmp4"}),this.triggeredFmp4Usage=!0)}),this.audioSegmentLoader_.on("ended",()=>{this.logger_("audioSegmentLoader ended"),this.onEndOfStream()})}mediaSecondsLoaded_(){return Math.max(this.audioSegmentLoader_.mediaSecondsLoaded+this.mainSegmentLoader_.mediaSecondsLoaded)}/**
   * Call load on our SegmentLoaders
   */load(){this.mainSegmentLoader_.load(),this.mediaTypes_.AUDIO.activePlaylistLoader&&this.audioSegmentLoader_.load(),this.mediaTypes_.SUBTITLES.activePlaylistLoader&&this.subtitleSegmentLoader_.load()}/**
   * Re-tune playback quality level for the current player
   * conditions. This will reset the main segment loader
   * and the next segment position to the currentTime.
   * This is good for manual quality changes.
   *
   * @private
   */fastQualityChange_(e=this.selectPlaylist()){if(e===this.mainPlaylistLoader_.media()){this.logger_("skipping fastQualityChange because new media is same as old");return}this.switchMedia_(e,"fast-quality"),// Don't need to reset audio as it is reset when media changes.
// We resetLoaderProperties separately here as we want to fetch init segments if
// necessary and ensure we're not in an ended state when we switch playlists.
this.resetMainLoaderReplaceSegments()}/**
   * Sets the replaceUntil flag on the main segment soader to the buffered end
   * and resets the main segment loaders properties.
   */resetMainLoaderReplaceSegments(){let e=this.tech_.buffered(),t=e.end(e.length-1);// on the main loader to remain, false after the resetLoader call, until we have
// replaced all content buffered ahead of the currentTime.
this.mainSegmentLoader_.replaceSegmentsUntil=t,this.mainSegmentLoader_.resetLoaderProperties(),this.mainSegmentLoader_.resetLoader()}/**
   * Begin playback.
   */play(){if(this.setupFirstPlay())return;this.tech_.ended()&&this.tech_.setCurrentTime(0),this.hasPlayed_&&this.load();let e=this.tech_.seekable();// if the viewer has paused and we fell out of the live window,
// seek forward to the live point
if(this.tech_.duration()===1/0&&this.tech_.currentTime()<e.start(0))return this.tech_.setCurrentTime(e.end(e.length-1))}/**
   * Seek to the latest media position if this is a live video and the
   * player and video are loaded and initialized.
   */setupFirstPlay(){let e=this.mainPlaylistLoader_.media();// Check that everything is ready to begin buffering for the first call to play
//  If 1) there is no active media
//     2) the player is paused
//     3) the first play has already been setup
// then exit early
if(!e||this.tech_.paused()||this.hasPlayed_)return!1;// when the video is a live stream and/or has a start time
if(!e.endList||e.start){let t=this.seekable();if(!t.length)// live or start point
return!1;let i=t.end(0),r=i;if(e.start){let s=e.start.timeOffset;r=s<0?Math.max(i+s,t.start(0)):Math.min(i,s)}// trigger firstplay to inform the source handler to ignore the next seek event
this.trigger("firstplay"),this.tech_.setCurrentTime(r)}return this.hasPlayed_=!0,this.load(),!0}/**
   * handle the sourceopen event on the MediaSource
   *
   * @private
   */handleSourceOpen_(){// code in video.js but is required because play() must be invoked
// *after* the media source has opened.
if(// Only attempt to create the source buffer if none already exist.
// handleSourceOpen is also called when we are "re-opening" a source buffer
// after `endOfStream` has been called (in response to a seek for instance)
this.tryToCreateSourceBuffers_(),this.tech_.autoplay()){let e=this.tech_.play();// Catch/silence error when a pause interrupts a play request
// on browsers which return a promise
void 0!==e&&"function"==typeof e.then&&e.then(null,e=>{})}this.trigger("sourceopen")}/**
   * handle the sourceended event on the MediaSource
   *
   * @private
   */handleSourceEnded_(){if(!this.inbandTextTracks_.metadataTrack_)return;let e=this.inbandTextTracks_.metadataTrack_.cues;if(!e||!e.length)return;let t=this.duration();e[e.length-1].endTime=isNaN(t)||Math.abs(t)===1/0?Number.MAX_VALUE:t}/**
   * handle the durationchange event on the MediaSource
   *
   * @private
   */handleDurationChange_(){this.tech_.trigger("durationchange")}/**
   * Calls endOfStream on the media source when all active stream types have called
   * endOfStream
   *
   * @param {string} streamType
   *        Stream type of the segment loader that called endOfStream
   * @private
   */onEndOfStream(){let e=this.mainSegmentLoader_.ended_;if(this.mediaTypes_.AUDIO.activePlaylistLoader){let t=this.mainSegmentLoader_.getCurrentMediaInfo_();// if the audio playlist loader exists, then alternate audio is active
// definitively know the main segment loader contains video, then we need to wait
// for both main and audio segment loaders to call endOfStream
e=!t||t.hasVideo?e&&this.audioSegmentLoader_.ended_:this.audioSegmentLoader_.ended_}e&&(this.stopABRTimer_(),this.sourceUpdater_.endOfStream())}/**
   * Check if a playlist has stopped being updated
   *
   * @param {Object} playlist the media playlist object
   * @return {boolean} whether the playlist has stopped being updated or not
   */stuckAtPlaylistEnd_(e){let t=this.seekable();if(!t.length)return!1;let i=this.syncController_.getExpiredTime(e,this.duration());if(null===i)return!1;// does not use the safe live end to calculate playlist end, since we
// don't want to say we are stuck while there is still content
let r=n.Playlist.playlistEnd(e,i),s=this.tech_.currentTime(),a=this.tech_.buffered();if(!a.length)return r-s<=od;let o=a.end(a.length-1);// return true if there is too little buffer left and buffer has reached absolute
// end of playlist
return o-s<=od&&r-o<=od}/**
   * Exclude a playlist for a set amount of time, making it unavailable for selection by
   * the rendition selection algorithm, then force a new playlist (rendition) selection.
   *
   * @param {Object=} playlistToExclude
   *                  the playlist to exclude, defaults to the currently selected playlist
   * @param {Object=} error
   *                  an optional error
   * @param {number=} playlistExclusionDuration
   *                  an optional number of seconds to exclude the playlist
   */excludePlaylist({playlistToExclude:e=this.mainPlaylistLoader_.media(),error:t={},playlistExclusionDuration:i}){let r;// trying to load the main OR while we were disposing of the tech
if(// If the `error` was generated by the playlist loader, it will contain
// the playlist we were trying to load (but failed) and that should be
// excluded instead of the currently selected playlist which is likely
// out-of-date in this scenario
e=e||this.mainPlaylistLoader_.media(),i=i||t.playlistExclusionDuration||this.playlistExclusionDuration,!e){this.error=t,"open"!==this.mediaSource.readyState?this.trigger("error"):this.sourceUpdater_.endOfStream("network");return}e.playlistErrors_++;let s=this.mainPlaylistLoader_.main.playlists,n=s.filter(oM),a=1===n.length&&n[0]===e;// forever
if(1===s.length&&i!==1/0)return a9.log.warn(`Problem encountered with playlist ${e.id}. Trying again since it is the only playlist.`),this.tech_.trigger("retryplaylist"),this.mainPlaylistLoader_.load(a);if(a){// If we're content steering, try other pathways.
if(this.main().contentSteering){let t=this.pathwayAttribute_(e),i=1e3*this.contentSteeringController_.steeringManifest.ttl;// Ignore at least 1 steering manifest refresh.
this.contentSteeringController_.excludePathway(t),this.excludeThenChangePathway_(),setTimeout(()=>{this.contentSteeringController_.addAvailablePathway(t)},i);return}// Since we're on the final non-excluded playlist, and we're about to exclude
// it, instead of erring the player or retrying this playlist, clear out the current
// exclusion list. This allows other playlists to be attempted in case any have been
// fixed.
let t=!1;s.forEach(i=>{// skip current playlist which is about to be excluded
if(i===e)return;let r=i.excludeUntil;// a playlist cannot be reincluded if it wasn't excluded to begin with.
void 0!==r&&r!==1/0&&(t=!0,delete i.excludeUntil)}),t&&(a9.log.warn("Removing other playlists from the exclusion list because the last rendition is about to be excluded."),// playlist. This is needed for users relying on the retryplaylist event to catch a
// case where the player might be stuck and looping through "dead" playlists.
this.tech_.trigger("retryplaylist"))}// Exclude this playlist
r=e.playlistErrors_>this.maxPlaylistRetries?1/0:Date.now()+1e3*i,e.excludeUntil=r,t.reason&&(e.lastExcludeReason_=t.reason),this.tech_.trigger("excludeplaylist"),this.tech_.trigger({type:"usage",name:"vhs-rendition-excluded"});// If this function was called with a playlist that's not the current active playlist
// (e.g., media().id !== playlistToExclude.id),
// then a new playlist should not be selected and loaded, as there's nothing wrong with the current playlist.
let o=this.selectPlaylist();if(!o){this.error="Playback cannot continue. No available working or supported playlists.",this.trigger("error");return}let l=t.internal?this.logger_:a9.log.warn,u=t.message?" "+t.message:"";l(`${t.internal?"Internal problem":"Problem"} encountered with playlist ${e.id}.${u} Switching to playlist ${o.id}.`),o.attributes.AUDIO!==e.attributes.AUDIO&&this.delegateLoaders_("audio",["abort","pause"]),o.attributes.SUBTITLES!==e.attributes.SUBTITLES&&this.delegateLoaders_("subtitle",["abort","pause"]),this.delegateLoaders_("main",["abort","pause"]);let h=o.targetDuration/2*1e3||5e3,d="number"==typeof o.lastRequest&&Date.now()-o.lastRequest<=h;return this.switchMedia_(o,"exclude",a||d)}/**
   * Pause all segment/playlist loaders
   */pauseLoading(){this.delegateLoaders_("all",["abort","pause"]),this.stopABRTimer_()}/**
   * Call a set of functions in order on playlist loaders, segment loaders,
   * or both types of loaders.
   *
   * @param {string} filter
   *        Filter loaders that should call fnNames using a string. Can be:
   *        * all - run on all loaders
   *        * audio - run on all audio loaders
   *        * subtitle - run on all subtitle loaders
   *        * main - run on the main loaders
   *
   * @param {Array|string} fnNames
   *        A string or array of function names to call.
   */delegateLoaders_(e,t){let i=[],r="all"===e;(r||"main"===e)&&i.push(this.mainPlaylistLoader_);let s=[];(r||"audio"===e)&&s.push("AUDIO"),(r||"subtitle"===e)&&(s.push("CLOSED-CAPTIONS"),s.push("SUBTITLES")),s.forEach(e=>{let t=this.mediaTypes_[e]&&this.mediaTypes_[e].activePlaylistLoader;t&&i.push(t)}),["main","audio","subtitle"].forEach(t=>{let r=this[`${t}SegmentLoader_`];r&&(e===t||"all"===e)&&i.push(r)}),i.forEach(e=>t.forEach(t=>{"function"==typeof e[t]&&e[t]()}))}/**
   * set the current time on all segment loaders
   *
   * @param {TimeRange} currentTime the current time to set
   * @return {TimeRange} the current time
   */setCurrentTime(e){let t=op(this.tech_.buffered(),e);return this.mainPlaylistLoader_&&this.mainPlaylistLoader_.media()&&this.mainPlaylistLoader_.media().segments?t&&t.length?e:void(// cancel outstanding requests so we begin buffering at the new
// location
this.mainSegmentLoader_.resetEverything(),this.mediaTypes_.AUDIO.activePlaylistLoader&&this.audioSegmentLoader_.resetEverything(),this.mediaTypes_.SUBTITLES.activePlaylistLoader&&this.subtitleSegmentLoader_.resetEverything(),// start segment loader loading in case they are paused
this.load()):0}/**
   * get the current duration
   *
   * @return {TimeRange} the duration
   */duration(){if(!this.mainPlaylistLoader_)return 0;let e=this.mainPlaylistLoader_.media();return e?e.endList?this.mediaSource?this.mediaSource.duration:n.Playlist.duration(e):1/0:0}/**
   * check the seekable range
   *
   * @return {TimeRange} the seekable range
   */seekable(){return this.seekable_}onSyncInfoUpdate_(){let e,t,i;//
// A fix was made to this function where a check for
// this.sourceUpdater_.hasCreatedSourceBuffers
// was added to ensure that both source buffers were created before seekable was
// updated. However, it originally had a bug where it was checking for a true and
// returning early instead of checking for false. Setting it to check for false to
// return early though created other issues. A call to play() would check for seekable
// end without verifying that a seekable range was present. In addition, even checking
// for that didn't solve some issues, as handleFirstPlay is sometimes worked around
// due to a media update calling load on the segment loaders, skipping a seek to live,
// thereby starting live streams at the beginning of the stream rather than at the end.
//
// This conditional should be fixed to wait for the creation of two source buffers at
// the same time as the other sections of code are fixed to properly seek to live and
// not throw an error due to checking for a seekable end when no seekable range exists.
//
// For now, fall back to the older behavior, with the understanding that the seekable
// range may not be completely correct, leading to a suboptimal initial live point.
if(!this.mainPlaylistLoader_)return;let r=this.mainPlaylistLoader_.media();if(!r)return;let s=this.syncController_.getExpiredTime(r,this.duration());if(null===s)return;let a=this.mainPlaylistLoader_.main,o=n.Playlist.seekable(r,s,n.Playlist.liveEdgeDelay(a,r));if(0!==o.length){if(this.mediaTypes_.AUDIO.activePlaylistLoader&&(r=this.mediaTypes_.AUDIO.activePlaylistLoader.media(),null===(s=this.syncController_.getExpiredTime(r,this.duration()))||0===(e=n.Playlist.seekable(r,s,n.Playlist.liveEdgeDelay(a,r))).length)||(this.seekable_&&this.seekable_.length&&(t=this.seekable_.end(0),i=this.seekable_.start(0)),e?e.start(0)>o.end(0)||o.start(0)>e.end(0)?this.seekable_=o:this.seekable_=ou([[e.start(0)>o.start(0)?e.start(0):o.start(0),e.end(0)<o.end(0)?e.end(0):o.end(0)]]):// can be returned directly
this.seekable_=o,this.seekable_&&this.seekable_.length&&this.seekable_.end(0)===t&&this.seekable_.start(0)===i))return;this.logger_(`seekable updated [${oy(this.seekable_)}]`),this.tech_.trigger("seekablechanged")}}/**
   * Update the player duration
   */updateDuration(e){if(this.updateDuration_&&(this.mediaSource.removeEventListener("sourceopen",this.updateDuration_),this.updateDuration_=null),"open"!==this.mediaSource.readyState){this.updateDuration_=this.updateDuration.bind(this,e),this.mediaSource.addEventListener("sourceopen",this.updateDuration_);return}if(e){let e=this.seekable();if(!e.length)return;// Even in the case of a live playlist, the native MediaSource's duration should not
// be set to Infinity (even though this would be expected for a live playlist), since
// setting the native MediaSource's duration to infinity ends up with consequences to
// seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.
//
// This is resolved in the spec by https://github.com/w3c/media-source/pull/92,
// however, few browsers have support for setLiveSeekableRange()
// https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange
//
// Until a time when the duration of the media source can be set to infinity, and a
// seekable range specified across browsers, the duration should be greater than or
// equal to the last possible seekable value.
// MediaSource duration starts as NaN
// It is possible (and probable) that this case will never be reached for many
// sources, since the MediaSource reports duration as the highest value without
// accounting for timestamp offset. For example, if the timestamp offset is -100 and
// we buffered times 0 to 100 with real times of 100 to 200, even though current
// time will be between 0 and 100, the native media source may report the duration
// as 200. However, since we report duration separate from the media source (as
// Infinity), and as long as the native media source duration value is greater than
// our reported seekable range, seeks will work as expected. The large number as
// duration for live is actually a strategy used by some players to work around the
// issue of live seekable ranges cited above.
(isNaN(this.mediaSource.duration)||this.mediaSource.duration<e.end(e.length-1))&&this.sourceUpdater_.setDuration(e.end(e.length-1));return}let t=this.tech_.buffered(),i=n.Playlist.duration(this.mainPlaylistLoader_.media());t.length>0&&(i=Math.max(i,t.end(t.length-1))),this.mediaSource.duration!==i&&this.sourceUpdater_.setDuration(i)}/**
   * dispose of the PlaylistController and everything
   * that it controls
   */dispose(){this.trigger("dispose"),this.decrypter_.terminate(),this.mainPlaylistLoader_.dispose(),this.mainSegmentLoader_.dispose(),this.contentSteeringController_.dispose(),this.loadOnPlay_&&this.tech_.off("play",this.loadOnPlay_),["AUDIO","SUBTITLES"].forEach(e=>{let t=this.mediaTypes_[e].groups;for(let e in t)t[e].forEach(e=>{e.playlistLoader&&e.playlistLoader.dispose()})}),this.audioSegmentLoader_.dispose(),this.subtitleSegmentLoader_.dispose(),this.sourceUpdater_.dispose(),this.timelineChangeController_.dispose(),this.stopABRTimer_(),this.updateDuration_&&this.mediaSource.removeEventListener("sourceopen",this.updateDuration_),this.mediaSource.removeEventListener("durationchange",this.handleDurationChange_),this.mediaSource.removeEventListener("sourceopen",this.handleSourceOpen_),this.mediaSource.removeEventListener("sourceended",this.handleSourceEnded_),this.off()}/**
   * return the main playlist object if we have one
   *
   * @return {Object} the main playlist object that we parsed
   */main(){return this.mainPlaylistLoader_.main}/**
   * return the currently selected playlist
   *
   * @return {Object} the currently selected playlist object that we parsed
   */media(){// playlist loader will not return media if it has not been fully loaded
return this.mainPlaylistLoader_.media()||this.initialMedia_}areMediaTypesKnown_(){let e=!!this.mediaTypes_.AUDIO.activePlaylistLoader,t=!!this.mainSegmentLoader_.getCurrentMediaInfo_(),i=!e||!!this.audioSegmentLoader_.getCurrentMediaInfo_();return!!t&&!!i}getCodecsOrExclude_(){let e;let t={main:this.mainSegmentLoader_.getCurrentMediaInfo_()||{},audio:this.audioSegmentLoader_.getCurrentMediaInfo_()||{}},i=this.mainSegmentLoader_.getPendingSegmentPlaylist()||this.media();t.video=t.main;let r=uc(this.main(),i),s={},n=!!this.mediaTypes_.AUDIO.activePlaylistLoader;if(t.main.hasVideo&&(s.video=r.video||t.main.videoCodec||"avc1.4d400d"),t.main.isMuxed&&(s.video+=`,${r.audio||t.main.audioCodec||e4}`),(t.main.hasAudio&&!t.main.isMuxed||t.audio.hasAudio||n)&&(s.audio=r.audio||t.main.audioCodec||t.audio.audioCodec||e4,t.audio.isFmp4=t.main.hasAudio&&!t.main.isMuxed?t.main.isFmp4:t.audio.isFmp4),!s.audio&&!s.video){this.excludePlaylist({playlistToExclude:i,error:{message:"Could not determine codecs for playlist."},playlistExclusionDuration:1/0});return}// fmp4 relies on browser support, while ts relies on muxer support
let a=(e,t)=>e?e1(t):e2(t),o={};if(["video","audio"].forEach(function(i){if(s.hasOwnProperty(i)&&!a(t[i].isFmp4,s[i])){let r=t[i].isFmp4?"browser":"muxer";o[r]=o[r]||[],o[r].push(s[i]),"audio"===i&&(e=r)}}),n&&e&&i.attributes.AUDIO){let t=i.attributes.AUDIO;this.main().playlists.forEach(e=>{let r=e.attributes&&e.attributes.AUDIO;r===t&&e!==i&&(e.excludeUntil=1/0)}),this.logger_(`excluding audio group ${t} as ${e} does not support codec(s): "${s.audio}"`)}// if we have any unsupported codecs exclude this playlist.
if(Object.keys(o).length){let e=Object.keys(o).reduce((e,t)=>(e&&(e+=", "),e+=`${t} does not support codec(s): "${o[t].join(",")}"`),"")+".";this.excludePlaylist({playlistToExclude:i,error:{internal:!0,message:e},playlistExclusionDuration:1/0});return}// check if codec switching is happening
if(this.sourceUpdater_.hasCreatedSourceBuffers()&&!this.sourceUpdater_.canChangeType()){let e=[];if(["video","audio"].forEach(t=>{let i=(eQ(this.sourceUpdater_.codecs[t]||"")[0]||{}).type,r=(eQ(s[t]||"")[0]||{}).type;i&&r&&i.toLowerCase()!==r.toLowerCase()&&e.push(`"${this.sourceUpdater_.codecs[t]}" -> "${s[t]}"`)}),e.length){this.excludePlaylist({playlistToExclude:i,error:{message:`Codec switching not supported: ${e.join(", ")}.`,internal:!0},playlistExclusionDuration:1/0});return}}// TODO: when using the muxer shouldn't we just return
// the codecs that the muxer outputs?
return s}/**
   * Create source buffers and exlude any incompatible renditions.
   *
   * @private
   */tryToCreateSourceBuffers_(){// media source is not ready yet or sourceBuffers are already
// created.
if("open"!==this.mediaSource.readyState||this.sourceUpdater_.hasCreatedSourceBuffers()||!this.areMediaTypesKnown_())return;let e=this.getCodecsOrExclude_();// no codecs means that the playlist was excluded
if(!e)return;this.sourceUpdater_.createSourceBuffers(e);let t=[e.video,e.audio].filter(Boolean).join(",");this.excludeIncompatibleVariants_(t)}/**
   * Excludes playlists with codecs that are unsupported by the muxer and browser.
   */excludeUnsupportedVariants_(){let e=this.main().playlists,t=[];// playlist? Why did we ever mix indexes and keys?
Object.keys(e).forEach(i=>{let r=e[i];// check if we already processed this playlist.
if(-1!==t.indexOf(r.id))return;t.push(r.id);let s=uc(this.main,r),n=[];!s.audio||e2(s.audio)||e1(s.audio)||n.push(`audio codec ${s.audio}`),!s.video||e2(s.video)||e1(s.video)||n.push(`video codec ${s.video}`),s.text&&"stpp.ttml.im1t"===s.text&&n.push(`text codec ${s.text}`),n.length&&(r.excludeUntil=1/0,this.logger_(`excluding ${r.id} for unsupported: ${n.join(", ")}`))})}/**
   * Exclude playlists that are known to be codec or
   * stream-incompatible with the SourceBuffer configuration. For
   * instance, Media Source Extensions would cause the video element to
   * stall waiting for video data if you switched from a variant with
   * video and audio to an audio-only one.
   *
   * @param {Object} media a media playlist compatible with the current
   * set of SourceBuffers. Variants in the current main playlist that
   * do not appear to have compatible codec or stream configurations
   * will be excluded from the default playlist selection algorithm
   * indefinitely.
   * @private
   */excludeIncompatibleVariants_(e){let t=[],i=this.main().playlists,r=uh(eQ(e)),s=ud(r),n=r.video&&eQ(r.video)[0]||null,a=r.audio&&eQ(r.audio)[0]||null;Object.keys(i).forEach(e=>{let r=i[e];// check if we already processed this playlist.
// or it if it is already excluded forever.
if(-1!==t.indexOf(r.id)||r.excludeUntil===1/0)return;t.push(r.id);let o=[],l=uc(this.mainPlaylistLoader_.main,r),u=ud(l);// get codecs from the playlist for this variant
// variant is incompatible. Wait for mux.js to probe
if(l.audio||l.video){// only exclude playlists by codec change, if codecs cannot switch
// during playback.
if(u!==s&&o.push(`codec count "${u}" !== "${s}"`),!this.sourceUpdater_.canChangeType()){let e=l.video&&eQ(l.video)[0]||null,t=l.audio&&eQ(l.audio)[0]||null;e&&n&&e.type.toLowerCase()!==n.type.toLowerCase()&&o.push(`video codec "${e.type}" !== "${n.type}"`),t&&a&&t.type.toLowerCase()!==a.type.toLowerCase()&&o.push(`audio codec "${t.type}" !== "${a.type}"`)}o.length&&(r.excludeUntil=1/0,this.logger_(`excluding ${r.id}: ${o.join(" && ")}`))}})}updateAdCues_(e){let t=0,i=this.seekable();i.length&&(t=i.start(0)),hr(e,this.cueTagsTrack_,t)}/**
   * Calculates the desired forward buffer length based on current time
   *
   * @return {number} Desired forward buffer length in seconds
   */goalBufferLength(){let e=this.tech_.currentTime(),t=lR.GOAL_BUFFER_LENGTH,i=lR.GOAL_BUFFER_LENGTH_RATE,r=Math.max(t,lR.MAX_GOAL_BUFFER_LENGTH);return Math.min(t+e*i,r)}/**
   * Calculates the desired buffer low water line based on current time
   *
   * @return {number} Desired buffer low water line in seconds
   */bufferLowWaterLine(){let e=this.tech_.currentTime(),t=lR.BUFFER_LOW_WATER_LINE,i=lR.BUFFER_LOW_WATER_LINE_RATE,r=Math.max(t,lR.MAX_BUFFER_LOW_WATER_LINE),s=Math.max(t,lR.EXPERIMENTAL_MAX_BUFFER_LOW_WATER_LINE);return Math.min(t+e*i,this.bufferBasedABR?s:r)}bufferHighWaterLine(){return lR.BUFFER_HIGH_WATER_LINE}addDateRangesToTextTrack_(e){uI(this.inbandTextTracks_,"com.apple.streaming",this.tech_),uD({inbandTextTracks:this.inbandTextTracks_,dateRanges:e})}addMetadataToTextTrack(e,t,i){let r=this.sourceUpdater_.videoBuffer?this.sourceUpdater_.videoTimestampOffset():this.sourceUpdater_.audioTimestampOffset();// There's potentially an issue where we could double add metadata if there's a muxed
// audio/video source with a metadata track, and an alt audio with a metadata track.
// However, this probably won't happen, and if it does it can be handled then.
uI(this.inbandTextTracks_,e,this.tech_),uk({inbandTextTracks:this.inbandTextTracks_,metadataArray:t,timestampOffset:r,videoDuration:i})}pathwayAttribute_(e){return e.attributes["PATHWAY-ID"]||e.attributes.serviceLocation}/**
   * Initialize content steering listeners and apply the tag properties.
   */initContentSteeringController_(){let e=this.main();if(!e.contentSteering)return;let t=e=>{for(let t of e.playlists)this.contentSteeringController_.addAvailablePathway(this.pathwayAttribute_(t));this.contentSteeringController_.assignTagProperties(e.uri,e.contentSteering)};t(e),this.contentSteeringController_.on("content-steering",this.excludeThenChangePathway_.bind(this)),"dash"===this.sourceType_&&this.mainPlaylistLoader_.on("mediaupdatetimeout",()=>{this.mainPlaylistLoader_.refreshMedia_(this.mainPlaylistLoader_.media().id),this.contentSteeringController_.abort(),this.contentSteeringController_.clearTTLTimeout_(),this.contentSteeringController_.clearAvailablePathways(),t(this.main())}),this.contentSteeringController_.queryBeforeStart||this.tech_.one("canplay",()=>{this.contentSteeringController_.requestSteeringManifest()})}/**
   * Simple exclude and change playlist logic for content steering.
   */excludeThenChangePathway_(){let e=this.contentSteeringController_.getPathway();if(!e)return;let t=this.main(),i=t.playlists,r=new Set,s=!1;Object.keys(i).forEach(t=>{let n=i[t],a=this.pathwayAttribute_(n),o=a&&e!==a,l=n.excludeUntil===1/0&&"content-steering"===n.lastExcludeReason_;l&&!o&&(delete n.excludeUntil,delete n.lastExcludeReason_,s=!0);let u=!n.excludeUntil&&n.excludeUntil!==1/0,h=!r.has(n.id)&&o&&u;h&&(r.add(n.id),n.excludeUntil=1/0,n.lastExcludeReason_="content-steering",this.logger_(`excluding ${n.id} for ${n.lastExcludeReason_}`))}),"DASH"===this.contentSteeringController_.manifestType_&&Object.keys(this.mediaTypes_).forEach(t=>{let i=this.mediaTypes_[t];if(i.activePlaylistLoader){let t=i.activePlaylistLoader.media_;// Check if the current media playlist matches the current CDN
t&&t.attributes.serviceLocation!==e&&(s=!0)}}),s&&this.changeSegmentPathway_()}/**
   * Changes the current playlists for audio, video and subtitles after a new pathway
   * is chosen from content steering.
   */changeSegmentPathway_(){let e=this.selectPlaylist();this.pauseLoading(),"DASH"===this.contentSteeringController_.manifestType_&&this.switchMediaForDASHContentSteering_(),this.switchMedia_(e,"content-steering")}}/**
 * Returns a function that acts as the Enable/disable playlist function.
 *
 * @param {PlaylistLoader} loader - The main playlist loader
 * @param {string} playlistID - id of the playlist
 * @param {Function} changePlaylistFn - A function to be called after a
 * playlist's enabled-state has been changed. Will NOT be called if a
 * playlist's enabled-state is unchanged
 * @param {boolean=} enable - Value to set the playlist enabled-state to
 * or if undefined returns the current enabled-state for the playlist
 * @return {Function} Function for setting/getting enabled
 */const hA=(e,t,i)=>r=>{let s=e.main.playlists[t],n=oN(s),a=oM(s);return void 0===r?a:(r?delete s.disabled:s.disabled=!0,r===a||n||(// Ensure the outside world knows about our changes
    i(),r?e.trigger("renditionenabled"):e.trigger("renditiondisabled")),r)};/**
 * The representation object encapsulates the publicly visible information
 * in a media playlist along with a setter/getter-type function (enabled)
 * for changing the enabled-state of a particular playlist entry
 *
 * @class Representation
 */class hL{constructor(e,t,i){let{playlistController_:r}=e,s=r.fastQualityChange_.bind(r);if(t.attributes){let e=t.attributes.RESOLUTION;this.width=e&&e.width,this.height=e&&e.height,this.bandwidth=t.attributes.BANDWIDTH,this.frameRate=t.attributes["FRAME-RATE"]}this.codecs=uc(r.main(),t),this.playlist=t,// within the main playlist
this.id=i,// specific variant
this.enabled=hA(e.playlists,t.id,s)}}/**
 * A mixin function that adds the `representations` api to an instance
 * of the VhsHandler class
 *
 * @param {VhsHandler} vhsHandler - An instance of VhsHandler to add the
 * representation API into
 */const hP=function(e){// Add a single API-specific function to the VhsHandler instance
e.representations=()=>{let t=e.playlistController_.main(),i=oq(t)?e.playlistController_.getAudioTrackPlaylists_():t.playlists;return i?i.filter(e=>!oN(e)).map((t,i)=>new hL(e,t,t.id)):[]}},hO=["seeking","seeked","pause","playing","error"];/**
 * @class PlaybackWatcher
 */class hR{/**
   * Represents an PlaybackWatcher object.
   *
   * @class
   * @param {Object} options an object that includes the tech and settings
   */constructor(e){this.playlistController_=e.playlistController,this.tech_=e.tech,this.seekable=e.seekable,this.allowSeeksWithinUnsafeLiveWindow=e.allowSeeksWithinUnsafeLiveWindow,this.liveRangeSafeTimeDelta=e.liveRangeSafeTimeDelta,this.media=e.media,this.consecutiveUpdates=0,this.lastRecordedTime=null,this.checkCurrentTimeTimeout_=null,this.logger_=oo("PlaybackWatcher"),this.logger_("initialize");let t=()=>this.monitorCurrentTime_(),i=()=>this.monitorCurrentTime_(),r=()=>this.techWaiting_(),s=()=>this.resetTimeUpdate_(),n=this.playlistController_,a=["main","subtitle","audio"],o={};a.forEach(e=>{o[e]={reset:()=>this.resetSegmentDownloads_(e),updateend:()=>this.checkSegmentDownloads_(e)},n[`${e}SegmentLoader_`].on("appendsdone",o[e].updateend),// isn't changing we want to reset. We cannot assume that the new rendition
// will also be stalled, until after new appends.
n[`${e}SegmentLoader_`].on("playlistupdate",o[e].reset),// This prevents one segment playlists (single vtt or single segment content)
// from being detected as stalling. As the buffer will not change in those cases, since
// the buffer is the entire video duration.
this.tech_.on(["seeked","seeking"],o[e].reset)});/**
     * We check if a seek was into a gap through the following steps:
     * 1. We get a seeking event and we do not get a seeked event. This means that
     *    a seek was attempted but not completed.
     * 2. We run `fixesBadSeeks_` on segment loader appends. This means that we already
     *    removed everything from our buffer and appended a segment, and should be ready
     *    to check for gaps.
     */let l=e=>{["main","audio"].forEach(t=>{n[`${t}SegmentLoader_`][e]("appended",this.seekingAppendCheck_)})};this.seekingAppendCheck_=()=>{this.fixesBadSeeks_()&&(this.consecutiveUpdates=0,this.lastRecordedTime=this.tech_.currentTime(),l("off"))},this.clearSeekingAppendCheck_=()=>l("off"),this.watchForBadSeeking_=()=>{this.clearSeekingAppendCheck_(),l("on")},this.tech_.on("seeked",this.clearSeekingAppendCheck_),this.tech_.on("seeking",this.watchForBadSeeking_),this.tech_.on("waiting",r),this.tech_.on(hO,s),this.tech_.on("canplay",i),/*
      An edge case exists that results in gaps not being skipped when they exist at the beginning of a stream. This case
      is surfaced in one of two ways:
       1)  The `waiting` event is fired before the player has buffered content, making it impossible
          to find or skip the gap. The `waiting` event is followed by a `play` event. On first play
          we can check if playback is stalled due to a gap, and skip the gap if necessary.
      2)  A source with a gap at the beginning of the stream is loaded programatically while the player
          is in a playing state. To catch this case, it's important that our one-time play listener is setup
          even if the player is in a playing state
    */this.tech_.one("play",t),this.dispose=()=>{this.clearSeekingAppendCheck_(),this.logger_("dispose"),this.tech_.off("waiting",r),this.tech_.off(hO,s),this.tech_.off("canplay",i),this.tech_.off("play",t),this.tech_.off("seeking",this.watchForBadSeeking_),this.tech_.off("seeked",this.clearSeekingAppendCheck_),a.forEach(e=>{n[`${e}SegmentLoader_`].off("appendsdone",o[e].updateend),n[`${e}SegmentLoader_`].off("playlistupdate",o[e].reset),this.tech_.off(["seeked","seeking"],o[e].reset)}),this.checkCurrentTimeTimeout_&&/*@__PURE__*/w(I).clearTimeout(this.checkCurrentTimeTimeout_),this.resetTimeUpdate_()}}/**
   * Periodically check current time to see if playback stopped
   *
   * @private
   */monitorCurrentTime_(){this.checkCurrentTime_(),this.checkCurrentTimeTimeout_&&/*@__PURE__*/w(I).clearTimeout(this.checkCurrentTimeTimeout_),// 42 = 24 fps // 250 is what Webkit uses // FF uses 15
this.checkCurrentTimeTimeout_=/*@__PURE__*/w(I).setTimeout(this.monitorCurrentTime_.bind(this),250)}/**
   * Reset stalled download stats for a specific type of loader
   *
   * @param {string} type
   *        The segment loader type to check.
   *
   * @listens SegmentLoader#playlistupdate
   * @listens Tech#seeking
   * @listens Tech#seeked
   */resetSegmentDownloads_(e){let t=this.playlistController_[`${e}SegmentLoader_`];this[`${e}StalledDownloads_`]>0&&this.logger_(`resetting possible stalled download count for ${e} loader`),this[`${e}StalledDownloads_`]=0,this[`${e}Buffered_`]=t.buffered_()}/**
   * Checks on every segment `appendsdone` to see
   * if segment appends are making progress. If they are not
   * and we are still downloading bytes. We exclude the playlist.
   *
   * @param {string} type
   *        The segment loader type to check.
   *
   * @listens SegmentLoader#appendsdone
   */checkSegmentDownloads_(e){let t=this.playlistController_,i=t[`${e}SegmentLoader_`],r=i.buffered_(),s=ov(this[`${e}Buffered_`],r);// the buffered value for this loader changed
// appends are working
if(this[`${e}Buffered_`]=r,s){this.resetSegmentDownloads_(e);return}this[`${e}StalledDownloads_`]++,this.logger_(`found #${this[`${e}StalledDownloads_`]} ${e} appends that did not increase buffer (possible stalled download)`,{playlistId:i.playlist_&&i.playlist_.id,buffered:ob(r)}),this[`${e}StalledDownloads_`]<10||(this.logger_(`${e} loader stalled download exclusion`),this.resetSegmentDownloads_(e),this.tech_.trigger({type:"usage",name:`vhs-${e}-download-exclusion`}),"subtitle"!==e&&// TODO: should we exclude audio tracks rather than main tracks
// when type is audio?
t.excludePlaylist({error:{message:`Excessive ${e} segment downloading detected.`},playlistExclusionDuration:1/0}))}/**
   * The purpose of this function is to emulate the "waiting" event on
   * browsers that do not emit it when they are waiting for more
   * data to continue playback
   *
   * @private
   */checkCurrentTime_(){if(this.tech_.paused()||this.tech_.seeking())return;let e=this.tech_.currentTime(),t=this.tech_.buffered();if(this.lastRecordedTime===e&&(!t.length||e+od>=t.end(t.length-1)))// stall is most likely caused by buffering in a low bandwidth environment. The tech
// should fire a `waiting` event in this scenario, but due to browser and tech
// inconsistencies. Calling `techWaiting_` here allows us to simulate
// responding to a native `waiting` event when the tech fails to emit one.
return this.techWaiting_();this.consecutiveUpdates>=5&&e===this.lastRecordedTime?(this.consecutiveUpdates++,this.waiting_()):e===this.lastRecordedTime?this.consecutiveUpdates++:(this.consecutiveUpdates=0,this.lastRecordedTime=e)}/**
   * Resets the 'timeupdate' mechanism designed to detect that we are stalled
   *
   * @private
   */resetTimeUpdate_(){this.consecutiveUpdates=0}/**
   * Fixes situations where there's a bad seek
   *
   * @return {boolean} whether an action was taken to fix the seek
   * @private
   */fixesBadSeeks_(){let e;let t=this.tech_.seeking();if(!t)return!1;// TODO: It's possible that these seekable checks should be moved out of this function
// and into a function that runs on seekablechange. It's also possible that we only need
// afterSeekableWindow as the buffered check at the bottom is good enough to handle before
// seekable range.
let i=this.seekable(),r=this.tech_.currentTime(),s=this.afterSeekableWindow_(i,r,this.media(),this.allowSeeksWithinUnsafeLiveWindow);if(s){let t=i.end(i.length-1);// sync to live point (if VOD, our seekable was updated and we're simply adjusting)
e=t}if(this.beforeSeekableWindow_(i,r)){let t=i.start(0);// sync to the beginning of the live window
// provide a buffer of .1 seconds to handle rounding/imprecise numbers
e=t+// if the playlist is too short and the seekable range is an exact time (can
// happen in live with a 3 segment playlist), then don't use a time delta
(t===i.end(0)?0:od)}if(void 0!==e)return this.logger_(`Trying to seek outside of seekable at time ${r} with seekable range ${oy(i)}. Seeking to ${e}.`),this.tech_.setCurrentTime(e),!0;let n=this.playlistController_.sourceUpdater_,a=this.tech_.buffered(),o=n.audioBuffer?n.audioBuffered():null,l=n.videoBuffer?n.videoBuffered():null,u=this.media(),h=u.partTargetDuration?u.partTargetDuration:(u.targetDuration-oh)*2,d=[o,l];for(let e=0;e<d.length;e++){// skip null buffered
if(!d[e])continue;let t=oS(d[e],r);// if we are less than two video/audio segment durations or one part
// duration behind we haven't appended enough to call this a bad seek.
if(t<h)return!1}let c=om(a,r);// we have appended enough content, but we don't have anything buffered
return(// to seek over the gap
0!==c.length&&(e=c.start(0)+od,this.logger_(`Buffered region starts (${c.start(0)})  just beyond seek point (${r}). Seeking to ${e}.`),this.tech_.setCurrentTime(e),!0))}/**
   * Handler for situations when we determine the player is waiting.
   *
   * @private
   */waiting_(){if(this.techWaiting_())return;// All tech waiting checks failed. Use last resort correction
let e=this.tech_.currentTime(),t=this.tech_.buffered(),i=op(t,e);// region with no indication that anything is amiss (seen in Firefox). Seeking to
// currentTime is usually enough to kickstart the player. This checks that the player
// is currently within a buffered region before attempting a corrective seek.
// Chrome does not appear to continue `timeupdate` events after a `waiting` event
// until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also
// make sure there is ~3 seconds of forward buffer before taking any corrective action
// to avoid triggering an `unknownwaiting` event when the network is slow.
if(i.length&&e+3<=i.end(0)){this.resetTimeUpdate_(),this.tech_.setCurrentTime(e),this.logger_(`Stopped at ${e} while inside a buffered region [${i.start(0)} -> ${i.end(0)}]. Attempting to resume playback by seeking to the current time.`),this.tech_.trigger({type:"usage",name:"vhs-unknown-waiting"});return}}/**
   * Handler for situations when the tech fires a `waiting` event
   *
   * @return {boolean}
   *         True if an action (or none) was needed to correct the waiting. False if no
   *         checks passed
   * @private
   */techWaiting_(){let e=this.seekable(),t=this.tech_.currentTime();if(this.tech_.seeking())return!0;if(this.beforeSeekableWindow_(e,t)){let i=e.end(e.length-1);return this.logger_(`Fell out of live window at time ${t}. Seeking to live point (seekable end) ${i}`),this.resetTimeUpdate_(),this.tech_.setCurrentTime(i),this.tech_.trigger({type:"usage",name:"vhs-live-resync"}),!0}let i=this.tech_.vhs.playlistController_.sourceUpdater_,r=this.tech_.buffered(),s=this.videoUnderflow_({audioBuffered:i.audioBuffered(),videoBuffered:i.videoBuffered(),currentTime:t});if(s)return(// Even though the video underflowed and was stuck in a gap, the audio overplayed
// the gap, leading currentTime into a buffered range. Seeking to currentTime
// allows the video to catch up to the audio position without losing any audio
// (only suffering ~3 seconds of frozen video and a pause in audio playback).
this.resetTimeUpdate_(),this.tech_.setCurrentTime(t),this.tech_.trigger({type:"usage",name:"vhs-video-underflow"}),!0);let n=om(r,t);// check for gap
return n.length>0&&(this.logger_(`Stopped at ${t} and seeking to ${n.start(0)}`),this.resetTimeUpdate_(),this.skipTheGap_(t),!0)// All checks failed. Returning false to indicate failure to correct waiting
}afterSeekableWindow_(e,t,i,r=!1){if(!e.length)return!1;let s=e.end(e.length-1)+od,n=!i.endList,a="number"==typeof i.partTargetDuration;return n&&(a||r)&&(s=e.end(e.length-1)+3*i.targetDuration),t>s}beforeSeekableWindow_(e,t){return!!(e.length&&// can't fall before 0 and 0 seekable start identifies VOD stream
e.start(0)>0&&t<e.start(0)-this.liveRangeSafeTimeDelta)}videoUnderflow_({videoBuffered:e,audioBuffered:t,currentTime:i}){let r;// audio only content will not have video underflow :)
if(e){if(e.length&&t.length){// in Chrome audio will continue to play for ~3s when we run out of video
// so we have to check that the video buffer did have some buffer in the
// past.
let s=op(e,i-3),n=op(e,i),a=op(t,i);a.length&&!n.length&&s.length&&(r={start:s.end(0),end:a.end(0)});// find a gap in muxed content.
}else{let t=om(e,i);// Even if there is no available next range, there is still a possibility we are
// stuck in a gap due to video underflow.
t.length||(r=this.gapFromVideoUnderflow_(e,i))}return!!r&&(this.logger_(`Encountered a gap in video from ${r.start} to ${r.end}. Seeking to current time ${i}`),!0)}}/**
   * Timer callback. If playback still has not proceeded, then we seek
   * to the start of the next buffered region.
   *
   * @private
   */skipTheGap_(e){let t=this.tech_.buffered(),i=this.tech_.currentTime(),r=om(t,i);this.resetTimeUpdate_(),0!==r.length&&i===e&&(this.logger_("skipTheGap_:","currentTime:",i,"scheduled currentTime:",e,"nextRange start:",r.start(0)),this.tech_.setCurrentTime(r.start(0)+oh),this.tech_.trigger({type:"usage",name:"vhs-gap-skip"}))}gapFromVideoUnderflow_(e,t){// At least in Chrome, if there is a gap in the video buffer, the audio will continue
// playing for ~3 seconds after the video gap starts. This is done to account for
// video buffer underflow/underrun (note that this is not done when there is audio
// buffer underflow/underrun -- in that case the video will stop as soon as it
// encounters the gap, as audio stalls are more noticeable/jarring to a user than
// video stalls). The player's time will reflect the playthrough of audio, so the
// time will appear as if we are in a buffered region, even if we are stuck in a
// "gap."
//
// Example:
// video buffer:   0 => 10.1, 10.2 => 20
// audio buffer:   0 => 20
// overall buffer: 0 => 10.1, 10.2 => 20
// current time: 13
//
// Chrome's video froze at 10 seconds, where the video buffer encountered the gap,
// however, the audio continued playing until it reached ~3 seconds past the gap
// (13 seconds), at which point it stops as well. Since current time is past the
// gap, findNextRange will return no ranges.
//
// To check for this issue, we see if there is a gap that starts somewhere within
// a 3 second range (3 seconds +/- 1 second) back from our current time.
let i=of(e);for(let e=0;e<i.length;e++){let r=i.start(e),s=i.end(e);if(t-r<4&&t-r>2)return{start:r,end:s}}return null}}const hN={errorInterval:30,getSource(e){let t=this.tech({IWillNotUseThisInPlugins:!0}),i=t.currentSource_||this.currentSource();return e(i)}},hM=function(e,t){let i=0,r=0,s=ol(hN,t);e.ready(()=>{e.trigger({type:"usage",name:"vhs-error-reload-initialized"})});/**
   * Player modifications to perform that must wait until `loadedmetadata`
   * has been triggered
   *
   * @private
   */let n=function(){r&&e.currentTime(r)},a=function(t){null!=t&&(r=e.duration()!==1/0&&e.currentTime()||0,e.one("loadedmetadata",n),e.src(t),e.trigger({type:"usage",name:"vhs-error-reload"}),e.play())},o=function(){// Do not attempt to reload the source if a source-reload occurred before
// 'errorInterval' time has elapsed since the last source-reload
if(Date.now()-i<1e3*s.errorInterval){e.trigger({type:"usage",name:"vhs-error-reload-canceled"});return}if(!s.getSource||"function"!=typeof s.getSource){a9.log.error("ERROR: reloadSourceOnError - The option getSource must be a function!");return}return i=Date.now(),s.getSource.call(e,a)},l=function(){e.off("loadedmetadata",n),e.off("error",o),e.off("dispose",l)};e.on("error",o),e.on("dispose",l),// initializing the plugin
e.reloadSourceOnError=function(t){l(),hM(e,t)}};var hU="3.7.0";/**
 * @file videojs-http-streaming.js
 *
 * The main file for the VHS project.
 * License: https://github.com/videojs/videojs-http-streaming/blob/main/LICENSE
 */const hB={PlaylistLoader:o9,Playlist:o$,utils:lp,STANDARD_PLAYLIST_SELECTOR:ub,INITIAL_PLAYLIST_SELECTOR:function(){// filter out any playlists that have been excluded due to
// incompatible configurations or playback errors
let e=this.playlists.main.playlists.filter(o$.isEnabled);// Sort ascending by bitrate
ug(e,(e,t)=>uy(e,t));// Parse and assume that playlists with no video codec have no video
// (this is not necessarily true, although it is generally true).
//
// If an entire manifest has no valid videos everything will get filtered
// out.
let t=e.filter(e=>!!uc(this.playlists.main,e).video);return t[0]||null},lastBandwidthSelector:ub,movingAverageBandwidthSelector:function(e){let t=-1,i=-1;if(e<0||e>1)throw Error("Moving average bandwidth decay must be between 0 and 1.");return function(){let r=this.useDevicePixelRatio&&/*@__PURE__*/w(I).devicePixelRatio||1;return t<0&&(t=this.systemBandwidth,i=this.systemBandwidth),this.systemBandwidth>0&&this.systemBandwidth!==i&&(t=e*this.systemBandwidth+(1-e)*t,i=this.systemBandwidth),u_(this.playlists.main,t,parseInt(uf(this.tech_.el(),"width"),10)*r,parseInt(uf(this.tech_.el(),"height"),10)*r,this.limitRenditionByPlayerDimensions,this.playlistController_)}},comparePlaylistBandwidth:uy,comparePlaylistResolution:function(e,t){let i,r;return(// have the same media dimensions/ resolution
(e.attributes.RESOLUTION&&e.attributes.RESOLUTION.width&&(i=e.attributes.RESOLUTION.width),i=i||/*@__PURE__*/w(I).Number.MAX_VALUE,t.attributes.RESOLUTION&&t.attributes.RESOLUTION.width&&(r=t.attributes.RESOLUTION.width),i===(r=r||/*@__PURE__*/w(I).Number.MAX_VALUE)&&e.attributes.BANDWIDTH&&t.attributes.BANDWIDTH)?e.attributes.BANDWIDTH-t.attributes.BANDWIDTH:i-r)},xhr:ls()};// Define getter/setters for config properties
Object.keys(lR).forEach(e=>{Object.defineProperty(hB,e,{get:()=>(a9.log.warn(`using Vhs.${e} is UNSAFE be sure you know what you are doing`),lR[e]),set(t){if(a9.log.warn(`using Vhs.${e} is UNSAFE be sure you know what you are doing`),"number"!=typeof t||t<0){a9.log.warn(`value of Vhs.${e} must be greater than or equal to 0`);return}lR[e]=t}})});const hF="videojs-vhs",hj=function(e,t){let i=t.media(),r=-1;for(let t=0;t<e.length;t++)if(e[t].id===i.id){r=t;break}e.selectedIndex_=r,e.trigger({selectedIndex:r,type:"change"})},hq=function(e,t){t.representations().forEach(t=>{e.addQualityLevel(t)}),hj(e,t.playlists)};// as one do not cause exceptions.
hB.canPlaySource=function(){return a9.log.warn("VHS is no longer a tech. Please remove it from your player's techOrder.")};const h$=(e,t,i)=>{if(!e)return e;let r={};t&&t.attributes&&t.attributes.CODECS&&(r=uh(eQ(t.attributes.CODECS))),i&&i.attributes&&i.attributes.CODECS&&(r.audio=i.attributes.CODECS);let s=e0(r.video),n=e0(r.audio),a={};for(let i in e)a[i]={},n&&(a[i].audioContentType=n),s&&(a[i].videoContentType=s),t.contentProtection&&t.contentProtection[i]&&t.contentProtection[i].pssh&&(a[i].pssh=t.contentProtection[i].pssh),"string"==typeof e[i]&&(a[i].url=e[i]);return ol(e,a)},hH=(e,t)=>e.reduce((e,i)=>{if(!i.contentProtection)return e;let r=t.reduce((e,t)=>{let r=i.contentProtection[t];return r&&r.pssh&&(e[t]={pssh:r.pssh}),e},{});return Object.keys(r).length&&e.push(r),e},[]),hV=({player:e,sourceKeySystems:t,audioMedia:i,mainPlaylists:r})=>{if(!e.eme.initializeMediaKeys)return Promise.resolve();// TODO should all audio PSSH values be initialized for DRM?
//
// All unique video rendition pssh values are initialized for DRM, but here only
// the initial audio playlist license is initialized. In theory, an encrypted
// event should be fired if the user switches to an alternative audio playlist
// where a license is required, but this case hasn't yet been tested. In addition, there
// may be many alternate audio playlists unlikely to be used (e.g., multiple different
// languages).
let s=i?r.concat([i]):r,n=hH(s,Object.keys(t)),a=[],o=[];//
// * Promise.any is only available in Safari 14+.
// * None of these promises are expected to reject. If they do reject, it might be
//   better here for the race to surface the rejection, rather than mask it by using
//   Promise.any.
return(// only place where it should not be deduped is for ms-prefixed APIs, but
// the existence of modern EME APIs in addition to
// ms-prefixed APIs on Edge should prevent this from being a concern.
// initializeMediaKeys also won't use the webkit-prefixed APIs.
n.forEach(t=>{o.push(new Promise((t,i)=>{e.tech_.one("keysessioncreated",t)})),a.push(new Promise((i,r)=>{e.eme.initializeMediaKeys({keySystems:t},e=>{if(e){r(e);return}i()})}))}),Promise.race([// If a session was previously created, these will all finish resolving without
// creating a new session, otherwise it will take until the end of all license
// requests, which is why the key session check is used (to make setup much faster).
Promise.all(a),// Once a single session is created, the browser knows DRM will be used.
Promise.race(o)]))},hz=({player:e,sourceKeySystems:t,media:i,audioMedia:r})=>{let s=h$(t,i,r);return!!s&&(e.currentSource().keySystems=s,!s||!!e.eme||(a9.log.warn("DRM encrypted source cannot be decrypted without a DRM plugin"),!1))},hW=()=>{if(!/*@__PURE__*/w(I).localStorage)return null;let e=/*@__PURE__*/w(I).localStorage.getItem(hF);if(!e)return null;try{return JSON.parse(e)}catch(e){// someone may have tampered with the value
return null}},hG=e=>{if(!/*@__PURE__*/w(I).localStorage)return!1;let t=hW();t=t?ol(t,e):e;try{/*@__PURE__*/w(I).localStorage.setItem(hF,JSON.stringify(t))}catch(e){// Throws if storage is full (e.g., always on iOS 5+ Safari private mode, where
// storage is set to 0).
// https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem#Exceptions
// No need to perform any operation.
return!1}return t},hX=e=>0===e.toLowerCase().indexOf("data:application/vnd.videojs.vhs+json,")?JSON.parse(e.substring(e.indexOf(",")+1)):e,hK=(e,t)=>{e._requestCallbackSet||(e._requestCallbackSet=new Set),e._requestCallbackSet.add(t)},hY=(e,t)=>{e._responseCallbackSet||(e._responseCallbackSet=new Set),e._responseCallbackSet.add(t)},hQ=(e,t)=>{e._requestCallbackSet&&(e._requestCallbackSet.delete(t),e._requestCallbackSet.size||delete e._requestCallbackSet)},hJ=(e,t)=>{e._responseCallbackSet&&(e._responseCallbackSet.delete(t),e._responseCallbackSet.size||delete e._responseCallbackSet)};/**
 * Whether the browser has built-in HLS support.
 */hB.supportsNativeHls=function(){if(!/*@__PURE__*/w(A)||!/*@__PURE__*/w(A).createElement)return!1;let e=/*@__PURE__*/w(A).createElement("video");// native HLS is definitely not supported if HTML5 video isn't
return!!a9.getTech("Html5").isSupported()&&[// Apple santioned
"application/vnd.apple.mpegurl",// Apple sanctioned for backwards compatibility
"audio/mpegurl",// Very common
"audio/x-mpegurl",// Very common
"application/x-mpegurl",// Included for completeness
"video/x-mpegurl","video/mpegurl","application/mpegurl"].some(function(t){return/maybe|probably/i.test(e.canPlayType(t))})}(),hB.supportsNativeDash=!!(/*@__PURE__*/w(A)&&/*@__PURE__*/w(A).createElement&&a9.getTech("Html5").isSupported())&&/maybe|probably/i.test(/*@__PURE__*/w(A).createElement("video").canPlayType("application/dash+xml")),hB.supportsTypeNatively=e=>"hls"===e?hB.supportsNativeHls:"dash"===e&&hB.supportsNativeDash,/**
 * VHS is a source handler, not a tech. Make sure attempts to use it
 * as one do not cause exceptions.
 */hB.isSupported=function(){return a9.log.warn("VHS is no longer a tech. Please remove it from your player's techOrder.")},/**
 * A global function for setting an onRequest hook
 *
 * @param {function} callback for request modifiction
 */hB.xhr.onRequest=function(e){hK(hB.xhr,e)},/**
 * A global function for setting an onResponse hook
 *
 * @param {callback} callback for response data retrieval
 */hB.xhr.onResponse=function(e){hY(hB.xhr,e)},/**
 * Deletes a global onRequest callback if it exists
 *
 * @param {function} callback to delete from the global set
 */hB.xhr.offRequest=function(e){hQ(hB.xhr,e)},/**
 * Deletes a global onResponse callback if it exists
 *
 * @param {function} callback to delete from the global set
 */hB.xhr.offResponse=function(e){hJ(hB.xhr,e)};const hZ=a9.getComponent("Component");/**
 * The Vhs Handler object, where we orchestrate all of the parts
 * of VHS to interact with video.js
 *
 * @class VhsHandler
 * @extends videojs.Component
 * @param {Object} source the soruce object
 * @param {Tech} tech the parent tech object
 * @param {Object} options optional and required options
 */class h0 extends hZ{constructor(e,t,i){// so, get it from Video.js via the `playerId`
if(super(t,i.vhs),"number"==typeof i.initialBandwidth&&(this.options_.bandwidth=i.initialBandwidth),this.logger_=oo("VhsHandler"),t.options_&&t.options_.playerId){let e=a9.getPlayer(t.options_.playerId);this.player_=e}if(this.tech_=t,this.source_=e,this.stats={},this.ignoreNextSeekingEvent_=!1,this.setOptions_(),this.options_.overrideNative&&t.overrideNativeAudioTracks&&t.overrideNativeVideoTracks)t.overrideNativeAudioTracks(!0),t.overrideNativeVideoTracks(!0);else if(this.options_.overrideNative&&(t.featuresNativeVideoTracks||t.featuresNativeAudioTracks))// error early if we're misconfigured
throw Error("Overriding native VHS requires emulated tracks. See https://git.io/vMpjB");// listen for fullscreenchange events for this player so that we
// can adjust our quality selection quickly
this.on(/*@__PURE__*/w(A),["fullscreenchange","webkitfullscreenchange","mozfullscreenchange","MSFullscreenChange"],e=>{let t=/*@__PURE__*/w(A).fullscreenElement||/*@__PURE__*/w(A).webkitFullscreenElement||/*@__PURE__*/w(A).mozFullScreenElement||/*@__PURE__*/w(A).msFullscreenElement;t&&t.contains(this.tech_.el())?this.playlistController_.fastQualityChange_():// than full screen, see if there should be a rendition switch down to preserve
// bandwidth.
this.playlistController_.checkABR_()}),this.on(this.tech_,"seeking",function(){if(this.ignoreNextSeekingEvent_){this.ignoreNextSeekingEvent_=!1;return}this.setCurrentTime(this.tech_.currentTime())}),this.on(this.tech_,"error",function(){// verify that the error was real and we are loaded
// enough to have pc loaded.
this.tech_.error()&&this.playlistController_&&this.playlistController_.pauseLoading()}),this.on(this.tech_,"play",this.play)}setOptions_(){if(// defaults
this.options_.withCredentials=this.options_.withCredentials||!1,this.options_.limitRenditionByPlayerDimensions=!1!==this.options_.limitRenditionByPlayerDimensions,this.options_.useDevicePixelRatio=this.options_.useDevicePixelRatio||!1,this.options_.useBandwidthFromLocalStorage=void 0!==this.source_.useBandwidthFromLocalStorage?this.source_.useBandwidthFromLocalStorage:this.options_.useBandwidthFromLocalStorage||!1,this.options_.useForcedSubtitles=this.options_.useForcedSubtitles||!1,this.options_.useNetworkInformationApi=this.options_.useNetworkInformationApi||!1,this.options_.useDtsForTimestampOffset=this.options_.useDtsForTimestampOffset||!1,this.options_.calculateTimestampOffsetForEachSegment=this.options_.calculateTimestampOffsetForEachSegment||!1,this.options_.customTagParsers=this.options_.customTagParsers||[],this.options_.customTagMappers=this.options_.customTagMappers||[],this.options_.cacheEncryptionKeys=this.options_.cacheEncryptionKeys||!1,this.options_.llhls=!1!==this.options_.llhls,this.options_.bufferBasedABR=this.options_.bufferBasedABR||!1,"number"!=typeof this.options_.playlistExclusionDuration&&(this.options_.playlistExclusionDuration=60),"number"!=typeof this.options_.bandwidth&&this.options_.useBandwidthFromLocalStorage){let e=hW();e&&e.bandwidth&&(this.options_.bandwidth=e.bandwidth,this.tech_.trigger({type:"usage",name:"vhs-bandwidth-from-local-storage"})),e&&e.throughput&&(this.options_.throughput=e.throughput,this.tech_.trigger({type:"usage",name:"vhs-throughput-from-local-storage"}))}// if bandwidth was not set by options or pulled from local storage, start playlist
"number"!=typeof this.options_.bandwidth&&(this.options_.bandwidth=lR.INITIAL_BANDWIDTH),// If the bandwidth number is unchanged from the initial setting
// then this takes precedence over the enableLowInitialPlaylist option
this.options_.enableLowInitialPlaylist=this.options_.enableLowInitialPlaylist&&this.options_.bandwidth===lR.INITIAL_BANDWIDTH,["withCredentials","useDevicePixelRatio","limitRenditionByPlayerDimensions","bandwidth","customTagParsers","customTagMappers","cacheEncryptionKeys","playlistSelector","initialPlaylistSelector","bufferBasedABR","liveRangeSafeTimeDelta","llhls","useForcedSubtitles","useNetworkInformationApi","useDtsForTimestampOffset","calculateTimestampOffsetForEachSegment","exactManifestTimings","leastPixelDiffSelector"].forEach(e=>{void 0!==this.source_[e]&&(this.options_[e]=this.source_[e])}),this.limitRenditionByPlayerDimensions=this.options_.limitRenditionByPlayerDimensions,this.useDevicePixelRatio=this.options_.useDevicePixelRatio}/**
   * called when player.src gets called, handle a new source
   *
   * @param {Object} src the source object to handle
   */src(e,t){// do nothing if the src is falsey
if(!e)return;this.setOptions_(),this.options_.src=hX(this.source_.src),this.options_.tech=this.tech_,this.options_.externVhs=hB,this.options_.sourceType=e3(t),this.options_.seekTo=e=>{this.tech_.setCurrentTime(e)},this.playlistController_=new hI(this.options_);let i=ol({liveRangeSafeTimeDelta:od},this.options_,{seekable:()=>this.seekable(),media:()=>this.playlistController_.media(),playlistController:this.playlistController_});this.playbackWatcher_=new hR(i),this.playlistController_.on("error",()=>{let e=a9.players[this.tech_.options_.playerId],t=this.playlistController_.error;"object"!=typeof t||t.code?"string"==typeof t&&(t={message:t,code:3}):t.code=3,e.error(t)});let r=this.options_.bufferBasedABR?hB.movingAverageBandwidthSelector(.55):hB.STANDARD_PLAYLIST_SELECTOR;// `this` in selectPlaylist should be the VhsHandler for backwards
// compatibility with < v2
this.playlistController_.selectPlaylist=this.selectPlaylist?this.selectPlaylist.bind(this):r.bind(this),this.playlistController_.selectInitialPlaylist=hB.INITIAL_PLAYLIST_SELECTOR.bind(this),this.playlists=this.playlistController_.mainPlaylistLoader_,this.mediaSource=this.playlistController_.mediaSource,// controller. Using a custom property for backwards compatibility
// with < v2
Object.defineProperties(this,{selectPlaylist:{get(){return this.playlistController_.selectPlaylist},set(e){this.playlistController_.selectPlaylist=e.bind(this)}},throughput:{get(){return this.playlistController_.mainSegmentLoader_.throughput.rate},set(e){this.playlistController_.mainSegmentLoader_.throughput.rate=e,// for the cumulative average
this.playlistController_.mainSegmentLoader_.throughput.count=1}},bandwidth:{get(){let e=this.playlistController_.mainSegmentLoader_.bandwidth,t=/*@__PURE__*/w(I).navigator.connection||/*@__PURE__*/w(I).navigator.mozConnection||/*@__PURE__*/w(I).navigator.webkitConnection;if(this.options_.useNetworkInformationApi&&t){// downlink returns Mbps
// https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink
let i=1e6*t.downlink;// downlink maxes out at 10 Mbps. In the event that both networkInformationApi and the player
// estimate a bandwidth greater than 10 Mbps, use the larger of the two estimates to ensure that
// high quality streams are not filtered out.
e=i>=1e7&&e>=1e7?Math.max(e,i):i}return e},set(e){this.playlistController_.mainSegmentLoader_.bandwidth=e,// `count` is set to zero that current value of `rate` isn't included
// in the cumulative average
this.playlistController_.mainSegmentLoader_.throughput={rate:0,count:0}}},/**
       * `systemBandwidth` is a combination of two serial processes bit-rates. The first
       * is the network bitrate provided by `bandwidth` and the second is the bitrate of
       * the entire process after that - decryption, transmuxing, and appending - provided
       * by `throughput`.
       *
       * Since the two process are serial, the overall system bandwidth is given by:
       *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)
       */systemBandwidth:{get(){let e=1/(this.bandwidth||1);return Math.floor(1/(e+(this.throughput>0?1/this.throughput:0)))},set(){a9.log.error('The "systemBandwidth" property is read-only')}}}),this.options_.bandwidth&&(this.bandwidth=this.options_.bandwidth),this.options_.throughput&&(this.throughput=this.options_.throughput),Object.defineProperties(this.stats,{bandwidth:{get:()=>this.bandwidth||0,enumerable:!0},mediaRequests:{get:()=>this.playlistController_.mediaRequests_()||0,enumerable:!0},mediaRequestsAborted:{get:()=>this.playlistController_.mediaRequestsAborted_()||0,enumerable:!0},mediaRequestsTimedout:{get:()=>this.playlistController_.mediaRequestsTimedout_()||0,enumerable:!0},mediaRequestsErrored:{get:()=>this.playlistController_.mediaRequestsErrored_()||0,enumerable:!0},mediaTransferDuration:{get:()=>this.playlistController_.mediaTransferDuration_()||0,enumerable:!0},mediaBytesTransferred:{get:()=>this.playlistController_.mediaBytesTransferred_()||0,enumerable:!0},mediaSecondsLoaded:{get:()=>this.playlistController_.mediaSecondsLoaded_()||0,enumerable:!0},mediaAppends:{get:()=>this.playlistController_.mediaAppends_()||0,enumerable:!0},mainAppendsToLoadedData:{get:()=>this.playlistController_.mainAppendsToLoadedData_()||0,enumerable:!0},audioAppendsToLoadedData:{get:()=>this.playlistController_.audioAppendsToLoadedData_()||0,enumerable:!0},appendsToLoadedData:{get:()=>this.playlistController_.appendsToLoadedData_()||0,enumerable:!0},timeToLoadedData:{get:()=>this.playlistController_.timeToLoadedData_()||0,enumerable:!0},buffered:{get:()=>ob(this.tech_.buffered()),enumerable:!0},currentTime:{get:()=>this.tech_.currentTime(),enumerable:!0},currentSource:{get:()=>this.tech_.currentSource_,enumerable:!0},currentTech:{get:()=>this.tech_.name_,enumerable:!0},duration:{get:()=>this.tech_.duration(),enumerable:!0},main:{get:()=>this.playlists.main,enumerable:!0},playerDimensions:{get:()=>this.tech_.currentDimensions(),enumerable:!0},seekable:{get:()=>ob(this.tech_.seekable()),enumerable:!0},timestamp:{get:()=>Date.now(),enumerable:!0},videoPlaybackQuality:{get:()=>this.tech_.getVideoPlaybackQuality(),enumerable:!0}}),this.tech_.one("canplay",this.playlistController_.setupFirstPlay.bind(this.playlistController_)),this.tech_.on("bandwidthupdate",()=>{this.options_.useBandwidthFromLocalStorage&&hG({bandwidth:this.bandwidth,throughput:Math.round(this.throughput)})}),this.playlistController_.on("selectedinitialmedia",()=>{// Add the manual rendition mix-in to VhsHandler
hP(this)}),this.playlistController_.sourceUpdater_.on("createdsourcebuffers",()=>{this.setupEme_()}),// estimate of overall bandwidth
this.on(this.playlistController_,"progress",function(){this.tech_.trigger("progress")}),// that will be the result of the seek-to-live behavior
this.on(this.playlistController_,"firstplay",function(){this.ignoreNextSeekingEvent_=!0}),this.setupQualityLevels_(),this.tech_.el()&&(this.mediaSourceUrl_=/*@__PURE__*/w(I).URL.createObjectURL(this.playlistController_.mediaSource),this.tech_.src(this.mediaSourceUrl_))}createKeySessions_(){let e=this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader;this.logger_("waiting for EME key session creation"),hV({player:this.player_,sourceKeySystems:this.source_.keySystems,audioMedia:e&&e.media(),mainPlaylists:this.playlists.main.playlists}).then(()=>{this.logger_("created EME key session"),this.playlistController_.sourceUpdater_.initializedEme()}).catch(e=>{this.logger_("error while creating EME key session",e),this.player_.error({message:"Failed to initialize media keys for EME",code:3})})}handleWaitingForKey_(){// If waitingforkey is fired, it's possible that the data that's necessary to retrieve
// the key is in the manifest. While this should've happened on initial source load, it
// may happen again in live streams where the keys change, and the manifest info
// reflects the update.
//
// Because videojs-contrib-eme compares the PSSH data we send to that of PSSH data it's
// already requested keys for, we don't have to worry about this generating extraneous
// requests.
this.logger_("waitingforkey fired, attempting to create any new key sessions"),this.createKeySessions_()}/**
   * If necessary and EME is available, sets up EME options and waits for key session
   * creation.
   *
   * This function also updates the source updater so taht it can be used, as for some
   * browsers, EME must be configured before content is appended (if appending unencrypted
   * content before encrypted content).
   */setupEme_(){let e=this.playlistController_.mediaTypes_.AUDIO.activePlaylistLoader,t=hz({player:this.player_,sourceKeySystems:this.source_.keySystems,media:this.playlists.media(),audioMedia:e&&e.media()});if(this.player_.tech_.on("keystatuschange",e=>{if("output-restricted"!==e.status)return;let t=this.playlistController_.main();if(!t||!t.playlists)return;let i=[];// Assume all HD streams are unplayable and exclude them from ABR selection
t.playlists.forEach(e=>{e&&e.attributes&&e.attributes.RESOLUTION&&e.attributes.RESOLUTION.height>=720&&(!e.excludeUntil||e.excludeUntil<1/0)&&(e.excludeUntil=1/0,i.push(e))}),i.length&&(a9.log.warn('DRM keystatus changed to "output-restricted." Removing the following HD playlists that will most likely fail to play and clearing the buffer. This may be due to HDCP restrictions on the stream and the capabilities of the current device.',...i),this.playlistController_.mainSegmentLoader_.resetEverything(),this.playlistController_.fastQualityChange_())}),this.handleWaitingForKey_=this.handleWaitingForKey_.bind(this),this.player_.tech_.on("waitingforkey",this.handleWaitingForKey_),!t){// If EME options were not set up, we've done all we could to initialize EME.
this.playlistController_.sourceUpdater_.initializedEme();return}this.createKeySessions_()}/**
   * Initializes the quality levels and sets listeners to update them.
   *
   * @method setupQualityLevels_
   * @private
   */setupQualityLevels_(){let e=a9.players[this.tech_.options_.playerId];// if there isn't a player or there isn't a qualityLevels plugin
// or qualityLevels_ listeners have already been setup, do nothing.
e&&e.qualityLevels&&!this.qualityLevels_&&(this.qualityLevels_=e.qualityLevels(),this.playlistController_.on("selectedinitialmedia",()=>{hq(this.qualityLevels_,this)}),this.playlists.on("mediachange",()=>{hj(this.qualityLevels_,this.playlists)}))}/**
   * return the version
   */static version(){return{"@videojs/http-streaming":hU,"mux.js":"7.0.1","mpd-parser":"1.2.2","m3u8-parser":"7.1.0","aes-decrypter":"4.0.1"}}/**
   * return the version
   */version(){return this.constructor.version()}canChangeType(){return u6.canChangeType()}/**
   * Begin playing the video.
   */play(){this.playlistController_.play()}/**
   * a wrapper around the function in PlaylistController
   */setCurrentTime(e){this.playlistController_.setCurrentTime(e)}/**
   * a wrapper around the function in PlaylistController
   */duration(){return this.playlistController_.duration()}/**
   * a wrapper around the function in PlaylistController
   */seekable(){return this.playlistController_.seekable()}/**
   * Abort all outstanding work and cleanup.
   */dispose(){this.playbackWatcher_&&this.playbackWatcher_.dispose(),this.playlistController_&&this.playlistController_.dispose(),this.qualityLevels_&&this.qualityLevels_.dispose(),this.tech_&&this.tech_.vhs&&delete this.tech_.vhs,this.mediaSourceUrl_&&/*@__PURE__*/w(I).URL.revokeObjectURL&&(/*@__PURE__*/w(I).URL.revokeObjectURL(this.mediaSourceUrl_),this.mediaSourceUrl_=null),this.tech_&&this.tech_.off("waitingforkey",this.handleWaitingForKey_),super.dispose()}convertToProgramTime(e,t){return lv({playlist:this.playlistController_.media(),time:e,callback:t})}seekToProgramTime(e,t,i=!0,r=2){return lT({programTime:e,playlist:this.playlistController_.media(),retryCount:r,pauseAfterSeek:i,seekTo:this.options_.seekTo,tech:this.options_.tech,callback:t})}/**
   * Adds the onRequest, onResponse, offRequest and offResponse functions
   * to the VhsHandler xhr Object.
   */setupXhrHooks_(){/**
     * A player function for setting an onRequest hook
     *
     * @param {function} callback for request modifiction
     */this.xhr.onRequest=e=>{hK(this.xhr,e)},/**
     * A player function for setting an onResponse hook
     *
     * @param {callback} callback for response data retrieval
     */this.xhr.onResponse=e=>{hY(this.xhr,e)},/**
     * Deletes a player onRequest callback if it exists
     *
     * @param {function} callback to delete from the player set
     */this.xhr.offRequest=e=>{hQ(this.xhr,e)},/**
     * Deletes a player onResponse callback if it exists
     *
     * @param {function} callback to delete from the player set
     */this.xhr.offResponse=e=>{hJ(this.xhr,e)},// This allows hooks to be set before the source is set to vhs when handleSource is called.
this.player_.trigger("xhr-hooks-ready")}}/**
 * The Source Handler object, which informs video.js what additional
 * MIME types are supported and sets up playback. It is registered
 * automatically to the appropriate tech based on the capabilities of
 * the browser it is running in. It is not necessary to use or modify
 * this object in normal usage.
 */const h1={name:"videojs-http-streaming",VERSION:hU,canHandleSource(e,t={}){let i=ol(a9.options,t);return h1.canPlayType(e.type,i)},handleSource(e,t,i={}){let r=ol(a9.options,i);return t.vhs=new h0(e,t,r),t.vhs.xhr=ls(),t.vhs.setupXhrHooks_(),t.vhs.src(e.src,e.type),t.vhs},canPlayType(e,t){let i=e3(e);if(!i)return"";let r=h1.getOverrideNative(t),s=hB.supportsTypeNatively(i);return!s||r?"maybe":""},getOverrideNative(e={}){let{vhs:t={}}=e,i=!(a9.browser.IS_ANY_SAFARI||a9.browser.IS_IOS),{overrideNative:r=i}=t;return r}};e1("avc1.4d400d,mp4a.40.2")&&a9.getTech("Html5").registerSourceHandler(h1,0),a9.VhsHandler=h0,a9.VhsSourceHandler=h1,a9.Vhs=hB,a9.use||a9.registerComponent("Vhs",hB),a9.options.vhs=a9.options.vhs||{},a9.getPlugin&&a9.getPlugin("reloadSourceOnError")||a9.registerPlugin("reloadSourceOnError",function(e){hM(this,e)});/*! @name videojs-contrib-eme @version 3.11.1 @license Apache-2.0 */var A=x("7pNCM"),I=x("eDick");function h2(){return(h2=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(e[r]=i[r])}return e}).apply(this,arguments)}var h4=function(e){for(var t=new ArrayBuffer(2*e.length),i=new Uint16Array(t),r=0;r<e.length;r++)i[r]=e.charCodeAt(r);return i},h8=function(e){var t=/*@__PURE__*/w(A).createElement("a");return t.href=e,t.hostname},h5=function(e,t){if(e===t)return!0;if(e.byteLength!==t.byteLength)return!1;for(var i=new DataView(e),r=new DataView(t),s=0;s<i.byteLength;s++)if(i.getUint8(s)!==r.getUint8(s))return!1;return!0},h3=function(e){return e instanceof Uint8Array||e instanceof Uint16Array?e.buffer:e},h6=function(){for(var e=a9.obj||a9,t=e.merge||e.mergeOptions,i=arguments.length,r=Array(i),s=0;s<i;s++)r[s]=arguments[s];return t.apply(e,r)},h7=function(){var e=h6.apply(void 0,arguments);// Any header whose value is `null` will be removed.
return Object.keys(e).forEach(function(t){null===e[t]&&delete e[t]}),e},h9=a9.xhr.httpHandler;h9||(h9=function(e,t){return function(i,r,s){if(i){e(i);return}// if the HTTP status code is 4xx or 5xx, the request also failed
if(r.statusCode>=400&&r.statusCode<=599){var n=s;t&&(n=String.fromCharCode.apply(null,new Uint8Array(s))),e({cause:n});return}// otherwise, request succeeded
e(null,s)}});/**
 * Parses the EME key message XML to extract HTTP headers and the Challenge element to use
 * in the PlayReady license request.
 *
 * @param {ArrayBuffer} message key message from EME
 * @return {Object} an object containing headers and the message body to use in the
 * license request
 */var de=function(e){// TODO do we want to support UTF-8?
var t,i=String.fromCharCode.apply(null,new Uint16Array(e)),r=new/*@__PURE__*/(w(I)).DOMParser().parseFromString(i,"application/xml"),s=r.getElementsByTagName("HttpHeaders")[0],n={};if(s)for(var a=s.getElementsByTagName("name"),o=s.getElementsByTagName("value"),l=0;l<a.length;l++)n[a[l].childNodes[0].nodeValue]=o[l].childNodes[0].nodeValue;var u=r.getElementsByTagName("Challenge")[0];return u&&(t=/*@__PURE__*/w(I).atob(u.childNodes[0].nodeValue)),{headers:n,message:t}},dt=function(e,t,i,r){var s=de(t),n=s.message,a=h7(s.headers,i.emeHeaders,e.licenseHeaders);a9.xhr({uri:e.url,method:"post",headers:a,body:n,responseType:"arraybuffer"},h9(r,!0))},di=function(e){if(e.supportedConfigurations)return e.supportedConfigurations;// TODO use initDataTypes when appropriate
var t={},i=e.audioContentType,r=e.audioRobustness,s=e.videoContentType,n=e.videoRobustness,a=e.persistentState;return(i||r)&&(t.audioCapabilities=[h2({},i?{contentType:i}:{},r?{robustness:r}:{})]),(s||n)&&(t.videoCapabilities=[h2({},s?{contentType:s}:{},n?{robustness:n}:{})]),a&&(t.persistentState=a),[t]},dr=function(e){// As this happens after the src is set on the video, we rely only on the set src (we
// do not change src based on capabilities of the browser in this plugin).
var t;return Object.keys(e).forEach(function(i){var r=di(e[i]);t=t?t.catch(function(e){return /*@__PURE__*/w(I).navigator.requestMediaKeySystemAccess(i,r)}):/*@__PURE__*/w(I).navigator.requestMediaKeySystemAccess(i,r)}),t},ds=function e(t,i){var r=i.mediaKeys,s=i.initDataType,n=i.initData,a=i.options,o=i.getLicense,l=i.removeSession,u=i.eventBus,h=r.createSession();return u.trigger("keysessioncreated"),t.on("dispose",function(){h.close()}),new Promise(function(r,d){h.addEventListener("message",function(e){// all other types will be handled by keystatuseschange
("license-request"===e.messageType||"license-renewal"===e.messageType)&&o(a,e.message).then(function(e){r(h.update(e))}).catch(function(e){d(e)})},!1),h.addEventListener("keystatuseschange",function(r){var s=!1;// based on https://www.w3.org/TR/encrypted-media/#example-using-all-events
h.keyStatuses.forEach(function(e,t){switch(// Trigger an event so that outside listeners can take action if appropriate.
// For instance, the `output-restricted` status should result in an
// error being thrown.
u.trigger({keyId:t,status:e,target:h,type:"keystatuschange"}),e){case"expired":// If one key is expired in a session, all keys are expired. From
// https://www.w3.org/TR/encrypted-media/#dom-mediakeystatus-expired, "All other
// keys in the session must have this status."
s=!0;break;case"internal-error":a9.log.warn('Key status reported as "internal-error." Leaving the session open since we don\'t have enough details to know if this error is fatal.',r)}}),s&&// session can be created.
//
// TODO convert to videojs.log.debug and add back in
// https://github.com/videojs/video.js/pull/4780
// videojs.log.debug('Session expired, closing the session.');
h.close().then(function(){l(n),e(t,i)})},!1),h.generateRequest(s,n).catch(function(){d("Unable to create or initialize key session")})})},dn=function(e){var t=e.player,i=e.video,r=e.initDataType,s=e.initData,n=e.options,a=e.getLicense,o=e.removeSession,l=e.eventBus;return i.mediaKeysObject?ds(t,{mediaKeys:i.mediaKeysObject,initDataType:r,initData:s,options:n,getLicense:a,removeSession:o,eventBus:l}):(i.pendingSessionData.push({initDataType:r,initData:s,options:n,getLicense:a,removeSession:o,eventBus:l}),Promise.resolve())},da=function(e){var t=e.player,i=e.video,r=e.certificate,s=e.createdMediaKeys;// save media keys on the video element to act as a reference for other functions so
// that they don't recreate the keys
i.mediaKeysObject=s;var n=[];r&&n.push(s.setServerCertificate(r));for(var a=0;a<i.pendingSessionData.length;a++){var o=i.pendingSessionData[a];n.push(ds(t,{mediaKeys:i.mediaKeysObject,initDataType:o.initDataType,initData:o.initData,options:o.options,getLicense:o.getLicense,removeSession:o.removeSession,eventBus:o.eventBus}))}return i.pendingSessionData=[],n.push(i.setMediaKeys(s)),Promise.all(n)},dl=function(e,t){if("string"==typeof t&&(t={url:t}),!t.url&&!t.getLicense)throw Error("Neither URL nor getLicense function provided to get license");if(t.url&&!t.getLicense){var i,r;t.getLicense="com.microsoft.playready"===e?(i=t,function(e,t,r){dt(i,t,e,r)}):(r=t,function(e,t,i){var s=h7({"Content-type":"application/octet-stream"},e.emeHeaders,r.licenseHeaders);a9.xhr({uri:r.url,method:"POST",responseType:"arraybuffer",body:t,headers:s},h9(i,!0))})}return t},du=function(e){var t,i,r=e.player,s=e.video,n=e.initDataType,a=e.initData,o=e.keySystemAccess,l=e.options,u=e.removeSession,h=e.eventBus,d=Promise.resolve();return void 0===s.mediaKeysObject&&(// Prevent entering this path again.
s.mediaKeysObject=null,s.pendingSessionData=[],d=new Promise(function(e,r){if(// save key system for adding sessions
s.keySystem=o.keySystem,!(i=dl(o.keySystem,l.keySystems[o.keySystem])).getCertificate){e(o);return}i.getCertificate(l,function(i,s){if(i){r(i);return}t=s,e()})}).then(function(){return o.createMediaKeys()}).then(function(e){return da({player:r,video:s,certificate:t,createdMediaKeys:e})}).catch(function(e){return(// if we have a specific error message, use it, otherwise show a more
// generic one
e?Promise.reject(e):Promise.reject("Failed to create and initialize a MediaKeys object"))})),d.then(function(){var e=dl(s.keySystem,l.keySystems[s.keySystem]).getLicense;return dn({player:r,video:s,initDataType:n,initData:a,options:l,// if key system has not been determined then addSession doesn't need getLicense
getLicense:s.keySystem?function(t,i){return new Promise(function(r,s){e(t,i,function(e,t){if(h&&h.trigger("licenserequestattempted"),e){s(e);return}r(t)})})}:null,removeSession:u,eventBus:h})})},dh="com.apple.fps.1_0",dd=function(e){var t=e.initData,i=e.id,r=e.cert;"string"==typeof i&&(i=h4(i));// layout:
//   [initData]
//   [4 byte: idLength]
//   [idLength byte: id]
//   [4 byte:certLength]
//   [certLength byte: cert]
var s=0,n=new ArrayBuffer(t.byteLength+4+i.byteLength+4+r.byteLength),a=new DataView(n);new Uint8Array(n,s,t.byteLength).set(t),s+=t.byteLength,a.setUint32(s,i.byteLength,!0),s+=4;var o=new Uint16Array(n,s,i.length);return o.set(i),s+=o.byteLength,a.setUint32(s,r.byteLength,!0),s+=4,new Uint8Array(n,s,r.byteLength).set(r),new Uint8Array(n,0,n.byteLength)},dc=function(e){var t=e.video,i=e.contentId,r=e.initData,s=e.cert,n=e.options,a=e.getLicense,o=e.eventBus;return new Promise(function(e,l){var u;if(!t.webkitKeys)try{t.webkitSetMediaKeys(new/*@__PURE__*/(w(I)).WebKitMediaKeys(dh))}catch(e){l("Could not create MediaKeys");return}try{u=t.webkitKeys.createSession("video/mp4",dd({id:i,initData:r,cert:s}))}catch(e){l("Could not create key session");return}o.trigger("keysessioncreated"),u.contentId=i,u.addEventListener("webkitkeymessage",function(e){a(n,i,e.message,function(e,t){if(o&&o.trigger("licenserequestattempted"),e){l(e);return}u.update(new Uint8Array(t))})}),u.addEventListener("webkitkeyadded",function(){e()}),u.addEventListener("webkitkeyerror",function(){var e=u.error;l("KeySession error: code "+e.code+", systemCode "+e.systemCode)})})},dp=function(e,t){return h8(String.fromCharCode.apply(null,new Uint16Array(t.buffer)))},dm=function(e){var t=e.video,i=e.initData,r=e.options,s=e.eventBus,n=r.keySystems[dh],a=n.getCertificate||function(e,t){var i=h7(e.emeHeaders,n.certificateHeaders);a9.xhr({uri:n.certificateUri,responseType:"arraybuffer",headers:i},h9(function(e,i){if(e){t(e);return}// in this case, license is still the raw ArrayBuffer,
// (we don't want httpResponseHandler to decode it)
// convert it into Uint8Array as expected
t(null,new Uint8Array(i))}))},o=n.getContentId||dp,l=n.getLicense||function(e,t,i,r){var s=h7({"Content-type":"application/octet-stream"},e.emeHeaders,n.licenseHeaders);a9.xhr({uri:n.licenseUri,method:"POST",responseType:"arraybuffer",body:i,headers:s},h9(r,!0))};return new Promise(function(e,t){a(r,function(i,r){if(i){t(i);return}e(r)})}).then(function(e){return dc({video:t,cert:e,initData:i,getLicense:l,options:r,contentId:o(r,i),eventBus:s})})},df="com.microsoft.playready",dg=function(e,t,i,r){var s=e.keySystems[df];if("function"==typeof s.getKey){s.getKey(e,i.destinationURL,i.message.buffer,function(e,i){if(e){r.trigger({message:"Unable to get key: "+e,target:t,type:"mskeyerror"});return}t.update(i)});return}"string"==typeof s?s={url:s}:"boolean"==typeof s&&(s={}),s.url||(s.url=i.destinationURL);var n=function(e,i){if(r&&r.trigger("licenserequestattempted"),e){r.trigger({message:"Unable to request key from url: "+s.url,target:t,type:"mskeyerror"});return}t.update(new Uint8Array(i))};s.getLicense?s.getLicense(e,i.message.buffer,n):dt(s,i.message.buffer,e,n)},dy=function(e,t,i,r){// Note: invalid mime type passed here throws a NotSupportedError
var s=e.msKeys.createSession("video/mp4",t);if(!s)throw Error("Could not create key session.");r.trigger("keysessioncreated"),//
// "If initData contains a PlayReady object that contains an OnDemand header, only a
// keyAdded event is returned (as opposed to a keyMessage event as described in the
// Encrypted Media Extension draft). Similarly, if initData contains a PlayReady object
// that contains a key identifier in the hashed data storage (HDS), only a keyAdded
// event is returned."
// eslint-disable-next-line max-len
// @see [PlayReady License Acquisition]{@link https://msdn.microsoft.com/en-us/library/dn468979.aspx}
s.addEventListener("mskeymessage",function(e){dg(i,s,e,r)}),s.addEventListener("mskeyerror",function(e){r.trigger({message:"Unexpected key error from key session with code: "+s.error.code+" and systemCode: "+s.error.systemCode,target:s,type:"mskeyerror"})}),s.addEventListener("mskeyadded",function(){r.trigger({target:s,type:"mskeyadded"})})},d_=function(e){var t=e.video,i=e.initData,r=e.options,s=e.eventBus;// Although by the standard examples the presence of video.msKeys is checked first to
// verify that we aren't trying to create a new session when one already exists, here
// sessions are managed earlier (on the player.eme object), meaning that at this point
// any existing keys should be cleaned up.
// TODO: Will this break rotation? Is it safe?
t.msKeys&&delete t.msKeys;try{t.msSetMediaKeys(new/*@__PURE__*/(w(I)).MSMediaKeys(df))}catch(e){throw Error("Unable to create media keys for PlayReady key system. Error: "+e.message)}dy(t,i,r,s)},db=function(e,t){for(var i=0;i<e.length;i++)// Other types of sessions may be in the sessions array that don't store the initData
// (for instance, PlayReady sessions on IE11).
if(e[i].initData&&h5(h3(e[i].initData),h3(t)))return!0;return!1},dv=function(e,t){for(var i=0;i<e.length;i++)if(e[i].initData===t){e.splice(i,1);return}},dT=function(e,t,i,r,s){if(!i||!i.keySystems)return Promise.resolve();var n=t.initData;return dr(i.keySystems).then(function(a){var o=a.keySystem;// Use existing init data from options if provided
return(// "Initialization Data must be a fixed value for a given set of stream(s) or media
// data. It must only contain information related to the keys required to play a given
// set of stream(s) or media data."
// eslint-disable-next-line max-len
// @see [Initialization Data Spec]{@link https://www.w3.org/TR/encrypted-media/#initialization-data}
(i.keySystems[o]&&i.keySystems[o].pssh&&(n=i.keySystems[o].pssh),db(r,n)||!n)?Promise.resolve():(r.push({initData:n}),du({player:e,video:t.target,initDataType:t.initDataType,initData:n,keySystemAccess:a,options:i,removeSession:dv.bind(null,r),eventBus:s})))})},dS=function(e,t,i,r){if(!(!t.keySystems||!t.keySystems[df]||i.reduce(function(e,t){return e||t.playready},!1))){var s=e.initData;// Use existing init data from options if provided
t.keySystems[df]&&t.keySystems[df].pssh&&(s=t.keySystems[df].pssh),s&&(i.push({playready:!0,initData:s}),d_({video:e.target,initData:s,options:t,eventBus:r}))}},dE=function(e){return h6(e.currentSource(),e.eme.options)},dw=function(e){var t=e.src();t!==e.eme.activeSrc&&(e.eme.activeSrc=t,e.eme.sessions=[])},dk=function(e,t){if("video"===e.$(".vjs-tech").tagName.toLowerCase()){if(dw(e),/*@__PURE__*/w(I).WebKitMediaKeys){var i=function(i){var r,s;// TODO convert to videojs.log.debug and add back in
// https://github.com/videojs/video.js/pull/4780
// videojs.log('eme', 'Received a \'webkitneedkey\' event');
// TODO it's possible that the video state must be cleared if reusing the same video
// element between sources
dw(e),(r=dE(e),s=e.tech_,r.keySystems&&r.keySystems[dh]&&i.initData?dm({video:i.target,initData:i.initData,options:r,eventBus:s}):Promise.resolve()).catch(t)};// Support Safari EME with FairPlay
// (also used in early Chrome or Chrome with EME disabled flag)
e.tech_.el_.addEventListener("webkitneedkey",function(t){var r=dE(e).firstWebkitneedkeyTimeout||1e3,s=e.src();e.eme.webkitneedkey_=e.eme.webkitneedkey_||{},e.eme.webkitneedkey_.src!==s&&(e.eme.webkitneedkey_={handledFirstEvent:!1,src:s}),e.eme.webkitneedkey_.handledFirstEvent?i(t):(// clear the old timeout so that a new one can be created
// with the new rendition's event data
e.clearTimeout(e.eme.webkitneedkey_.timeout),e.eme.webkitneedkey_.timeout=e.setTimeout(function(){e.eme.webkitneedkey_.handledFirstEvent=!0,e.eme.webkitneedkey_.timeout=null,i(t)},r))})}else /*@__PURE__*/w(I).MediaKeys?// Chrome 42+, Firefox 47+, Edge, Safari 12.1+ on macOS 10.14+
e.tech_.el_.addEventListener("encrypted",function(i){// TODO convert to videojs.log.debug and add back in
// https://github.com/videojs/video.js/pull/4780
// videojs.log('eme', 'Received an \'encrypted\' event');
dw(e),dT(e,i,dE(e),e.eme.sessions,e.tech_).catch(t)}):/*@__PURE__*/w(I).MSMediaKeys&&(// IE11 Windows 8.1+
// Since IE11 doesn't support promises, we have to use a combination of
// try/catch blocks and event handling to simulate promise rejection.
// Functionally speaking, there should be no discernible difference between
// the behavior of IE11 and those of other browsers.
e.tech_.el_.addEventListener("msneedkey",function(i){// TODO convert to videojs.log.debug and add back in
// https://github.com/videojs/video.js/pull/4780
// videojs.log('eme', 'Received an \'msneedkey\' event');
dw(e);try{dS(i,dE(e),e.eme.sessions,e.tech_)}catch(e){t(e)}}),e.tech_.on("mskeyerror",t),e.on("dispose",function(){e.tech_.off("mskeyerror",t)}))}},dC=function(e){void 0===e&&(e={});var t=this,i=function(e){var i={// MEDIA_ERR_ENCRYPTED is code 5
code:5};"string"==typeof e?i.message=e:e&&(e.message&&(i.message=e.message),e.cause&&(e.cause.length||e.cause.byteLength)&&(i.cause=e.cause)),t.error(i)};t.ready(function(){return dk(t,i)}),t.eme={/**
    * Sets up MediaKeys on demand
    * Works around https://bugs.chromium.org/p/chromium/issues/detail?id=895449
    *
    * @function initializeMediaKeys
    * @param    {Object} [emeOptions={}]
    *           An object of eme plugin options.
    * @param    {Function} [callback=function(){}]
    * @param    {boolean} [suppressErrorIfPossible=false]
    */initializeMediaKeys:function(r,s,n){void 0===r&&(r={}),void 0===s&&(s=function(){}),void 0===n&&(n=!1);// TODO: this should be refactored and renamed to be less tied
// to encrypted events
var a=h6(t.currentSource(),e,r),o={initDataType:"cenc",initData:null,target:t.tech_.el_};// fake an encrypted event for handleEncryptedEvent
if(dw(t),t.tech_.el_.setMediaKeys)dT(t,o,a,t.eme.sessions,t.tech_).then(function(){return s()}).catch(function(e){s(e),n||i(e)});else if(t.tech_.el_.msSetMediaKeys){var l=function e(r){t.tech_.off("mskeyadded",e),t.tech_.off("mskeyerror",e),"mskeyerror"===r.type?(s(r.target.error),n||i(r.message)):s()};t.tech_.one("mskeyadded",l),t.tech_.one("mskeyerror",l);try{dS(o,a,t.eme.sessions,t.tech_)}catch(e){t.tech_.off("mskeyadded",l),t.tech_.off("mskeyerror",l),s(e),n||i(e)}}},options:e}};a9.registerPlugin("eme",dC),dC.VERSION="3.11.1";class dx extends a9.getComponent("player"){/**
   * A getter/setter for the media's audio track.
   * Activates the audio track according to the language and kind properties.
   * Falls back on the first audio track found if the kind property is not satisfied.
   *
   * @param {TrackSelector} [trackSelector]
   *
   * @example
   * // Get the current audio track
   * player.audioTrack();
   *
   * @example
   * // Activate an audio track based on language and kind properties
   * player.audioTrack({language:'en', kind:'description'});
   *
   * @example
   * // Activate first audio track found corresponding to language
   * player.audioTrack({language:'fr'});
   *
   * @return { import('video.js/dist/types/tracks/audio-track').default|undefined }
   */audioTrack(e){let t=Array.from(this.player().audioTracks());if(!e)return t.find(e=>e.enabled);let{kind:i,language:r}=e,s=t.find(e=>e.enabled=e.language===r&&e.kind===i)||t.find(e=>e.enabled=e.language===r);return s}/**
   * A getter/setter for the media's text track.
   * Activates the text track according to the language and kind properties.
   * Falls back on the first text track found if the kind property is not satisfied.
   * Disables all subtitle tracks that are `showing` if the `trackSelector` is truthy but does not satisfy any condition.
   *
   * @param {TrackSelector} [trackSelector]
   *
   * @example
   * // Get the current text track
   * player.textTrack();
   *
   * @example
   * // Disable all text tracks has a side effect
   * player.textTrack('off');
   * player.textTrack({});
   *
   * @example
   * // Activate an text track based on language and kind properties
   * player.textTrack({language:'en', kind:'captions'});
   *
   * @example
   * // Activate first text track found corresponding to language
   * player.textTrack({language:'fr'});
   *
   * @return { import('video.js/dist/types/tracks/audio-track').default|undefined }
   */textTrack(e){let t=Array.from(this.player().textTracks()).filter(e=>!["chapters","metadata"].includes(e.kind));if(!e)return t.find(e=>"showing"===e.mode);t.forEach(e=>e.mode="disabled");let{kind:i,language:r}=e,s=t.find(e=>(e.language===r&&e.kind===i&&(e.mode="showing"),"showing"===e.mode))||t.find(e=>(e.language===r&&(e.mode="showing"),"showing"===e.mode));return s}}a9.registerComponent("player",dx);/**
 * @namespace
 * @class Pillarbox
 *
 * @extends import('video.js').VideoJsPlayer
 *
 */class dD extends a9{static get VERSION(){return{pillarbox:D.version,videojs:a9.VERSION,[a9.VhsSourceHandler.name]:a9.VhsSourceHandler.VERSION,[a9.getPlugin("eme").name]:a9.getPlugin("eme").VERSION}}}dD.options.srgOptions={dataProviderHost:void 0,tagCommanderScriptURL:void 0},dD.options.trackers={};var dI=/**
 * @class MediaComposition
 */class{/**
   * Find a chapter by its URN.
   *
   * @param {String} urn
   *
   * @returns {Object} chapter
   */findChapterByUrn(e){if(this.chapterList){let[t]=this.chapterList.filter(t=>t.urn===e);return t}}/**
   * Return a segment from main chapter following segmentUrn in mediaComposition.
   *
   * @returns {Object|undefined} main segment
   */findMainSegment(){if(!this.segmentUrn)return;let e=this.getMainSegments(),[t]=e.filter(e=>e.urn===this.segmentUrn);return t}/**
   * Find resource list by URN.
   *
   * @param {String} urn
   * @returns {Array|undefined} of resources
   */findResourceListByUrn(e){let t=this.findChapterByUrn(e);if(t)return t.resourceList||[]}/**
   * A list of chapters.
   *
   * @returns {Array} of chapters
   */getChapters(){return this.chapterList}/**
   * Filter external text tracks that are already available internally.
   *
   * __Rules:__
   * 1. TTML format is filtered
   *
   * 2. If both are empty that means only internal text tracks will be displayed
   * to the user as they are automatically loaded by the player.
   *
   * 3. If subtitleInformationList is missing from the MediaComposition and subtitleList
   * is available but the media contains internal text tracks that are also available internally.
   * It will result on a duplication client side.
   *
   * 4. If subtitleList and subtitleInformationList a merge between both will be operated,
   * removing the external text tracks already available internally.
   *
   *
   * @returns {Array} external text tracks
   */getFilteredExternalSubtitles(){let{subtitleList:e}=this.getMainChapter(),[{subtitleInformationList:t}={}]=this.getResourceList().filter(({subtitleInformationList:e})=>e);if(!e)return[];// TTML format is not supported
let i=e.filter(e=>"TTML"!==e.format);return e&&!t?i:i.filter(e=>{let i=!t.find(t=>t.locale===e.locale&&e.type===t.type);return i})}/**
   * Block reason for main chapter. This also uses current date for STARTDATE.
   *
   * @see BlockingReason
   *
   * @returns {undefined|String} undefined if main chapter is not blocked
   */getMainBlockReason(){let e=this.getMainChapter();if(!e)return;let{blockReason:t}=e;return!t&&new Date<this.getMainValidFromDate()&&(t="STARTDATE"),t}/**
   * Get the mediaComposition's main chapter.
   *
   * @returns {Object}
   */getMainChapter(){return this.mainChapter||(this.mainChapter=this.findChapterByUrn(this.chapterUrn)),!this.mainChapter&&this.chapterList&&this.chapterList.length>0&&([this.mainChapter]=this.chapterList),this.mainChapter}/**
   * Get the main chapter's image URL decorated with default width and format.
   *
   * @returns {String|undefined} image URL
   */getMainChapterImageUrl(){let e=this.getMainChapter();if(e&&e.imageUrl)return e.imageUrl}/**
   * Get main resources.
   *
   * @returns {Array} array of sources
   */getMainResources(){let e=this.getResourceList();if(e&&e.length)return e.map(e=>({analyticsData:this.getMergedAnalyticsData(e.analyticsData),analyticsMetadata:this.getMergedAnalyticsMetadata(e.analyticsMetadata),vendor:this.getMainChapter().vendor,drmList:e.drmList,dvr:e.dvr,eventData:this.getMainChapter().eventData,id:this.getMainChapter().id,imageCopyright:this.getMainChapter().imageCopyright,live:e.live,mediaType:this.getMainChapter().mediaType,mimeType:e.mimeType,presentation:e.presentation,quality:e.quality,streaming:e.streaming,streamOffset:e.streamOffset,tokenType:e.tokenType,url:e.url}))}/**
   * Get segments of the main chapter ordered by markIn.
   *
   * @returns {Array} of segments
   */getMainSegments(){let e=this.getMainChapter();return!this.mainSegments&&e&&e.segmentList&&(this.mainSegments=e.segmentList),this.mainSegments||[]}/**
   * Compute a date from which this content is valid. Always return a date object.
   *
   * @returns {Date} date specified in media composition or EPOCH when no date present.
   */getMainValidFromDate(){let e=this.getMainChapter();if(!e)return new Date(0);let{validFrom:t}=e;if(t)return new Date(t)}/**
   * Get merged analytics data.
   *
   * @returns {Object}
   */getMergedAnalyticsData(e){return{...this.analyticsData,...this.getMainChapter().analyticsData,...e}}/**
   * Get merged analytics metadata.
   *
   * @returns {Object}
   */getMergedAnalyticsMetadata(e){return{...this.analyticsMetadata,...this.getMainChapter().analyticsMetadata,...e}}/**
   * Get the chapter's resource list
   * @returns {Array} of resources
   */getResourceList(){let{resourceList:e}=this.getMainChapter();return e||[]}},dA=/**
 * @ignore
 */class{constructor(e="il.srgssr.ch"){this.setIlHost(e)}setIlHost(e){this.baseUrl=`${e}/integrationlayer/2.1/`}/**
   * Get media composition by URN.
   *
   * @param {String} urn urn:rts:video:9800629
   * @param {Boolean} onlyChapters
   *
   * @returns {Object} media composition json object
   */getMediaCompositionByUrn(e,t=!1){let i=`https://${this.baseUrl}mediaComposition/byUrn/${e}?onlyChapters=${t}&vector=portalplay`;return fetch(i).then(e=>e.ok?e.json().then(e=>{let i=Object.assign(new dI,e,{onlyChapters:t});return{mediaComposition:i}}):Promise.reject(e)).catch(e=>Promise.reject(e))}};const dL={WIDTH_240:"240",WIDTH_320:"320",WIDTH_480:"480",WIDTH_960:"960",WIDTH_1920:"1920"},dP={JPG:"jpg",WEBP:"webp",PNG:"png"},dO="https://il.srgssr.ch/images/";var dR=class{/**
   * Generates the image scaling URL.
   *
   * @property {Object} image is the object representation of an image.
   * @property {String} [image.url] is the image URL.
   * @property {String} [image.width=960] is the width of the image, default value 960.
   * @property {String} [image.format=jpg] is the format of the image, default value jpg.
   * @property {String} [imageServiceUrl] Url of the image service that needs to comply with the specification defined by the IL.
   *
   * @see https://confluence.srg.beecollaboration.com/pages/viewpage.action?spaceKey=SRGPLAY&title=Project+-+Image+Service
   *
   * @returns {String|undefined} the image scaling URL.
   */static scale({url:e,width:t=dL.WIDTH_960,format:i=dP.JPG}={},r=dO){if(!e)return;let s=new URL(r);return s.searchParams.set("imageUrl",e),s.searchParams.set("format",i),s.searchParams.set("width",t),decodeURIComponent(s.href)}static get JPG(){return dP.JPG}static get PNG(){return dP.PNG}static get WEBP(){return dP.WEBP}static get WIDTH_240(){return dL.WIDTH_240}static get WIDTH_320(){return dL.WIDTH_320}static get WIDTH_480(){return dL.WIDTH_480}static get WIDTH_960(){return dL.WIDTH_960}static get WIDTH_1920(){return dL.WIDTH_1920}};const dN={WIDEVINE:"com.widevine.alpha",FAIRPLAY:"com.apple.fps.1_0",PLAYREADY:"com.microsoft.playready"};class dM{/**
   * Build the keySystems object according to the DRM vendor.
   *
   * @param {Array.<Object>} drmList
   *
   * @returns {Object}
   */static buildKeySystems(e=[]){let t={};return e.forEach(e=>{let i=dM.vendors[e.type];if(dM.vendors.FAIRPLAY===i){let{certificateUrl:r,licenseUrl:s}=e;t[i]={certificateUri:r,licenseUri:s}}else t[i]=e.licenseUrl}),{keySystems:t}}/**
   * Check if some of the resources have DRM.
   */static hasDrm(e){return e.some(({drmList:e})=>e&&e.length>0)}/**
   * Get DRM vendors.
   */static get vendors(){return dN}}const dU={AKAMAI:"AKAMAI",NONE:"NONE"};class dB{/**
   * Get the acl path.
   *
   * @param {URL} streamUrl
   *
   * @returns {String}
   */static aclPath(e){let t=e.pathname;return`${t.substring(0,t.lastIndexOf("/")+1)}*`}/**
   * AKAMAI
   *
   * @type {String}
   */static get AKAMAI(){return dU.AKAMAI}/**
   * Check if the resources are protected by an Akamai token.
   * Keep in mind, as we are using the some function,
   * if the resources have at least one resource
   * protected by a token it returns true!
   *
   * @param {Array.<Object>} resources
   *
   * @returns {Boolean}
   */static hasToken(e){return e.some(e=>dB.isAkamai(e.tokenType))}/**
   * Check if the token type is AKAMAI.
   *
   * @param {String} tokentype
   *
   * @returns {Boolean}
   */static isAkamai(e){return dU.AKAMAI===e}/**
   * Check if the token type is NONE.
   *
   * @param {String} tokentype
   *
   * @returns {Boolean}
   */static isNone(e){return dU.NONE===e}/**
   * NONE
   *
   * @type {String}
   */static get NONE(){return dU.NONE}/**
   * Generate the stream URL with the akamai token.
   *
   * @param {String} source
   * @param {String} tokenServerUrl
   *
   * @returns {Promise.<Object>}
   */static tokenize(e,t){let i=new URL(`${e.url}`),r=dB.aclPath(i),s=`${t}${encodeURIComponent(r)}`;return fetch(s).then(e=>e.ok?e.json():Promise.reject({status:e.status,statusText:e.statusText})).then(({token:{authparams:t}})=>{let r=new URLSearchParams(t);return r.forEach((e,t)=>i.searchParams.set(t,e)),Object.assign({},e,{url:i.toString()})}).catch(e=>Promise.reject(e))}/**
   * Generate a token for each source
   *
   * @param {Array} sources
   * @param {String} tokenServerUrl
   *
   * @returns {Promise.<Array.<Object>>}
   */static tokenizeSources(e,t="https://tp.srgssr.ch/akahd/token?acl="){let i=[];return e.forEach(e=>{let r=dB.tokenize(e,t);i.push(r)}),Promise.all(i).then(e=>e).catch(e=>Promise.reject(e))}}const dF="emptied",dj="ended",dq="loadeddata",d$="loadstart",dH="pause",dV="playing",dz="ratechange",dW="seeking",dG="timeupdate",dX="waiting";/* eslint max-lines-per-function: ["error", 200] *//* eslint max-statements: ["error", 20]*//* eslint complexity: ["error", 10]*//**
 * SRG analytics
 * @ignore
 *
 * ### Script URL
 * JS script : https://colibri-js.akamaized.net/penguin/tc_SRGGD_11.js
 *
 * ### Official documentation
 * Variables list
 * @see https://confluence.srg.beecollaboration.com/display/INTFORSCHUNG/Datalayer+for+media+players
 *
 * Standard event sequences
 * @see https://confluence.srg.beecollaboration.com/display/INTFORSCHUNG/standard+streaming+events%3A+sequence+of+events+for+media+player+actions
 *
 * Review of Standard Media Actions
 * @see https://confluence.srg.beecollaboration.com/display/INTFORSCHUNG/Implementation+Concept+-+draft
 *
 * ComScore Implementation Guide
 * @see https://www.dropbox.com/sh/cdwuikq0abxi21m/AABmSyXYKUTWSAwRZgQA9Ujna/JavaScript%20Latest%20Version?dl=0&preview=Comscore_Library-JavaScript-Streaming_Tag-Implementation_Guide-International.pdf&subfolder_nav_tracking=1
 *
 * ### Variables list
 * - 'event_id', // init | play | stop | pos | pause | seek | uptime | eof
 * - 'event_timestamp', // Seems to be generated automatically from the documentation, but the TP overrides it
 * - 'event_name', // NA TP seems to not sending this variable
 * - 'event_source', // NA TP seems to not sending this variable
 * - 'event_name', // NA TP seems to not sending this variable
 * - 'event_value', // NA TP seems to not sending this variable
 * - 'navigation_environment', // prod | preprod
 * - 'media_subtitles_on', // string true | false
 * - 'media_timeshift', // need better description
 * - 'media_quality', // SD | HD ?
 * - 'media_bandwidth', // NA for the web, 64000
 * - 'media_volume', // from 0 to 100
 * - 'media_embedding_url', //
 * - 'media_player_name', // videojs | letterbox-web ?
 * - 'media_chromecast_selected', // boolean true | false
 * - 'media_player_version', // player's version
 * - 'media_player_display', // is the player mode, on the TP : inline, embed etc..
 * - 'media_audio_track', // NA
 * - 'media_position_real', // NA
 * - 'media_time_spent', // NA
 * - 'device_id', // NA
 * - 'user_id_log_in', // NA only RTS has log in today
 * - 'media_thumbnail', // Not required by the spec but sended by the TP
 * - 'media_bu_distributer', // Not required by the spec but sended by the TP
 *
 *
 * ### Sequence stories
 *
 * __Story 1 (AoD/VOD-basics)__: A VoD is played. The user does not interact with the player. The VoD plays to its end.
 *
 * Hints:
 * - Media sessions always start with PLAY. They end with STOP or EOF (or with PAUSE or last POS)
 * - POS is sent ever 30s
 *
 *
 * __Story 2 (livestream-basics A)__: A Livestream is played. The user does not interact with the player. After 61 seconds, playback is paused.
 *
 * Hints:
 * - Media sessions always start with PLAY. They end with STOP (or, worse for data quailty, with PAUSE or last POS/UPTIME)
 * - UPTIME is sent only for livestreams
 * - POS is sent ever 30s, UPTIME every 60s with inital UPTIME after 30s.
 * - This is the interval: 30s: POS + UPTIME; 60s: POS; 90s: POS + UPTIME; ...
 *
 *
 * __Story 3 (Seeking a VoD/AoD)__: A VoD is played. User seeks in the VoD/AoD.
 *
 * Hints:
 * - Once the Media Player slider is released (seek is over), another action to finish up the seeking is initiated. Typically this is PLAY. For that second PLAY, the media position has altered.
 *
 *
 * __Story 4 (Seeking a livestream)__: A Livestream is played. User goes back in the livestream.
 *
 * Hints:
 * - Once the Media Player slider is released (seek is over), another action to finish up the seeking is initiated. Typically this is PLAY.  For that second PLAY, the a new variable, media_timeshift is passed.
 * - For livestreams media_position is always the "time passed on your watch" - regardless of the SEEK event. So, if 1 second after PLAY the slider is moved  back 600 seconds, then:
 *  1. The the value of media_timeshift is '600'.
 *  2. The value of media_position is '1'.
 */class dK{constructor(e,{debug:t=!1,environment:i="prod",playerVersion:r="none",tagCommanderScriptURL:s="//colibri-js.akamaized.net/penguin/tc_SRGGD_11.js"}={}){this.isDebugEnabled=t,this.elapsedPlaybackTime=0,this.environment=i,this.hasStarted=!1,this.heartBeatIntervalId=void 0,/* Set to true when 'init' event is sent or queued. */this.initialized=!1,this.isSeeking=!1,this.isWaiting=!1,this.mediaSession=0,this.pendingQueue=[],this.pendingTagCommanderReload=!1,this.player=e,this.playerVersion=r,this.srcMediaData=void 0,this.startPlaybackSession=0,this.tagCommanderScriptURL=s,this.trackedCurrentTime=0,this.uptimeIntervalId=void 0,this.initScript(),this.initListeners()}/**
   * Sent when the window, the document and its resources are about to be unloaded.
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event
   */beforeunload(){this.notify("stop")}/**
   * Clear timers used to send uptime and heartbeat.
   */clearTimers(){clearInterval(this.heartBeatIntervalId),clearInterval(this.uptimeIntervalId),clearTimeout(this.uptimeTimeoutId)}/**
   * Get the tracked current time in seconds.
   *
   * @returns {Number} current time in seconds
   */currentTime(){// see PLAYRTS-2771
return Math.round(this.trackedCurrentTime)}/**
   * Get or set debug mode.
   *
   * @returns {Boolean|undefined}
   */debug(e){if(void 0===e)return this.isDebugEnabled||this.player.debug();this.isDebugEnabled=!!e}/**
   * Destroy all properties and setIntervals to avoid mixing media sessions.
   */destroy(){this.clearTimers(),window.tc_vars||(window.tc_vars={}),this.elapsedPlaybackTime=0,this.hasStarted=!1,this.heartBeatIntervalId=void 0,this.initialized=!1,this.isWaiting=!1,this.mediaSession=0,this.pendingQueue=[],this.srcMediaData=void 0,this.startPlaybackSession=0,this.trackedCurrentTime=0,this.uptimeIntervalId=void 0}/**
   * Dispose all listeners used to send analytics data to TagCommander.
   *
   * Calls `beforeunload` to send a notify stop.
   * Clear intervals and timeouts.
   *
   * __Used events__
   * - beforeunload
   * - emptied
   * - ended
   * - loadstart
   * - loadeddata
   * - play
   * - pause
   * - timeupdate
   */dispose(){this.beforeunload(),this.clearTimers(),window.removeEventListener("beforeunload",this.beforeunloadListener),this.player.off(dF,this.emptiedListener),this.player.off(dj,this.endedListener),this.player.off(d$,this.loadstartListener),this.player.off(dq,this.loadeddataListener),this.player.off(dV,this.playListener),this.player.off(dH,this.pauseListener),this.player.off(dz,this.rateChangeListener),this.player.off(dW,this.seekingListener),this.player.off(dG,this.timeUpdateListener),this.player.off(dX,this.waitingListener)}/**
   * Sent before a new media is loading.
   * - Destroy all properties.
   * - Send a notify stop if the media is not ended and new media is about to be loaded.
   */emptied(){this.player.ended()||this.notify("stop")}/**
   * Sent when playback completes.
   *
   * @see https://docs.videojs.com/player#event:ended
   */ended(){this.notify("eof"),this.mediaSession=0,this.clearTimers()}/**
   * Flush the queued events when tc event script is loaded.
   */flush(){!this.isTrackerDisabled()&&(this.pendingTagCommanderReload&&window.tC&&(window.tC.container.reload(),this.pendingTagCommanderReload=!1),window.tc_events_11&&this.pendingQueue.length>0&&(this.pendingQueue.forEach(e=>{window.tc_events_11(this.player.el(),e.action,e.labels)}),this.pendingQueue=[]))}/**
   * Get the language of the current audio track.
   *
   * @returns {String} empty string or uppercase language.
   */getCurrentAudioTrack(){let e=Array.from(this.player.audioTracks()).find(e=>e.enabled),t="und";return e&&e.language&&(t=e.language),e?t.toUpperCase():""}/**
   * Get the language of the current text track.
   *
   * @returns {String} empty string or uppercase language.
   */getCurrentTextTrack(){let e=Array.from(this.player.textTracks()).filter(e=>"metadata"!==e.kind).find(e=>"showing"===e.mode),t="und";return e&&e.language&&(t=e.language),e?t.toUpperCase():""}/**
   * Get the position inside the dvr window where the 0 represents the live edge
   *
   * @return {Number} 0 or the position in milliseconds
   */getDvrWindowPosition(){let{liveTracker:e}=this.player,t=this.currentTime()-e.seekableStart()|0,i=e.liveWindow()-t;return i<0||i===1/0?0:1e3*i}/**
   * Get the size of the live DVR window in milliseconds.
   *
   * @return {Number} DVR window size in milliseconds
   */getDvrWindowSize(){let e=this.player.liveTracker.liveWindow()===1/0,t=1e3*this.player.liveTracker.liveWindow();return e?0:t}/**
   * Get the elapsed playback time in seconds.
   *
   * @returns {Number} elapsed time in seconds
   */getElapsedPlaybackTime(){return this.startPlaybackSession?this.getElapsedPlayingTime():this.elapsedPlaybackTime}/**
   * Get the elapsed playing time in seconds.
   *
   * @returns {Number} elapsed time in seconds
   */getElapsedPlayingTime(){let e=dK.now()-this.startPlaybackSession|0;return this.elapsedPlaybackTime+e}/**
   * Set all event labels to be sent to TagCommander. The event labels are updated whenever a new event occurs.
   *
   * @param {String} eventName init | play | stop | pos | pause | seek | uptime | eof
   *
   * @returns {Object} JSON to be sent to TagCommander
   */getEventLabels(e){let t={event_id:e,event_timestamp:dK.now(),media_dvr_window_length:0,media_dvr_window_offset:0,media_is_dvr:!1,media_is_live:!1,media_mute:this.player.muted()?"1":"0",media_playback_rate:this.player.playbackRate(),media_position:this.currentTime(),media_quality:this.srcMediaData.mediaData.quality,// TODO use media_is_dvr, media_is_live to define peach media_stream_type
media_subtitles_on:this.isTextTrackEnabled(),media_volume:(100*this.player.volume()).toFixed(0),navigation_environment:this.environment};return this.isAudioTrackEnabled()&&(t.media_audio_track=this.getCurrentAudioTrack()),this.isTextTrackEnabled()&&(t.media_subtitle_selection=this.getCurrentTextTrack()),this.isMediaOnDemand()||(t.media_is_live=!0,t.media_position=this.getElapsedPlaybackTime()),this.isMediaDvr()&&(t.media_dvr_window_offset=0|this.getDvrWindowPosition(),t.media_dvr_window_length=0|this.getDvrWindowSize(),t.media_is_dvr=!0,t.media_timeshift=["play",dH].includes(e)?this.timeShifted():0),t}/**
   * Set all internal labels to be sent to TagCommander. Internal labels are assigned once at initialisation time.
   */getInternalLabels(){let e={media_bu_distributer:this.srcMediaData.mediaData.vendor,media_chromecast_selected:!!this.player.tech(!0).isCasting,media_embedding_url:document.referrer,media_player_display:"default",media_player_name:"pillarbox-web",media_player_version:this.playerVersion,media_url:this.srcMediaData.src},t=this.srcMediaData.mediaData.analyticsMetadata||{};window.tc_vars=Object.assign({},window.tc_vars,e,t)}/**
   * Heart beat, current position of a AoD/VoD (every 30s).
   *
   * @description The action pos should be sent regularly every 30 seconds.
   * It is used for tracking the viewed chapters of a video and the last position of the video, in case the user ends the video by closing the browser tab/window.
   *
   * - pos should be sent when the media player is in "play mode".
   * - once the video is paused or stopped, the timer for sending these actions must be stopped.
   *
   * @see https://confluence.srg.beecollaboration.com/display/INTFORSCHUNG/standard+streaming+events%3A+sequence+of+events+for+media+player+actions#standardstreamingevents:sequenceofeventsformediaplayeractions-mandatoryplayerevents
   */heartBeat(){this.heartBeatIntervalId=setInterval(()=>{// Send only when playing
this.player.paused()||this.notify("pos")},3e4)}/**
   * Initialize callbacks used to send analytics data to TagCommander.
   *
   * __Used events__
   * - beforeunload
   * - emptied
   * - ended
   * - loadstart
   * - loadeddata
   * - play
   * - pause
   * - ratechange
   * - seeking
   * - timeupdate
   * - waiting
   */initCallbacks(){this.beforeunloadListener=this.beforeunload.bind(this),this.emptiedListener=this.emptied.bind(this),this.endedListener=this.ended.bind(this),this.loadstartListener=this.loadstart.bind(this),this.loadeddataListener=this.loadeddata.bind(this),this.playListener=this.play.bind(this),this.pauseListener=this.pause.bind(this),this.rateChangeListener=this.rateChange.bind(this),this.seekingListener=this.seeking.bind(this),this.timeUpdateListener=this.timeUpdate.bind(this),this.waitingListener=this.waiting.bind(this)}/**
   * Initialize all listeners used to send analytics data to TagCommander.
   *
   * __Used events__
   * - beforeunload
   * - dispose
   * - emptied
   * - ended
   * - loadstart
   * - loadeddata
   * - play
   * - pause
   * - timeupdate
   * - waiting
   */initListeners(){this.initCallbacks(),window.addEventListener("beforeunload",this.beforeunloadListener),this.player.on(dF,this.emptiedListener),this.player.on(dj,this.endedListener),this.player.on(d$,this.loadstartListener),this.player.on(dq,this.loadeddataListener),this.player.on(dV,this.playListener),this.player.on(dH,this.pauseListener),this.player.on(dz,this.rateChangeListener),this.player.on(dW,this.seekingListener),this.player.on(dG,this.timeUpdateListener),this.player.on(dX,this.waitingListener),this.player.one("dispose",this.dispose.bind(this))}/**
   * Initialize TagCommander script dynamically and add it to the DOM
   */initScript(){let e="tc_script__11";if(!document.querySelector(`#${e}`)){let t=document.createElement("script"),i=this.tagCommanderScriptURL;t.defer=!0,t.id=e,t.src=i,t.type="text/javascript",t.onload=e=>{this.flush()},document.body.appendChild(t)}}/**
   * Check if the audio track is enabled.
   *
   * @returns {Boolean} __true__ if enabled __false__ otherwise.
   */isAudioTrackEnabled(){return!!this.getCurrentAudioTrack()}/**
   * Check if the media is a live with DVR.
   *
   * @returns {Boolean} __true__ if it DVR __false__ otherwise.
   */isMediaDvr(){let{trackingThreshold:e}=this.player.liveTracker.options();return!this.isMediaOnDemand()&&e<this.player.liveTracker.liveWindow()}/**
   * Check if the media is a live.
   *
   * @returns {Boolean} __true__ if live __false__ otherwise.
   */isMediaLive(){let{trackingThreshold:e}=this.player.liveTracker.options();return!this.isMediaOnDemand()&&e>this.player.liveTracker.liveWindow()}/**
   * Check if the media is an on demand.
   *
   * @returns {Boolean} __true__ if on demand __false__ otherwise.
   */isMediaOnDemand(){return Number.isFinite(this.player.duration())}/**
   * Check if the text track is enabled.
   *
   * @returns {Boolean} __true__ if enabled __false__ otherwise.
   */isTextTrackEnabled(){return!!this.getCurrentTextTrack()}/**
   * Check if the tracker is disabled.
   *
   * @returns {Boolean} __true__ if disabled __false__ otherwise.
   */isTrackerDisabled(){return!this.srcMediaData||!this.srcMediaData.mediaData||(Array.isArray(this.srcMediaData.disableTrackers)?!!this.srcMediaData.disableTrackers.find(e=>e.toLowerCase()===dK.name.toLowerCase()):!!this.srcMediaData.disableTrackers)}/**
   * Sent when loading of the media begins.
   *
   * @see https://docs.videojs.com/player#event:loadstart
   */loadstart(){this.destroy(),this.updateSrcMediaData(this.player.currentSource()),this.isTrackerDisabled()||(this.getInternalLabels(),// Set ComScore labels
this.reloadTagCommanderContainer(),this.notify("buffer_start"),this.hasStarted=!1)}/**
   * The first frame of the media has finished loading.
   *
   * @see https://docs.videojs.com/player#event:loadeddata
   */loadeddata(){this.notify("init"),this.initialized=!0,this.notify("buffer_stop")}/**
   * Event logger that prints the current event, event labels and internal labels in the browser's console.
   *
   * @param {String} eventName init | play | stop | pos | pause | seek | uptime | eof
   * @param {Object} eventMetadata event metadata object
   * @param {String} severity log | warn | error
   */log(e,t,i="log"){this.debug()&&console[i](`SRGAnalytics:${e}`,t,window.tc_vars)}/**
   * Notify TagCommander all event and internal labels. If tc script is not available it queues all pending events.
   *
   * @param {String} eventName init | play | stop | pos | pause | seek | uptime | eof
   */notify(e,t){if(this.isTrackerDisabled())return;try{this.flush()}catch(t){this.log(e,t,"error")}let i=Object.assign({},this.getEventLabels(e),t);this.log(e,i);try{window.tc_events_11?window.tc_events_11(this.player.el(),e,i):this.pendingQueue.push({action:e,labels:i})}catch(t){this.log(e,t,"error")}}/**
   * Return the current timestamp in seconds.
   *
   * @returns {Number} Timestamp in seconds
   */static now(){return(Date.now()/1e3).toFixed(0)}/**
   * Sent when the playback state is no longer paused, as a result of the play method, or the autoplay attribute.
   *
   * @see https://docs.videojs.com/player#event:play
   */play(){this.hasStarted||(this.hasStarted=!0),this.startPlaybackSession||this.isMediaOnDemand()||(this.startPlaybackSession=dK.now()),0===this.mediaSession&&(this.mediaSession=dK.now(),this.heartBeat(),this.uptime()),this.notify("play"),this.isSeeking&&(this.isSeeking=!1)}/**
   * Sent when the playback state is changed to paused (paused property is true).
   * Pause event is sent if :
   * - The player is not scrubbing
   * - The stream is not a live only
   * - The current time is strictly inferior to the duration
   *
   * @see https://docs.videojs.com/player#event:pause
   */pause(){if(this.isMediaOnDemand()||(this.elapsedPlaybackTime=this.getElapsedPlayingTime(),this.startPlaybackSession=0),!this.player.seeking()&&!this.isMediaLive()&&this.player.currentTime()<this.player.duration()){this.notify("pause");return}this.hasStarted&&!this.isSeeking&&(this.notify("seek"),this.isSeeking=!0)}/**
   * Sent to ComScore when the playback rate changes.
   *
   * @see https://github.com/SRGSSR/srgletterbox-web/issues/761
   * @see https://jira.srg.beecollaboration.com/browse/ADI-256
   */rateChange(){this.notify("change_playback_rate")}/**
   * Reload the tagCommander container and set all ComScore labels
   */reloadTagCommanderContainer(){window.tC?(window.tC.container.reload(),this.pendingTagCommanderReload=!1):this.pendingTagCommanderReload=!0}/**
   * Sent when the current time is modified by the player's currentTime API.
   *
   * @see https://docs.videojs.com/player#event:seeking
   */seeking(){!this.hasStarted||this.player.paused()||this.isSeeking||(this.notify("seek"),this.isSeeking=!0)}/**
   * Track current time updates delayed by a tick.
   *
   * @see https://docs.videojs.com/player#event:timeupdate
   */timeUpdate(){this.player.paused()||(this.trackedCurrentTime=this.player.currentTime())}/**
   * Gets the number of seconds that separate from the live edge that is represented by 0.
   *
   * @returns {String}
   */timeShifted(){let e=this.player.liveTracker.atLiveEdge(),t=this.player.liveTracker.liveCurrentTime(),i=this.player.currentTime(),r=e?0:(t-i).toFixed(0);return r}/**
   * Update the src media data.
   */updateSrcMediaData(e){this.srcMediaData=e}/**
   * Calculate the uptime when playing a live stream with or without DVR
   *
   * __Rules__:
   * - Send the first uptime after 30 seconds
   * - Send uptime each 60 seconds after the 30 seconds
   * - Uptime is sent only when playing
   */uptime(){let e=()=>{this.player.paused()||this.isMediaOnDemand()||this.notify("uptime")};// Send the first uptime after 30 seconds
this.uptimeTimeoutId=setTimeout(()=>{// Send only when playing
e(),// Initialize the uptime interval after 30 seconds
this.uptimeIntervalId=setInterval(()=>{// Send only when playing
e()},6e4)},3e4)}/**
   *  __ComScore__:
   * It's expected notifyBufferStart() to be called when the player starts buffering
   * and a call to notifyBufferStop() when content resumes after buffering.
   *
   * @see Item 2: https://jira.srg.beecollaboration.com/browse/PLAY-2628
   *
   * After the issue PLAYRTS-321
   * @see Fix: https://jira.srg.beecollaboration.com/browse/PLAYRTS-321?focusedCommentId=201023&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-201023
   * @see Fix: https://jira.srg.beecollaboration.com/browse/PLAYRTS-3065
   */waiting(){if(!this.initialized||this.isWaiting)return;let e=()=>{this.isWaiting=!1,this.notify("buffer_stop")};this.isWaiting=!0,this.notify("buffer_start"),dD.browser.IS_ANY_SAFARI?this.player.one(dG,e):// Firefox is consistent with its playing event.
this.player.one(dV,e)}}class dY{/**
   * Add the Akamai token to all resources
   * if at least one of them has tokenType
   * set to Akamai.
   *
   * @param {Array.<Object>} resources
   *
   * @returns {Promise<Array.<Object>>}
   */static async composeAkamaiResources(e=[]){// TODO allow to modify the Akamai URL
return dB.hasToken(e)||Promise.resolve(e),dB.tokenizeSources(e)}/**
   * Add the keySystems property to all resources
   * if at least one of them has DRM.
   *
   * @param {Array.<Object>} resources
   *
   * @returns {Array.<Object>}
   */static composeKeySystemsResources(e=[]){return dM.hasDrm(e),e.map(e=>({...e,...dM.buildKeySystems(e.drmList)}))}/**
   * Get the main resources from a mediaComposition.
   * May add an Akamai token or key systems if required by the resource.
   *
   * @param {import('../dataProvider/model/MediaComposition.js').default} mediaComposition
   *
   * @returns {Promise<Array.<Object>>}
   */static composeMainResources(e){return dY.composeAkamaiResources(dY.composeKeySystemsResources(e.getMainResources()))}/**
   * Compose source options with media data.
   * MediaData properties from source options overwrite mediaData from IL.
   *
   * @param {Object} srcOptions - provided by player.src
   * @param {Object} mediaData - provided by mediaComposition
   *
   * @returns {Object}
   */static composeSrcMediaData({mediaData:e,disableTrackers:t},{url:i,mimeType:r,keySystems:s,...n}){return{src:i,type:r,keySystems:s,disableTrackers:t,mediaData:dD.obj.merge(n,e)}}/**
   * SRG SSR data provider singleton.
   *
   * @param {VideoJsPlayer} player
   *
   * @returns {DataProvider}
   */static dataProvider(e){if(!e.options().srgOptions.dataProvider){let{dataProviderHost:t}=e.options().srgOptions,i=new dA(t);e.options({srgOptions:{dataProvider:i}})}return e.options().srgOptions.dataProvider}/**
   * Get mediaComposition from an URN.
   *
   * @param {String} urn
   * @param {DataProvider} dataProvider
   *
   * @returns {MediaComposition}
   */static async getMediaComposition(e,t=new dA){return t.getMediaCompositionByUrn(e)}/**
   * Get the mediaData most likely to be compatible depending on the browser.
   *
   * @param {Array.<Object>} resources
   *
   * @returns {Object} By default, the first entry is used if none is compatible.
   */static getMediaData(e=[]){if(dB.hasToken(e))return e[0];let t=dD.browser.IS_ANY_SAFARI?"HLS":"DASH",i=e.find(({streaming:e})=>e===t);return i||e[0]}/**
   * SRG SSR analytics singleton.
   *
   * @param {VideoJsPlayer} player
   *
   * @returns
   */static srgAnalytics(e){if(!1!==e.options().trackers.srgAnalytics&&!e.options().trackers.srgAnalytics){let t=new dK(e,{debug:e.debug(),playerVersion:dD.VERSION.pillarbox,tagCommanderScriptURL:e.options().srgOptions.tagCommanderScriptURL});e.options({trackers:{srgAnalytics:t}})}}/**
   * Update player's poster.
   *
   * @param {VideojsPlayer} player
   * @param {MediaComposition} mediaComposition
   * @param {Image} imageService
   */static updatePoster(e,t,i=dR){e.poster(i.scale({url:t.getMainChapterImageUrl()}))}/**
   * Update player titleBar with title and description.
   *
   * @param {VideojsPlayer} player
   * @param {MediaComposition} mediaComposition
   */static updateTitleBar(e,t){e.titleBar&&e.titleBar.update({title:t.getMainChapter().vendor,description:t.getMainChapter().title})}/**
   * Middleware to resolve SRG SSR URNs into playable media.
   *
   * @param {VideojsPlayer} player
   * @param {Image} imageService
   *
   * @returns {Object}
   */static middleware(e,t=dR){return{/* eslint max-statements: ["error", 15]*/setSource:async(i,r)=>{try{let{src:s,...n}=i,{mediaComposition:a}=await dY.getMediaComposition(s,dY.dataProvider(e)),o=await dY.composeMainResources(a),l=dY.getMediaData(o),u=dY.composeSrcMediaData(n,l);return dY.srgAnalytics(e),dY.updateTitleBar(e,a),dY.updatePoster(e,a,t),r(null,u)}catch(e){return r(e)}}}}}dD.use("srgssr/urn",dY.middleware),// Get pillarbox version
document.querySelector(".version").textContent=dD.VERSION.pillarbox;// Initialize the player
const dQ=new dD("player",{/** @see https://docs.videojs.com/html5#playsinline */playsinline:!0,/** @see https://videojs.com/guides/options/#liveui */liveui:!0,muted:!0,fill:!0,/** @see https://videojs.com/guides/options/#plugins */plugins:{eme:!0},html5:{vhs:{useForcedSubtitles:!0}}});// Expose the Pillarbox in the window object
window.pillarbox=dD,// Expose the player in the window object
window.player=dQ,// Source examples
window.sourceExamples={bipbop:{src:"https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8",type:"application/x-mpegURL"},appleAtmos:{src:"https://devstreaming-cdn.apple.com/videos/streaming/examples/adv_dv_atmos/main.m3u8",type:"application/x-mpegURL"},urn:{src:"urn:rts:video:14160770",type:"srgssr/urn"},rts1:{src:"urn:rts:video:3608506",type:"srgssr/urn"},token:{src:"urn:rts:video:1967124",type:"srgssr/urn"}},// Load the source
dQ.src(window.sourceExamples.bipbop);//# sourceMappingURL=index.1ee48265.js.map

//# sourceMappingURL=index.1ee48265.js.map
